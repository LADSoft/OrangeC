#ifndef _RESAPI_DEFS_H
#define _RESAPI_DEFS_H

#ifdef __ORANGEC__ 
#pragma once
#endif

#include <windows.h>
#include <winsvc.h>
#include <clusapi.h>
#include <stdio.h>

#define STARTUP_ROUTINE  "Startup"

#define CLRES_V1_FUNCTION_SIZE  sizeof(CLRES_V1_FUNCTIONS)
#define CLRES_VERSION_V1_00  0x100

#define CLRES_V1_FUNCTION_TABLE( \
  _Name,  \
  _Version,  \
  _Prefix,  \
  _Arbitrate,  \
  _Release,  \
  _ResControl,  \
  _ResTypeControl  \
  )  \
CLRES_FUNCTION_TABLE _Name = { CLRES_V1_FUNCTION_SIZE,  \
  _Version,  \
  _Prefix##Open,  \
  _Prefix##Close,  \
  _Prefix##Online,  \
  _Prefix##Offline,  \
  _Prefix##Terminate,  \
  _Prefix##LooksAlive,  \
  _Prefix##IsAlive,  \
  _Arbitrate,  \
  _Release,  \
  _ResControl,  \
  _ResTypeControl }

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

#define STARTUP_EX_ROUTINE  "StartupEx"

#define CLRES_V2_FUNCTION_SIZE  sizeof(CLRES_V2_FUNCTIONS)
#define CLRES_VERSION_V2_00  0x200
#define CLRES_V2_FUNCTION_TABLE_SET( \
  _Name,  \
  _Version,  \
  _Prefix,  \
  _Arbitrate,  \
  _Release,  \
  _ResControl,  \
  _ResTypeControl,  \
  _LooksAlive,  \
  _IsAlive,  \
  _Cancel  \
  )  \
_Name.TableSize = CLRES_V2_FUNCTION_SIZE;  \
_Name.Version = _Version;  \
_Name.V2Functions.Open = _Prefix##OpenV2;  \
_Name.V2Functions.Close = _Prefix##Close;  \
_Name.V2Functions.Online = _Prefix##OnlineV2;  \
_Name.V2Functions.Offline = _Prefix##OfflineV2;  \
_Name.V2Functions.Terminate = _Prefix##Terminate;  \
_Name.V2Functions.LooksAlive= _LooksAlive;  \
_Name.V2Functions.IsAlive = _IsAlive;  \
_Name.V2Functions.Arbitrate = _Arbitrate;  \
_Name.V2Functions.Release = _Release;  \
_Name.V2Functions.ResourceControl = _ResControl;  \
_Name.V2Functions.ResourceTypeControl = _ResTypeControl;  \
_Name.V2Functions.Cancel = _Cancel;

#define CLRES_V3_FUNCTION_SIZE  sizeof(CLRES_V3_FUNCTIONS)
#define CLRES_VERSION_V3_00  0x300
#define CLRES_V3_FUNCTION_TABLE_SET( \
  _Name,  \
  _Version,  \
  _Prefix,  \
  _Arbitrate,  \
  _Release,  \
  _BeginResourceControl,  \
  _BeginResourceTypeControl,  \
  _LooksAlive,  \
  _IsAlive,  \
  _Cancel  \
  )  \
_Name.TableSize = CLRES_V3_FUNCTION_SIZE;  \
_Name.Version = _Version;  \
_Name.V3Functions.Open = _Prefix##OpenV2;  \
_Name.V3Functions.Close = _Prefix##Close;  \
_Name.V3Functions.Online = _Prefix##OnlineV2;  \
_Name.V3Functions.Offline = _Prefix##OfflineV2;  \
_Name.V3Functions.Terminate = _Prefix##Terminate;  \
_Name.V3Functions.LooksAlive= _LooksAlive;  \
_Name.V3Functions.IsAlive = _IsAlive;  \
_Name.V3Functions.Arbitrate = _Arbitrate;  \
_Name.V3Functions.Release = _Release;  \
_Name.V3Functions.Cancel = _Cancel;  \
_Name.V3Functions.BeginResourceControl= _BeginResourceControl; \
_Name.V3Functions.BeginResourceTypeControl= _BeginResourceTypeControl

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

#if CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD

#define CLRES_V4_FUNCTION_SIZE  sizeof(CLRES_V4_FUNCTIONS)
#define CLRES_VERSION_V4_00  0x400
#define CLRES_V4_FUNCTION_TABLE_SET( \
  _Name, \
  _Version, \
  _Prefix, \
  _Arbitrate, \
  _Release, \
  _BeginResCtrl, \
  _BeginResTypeCtrl, \
  _LooksAlive, \
  _IsAlive, \
  _Cancel, \
  _BeginResCtrlAsUser, \
  _BeginResTypeCtrlAsUser \
  ) \
_Name.TableSize = CLRES_V4_FUNCTION_SIZE; \
_Name.Version = _Version; \
_Name.V4Functions.Open = _Prefix##OpenV2; \
_Name.V4Functions.Close = _Prefix##Close; \
_Name.V4Functions.Online = _Prefix##OnlineV2; \
_Name.V4Functions.Offline = _Prefix##OfflineV2; \
_Name.V4Functions.Terminate = _Prefix##Terminate; \
_Name.V4Functions.LooksAlive= _LooksAlive; \
_Name.V4Functions.IsAlive = _IsAlive; \
_Name.V4Functions.Arbitrate = _Arbitrate; \
_Name.V4Functions.Release = _Release; \
_Name.V4Functions.Cancel = _Cancel; \
_Name.V4Functions.BeginResourceControl= _BeginResCtrl; \
_Name.V4Functions.BeginResourceTypeControl= _BeginResTypeCtrl; \
_Name.V4Functions.BeginResourceControlAsUser= _BeginResCtrlAsUser; \
_Name.V4Functions.BeginResourceTypeControlAsUser= _BeginResTypeCtrlAsUser

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD */

#endif /* _RESAPI_DEFS_H */


#ifndef _RESAPI_H
#define _RESAPI_H

typedef PVOID RESID;
typedef HANDLE RESOURCE_HANDLE;

#define ClusterResourceCannotComeOnlineOnThisNode  (CLUSTER_RESOURCE_STATE) (ClusterResourcePending - 1)
#define ClusterResourceCannotComeOnlineOnAnyNode   (CLUSTER_RESOURCE_STATE) (ClusterResourcePending - 2)

typedef struct RESOURCE_STATUS {
    CLUSTER_RESOURCE_STATE ResourceState;
    DWORD CheckPoint;
    DWORD WaitHint;
    HANDLE EventHandle;
} RESOURCE_STATUS, *PRESOURCE_STATUS;

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

struct NodeUtilizationInfoElement {
    ULONGLONG Id;
    ULONGLONG AvailableMemory;
    ULONGLONG AvailableMemoryAfterReclamation;
};

struct ResourceUtilizationInfoElement {
    ULONGLONG PhysicalNumaId;
    ULONGLONG CurrentMemory;
};

typedef enum VM_RESDLL_CONTEXT {
    VmResdllContextTurnOff = 0,
    VmResdllContextSave = 1,
    VmResdllContextShutdown = 2,
    VmResdllContextShutdownForce = 3,
    VmResdllContextLiveMigration = 4
} VM_RESDLL_CONTEXT, *PVM_RESDLL_CONTEXT;

typedef enum RESDLL_CONTEXT_OPERATION_TYPE {
    ResdllContextOperationTypeFailback,
    ResdllContextOperationTypeDrain,
    ResdllContextOperationTypeDrainFailure,
    ResdllContextOperationTypeEmbeddedFailure,
    ResdllContextOperationTypePreemption,
    ResdllContextOperationTypeNetworkDisconnect,
    ResdllContextOperationTypeNetworkDisconnectMoveRetry
} RESDLL_CONTEXT_OPERATION_TYPE, *PRESDLL_CONTEXT_OPERATION_TYPE;

#define CLUSCTL_GET_OPERATION_CONTEXT_PARAMS_VERSION_1  1

typedef struct GET_OPERATION_CONTEXT_PARAMS {
    DWORD Size;
    DWORD Version;
    RESDLL_CONTEXT_OPERATION_TYPE Type;
    DWORD Priority;
} GET_OPERATION_CONTEXT_PARAMS, *PGET_OPERATION_CONTEXT_PARAMS;

#define CLUSRES_GET_OPERATION_CONTEXT_FLAGS  { CLUSRES_NAME_GET_OPERATION_CONTEXT_FLAGS,  NULL, CLUSPROP_FORMAT_DWORD, 0, 0, 0xFFFFFFFF, RESUTIL_PROPITEM_REQUIRED, 0 }
#define CLUSRES_NAME_GET_OPERATION_CONTEXT_FLAGS L"Flags"

#define RESOURCE_SPECIFIC_STATUS_PROP_ITEM  { CLUSREG_NAME_RES_STATUS,  NULL, CLUSPROP_FORMAT_SZ,  0, 0, 0, RESUTIL_PROPITEM_IN_MEMORY, 0 }
#define RESOURCE_SPECIFIC_DATA1_PROP_ITEM  { CLUSREG_NAME_RES_DATA1,  NULL, CLUSPROP_FORMAT_ULARGE_INTEGER,  0, 0, 0, RESUTIL_PROPITEM_READ_ONLY | RESUTIL_PROPITEM_IN_MEMORY, 0 }
#define RESOURCE_SPECIFIC_DATA2_PROP_ITEM  { CLUSREG_NAME_RES_DATA2,  NULL, CLUSPROP_FORMAT_ULARGE_INTEGER,  0, 0, 0, RESUTIL_PROPITEM_READ_ONLY | RESUTIL_PROPITEM_IN_MEMORY, 0 }

#define CLUSRESDLL_STATUS_OFFLINE_BUSY  0x00000001
#define CLUSRESDLL_STATUS_OFFLINE_SOURCE_THROTTLED  0x00000002
#define CLUSRESDLL_STATUS_OFFLINE_DESTINATION_THROTTLED  0x00000004
#define CLUSRESDLL_STATUS_OFFLINE_DESTINATION_REJECTED  0x00000008
#define CLUSRESDLL_STATUS_INSUFFICIENT_MEMORY  0x00000010
#define CLUSRESDLL_STATUS_INSUFFICIENT_PROCESSOR  0x00000020
#define CLUSRESDLL_STATUS_INSUFFICIENT_OTHER_RESOURCES  0x00000040
#define CLUSRESDLL_STATUS_INVALID_PARAMETERS  0x00000080
#define CLUSRESDLL_STATUS_NETWORK_NOT_AVAILABLE  0x00000100

typedef struct RESOURCE_STATUS_EX {
    CLUSTER_RESOURCE_STATE ResourceState;
    DWORD CheckPoint;
    HANDLE EventHandle;
    DWORD ApplicationSpecificErrorCode;
    DWORD Flags;
    DWORD WaitHint;
} RESOURCE_STATUS_EX, *PRESOURCE_STATUS_EX;

typedef DWORD (__stdcall *PSET_RESOURCE_STATUS_ROUTINE_EX)(RESOURCE_HANDLE, PRESOURCE_STATUS_EX);

#define ResUtilInitializeResourceStatusEx(_resource_status_) \
  ZeroMemory(_resource_status_, sizeof(RESOURCE_STATUS_EX))

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

#define ResUtilInitializeResourceStatus(_resource_status_) \
  ZeroMemory(_resource_status_, sizeof(RESOURCE_STATUS))

typedef DWORD (__stdcall *PSET_RESOURCE_STATUS_ROUTINE)(RESOURCE_HANDLE, PRESOURCE_STATUS);
typedef VOID (__stdcall *PQUORUM_RESOURCE_LOST)(RESOURCE_HANDLE);

typedef enum LOG_LEVEL {
    LOG_INFORMATION,
    LOG_WARNING,
    LOG_ERROR,
    LOG_SEVERE
} LOG_LEVEL, *PLOG_LEVEL;

typedef VOID (__cdecl *PLOG_EVENT_ROUTINE)(RESOURCE_HANDLE, LOG_LEVEL, LPCWSTR, ...);
typedef RESID (__stdcall *POPEN_ROUTINE)(LPCWSTR, HKEY, RESOURCE_HANDLE);
typedef VOID (__stdcall *PCLOSE_ROUTINE)(RESID);
typedef DWORD (__stdcall *PONLINE_ROUTINE)(RESID, LPHANDLE);
typedef DWORD (__stdcall *POFFLINE_ROUTINE)(RESID);
typedef VOID (__stdcall *PTERMINATE_ROUTINE)(RESID);
typedef BOOL (__stdcall *PIS_ALIVE_ROUTINE)(RESID);
typedef BOOL (__stdcall *PLOOKS_ALIVE_ROUTINE)(RESID);
typedef DWORD (__stdcall *PARBITRATE_ROUTINE)(RESID, PQUORUM_RESOURCE_LOST);
typedef DWORD (__stdcall *PRELEASE_ROUTINE)(RESID);
typedef DWORD (__stdcall *PRESOURCE_CONTROL_ROUTINE)(RESID, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD);
typedef DWORD (__stdcall *PRESOURCE_TYPE_CONTROL_ROUTINE)(LPCWSTR, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD);

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

#define CLUS_RESDLL_OPEN_RECOVER_MONITOR_STATE  0x00000001

typedef RESID (__stdcall *POPEN_V2_ROUTINE)(LPCWSTR, HKEY, RESOURCE_HANDLE, DWORD);

#define CLUS_RESDLL_ONLINE_RECOVER_MONITOR_STATE  0x00000001
#define CLUS_RESDLL_ONLINE_IGNORE_RESOURCE_STATUS  0x00000002
#define CLUS_RESDLL_ONLINE_RETURN_TO_SOURCE_NODE_ON_ERROR 0x00000004
#define CLUS_RESDLL_ONLINE_RESTORE_ONLINE_STATE  0x00000008
#define CLUS_RESDLL_ONLINE_IGNORE_NETWORK_CONNECTIVITY  0x00000010

typedef DWORD (__stdcall *PONLINE_V2_ROUTINE)(RESID, LPHANDLE, DWORD, PBYTE, DWORD, DWORD);

#define CLUS_RESDLL_OFFLINE_IGNORE_RESOURCE_STATUS  0x00000001
#define CLUS_RESDLL_OFFLINE_RETURN_TO_SOURCE_NODE_ON_ERROR  0x00000002
#define CLUS_RESDLL_OFFLINE_QUEUE_ENABLED  0x00000004
#define CLUS_RESDLL_OFFLINE_RETURNING_TO_SOURCE_NODE_BECAUSE_OF_ERROR 0x00000008
#define CLUS_RESDLL_OFFLINE_DUE_TO_EMBEDDED_FAILURE  0x00000010
#define CLUS_RESDLL_OFFLINE_IGNORE_NETWORK_CONNECTIVITY  0x00000020
#define CLUS_RESDLL_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE  0x00000040

typedef DWORD (__stdcall *POFFLINE_V2_ROUTINE)(RESID, LPCWSTR, DWORD, PBYTE, DWORD, DWORD);
typedef DWORD (__stdcall *PCANCEL_ROUTINE)(RESID, DWORD);

typedef INT64 PRESTYPE_CTL_CTX;
typedef INT64 PRES_CTL_CTX;

typedef DWORD (__stdcall *PBEGIN_RESCALL_ROUTINE)(RESID, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD, PRES_CTL_CTX, PBOOL);
typedef DWORD (__stdcall *PBEGIN_RESTYPECALL_ROUTINE)(LPCWSTR, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD, PRESTYPE_CTL_CTX, PBOOL);

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

typedef enum _RESOURCE_EXIT_STATE {
    ResourceExitStateContinue,
    ResourceExitStateTerminate,
    ResourceExitStateMax
} RESOURCE_EXIT_STATE;

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD)

typedef DWORD (__stdcall *PBEGIN_RESCALL_AS_USER_ROUTINE)(RESID, HANDLE, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD, PRES_CTL_CTX, PBOOL);
typedef DWORD (__stdcall *PBEGIN_RESTYPECALL_AS_USER_ROUTINE)(LPCWSTR, HANDLE, DWORD, PVOID, DWORD, PVOID, DWORD, LPDWORD, PRESTYPE_CTL_CTX, PBOOL);

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD */

typedef struct CLRES_V1_FUNCTIONS {
    POPEN_ROUTINE Open;
    PCLOSE_ROUTINE Close;
    PONLINE_ROUTINE Online;
    POFFLINE_ROUTINE Offline;
    PTERMINATE_ROUTINE Terminate;
    PLOOKS_ALIVE_ROUTINE LooksAlive;
    PIS_ALIVE_ROUTINE IsAlive;
    PARBITRATE_ROUTINE Arbitrate;
    PRELEASE_ROUTINE Release;
    PRESOURCE_CONTROL_ROUTINE ResourceControl;
    PRESOURCE_TYPE_CONTROL_ROUTINE ResourceTypeControl;
} CLRES_V1_FUNCTIONS, *PCLRES_V1_FUNCTIONS;

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

typedef struct CLRES_V2_FUNCTIONS {
    POPEN_V2_ROUTINE Open;
    PCLOSE_ROUTINE Close;
    PONLINE_V2_ROUTINE Online;
    POFFLINE_V2_ROUTINE Offline;
    PTERMINATE_ROUTINE Terminate;
    PLOOKS_ALIVE_ROUTINE LooksAlive;
    PIS_ALIVE_ROUTINE IsAlive;
    PARBITRATE_ROUTINE Arbitrate;
    PRELEASE_ROUTINE Release;
    PRESOURCE_CONTROL_ROUTINE ResourceControl;
    PRESOURCE_TYPE_CONTROL_ROUTINE ResourceTypeControl;
    PCANCEL_ROUTINE Cancel;
} CLRES_V2_FUNCTIONS, *PCLRES_V2_FUNCTIONS;

typedef struct CLRES_V3_FUNCTIONS {
    POPEN_V2_ROUTINE Open;
    PCLOSE_ROUTINE Close;
    PONLINE_V2_ROUTINE Online;
    POFFLINE_V2_ROUTINE Offline;
    PTERMINATE_ROUTINE Terminate;
    PLOOKS_ALIVE_ROUTINE LooksAlive;
    PIS_ALIVE_ROUTINE IsAlive;
    PARBITRATE_ROUTINE Arbitrate;
    PRELEASE_ROUTINE Release;
    PBEGIN_RESCALL_ROUTINE BeginResourceControl;
    PBEGIN_RESTYPECALL_ROUTINE BeginResourceTypeControl;
    PCANCEL_ROUTINE Cancel;
} CLRES_V3_FUNCTIONS, *PCLRES_V3_FUNCTIONS;

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD)

typedef struct CLRES_V4_FUNCTIONS {
    POPEN_V2_ROUTINE Open;
    PCLOSE_ROUTINE Close;
    PONLINE_V2_ROUTINE Online;
    POFFLINE_V2_ROUTINE Offline;
    PTERMINATE_ROUTINE Terminate;
    PLOOKS_ALIVE_ROUTINE LooksAlive;
    PIS_ALIVE_ROUTINE IsAlive;
    PARBITRATE_ROUTINE Arbitrate;
    PRELEASE_ROUTINE Release;
    PBEGIN_RESCALL_ROUTINE BeginResourceControl;
    PBEGIN_RESTYPECALL_ROUTINE BeginResourceTypeControl;
    PCANCEL_ROUTINE Cancel;
    PBEGIN_RESCALL_AS_USER_ROUTINE BeginResourceControlAsUser;
    PBEGIN_RESTYPECALL_AS_USER_ROUTINE BeginResourceTypeControlAsUser;
} CLRES_V4_FUNCTIONS, *PCLRES_V4_FUNCTIONS;

#endif  /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD */

typedef struct CLRES_FUNCTION_TABLE {
    DWORD TableSize;
    DWORD Version;
    union {
        CLRES_V1_FUNCTIONS V1Functions;
#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)
        CLRES_V2_FUNCTIONS V2Functions;
        CLRES_V3_FUNCTIONS V3Functions;
#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */
#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD)
        CLRES_V4_FUNCTIONS V4Functions;
#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINTHRESHOLD */
    } DUMMYUNIONNAME;
} CLRES_FUNCTION_TABLE, *PCLRES_FUNCTION_TABLE;

#ifndef FIELD_OFFSET
#define FIELD_OFFSET(type, field)  ((LONG)&(((type *)0)->field))
#endif

typedef struct RESUTIL_LARGEINT_DATA {
    LARGE_INTEGER Default;
    LARGE_INTEGER Minimum;
    LARGE_INTEGER Maximum;
} RESUTIL_LARGEINT_DATA, *PRESUTIL_LARGEINT_DATA;

typedef struct RESUTIL_ULARGEINT_DATA {
    ULARGE_INTEGER Default;
    ULARGE_INTEGER Minimum;
    ULARGE_INTEGER Maximum;
} RESUTIL_ULARGEINT_DATA, *PRESUTIL_ULARGEINT_DATA;

typedef struct RESUTIL_FILETIME_DATA {
    FILETIME Default;
    FILETIME Minimum;
    FILETIME Maximum;
} RESUTIL_FILETIME_DATA, *PRESUTIL_FILETIME_DATA;

#define RESUTIL_PROPITEM_READ_ONLY  0x00000001  
#define RESUTIL_PROPITEM_REQUIRED  0x00000002  
#define RESUTIL_PROPITEM_SIGNED  0x00000004  
#define RESUTIL_PROPITEM_IN_MEMORY  0x00000008 

typedef struct RESUTIL_PROPERTY_ITEM {
    LPWSTR Name;
    LPWSTR KeyName;
    DWORD Format;
    union {
        DWORD_PTR DefaultPtr;
        DWORD Default;
        LPVOID lpDefault;
        PRESUTIL_LARGEINT_DATA LargeIntData;
        PRESUTIL_ULARGEINT_DATA ULargeIntData;
        PRESUTIL_FILETIME_DATA FileTimeData;
    } DUMMYUNIONNAME;
    DWORD Minimum;
    DWORD Maximum;
    DWORD Flags;
    DWORD Offset;
} RESUTIL_PROPERTY_ITEM, *PRESUTIL_PROPERTY_ITEM;

typedef DWORD (__stdcall *PSTARTUP_ROUTINE)(LPCWSTR, DWORD, DWORD, PSET_RESOURCE_STATUS_ROUTINE, PLOG_EVENT_ROUTINE, PCLRES_FUNCTION_TABLE *);

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

typedef enum _FAILURE_TYPE {
    FAILURE_TYPE_GENERAL = 0,
    FAILURE_TYPE_EMBEDDED = 1,
    FAILURE_TYPE_NETWORK_LOSS = 2
} FAILURE_TYPE, *PFAILURE_TYPE;

typedef enum CLUSTER_RESOURCE_APPLICATION_STATE {
    ClusterResourceApplicationStateUnknown = 1,
    ClusterResourceApplicationOSHeartBeat,
    ClusterResourceApplicationReady
} CLUSTER_RESOURCE_APPLICATION_STATE;

typedef DWORD (__stdcall *PSET_RESOURCE_LOCKED_MODE_ROUTINE)(RESOURCE_HANDLE, BOOL, DWORD);
typedef DWORD (__stdcall *PSIGNAL_FAILURE_ROUTINE)(RESOURCE_HANDLE, FAILURE_TYPE, DWORD);
typedef DWORD (__stdcall *PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE)(RESOURCE_HANDLE, unsigned char *, DWORD);
typedef DWORD (__stdcall *PEND_CONTROL_CALL)(const PRES_CTL_CTX, DWORD);
typedef DWORD (__stdcall *PEND_TYPE_CONTROL_CALL)(const PRESTYPE_CTL_CTX, DWORD);
typedef DWORD (__stdcall *PEXTEND_RES_CONTROL_CALL)(const PRES_CTL_CTX, DWORD);
typedef DWORD (__stdcall *PEXTEND_RES_TYPE_CONTROL_CALL)(const PRESTYPE_CTL_CTX, DWORD);
typedef DWORD (__stdcall *PRAISE_RES_TYPE_NOTIFICATION)(LPCWSTR, const PBYTE, DWORD);
typedef DWORD (__stdcall *PCHANGE_RESOURCE_PROCESS_FOR_DUMPS)(RESOURCE_HANDLE, LPCWSTR, DWORD, BOOL);
typedef DWORD (__stdcall *PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS)(LPCWSTR, LPCWSTR, DWORD, BOOL);
typedef DWORD (__stdcall *PSET_INTERNAL_STATE)(RESOURCE_HANDLE, CLUSTER_RESOURCE_APPLICATION_STATE, BOOL);

typedef struct CLRES_CALLBACK_FUNCTION_TABLE {
    PLOG_EVENT_ROUTINE LogEvent;
    PSET_RESOURCE_STATUS_ROUTINE_EX SetResourceStatusEx;
    PSET_RESOURCE_LOCKED_MODE_ROUTINE SetResourceLockedMode;
    PSIGNAL_FAILURE_ROUTINE SignalFailure;
    PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE SetResourceInMemoryNodeLocalProperties;
    PEND_CONTROL_CALL EndControlCall;
    PEND_TYPE_CONTROL_CALL EndTypeControlCall;
    PEXTEND_RES_CONTROL_CALL ExtendControlCall;
    PEXTEND_RES_TYPE_CONTROL_CALL ExtendTypeControlCall;
    PRAISE_RES_TYPE_NOTIFICATION RaiseResTypeNotification;
    PCHANGE_RESOURCE_PROCESS_FOR_DUMPS ChangeResourceProcessForDumps;
    PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS ChangeResTypeProcessForDumps;
    PSET_INTERNAL_STATE SetInternalState;
} CLRES_CALLBACK_FUNCTION_TABLE, *PCLRES_CALLBACK_FUNCTION_TABLE;

typedef DWORD (__stdcall *PSTARTUP_EX_ROUTINE)(LPCWSTR, DWORD, DWORD, PCLRES_CALLBACK_FUNCTION_TABLE, PCLRES_FUNCTION_TABLE *);

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

typedef enum RESOURCE_MONITOR_STATE {
    RmonInitializing,
    RmonIdle,
    RmonStartingResource,
    RmonInitializingResource,
    RmonOnlineResource,
    RmonOfflineResource,
    RmonShutdownResource,
    RmonDeletingResource,
    RmonIsAlivePoll,
    RmonLooksAlivePoll,
    RmonArbitrateResource,
    RmonReleaseResource,
    RmonResourceControl,
    RmonResourceTypeControl,
    RmonTerminateResource,
    RmonDeadlocked
} RESOURCE_MONITOR_STATE;

typedef struct MONITOR_STATE {
    LARGE_INTEGER LastUpdate;
    RESOURCE_MONITOR_STATE State;
    HANDLE ActiveResource;
    BOOL ResmonStop;
} MONITOR_STATE, *PMONITOR_STATE;

typedef struct POST_UPGRADE_VERSION_INFO {
    DWORD newMajorVersion;
    DWORD newUpgradeVersion;
    DWORD oldMajorVersion;
    DWORD oldUpgradeVersion;
    DWORD reserved;
} POST_UPGRADE_VERSION_INFO, *PPOST_UPGRADE_VERSION_INFO;

#define CLUSTER_HEALTH_FAULT_PROPERTY_NAME  L"ClusterHealth"

#define CLUSTER_HEALTH_FAULT_ARGS 7
#define CLUSTER_HEALTH_FAULT_ID 0
#define CLUSTER_HEALTH_FAULT_ERRORTYPE 1
#define CLUSTER_HEALTH_FAULT_ERRORCODE 2
#define CLUSTER_HEALTH_FAULT_DESCRIPTION 3
#define CLUSTER_HEALTH_FAULT_PROVIDER 4
#define CLUSTER_HEALTH_FAULT_FLAGS 5
#define CLUSTER_HEALTH_FAULT_RESERVED 6

#define CLUSTER_HEALTH_FAULT_ID_LABEL L"Id"
#define CLUSTER_HEALTH_FAULT_ERRORTYPE_LABEL L"ErrorType"
#define CLUSTER_HEALTH_FAULT_ERRORCODE_LABEL L"ErrorCode"
#define CLUSTER_HEALTH_FAULT_DESCRIPTION_LABEL L"Description"
#define CLUSTER_HEALTH_FAULT_PROVIDER_LABEL L"Provider"
#define CLUSTER_HEALTH_FAULT_FLAGS_LABEL L"Flags"
#define CLUSTER_HEALTH_FAULT_RESERVED_LABEL L"Reserved"

typedef struct _CLUSTER_HEALTH_FAULT {
    LPWSTR Id;
    DWORD ErrorType;
    DWORD ErrorCode;
    LPWSTR Description;
    LPWSTR Provider;
    DWORD Flags;
    DWORD Reserved;
} CLUSTER_HEALTH_FAULT, *PCLUSTER_HEALTH_FAULT;

typedef struct _CLUSTER_HEALTH_FAULT_ARRAY {
    DWORD numFaults;
    CLUSTER_HEALTH_FAULT *faults;
} CLUSTER_HEALTH_FAULT_ARRAY, *PCLUSTER_HEALTH_FAULT_ARRAY;

DWORD InitializeClusterHealthFault(CLUSTER_HEALTH_FAULT *);
DWORD InitializeClusterHealthFaultArray(CLUSTER_HEALTH_FAULT_ARRAY *);
DWORD FreeClusterHealthFault(CLUSTER_HEALTH_FAULT *);
DWORD FreeClusterHealthFaultArray(CLUSTER_HEALTH_FAULT_ARRAY *);
DWORD WINAPI ClusGetClusterHealthFaults(HCLUSTER, CLUSTER_HEALTH_FAULT_ARRAY *, DWORD);
DWORD WINAPI ClusRemoveClusterHealthFault(HCLUSTER, LPCWSTR, DWORD);
DWORD WINAPI ClusAddClusterHealthFault(HCLUSTER, CLUSTER_HEALTH_FAULT *, DWORD);

DWORD WINAPI ResUtilStartResourceService(LPCWSTR, LPSC_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_START_RESOURCE_SERVICE) (LPCWSTR, LPSC_HANDLE);

DWORD WINAPI ResUtilVerifyResourceService(LPCWSTR);

typedef DWORD(WINAPI *PRESUTIL_VERIFY_RESOURCE_SERVICE) (LPCWSTR);

DWORD WINAPI ResUtilStopResourceService(LPCWSTR);

typedef DWORD(WINAPI *PRESUTIL_STOP_RESOURCE_SERVICE) (LPCWSTR);

DWORD WINAPI ResUtilVerifyService(SC_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_VERIFY_SERVICE) (SC_HANDLE);

DWORD WINAPI ResUtilStopService(SC_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_STOP_SERVICE) (SC_HANDLE);

DWORD WINAPI ResUtilCreateDirectoryTree(LPCWSTR);

typedef DWORD(WINAPI *PRESUTIL_CREATE_DIRECTORY_TREE) (LPCWSTR);

BOOL WINAPI ResUtilIsPathValid(LPCWSTR);

typedef BOOL(WINAPI *PRESUTIL_IS_PATH_VALID) (LPCWSTR);

DWORD WINAPI ResUtilEnumProperties(const PRESUTIL_PROPERTY_ITEM, LPWSTR, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_ENUM_PROPERTIES) (const PRESUTIL_PROPERTY_ITEM, LPWSTR, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilEnumPrivateProperties(HKEY, LPWSTR, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_ENUM_PRIVATE_PROPERTIES) (HKEY, LPWSTR, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilGetProperties(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTIES) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilGetAllProperties(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_ALL_PROPERTIES) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilGetPrivateProperties(HKEY, PVOID, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_PRIVATE_PROPERTIES) (HKEY, PVOID, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilGetPropertySize(HKEY, const PRESUTIL_PROPERTY_ITEM, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTY_SIZE) (HKEY, const PRESUTIL_PROPERTY_ITEM, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilGetProperty(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTY) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID *, LPDWORD);

DWORD WINAPI ResUtilVerifyPropertyTable(const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, LPBYTE);

typedef DWORD(WINAPI *PRESUTIL_VERIFY_PROPERTY_TABLE) (const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, LPBYTE);

DWORD WINAPI ResUtilSetPropertyTable(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, LPBYTE);

typedef DWORD(WINAPI *PRESUTIL_SET_PROPERTY_TABLE) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, LPBYTE);

DWORD WINAPI ResUtilSetPropertyTableEx(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, BOOL,   LPBYTE);

typedef DWORD(WINAPI *PRESUTIL_SET_PROPERTY_TABLE_EX) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, BOOL, const PVOID, DWORD, BOOL,   LPBYTE);

DWORD WINAPI ResUtilSetPropertyParameterBlock(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, const LPBYTE, const PVOID, DWORD, LPBYTE);

typedef DWORD(WINAPI *PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, const LPBYTE, const PVOID, DWORD, LPBYTE);

DWORD WINAPI ResUtilSetPropertyParameterBlockEx(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, const LPBYTE, const PVOID, DWORD, BOOL, LPBYTE);

typedef DWORD(WINAPI *PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, const LPBYTE, const PVOID, DWORD, BOOL, LPBYTE);

DWORD WINAPI ResUtilSetUnknownProperties(HKEY, const PRESUTIL_PROPERTY_ITEM, const PVOID, DWORD);

typedef DWORD(WINAPI *PRESUTIL_SET_UNKNOWN_PROPERTIES) (HKEY, const PRESUTIL_PROPERTY_ITEM, const PVOID, DWORD);

DWORD WINAPI ResUtilGetPropertiesToParameterBlock(HKEY, const PRESUTIL_PROPERTY_ITEM, LPBYTE, BOOL, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK) (HKEY, const PRESUTIL_PROPERTY_ITEM, LPBYTE, BOOL, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK) (HKEY, const PRESUTIL_PROPERTY_ITEM, LPBYTE, BOOL, LPWSTR *);

DWORD WINAPI ResUtilPropertyListFromParameterBlock(const PRESUTIL_PROPERTY_ITEM, PVOID, LPDWORD, const LPBYTE, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK) (const PRESUTIL_PROPERTY_ITEM, PVOID, LPDWORD, const LPBYTE, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilDupParameterBlock(LPBYTE, const LPBYTE, const PRESUTIL_PROPERTY_ITEM);

typedef DWORD(WINAPI *PRESUTIL_DUP_PARAMETER_BLOCK) (LPBYTE, const LPBYTE, const PRESUTIL_PROPERTY_ITEM);

void WINAPI ResUtilFreeParameterBlock(LPBYTE, const LPBYTE, const PRESUTIL_PROPERTY_ITEM);

typedef void (WINAPI *PRESUTIL_FREE_PARAMETER_BLOCK) (LPBYTE, const LPBYTE, const PRESUTIL_PROPERTY_ITEM);

DWORD WINAPI ResUtilAddUnknownProperties(HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_ADD_UNKNOWN_PROPERTIES) (HKEY, const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

DWORD WINAPI ResUtilSetPrivatePropertyList(HKEY, const PVOID, DWORD);

typedef DWORD(WINAPI *PRESUTIL_SET_PRIVATE_PROPERTY_LIST) (HKEY, const PVOID, DWORD);

DWORD WINAPI ResUtilVerifyPrivatePropertyList(const PVOID, DWORD);

typedef DWORD(WINAPI *PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST) (const PVOID, DWORD);

PWSTR WINAPI ResUtilDupString(LPCWSTR);

typedef PWSTR(WINAPI *PRESUTIL_DUP_STRING) (LPCWSTR);

DWORD WINAPI ResUtilGetBinaryValue(HKEY, LPCWSTR, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_BINARY_VALUE) (HKEY, LPCWSTR, LPBYTE *, LPDWORD);

LPWSTR WINAPI ResUtilGetSzValue(HKEY, LPCWSTR);

typedef LPWSTR(WINAPI *PRESUTIL_GET_SZ_VALUE) (HKEY, LPCWSTR);

LPWSTR WINAPI ResUtilGetExpandSzValue(HKEY, LPCWSTR, BOOL);

typedef LPWSTR(WINAPI *PRESUTIL_GET_EXPAND_SZ_VALUE) (HKEY, LPCWSTR, BOOL);

FORCEINLINE DWORD WINAPI_INLINE ResUtilGetMultiSzValue(HKEY hkeyClusterKey, LPCWSTR pszValueName, LPWSTR *ppszOutValue, LPDWORD pcbOutValueSize) {
    return ResUtilGetBinaryValue(hkeyClusterKey, pszValueName, (LPBYTE *)ppszOutValue, pcbOutValueSize);
}

DWORD WINAPI ResUtilGetDwordValue(HKEY, LPCWSTR, LPDWORD, DWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_DWORD_VALUE) (HKEY, LPCWSTR, LPDWORD, DWORD);

DWORD WINAPI ResUtilGetQwordValue(HKEY, LPCWSTR, PULONGLONG, ULONGLONG);

typedef DWORD(WINAPI *PRESUTIL_GET_QWORD_VALUE) (HKEY, LPCWSTR, PULONGLONG, ULONGLONG);

DWORD WINAPI ResUtilSetBinaryValue(HKEY, LPCWSTR, const LPBYTE, DWORD, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_SET_BINARY_VALUE) (HKEY, LPCWSTR, const LPBYTE, DWORD, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilSetSzValue(HKEY, LPCWSTR, LPCWSTR, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_SET_SZ_VALUE) (HKEY, LPCWSTR, LPCWSTR, LPWSTR *);

DWORD WINAPI ResUtilSetExpandSzValue(HKEY, LPCWSTR, LPCWSTR, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_SET_EXPAND_SZ_VALUE) (HKEY, LPCWSTR, LPCWSTR, LPWSTR *);

DWORD WINAPI ResUtilSetMultiSzValue(HKEY, LPCWSTR, LPCWSTR, DWORD, LPWSTR *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_SET_MULTI_SZ_VALUE) (HKEY, LPCWSTR, LPCWSTR, DWORD, LPWSTR *, LPDWORD);

DWORD WINAPI ResUtilSetDwordValue(HKEY, LPCWSTR, DWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_SET_DWORD_VALUE) (HKEY, LPCWSTR, DWORD, LPDWORD);

DWORD WINAPI ResUtilSetQwordValue(HKEY, LPCWSTR, ULONGLONG, PULONGLONG);

typedef DWORD(WINAPI *PRESUTIL_SET_QWORD_VALUE) (HKEY, LPCWSTR, ULONGLONG, PULONGLONG);

DWORD WINAPI ResUtilSetValueEx(HKEY, LPCWSTR, DWORD, const LPBYTE, DWORD, DWORD);

DWORD WINAPI ResUtilGetBinaryProperty(LPBYTE *, LPDWORD, const PCLUSPROP_BINARY, const LPBYTE, DWORD, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_BINARY_PROPERTY) (LPBYTE *, LPDWORD, const PCLUSPROP_BINARY, const LPBYTE, DWORD, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilGetSzProperty(LPWSTR *, const PCLUSPROP_SZ, LPCWSTR, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_SZ_PROPERTY) (LPWSTR *, const PCLUSPROP_SZ, LPCWSTR, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilGetMultiSzProperty(LPWSTR *, LPDWORD, const PCLUSPROP_SZ, LPCWSTR, DWORD, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_MULTI_SZ_PROPERTY) (LPWSTR *, LPDWORD, const PCLUSPROP_SZ, LPCWSTR, DWORD, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilGetDwordProperty(LPDWORD, const PCLUSPROP_DWORD, DWORD, DWORD, DWORD, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_DWORD_PROPERTY) (LPDWORD, const PCLUSPROP_DWORD, DWORD, DWORD, DWORD, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilGetLongProperty(LPLONG, const PCLUSPROP_LONG, LONG, LONG, LONG, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_LONG_PROPERTY) (LPLONG, const PCLUSPROP_LONG, LONG, LONG, LONG, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilGetFileTimeProperty(LPFILETIME, const PCLUSPROP_FILETIME, FILETIME, FILETIME, FILETIME, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_FILETIME_PROPERTY) (LPFILETIME, const PCLUSPROP_FILETIME, FILETIME, FILETIME, FILETIME, LPBYTE *, LPDWORD);

LPVOID WINAPI ResUtilGetEnvironmentWithNetName(HRESOURCE);

typedef LPVOID(WINAPI *PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME) (HRESOURCE);

DWORD WINAPI ResUtilFreeEnvironment(LPVOID);

typedef DWORD(WINAPI *PRESUTIL_FREE_ENVIRONMENT) (LPVOID);

LPWSTR WINAPI ResUtilExpandEnvironmentStrings(LPCWSTR);

typedef LPWSTR(WINAPI *PRESUTIL_EXPAND_ENVIRONMENT_STRINGS) (LPCWSTR);

DWORD WINAPI ResUtilSetResourceServiceEnvironment(LPCWSTR, HRESOURCE, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT) (LPCWSTR, HRESOURCE, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

DWORD WINAPI ResUtilRemoveResourceServiceEnvironment(LPCWSTR, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT) (LPCWSTR, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

DWORD WINAPI ResUtilSetResourceServiceStartParameters(LPCWSTR, SC_HANDLE, LPSC_HANDLE, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS) (LPCWSTR, SC_HANDLE, LPSC_HANDLE, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

DWORD WINAPI ResUtilFindSzProperty(const PVOID, DWORD, LPCWSTR, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_FIND_SZ_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPWSTR *);

DWORD WINAPI ResUtilFindExpandSzProperty(const PVOID, DWORD, LPCWSTR, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_FIND_EXPAND_SZ_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPWSTR *);

DWORD WINAPI ResUtilFindExpandedSzProperty(const PVOID, DWORD, LPCWSTR, LPWSTR *);

typedef DWORD(WINAPI *PRESUTIL_FIND_EXPANDED_SZ_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPWSTR *);

DWORD WINAPI ResUtilFindDwordProperty(const PVOID, DWORD, LPCWSTR, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_FIND_DWORD_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPDWORD);

DWORD WINAPI ResUtilFindBinaryProperty(const PVOID, DWORD, LPCWSTR, LPBYTE *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_FIND_BINARY_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPBYTE *, LPDWORD);

DWORD WINAPI ResUtilFindMultiSzProperty(const PVOID, DWORD, LPCWSTR, LPWSTR *, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_FIND_MULTI_SZ_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPWSTR *, LPDWORD);

DWORD WINAPI ResUtilFindLongProperty(const PVOID, DWORD, LPCWSTR, LPLONG);

typedef DWORD(WINAPI *PRESUTIL_FIND_LONG_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPLONG);

DWORD WINAPI ResUtilFindULargeIntegerProperty(const PVOID, DWORD, LPCWSTR, ULONGLONG *);

typedef DWORD(WINAPI *PRESUTIL_FIND_ULARGEINTEGER_PROPERTY) (const PVOID, DWORD, LPCWSTR, ULONGLONG *);

DWORD WINAPI ResUtilFindFileTimeProperty(const PVOID, DWORD, LPCWSTR, LPFILETIME);

typedef DWORD(WINAPI *PRESUTIL_FIND_FILETIME_PROPERTY) (const PVOID, DWORD, LPCWSTR, LPFILETIME);

typedef struct CLUS_WORKER {
    HANDLE hThread;
    BOOL Terminate;
} CLUS_WORKER, *PCLUS_WORKER;

typedef DWORD(WINAPI *PWORKER_START_ROUTINE) (PCLUS_WORKER, LPVOID);

DWORD WINAPI ClusWorkerCreate(PCLUS_WORKER, PWORKER_START_ROUTINE, PVOID);

typedef DWORD(WINAPI *PCLUSAPI_CLUS_WORKER_CREATE) (PCLUS_WORKER, PWORKER_START_ROUTINE, PVOID);

BOOL WINAPI ClusWorkerCheckTerminate(PCLUS_WORKER);

typedef BOOL(WINAPI *PCLUSAPIClusWorkerCheckTerminate) (PCLUS_WORKER);

VOID WINAPI ClusWorkerTerminate(PCLUS_WORKER);

typedef VOID(WINAPI *PCLUSAPI_CLUS_WORKER_TERMINATE) (PCLUS_WORKER);

DWORD WINAPI ClusWorkerTerminateEx(PCLUS_WORKER, DWORD, BOOL);

DWORD ClusWorkersTerminate(PCLUS_WORKER *, size_t const, DWORD, BOOL);

typedef DWORD(*LPRESOURCE_CALLBACK) (HRESOURCE, HRESOURCE, PVOID);
typedef DWORD(*LPRESOURCE_CALLBACK_EX) (HCLUSTER, HRESOURCE, HRESOURCE, PVOID);

BOOL WINAPI ResUtilResourcesEqual(HRESOURCE, HRESOURCE);

typedef BOOL(WINAPI *PRESUTIL_RESOURCES_EQUAL) (HRESOURCE, HRESOURCE);

BOOL WINAPI ResUtilResourceTypesEqual(LPCWSTR, HRESOURCE);

typedef BOOL(WINAPI *PRESUTIL_RESOURCE_TYPES_EQUAL) (LPCWSTR, HRESOURCE);

BOOL WINAPI ResUtilIsResourceClassEqual(PCLUS_RESOURCE_CLASS_INFO, HRESOURCE);

typedef BOOL(WINAPI *PRESUTIL_IS_RESOURCE_CLASS_EQUAL) (PCLUS_RESOURCE_CLASS_INFO, HRESOURCE);

DWORD WINAPI ResUtilEnumResources(HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK, PVOID);

typedef DWORD(WINAPI *PRESUTIL_ENUM_RESOURCES) (HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK, PVOID);

DWORD WINAPI ResUtilEnumResourcesEx(HCLUSTER, HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK_EX, PVOID);

typedef DWORD(WINAPI *PRESUTIL_ENUM_RESOURCES_EX) (HCLUSTER, HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK_EX, PVOID);

HRESOURCE WINAPI ResUtilGetResourceDependency(HANDLE, LPCWSTR);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY) (HANDLE, LPCWSTR);

HRESOURCE WINAPI ResUtilGetResourceDependencyByName(HCLUSTER, HANDLE, LPCWSTR, BOOL);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME) (HCLUSTER, HANDLE, LPCWSTR, BOOL);

HRESOURCE WINAPI ResUtilGetResourceDependencyByClass(HCLUSTER, HANDLE, PCLUS_RESOURCE_CLASS_INFO, BOOL);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS) (HCLUSTER, HANDLE, PCLUS_RESOURCE_CLASS_INFO, BOOL);

HRESOURCE WINAPI ResUtilGetResourceNameDependency(LPCWSTR, LPCWSTR);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY) (LPCWSTR, LPCWSTR);

DWORD WINAPI ResUtilGetResourceDependentIPAddressProps(HRESOURCE, LPWSTR, DWORD *, LPWSTR, DWORD *, LPWSTR, DWORD *);

typedef DWORD(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS) (HRESOURCE, LPWSTR, DWORD *, LPWSTR, DWORD *, LPWSTR, DWORD *);

DWORD WINAPI ResUtilFindDependentDiskResourceDriveLetter(HCLUSTER, HRESOURCE, LPWSTR, DWORD *);

typedef DWORD(WINAPI *PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER) (HCLUSTER, HRESOURCE, LPWSTR, DWORD *);

DWORD WINAPI ResUtilTerminateServiceProcessFromResDll(DWORD, BOOL, PDWORD, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL) (DWORD, BOOL, PDWORD, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

DWORD WINAPI ResUtilGetPropertyFormats(const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);

typedef DWORD(WINAPI *PRESUTIL_GET_PROPERTY_FORMATS) (const PRESUTIL_PROPERTY_ITEM, PVOID, DWORD, LPDWORD, LPDWORD);


DWORD WINAPI ResUtilGetCoreClusterResources(HCLUSTER, HRESOURCE *, HRESOURCE *, HRESOURCE *);

typedef DWORD(WINAPI *PRESUTIL_GET_CORE_CLUSTER_RESOURCES) (HCLUSTER, HRESOURCE *, HRESOURCE *, HRESOURCE *);

DWORD WINAPI ResUtilGetResourceName(HRESOURCE, PWSTR, DWORD *);

typedef DWORD(WINAPI *PRESUTIL_GET_RESOURCE_NAME) (HRESOURCE, PWSTR, DWORD *);

typedef enum _CLUSTER_ROLE {
    ClusterRoleDHCP,
    ClusterRoleDTC,
    ClusterRoleFileServer,
    ClusterRoleGenericApplication,
    ClusterRoleGenericScript,
    ClusterRoleGenericService,
    ClusterRoleISCSINameServer,
    ClusterRoleMSMQ,
    ClusterRoleNFS,
    ClusterRolePrintServer,
    ClusterRoleStandAloneNamespaceServer,
    ClusterRoleVolumeShadowCopyServiceTask,
    ClusterRoleWINS,
    ClusterRoleTaskScheduler,
    ClusterRoleNetworkFileSystem,
    ClusterRoleDFSReplicatedFolder,
    ClusterRoleDistributedFileSystem,
    ClusterRoleDistributedNetworkName,
    ClusterRoleFileShare,
    ClusterRoleFileShareWitness,
    ClusterRoleHardDisk,
    ClusterRoleIPAddress,
    ClusterRoleIPV6Address,
    ClusterRoleIPV6TunnelAddress,
    ClusterRoleISCSITargetServer,
    ClusterRoleNetworkName,
    ClusterRolePhysicalDisk,
    ClusterRoleSODAFileServer,
    ClusterRoleStoragePool,
    ClusterRoleVirtualMachine,
    ClusterRoleVirtualMachineConfiguration,
    ClusterRoleVirtualMachineReplicaBroker
} CLUSTER_ROLE;

typedef enum _CLUSTER_ROLE_STATE {
    ClusterRoleUnknown = -1,
    ClusterRoleClustered,
    ClusterRoleUnclustered
} CLUSTER_ROLE_STATE;

CLUSTER_ROLE_STATE WINAPI ResUtilGetClusterRoleState(HCLUSTER, CLUSTER_ROLE);

BOOL WINAPI ClusterIsPathOnSharedVolume(LPCWSTR);

typedef BOOL(WINAPI *PCLUSTER_IS_PATH_ON_SHARED_VOLUME) (LPCWSTR);

BOOL WINAPI ClusterGetVolumePathName(LPCWSTR, LPWSTR, DWORD);

typedef BOOL(WINAPI *PCLUSTER_GET_VOLUME_PATH_NAME) (LPCWSTR, LPWSTR, DWORD);

BOOL WINAPI ClusterGetVolumeNameForVolumeMountPoint(LPCWSTR, LPWSTR, DWORD);

typedef BOOL(WINAPI *PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT) (LPCWSTR, LPWSTR, DWORD);

DWORD WINAPI ClusterPrepareSharedVolumeForBackup(LPCWSTR, LPWSTR, LPDWORD, LPWSTR, LPDWORD);

typedef DWORD(WINAPI * PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP) (LPCWSTR, LPWSTR, LPDWORD, LPWSTR, LPDWORD);

DWORD WINAPI ClusterClearBackupStateForSharedVolume(LPCWSTR);

typedef DWORD(WINAPI *PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME) (LPCWSTR);

#if (CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8)

DWORD WINAPI ResUtilSetResourceServiceStartParametersEx(LPCWSTR, SC_HANDLE, LPSC_HANDLE, DWORD, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

typedef DWORD(WINAPI *PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX) (LPCWSTR, SC_HANDLE, LPSC_HANDLE, DWORD, PLOG_EVENT_ROUTINE, RESOURCE_HANDLE);

DWORD WINAPI ResUtilEnumResourcesEx2(HCLUSTER, HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK_EX, PVOID, DWORD);

typedef DWORD(WINAPI *PRESUTIL_ENUM_RESOURCES_EX2) (HCLUSTER, HRESOURCE, LPCWSTR, LPRESOURCE_CALLBACK_EX, PVOID, DWORD);

HRESOURCE WINAPI ResUtilGetResourceDependencyEx(HANDLE, LPCWSTR, DWORD);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY_EX) (HANDLE, LPCWSTR, DWORD);

HRESOURCE WINAPI ResUtilGetResourceDependencyByNameEx(HCLUSTER, HANDLE, LPCWSTR, BOOL, DWORD);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX) (HCLUSTER, HANDLE, LPCWSTR, BOOL, DWORD);

HRESOURCE WINAPI ResUtilGetResourceDependencyByClassEx(HCLUSTER, HANDLE, PCLUS_RESOURCE_CLASS_INFO, BOOL, DWORD);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX) (HCLUSTER, HANDLE, PCLUS_RESOURCE_CLASS_INFO, BOOL, DWORD);

HRESOURCE WINAPI ResUtilGetResourceNameDependencyEx(LPCWSTR, LPCWSTR, DWORD);

typedef HRESOURCE(WINAPI *PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX) (LPCWSTR, LPCWSTR, DWORD);

DWORD WINAPI ResUtilGetCoreClusterResourcesEx(HCLUSTER, HRESOURCE *, HRESOURCE *, DWORD);

typedef DWORD(WINAPI * PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX) (HCLUSTER, HRESOURCE *, HRESOURCE *, HRESOURCE *, DWORD);

#define CLUS_CREATE_CRYPT_CONTAINER_NOT_FOUND  0x0001

typedef struct _HCLUSCRYPTPROVIDER *HCLUSCRYPTPROVIDER;

HCLUSCRYPTPROVIDER WINAPI OpenClusterCryptProvider(LPCWSTR, LPCTSTR, DWORD, DWORD);

typedef HCLUSCRYPTPROVIDER(WINAPI *POPEN_CLUSTER_CRYPT_PROVIDER) (LPCWSTR, LPCTSTR, DWORD, DWORD);

DWORD WINAPI CloseClusterCryptProvider(HCLUSCRYPTPROVIDER);

typedef DWORD(WINAPI *PCLOSE_CLUSTER_CRYPT_PROVIDER) (HCLUSCRYPTPROVIDER);

DWORD WINAPI ClusterEncrypt(HCLUSCRYPTPROVIDER, PBYTE, DWORD, PBYTE *, PDWORD);

typedef DWORD(WINAPI *PCLUSTER_ENCRYPT) (HCLUSCRYPTPROVIDER, PBYTE, DWORD, PBYTE *, PDWORD);

DWORD WINAPI ClusterDecrypt(HCLUSCRYPTPROVIDER hClusCryptProvider, PBYTE, DWORD, PBYTE *, PDWORD);

typedef DWORD(WINAPI *PCLUSTER_DECRYPT) (HCLUSCRYPTPROVIDER, PBYTE, DWORD, PBYTE *, PDWORD);

DWORD WINAPI FreeClusterCrypt(PVOID);

typedef DWORD(WINAPI *PFREE_CLUSTER_CRYPT) (PVOID);

#endif /* CLUSAPI_VERSION >= CLUSAPI_VERSION_WINDOWS8 */

typedef struct _PaxosTagCStruct {
    unsigned __int64 __padding__PaxosTagVtable;
    unsigned __int64 __padding__NextEpochVtable;
    unsigned __int64 __padding__NextEpoch_DateTimeVtable;
    unsigned __int64 NextEpoch_DateTime_ticks;
    int NextEpoch_Value;
    DWORD __padding__BoundryNextEpoch;
    unsigned __int64 __padding__EpochVtable;
    unsigned __int64 __padding__Epoch_DateTimeVtable;
    unsigned __int64 Epoch_DateTime_ticks;
    int Epoch_Value;
    DWORD __padding__BoundryEpoch;
    int Sequence;
    DWORD __padding__BoundrySequence;
} PaxosTagCStruct, *PPaxosTagCStruct;

typedef struct _WitnessTagUpdateHelper {
    int Version;
    PaxosTagCStruct paxosToSet;
    PaxosTagCStruct paxosToValidate;
} WitnessTagUpdateHelper;

typedef struct _WitnessTagHelper {
    int Version;
    PaxosTagCStruct paxosToValidate;
} WitnessTagHelper;

BOOL ResUtilPaxosComparer(const PaxosTagCStruct *const, const PaxosTagCStruct *const);
BOOL ResUtilLeftPaxosIsLessThanRight(const PaxosTagCStruct *const, const PaxosTagCStruct *const);

#endif /* _RESAPI_H */
