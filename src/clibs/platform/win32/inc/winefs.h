#ifndef _WINEFS_H
#define _WINEFS_H

#if (NTDDI_VERSION >= NTDDI_WIN2K)

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

/* Windows File Encryption definitions */

#ifdef __cplusplus
extern "C" {
#endif

#define WINEFS_SETUSERKEY_SET_CAPABILITIES  0x00000001
#define WINEFS_SETUSERKEY_BLOCK_CACHE_FLUSH  0x00000002

#define MAX_SID_SIZE  256

#if (NTDDI_VERSION >= NTDDI_WINXP)
#ifndef ALGIDDEF
#define ALGIDDEF
typedef unsigned int ALG_ID;
#endif /* ALGIDDEF */
#endif /* NTDDI_VERSION >= NTDDI_WINXP */

typedef struct _CERTIFICATE_BLOB {
    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;
} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;

typedef struct _EFS_HASH_BLOB {
    DWORD cbData;
    PBYTE pbData;
} EFS_HASH_BLOB, *PEFS_HASH_BLOB;

#if (NTDDI_VERSION >= NTDDI_WINXP)
typedef struct _EFS_RPC_BLOB {
    DWORD cbData;
    PBYTE pbData;
} EFS_RPC_BLOB, *PEFS_RPC_BLOB;
#endif /* NTDDI_VERSION >= NTDDI_WINXP */

#if (NTDDI_VERSION >= NTDDI_VISTA) 
typedef struct _EFS_PIN_BLOB {
    DWORD cbPadding; 
    DWORD cbData;
    PBYTE pbData;
} EFS_PIN_BLOB, *PEFS_PIN_BLOB;
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#if (NTDDI_VERSION >= NTDDI_WINXP)
typedef struct _EFS_KEY_INFO {
    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;
} EFS_KEY_INFO, *PEFS_KEY_INFO;
#endif /* NTDDI_VERSION >= NTDDI_WINXP */

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct _EFS_COMPATIBILITY_INFO {
    DWORD EfsVersion;
} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;
#endif /* NTDDI_VERSION >= NTDDI_WIN7 */

#if (NTDDI_VERSION >= NTDDI_WINBLUE)
#define EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR  5
#endif /* NTDDI_VERSION >= NTDDI_WINBLUE */

#if (NTDDI_VERSION >= NTDDI_VISTA) 
typedef struct _EFS_DECRYPTION_STATUS_INFO {
    DWORD dwDecryptionError;
    DWORD dwHashOffset;
    DWORD cbHash;
} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO {
    BOOL bHasCurrentKey;
    DWORD dwEncryptionError;
} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;

typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;
} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH *pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;

typedef struct _ENCRYPTION_CERTIFICATE_LIST {
    DWORD nUsers;
     PENCRYPTION_CERTIFICATE *pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;

#if (NTDDI_VERSION >= NTDDI_VISTA) 
#define EFS_METADATA_ADD_USER  0x00000001
#define EFS_METADATA_REMOVE_USER  0x00000002
#define EFS_METADATA_REPLACE_USER  0x00000004
#define EFS_METADATA_GENERAL_OP  0x00000008

typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE { 
    DWORD dwEfsAccessType;
    PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
    PENCRYPTION_CERTIFICATE pEncryptionCertificate;
    PEFS_RPC_BLOB pEfsStreamSignature;
} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct _ENCRYPTION_PROTECTOR {
    DWORD cbTotalLength;
    SID * pUserSid;
    LPWSTR lpProtectorDescriptor;
} ENCRYPTION_PROTECTOR, *PENCRYPTION_PROTECTOR;

typedef struct _ENCRYPTION_PROTECTOR_LIST {
    DWORD nProtectors;
    PENCRYPTION_PROTECTOR *pProtectors;
} ENCRYPTION_PROTECTOR_LIST, *PENCRYPTION_PROTECTOR_LIST;
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

WINADVAPI DWORD WINAPI QueryUsersOnEncryptedFile(LPCWSTR,PENCRYPTION_CERTIFICATE_HASH_LIST*);
WINADVAPI DWORD WINAPI QueryRecoveryAgentsOnEncryptedFile(LPCWSTR,PENCRYPTION_CERTIFICATE_HASH_LIST*);
WINADVAPI DWORD WINAPI RemoveUsersFromEncryptedFile(LPCWSTR,PENCRYPTION_CERTIFICATE_HASH_LIST);
WINADVAPI DWORD WINAPI AddUsersToEncryptedFile(LPCWSTR,PENCRYPTION_CERTIFICATE_LIST);
WINADVAPI DWORD WINAPI SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE);
#if (NTDDI_VERSION >= NTDDI_VISTA) 
WINADVAPI DWORD WINAPI SetUserFileEncryptionKeyEx(PENCRYPTION_CERTIFICATE,DWORD,DWORD,LPVOID);
#endif /* NTDDI_VERSION >= NTDDI_VISTA */
WINADVAPI VOID WINAPI FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST);
WINADVAPI BOOL WINAPI EncryptionDisable(LPCWSTR,BOOL);
#if (NTDDI_VERSION >= NTDDI_WS03)
WINADVAPI DWORD WINAPI DuplicateEncryptionInfoFile(LPCWSTR,LPCWSTR,DWORD,DWORD,CONST LPSECURITY_ATTRIBUTES);
#elif (NTDDI_VERSION >= NTDDI_WINXP)
WINADVAPI DWORD WINAPI DuplicateEncryptionInfoFile(LPCWSTR,LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
#endif
#if (NTDDI_VERSION >= NTDDI_VISTA)
WINADVAPI DWORD WINAPI GetEncryptedFileMetadata(LPCWSTR,PDWORD,PBYTE*);
WINADVAPI DWORD WINAPI SetEncryptedFileMetadata(LPCWSTR,PBYTE,PBYTE,PENCRYPTION_CERTIFICATE_HASH,DWORD,PENCRYPTION_CERTIFICATE_HASH_LIST); 
WINADVAPI VOID WINAPI FreeEncryptedFileMetadata(PBYTE); 
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#ifdef __cplusplus
}
#endif

#endif /* NTDDI_VERSION >= NTDDI_WIN2K */

#endif /* _WINEFS_H */
