#ifndef _NTLSA_H
#define _NTLSA_H

/* Local Security Authority (LSA) service definitions */

#include <sdkddkver.h>

#include <lsalookup.h>

#ifdef __ORANGEC__ 
#pragma once
#endif

#ifndef _NTLSA_IFS_
typedef ULONG  LSA_OPERATIONAL_MODE, *PLSA_OPERATIONAL_MODE;
#endif // _NTLSA_IFS_

#define LSA_MODE_PASSWORD_PROTECTED  (0x00000001L)
#define LSA_MODE_INDIVIDUAL_ACCOUNTS  (0x00000002L)
#define LSA_MODE_MANDATORY_ACCESS  (0x00000004L)
#define LSA_MODE_LOG_FULL  (0x00000008L)

#define LSA_MAXIMUM_SID_COUNT  (0x00000100L)
#define LSA_MAXIMUM_ENUMERATION_LENGTH  (32000)

#define LSA_CALL_LICENSE_SERVER  0x80000000

#ifndef _NTLSA_IFS_

typedef enum _SECURITY_LOGON_TYPE {
    UndefinedLogonType = 0,
    Interactive = 2,
    Network,
    Batch,
    Service,
    Proxy,
    Unlock,
    NetworkCleartext,
    NewCredentials,
#if (_WIN32_WINNT >= 0x0501)
    RemoteInteractive,
    CachedInteractive,
#endif /* _WIN32_WINNT >= 0x0501 */
#if (_WIN32_WINNT >= 0x0502)
    CachedRemoteInteractive,
    CachedUnlock
#endif /* _WIN32_WINNT >= 0x0502 */
} SECURITY_LOGON_TYPE, *PSECURITY_LOGON_TYPE;

#endif /* !_NTLSA_IFS_ */

#define SECURITY_ACCESS_INTERACTIVE_LOGON  (0x00000001UL)
#define SECURITY_ACCESS_NETWORK_LOGON  (0x00000002UL)
#define SECURITY_ACCESS_BATCH_LOGON  (0x00000004UL)
#define SECURITY_ACCESS_SERVICE_LOGON  (0x00000010UL)
#define SECURITY_ACCESS_PROXY_LOGON  (0x00000020UL)
#define SECURITY_ACCESS_DENY_INTERACTIVE_LOGON  (0x00000040UL)
#define SECURITY_ACCESS_DENY_NETWORK_LOGON  (0x00000080UL)
#define SECURITY_ACCESS_DENY_BATCH_LOGON  (0x00000100UL)
#define SECURITY_ACCESS_DENY_SERVICE_LOGON  (0x00000200UL)
#define SECURITY_ACCESS_REMOTE_INTERACTIVE_LOGON  (0x00000400UL)
#define SECURITY_ACCESS_DENY_REMOTE_INTERACTIVE_LOGON (0x00000800UL)

#ifndef _NTLSA_IFS_

#ifndef _NTLSA_AUDIT_
#define _NTLSA_AUDIT_

typedef enum _SE_ADT_PARAMETER_TYPE {
    SeAdtParmTypeNone = 0,
    SeAdtParmTypeString,
    SeAdtParmTypeFileSpec,
    SeAdtParmTypeUlong,
    SeAdtParmTypeSid,
    SeAdtParmTypeLogonId,
    SeAdtParmTypeNoLogonId,
    SeAdtParmTypeAccessMask,
    SeAdtParmTypePrivs,
    SeAdtParmTypeObjectTypes,
    SeAdtParmTypeHexUlong,
    SeAdtParmTypePtr,
    SeAdtParmTypeTime,
    SeAdtParmTypeGuid,
    SeAdtParmTypeLuid,
    SeAdtParmTypeHexInt64,
    SeAdtParmTypeStringList,
    SeAdtParmTypeSidList,
    SeAdtParmTypeDuration,
    SeAdtParmTypeUserAccountControl,
    SeAdtParmTypeNoUac,
    SeAdtParmTypeMessage,
    SeAdtParmTypeDateTime,
    SeAdtParmTypeSockAddr,
    SeAdtParmTypeSD,
    SeAdtParmTypeLogonHours,
    SeAdtParmTypeLogonIdNoSid,
    SeAdtParmTypeUlongNoConv,
    SeAdtParmTypeSockAddrNoPort,
    SeAdtParmTypeAccessReason,
    SeAdtParmTypeStagingReason,
    SeAdtParmTypeResourceAttribute,
    SeAdtParmTypeClaims,
    SeAdtParmTypeLogonIdAsSid,
    SeAdtParmTypeMultiSzString,
    SeAdtParmTypeLogonIdEx,
} SE_ADT_PARAMETER_TYPE, *PSE_ADT_PARAMETER_TYPE;

#ifndef GUID_DEFINED
#include <guiddef.h>
#endif /* GUID_DEFINED */

typedef struct _SE_ADT_OBJECT_TYPE {
    GUID ObjectType;
    USHORT Flags;
#define SE_ADT_OBJECT_ONLY  0x1
    USHORT Level;
    ACCESS_MASK AccessMask;
} SE_ADT_OBJECT_TYPE, *PSE_ADT_OBJECT_TYPE;

typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
    SE_ADT_PARAMETER_TYPE Type;
    ULONG Length;
    ULONG_PTR Data[2];
    PVOID Address;
} SE_ADT_PARAMETER_ARRAY_ENTRY, *PSE_ADT_PARAMETER_ARRAY_ENTRY;

typedef struct _SE_ADT_ACCESS_REASON{
    ACCESS_MASK AccessMask;
    ULONG  AccessReasons[32];
    ULONG  ObjectTypeIndex;
    ULONG AccessGranted;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_ADT_ACCESS_REASON, *PSE_ADT_ACCESS_REASON;

typedef struct _SE_ADT_CLAIMS {
    ULONG Length;
    PCLAIMS_BLOB Claims;
} SE_ADT_CLAIMS, *PSE_ADT_CLAIMS;

#define SE_MAX_AUDIT_PARAMETERS  32
#define SE_MAX_GENERIC_AUDIT_PARAMETERS  28

typedef struct _SE_ADT_PARAMETER_ARRAY {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ SE_MAX_AUDIT_PARAMETERS ];
} SE_ADT_PARAMETER_ARRAY, *PSE_ADT_PARAMETER_ARRAY;

typedef struct _SE_ADT_PARAMETER_ARRAY_EX {
    ULONG CategoryId;
    ULONG AuditId;
    ULONG Version;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ SE_MAX_AUDIT_PARAMETERS ];
} SE_ADT_PARAMETER_ARRAY_EX, *PSE_ADT_PARAMETER_ARRAY_EX;

#define SE_ADT_PARAMETERS_SELF_RELATIVE  0x00000001
#define SE_ADT_PARAMETERS_SEND_TO_LSA  0x00000002
#define SE_ADT_PARAMETER_EXTENSIBLE_AUDIT  0x00000004
#define SE_ADT_PARAMETER_GENERIC_AUDIT  0x00000008
#define SE_ADT_PARAMETER_WRITE_SYNCHRONOUS  0x00000010

#define LSAP_SE_ADT_PARAMETER_ARRAY_TRUE_SIZE(AuditParameters) \
     ( sizeof(SE_ADT_PARAMETER_ARRAY) - \
       sizeof(SE_ADT_PARAMETER_ARRAY_ENTRY) * \
       (SE_MAX_AUDIT_PARAMETERS - AuditParameters->ParameterCount) )

#endif /* _NTLSA_AUDIT_ */

#endif /* _NTLSA_IFS_ */

typedef struct _LSA_ADT_STRING_LIST_ENTRY {
    ULONG Flags;
    UNICODE_STRING String;
} LSA_ADT_STRING_LIST_ENTRY, *PLSA_ADT_STRING_LIST_ENTRY;

typedef struct _LSA_ADT_STRING_LIST {
    ULONG cStrings;
    PLSA_ADT_STRING_LIST_ENTRY Strings;
} LSA_ADT_STRING_LIST, *PLSA_ADT_STRING_LIST;

typedef struct _LSA_ADT_SID_LIST_ENTRY {
    ULONG Flags;
    PSID Sid;
} LSA_ADT_SID_LIST_ENTRY, *PLSA_ADT_SID_LIST_ENTRY;

typedef struct _LSA_ADT_SID_LIST {
    ULONG cSids;
    PLSA_ADT_SID_LIST_ENTRY Sids;
} LSA_ADT_SID_LIST, *PLSA_ADT_SID_LIST;

#define LSA_ADT_SECURITY_SOURCE_NAME  L"Microsoft-Windows-Security-Auditing"

#define LSA_ADT_LEGACY_SECURITY_SOURCE_NAME  L"Security"

#define SE_ADT_POLICY_AUDIT_EVENT_TYPE_EX_BEGIN  100

typedef enum _POLICY_AUDIT_EVENT_TYPE_EX {
    iSystem_SecurityStateChange = SE_ADT_POLICY_AUDIT_EVENT_TYPE_EX_BEGIN,
    iSystem_SecuritySubsystemExtension,
    iSystem_Integrity,
    iSystem_IPSecDriverEvents,
    iSystem_Others,

    iLogon_Logon,
    iLogon_Logoff,
    iLogon_AccountLockout,
    iLogon_IPSecMainMode,
    iLogon_SpecialLogon,
    iLogon_IPSecQuickMode,
    iLogon_IPSecUsermode,
    iLogon_Others,
    iLogon_NPS,
    iLogon_Claims,
    iLogon_Groups,

    iObjectAccess_FileSystem,
    iObjectAccess_Registry,
    iObjectAccess_Kernel,
    iObjectAccess_Sam,
    iObjectAccess_Other,
    iObjectAccess_CertificationAuthority,
    iObjectAccess_ApplicationGenerated,
    iObjectAccess_HandleBasedAudits,
    iObjectAccess_Share,
    iObjectAccess_FirewallPacketDrops,
    iObjectAccess_FirewallConnection,
    iObjectAccess_DetailedFileShare,
    iObjectAccess_RemovableStorage,
    iObjectAccess_CbacStaging,

    iPrivilegeUse_Sensitive,
    iPrivilegeUse_NonSensitive,
    iPrivilegeUse_Others,

    iDetailedTracking_ProcessCreation,
    iDetailedTracking_ProcessTermination,
    iDetailedTracking_DpapiActivity,
    iDetailedTracking_RpcCall,
    iDetailedTracking_PnpActivity,
    iDetailedTracking_TokenRightAdjusted,

    iPolicyChange_AuditPolicy,
    iPolicyChange_AuthenticationPolicy,
    iPolicyChange_AuthorizationPolicy,
    iPolicyChange_MpsscvRulePolicy,
    iPolicyChange_WfpIPSecPolicy,
    iPolicyChange_Others,

    iAccountManagement_UserAccount,
    iAccountManagement_ComputerAccount,
    iAccountManagement_SecurityGroup,
    iAccountManagement_DistributionGroup,
    iAccountManagement_ApplicationGroup,
    iAccountManagement_Others,

    iDSAccess_DSAccess,
    iDSAccess_AdAuditChanges,
    iDS_Replication,
    iDS_DetailedReplication,

    iAccountLogon_CredentialValidation,
    iAccountLogon_Kerberos,
    iAccountLogon_Others,
    iAccountLogon_KerbCredentialValidation,

    iUnknownSubCategory = 999
} POLICY_AUDIT_EVENT_TYPE_EX, *PPOLICY_AUDIT_EVENT_TYPE_EX;

typedef enum _POLICY_AUDIT_EVENT_TYPE {
    AuditCategorySystem = 0,
    AuditCategoryLogon,
    AuditCategoryObjectAccess,
    AuditCategoryPrivilegeUse,
    AuditCategoryDetailedTracking,
    AuditCategoryPolicyChange,
    AuditCategoryAccountManagement,
    AuditCategoryDirectoryServiceAccess,
    AuditCategoryAccountLogon
} POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

#define POLICY_AUDIT_EVENT_UNCHANGED  (0x00000000L)
#define POLICY_AUDIT_EVENT_SUCCESS  (0x00000001L)
#define POLICY_AUDIT_EVENT_FAILURE  (0x00000002L)
#define POLICY_AUDIT_EVENT_NONE  (0x00000004L)

#define POLICY_AUDIT_EVENT_MASK  ( \
    POLICY_AUDIT_EVENT_SUCCESS | \
    POLICY_AUDIT_EVENT_FAILURE | \
    POLICY_AUDIT_EVENT_UNCHANGED | \
    POLICY_AUDIT_EVENT_NONE \
    )

#define LSA_SUCCESS(Error)  ((LONG)(Error) >= 0)

#ifndef _NTLSA_IFS_

NTSTATUS NTAPI LsaRegisterLogonProcess(PLSA_STRING, PHANDLE, PLSA_OPERATIONAL_MODE);
NTSTATUS NTAPI LsaLogonUser(HANDLE, PLSA_STRING, SECURITY_LOGON_TYPE, ULONG, PVOID, ULONG, PTOKEN_GROUPS, PTOKEN_SOURCE, PVOID *, PULONG, PLUID, PHANDLE, PQUOTA_LIMITS, PNTSTATUS);
NTSTATUS NTAPI LsaLookupAuthenticationPackage(HANDLE, PLSA_STRING, PULONG);
NTSTATUS NTAPI LsaFreeReturnBuffer(PVOID);
NTSTATUS NTAPI LsaCallAuthenticationPackage(HANDLE, ULONG, PVOID, ULONG, PVOID *, PULONG, PNTSTATUS);
NTSTATUS NTAPI LsaDeregisterLogonProcess(HANDLE LsaHandle);
NTSTATUS NTAPI LsaConnectUntrusted(PHANDLE LsaHandle);
NTSTATUS LsaInsertProtectedProcessAddress(PVOID BufferAddress, ULONG BufferSize);
NTSTATUS LsaRemoveProtectedProcessAddress(PVOID BufferAddress, ULONG BufferSize);

#endif // _NTLSA_IFS_

typedef NTSTATUS(NTAPI *PFN_LSA_CALL_AUTH_PKG)(HANDLE, ULONG, PVOID, ULONG, PVOID *, PULONG, PNTSTATUS);
typedef NTSTATUS(NTAPI *PFN_LSA_DEREGISTER_PROC)(HANDLE);
typedef NTSTATUS(NTAPI *PFN_LSA_FREE_BUFFER)(PVOID);
typedef NTSTATUS(NTAPI *PFN_LSA_LOGON_USER)(HANDLE, PLSA_STRING, SECURITY_LOGON_TYPE, ULONG, PVOID, ULONG, PTOKEN_GROUPS, PTOKEN_SOURCE, PVOID *, PULONG, PLUID, PHANDLE, PQUOTA_LIMITS, PNTSTATUS);
typedef NTSTATUS(NTAPI *PFN_LOOKUP_AUTH_PKG)(HANDLE, PLSA_STRING, PULONG);
typedef NTSTATUS(NTAPI *PFN_LSA_REGISTER_PROC)(PLSA_STRING, PHANDLE, PLSA_OPERATIONAL_MODE);

typedef struct _LSA_AUTH_CALLBACKS {
    PFN_LSA_CALL_AUTH_PKG LsaCallAuthPkgFn;
    PFN_LSA_DEREGISTER_PROC LsaDeregisterProcFn;
    PFN_LSA_FREE_BUFFER LsaFreeReturnBufferFn;
    PFN_LSA_LOGON_USER LsaLogonUserFn;
    PFN_LOOKUP_AUTH_PKG LsaLookupAuthPkgFn;
    PFN_LSA_REGISTER_PROC LsaRegisterProcFn;
} LSA_AUTH_CALLBACKS, *PLSA_AUTH_CALLBACKS;

typedef CONST LSA_AUTH_CALLBACKS *PCLSA_AUTH_CALLBACKS;

typedef PVOID *PLSA_CLIENT_REQUEST;

typedef enum _LSA_TOKEN_INFORMATION_TYPE {
    LsaTokenInformationNull,
    LsaTokenInformationV1,
    LsaTokenInformationV2,
    LsaTokenInformationV3
} LSA_TOKEN_INFORMATION_TYPE, *PLSA_TOKEN_INFORMATION_TYPE;

typedef struct _LSA_TOKEN_INFORMATION_NULL {
    LARGE_INTEGER ExpirationTime;
    PTOKEN_GROUPS Groups;
} LSA_TOKEN_INFORMATION_NULL, *PLSA_TOKEN_INFORMATION_NULL;

typedef struct _LSA_TOKEN_INFORMATION_V1 {
    LARGE_INTEGER ExpirationTime;
    TOKEN_USER User;
    PTOKEN_GROUPS Groups;
    TOKEN_PRIMARY_GROUP PrimaryGroup;
    PTOKEN_PRIVILEGES Privileges;
    TOKEN_OWNER Owner;
    TOKEN_DEFAULT_DACL DefaultDacl;
} LSA_TOKEN_INFORMATION_V1, *PLSA_TOKEN_INFORMATION_V1;

typedef LSA_TOKEN_INFORMATION_V1 LSA_TOKEN_INFORMATION_V2, *PLSA_TOKEN_INFORMATION_V2;

typedef struct _LSA_TOKEN_INFORMATION_V3 {
    LARGE_INTEGER ExpirationTime;
    TOKEN_USER User;
    PTOKEN_GROUPS Groups;
    TOKEN_PRIMARY_GROUP PrimaryGroup;
    PTOKEN_PRIVILEGES Privileges;
    TOKEN_OWNER Owner;
    TOKEN_DEFAULT_DACL DefaultDacl;
    TOKEN_USER_CLAIMS UserClaims;
    TOKEN_DEVICE_CLAIMS DeviceClaims;
    PTOKEN_GROUPS DeviceGroups;
} LSA_TOKEN_INFORMATION_V3, *PLSA_TOKEN_INFORMATION_V3;

typedef NTSTATUS (NTAPI LSA_CREATE_LOGON_SESSION) (PLUID);
typedef NTSTATUS (NTAPI LSA_DELETE_LOGON_SESSION) (PLUID);
typedef NTSTATUS (NTAPI LSA_ADD_CREDENTIAL) (PLUID, ULONG, PLSA_STRING, PLSA_STRING);
typedef NTSTATUS (NTAPI LSA_GET_CREDENTIALS) (PLUID, ULONG, PULONG, BOOLEAN, PLSA_STRING, PULONG, PLSA_STRING);
typedef NTSTATUS (NTAPI LSA_DELETE_CREDENTIAL) (PLUID, ULONG, PLSA_STRING);
typedef PVOID(NTAPI LSA_ALLOCATE_LSA_HEAP) (ULONG);
typedef VOID (NTAPI LSA_FREE_LSA_HEAP) (PVOID);
typedef PVOID (NTAPI LSA_ALLOCATE_PRIVATE_HEAP) (SIZE_T);
typedef VOID (NTAPI LSA_FREE_PRIVATE_HEAP) (PVOID);
typedef NTSTATUS (NTAPI LSA_ALLOCATE_CLIENT_BUFFER) (PLSA_CLIENT_REQUEST, ULONG, PVOID *);
typedef NTSTATUS (NTAPI LSA_FREE_CLIENT_BUFFER) (PLSA_CLIENT_REQUEST, PVOID);
typedef NTSTATUS (NTAPI LSA_COPY_TO_CLIENT_BUFFER) (PLSA_CLIENT_REQUEST, ULONG, PVOID, PVOID);
typedef NTSTATUS (NTAPI LSA_COPY_FROM_CLIENT_BUFFER) (PLSA_CLIENT_REQUEST, ULONG, PVOID, PVOID);

typedef LSA_CREATE_LOGON_SESSION *PLSA_CREATE_LOGON_SESSION;
typedef LSA_DELETE_LOGON_SESSION *PLSA_DELETE_LOGON_SESSION;
typedef LSA_ADD_CREDENTIAL *PLSA_ADD_CREDENTIAL;
typedef LSA_GET_CREDENTIALS *PLSA_GET_CREDENTIALS;
typedef LSA_DELETE_CREDENTIAL *PLSA_DELETE_CREDENTIAL;
typedef LSA_ALLOCATE_LSA_HEAP *PLSA_ALLOCATE_LSA_HEAP;
typedef LSA_FREE_LSA_HEAP *PLSA_FREE_LSA_HEAP;
typedef LSA_ALLOCATE_PRIVATE_HEAP *PLSA_ALLOCATE_PRIVATE_HEAP;
typedef LSA_FREE_PRIVATE_HEAP *PLSA_FREE_PRIVATE_HEAP;
typedef LSA_ALLOCATE_CLIENT_BUFFER *PLSA_ALLOCATE_CLIENT_BUFFER;
typedef LSA_FREE_CLIENT_BUFFER *PLSA_FREE_CLIENT_BUFFER;
typedef LSA_COPY_TO_CLIENT_BUFFER *PLSA_COPY_TO_CLIENT_BUFFER;
typedef LSA_COPY_FROM_CLIENT_BUFFER *PLSA_COPY_FROM_CLIENT_BUFFER;

typedef struct _LSA_DISPATCH_TABLE {
    PLSA_CREATE_LOGON_SESSION CreateLogonSession;
    PLSA_DELETE_LOGON_SESSION DeleteLogonSession;
    PLSA_ADD_CREDENTIAL AddCredential;
    PLSA_GET_CREDENTIALS GetCredentials;
    PLSA_DELETE_CREDENTIAL DeleteCredential;
    PLSA_ALLOCATE_LSA_HEAP AllocateLsaHeap;
    PLSA_FREE_LSA_HEAP FreeLsaHeap;
    PLSA_ALLOCATE_CLIENT_BUFFER AllocateClientBuffer;
    PLSA_FREE_CLIENT_BUFFER FreeClientBuffer;
    PLSA_COPY_TO_CLIENT_BUFFER CopyToClientBuffer;
    PLSA_COPY_FROM_CLIENT_BUFFER CopyFromClientBuffer;
} LSA_DISPATCH_TABLE, *PLSA_DISPATCH_TABLE;

#define LSA_AP_NAME_INITIALIZE_PACKAGE  "LsaApInitializePackage\0"
#define LSA_AP_NAME_LOGON_USER  "LsaApLogonUser\0"
#define LSA_AP_NAME_LOGON_USER_EX  "LsaApLogonUserEx\0"
#define LSA_AP_NAME_CALL_PACKAGE  "LsaApCallPackage\0"
#define LSA_AP_NAME_LOGON_TERMINATED  "LsaApLogonTerminated\0"
#define LSA_AP_NAME_CALL_PACKAGE_UNTRUSTED  "LsaApCallPackageUntrusted\0"
#define LSA_AP_NAME_CALL_PACKAGE_PASSTHROUGH  "LsaApCallPackagePassthrough\0"

typedef NTSTATUS(NTAPI LSA_AP_INITIALIZE_PACKAGE) (ULONG, PLSA_DISPATCH_TABLE, PLSA_STRING, PLSA_STRING, PLSA_STRING *);
typedef NTSTATUS(NTAPI LSA_AP_LOGON_USER) (PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID *, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, PVOID *, PLSA_UNICODE_STRING *, PLSA_UNICODE_STRING *);
typedef NTSTATUS(NTAPI LSA_AP_LOGON_USER_EX) (PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID *, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, _Outptr_ PVOID *, PUNICODE_STRING *, PUNICODE_STRING *, PUNICODE_STRING *);
typedef NTSTATUS(NTAPI LSA_AP_CALL_PACKAGE) (PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID *, PULONG, PNTSTATUS);
typedef NTSTATUS(NTAPI LSA_AP_CALL_PACKAGE_PASSTHROUGH) (PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID *, PULONG, PNTSTATUS);

typedef VOID(NTAPI LSA_AP_LOGON_TERMINATED) (PLUID);

typedef LSA_AP_CALL_PACKAGE LSA_AP_CALL_PACKAGE_UNTRUSTED;

typedef LSA_AP_INITIALIZE_PACKAGE *PLSA_AP_INITIALIZE_PACKAGE;
typedef LSA_AP_LOGON_USER *PLSA_AP_LOGON_USER;
typedef LSA_AP_LOGON_USER_EX *PLSA_AP_LOGON_USER_EX;
typedef LSA_AP_CALL_PACKAGE *PLSA_AP_CALL_PACKAGE;
typedef LSA_AP_CALL_PACKAGE_PASSTHROUGH *PLSA_AP_CALL_PACKAGE_PASSTHROUGH;
typedef LSA_AP_LOGON_TERMINATED *PLSA_AP_LOGON_TERMINATED;
typedef LSA_AP_CALL_PACKAGE_UNTRUSTED *PLSA_AP_CALL_PACKAGE_UNTRUSTED;

#define POLICY_VIEW_LOCAL_INFORMATION  0x00000001L
#define POLICY_VIEW_AUDIT_INFORMATION  0x00000002L
#define POLICY_GET_PRIVATE_INFORMATION  0x00000004L
#define POLICY_TRUST_ADMIN  0x00000008L
#define POLICY_CREATE_ACCOUNT  0x00000010L
#define POLICY_CREATE_SECRET  0x00000020L
#define POLICY_CREATE_PRIVILEGE  0x00000040L
#define POLICY_SET_DEFAULT_QUOTA_LIMITS  0x00000080L
#define POLICY_SET_AUDIT_REQUIREMENTS  0x00000100L
#define POLICY_AUDIT_LOG_ADMIN  0x00000200L
#define POLICY_SERVER_ADMIN  0x00000400L
#define POLICY_LOOKUP_NAMES  0x00000800L
#define POLICY_NOTIFICATION  0x00001000L

#define POLICY_ALL_ACCESS  ( \
    STANDARD_RIGHTS_REQUIRED |\
    POLICY_VIEW_LOCAL_INFORMATION |\
    POLICY_VIEW_AUDIT_INFORMATION |\
    POLICY_GET_PRIVATE_INFORMATION |\
    POLICY_TRUST_ADMIN |\
    POLICY_CREATE_ACCOUNT |\
    POLICY_CREATE_SECRET |\
    POLICY_CREATE_PRIVILEGE |\
    POLICY_SET_DEFAULT_QUOTA_LIMITS |\
    POLICY_SET_AUDIT_REQUIREMENTS |\
    POLICY_AUDIT_LOG_ADMIN |\
    POLICY_SERVER_ADMIN |\
    POLICY_LOOKUP_NAMES \
    )

#define POLICY_READ  ( \
    STANDARD_RIGHTS_READ |\
    POLICY_VIEW_AUDIT_INFORMATION |\
    POLICY_GET_PRIVATE_INFORMATION \
    )

#define POLICY_WRITE  ( \
    STANDARD_RIGHTS_WRITE | \
    POLICY_TRUST_ADMIN | \
    POLICY_CREATE_ACCOUNT | \
    POLICY_CREATE_SECRET | \
    POLICY_CREATE_PRIVILEGE | \
    POLICY_SET_DEFAULT_QUOTA_LIMITS | \
    POLICY_SET_AUDIT_REQUIREMENTS | \
    POLICY_AUDIT_LOG_ADMIN | \
    POLICY_SERVER_ADMIN \
    )

#define POLICY_EXECUTE  ( \
    STANDARD_RIGHTS_EXECUTE | \
    POLICY_VIEW_LOCAL_INFORMATION | \
    POLICY_LOOKUP_NAMES \
    )

typedef struct _LSA_TRANSLATED_SID {
    SID_NAME_USE Use;
    ULONG RelativeId;
    LONG DomainIndex;
} LSA_TRANSLATED_SID, *PLSA_TRANSLATED_SID;

typedef ULONG POLICY_SYSTEM_ACCESS_MODE, *PPOLICY_SYSTEM_ACCESS_MODE;

#define POLICY_MODE_INTERACTIVE  SECURITY_ACCESS_INTERACTIVE_LOGON
#define POLICY_MODE_NETWORK  SECURITY_ACCESS_NETWORK_LOGON
#define POLICY_MODE_BATCH  SECURITY_ACCESS_BATCH_LOGON
#define POLICY_MODE_SERVICE  SECURITY_ACCESS_SERVICE_LOGON
#define POLICY_MODE_PROXY  SECURITY_ACCESS_PROXY_LOGON
#define POLICY_MODE_DENY_INTERACTIVE  SECURITY_ACCESS_DENY_INTERACTIVE_LOGON
#define POLICY_MODE_DENY_NETWORK  SECURITY_ACCESS_DENY_NETWORK_LOGON
#define POLICY_MODE_DENY_BATCH  SECURITY_ACCESS_DENY_BATCH_LOGON
#define POLICY_MODE_DENY_SERVICE  SECURITY_ACCESS_DENY_SERVICE_LOGON
#define POLICY_MODE_REMOTE_INTERACTIVE  SECURITY_ACCESS_REMOTE_INTERACTIVE_LOGON
#define POLICY_MODE_DENY_REMOTE_INTERACTIVE  SECURITY_ACCESS_DENY_REMOTE_INTERACTIVE_LOGON

#define POLICY_MODE_ALL  ( \
    POLICY_MODE_INTERACTIVE | \
    POLICY_MODE_NETWORK | \
    POLICY_MODE_BATCH | \
    POLICY_MODE_SERVICE | \
    POLICY_MODE_PROXY | \
    POLICY_MODE_DENY_INTERACTIVE | \
    POLICY_MODE_DENY_NETWORK | \
    SECURITY_ACCESS_DENY_BATCH_LOGON | \
    SECURITY_ACCESS_DENY_SERVICE_LOGON | \
    POLICY_MODE_REMOTE_INTERACTIVE | \
    POLICY_MODE_DENY_REMOTE_INTERACTIVE \
    )

#define POLICY_MODE_ALL_NT4  ( \
    POLICY_MODE_INTERACTIVE | \
    POLICY_MODE_NETWORK | \
    POLICY_MODE_BATCH | \
    POLICY_MODE_SERVICE | \
    POLICY_MODE_PROXY \
    )

typedef enum _POLICY_LSA_SERVER_ROLE {
    PolicyServerRoleBackup = 2,
    PolicyServerRolePrimary
} POLICY_LSA_SERVER_ROLE, *PPOLICY_LSA_SERVER_ROLE;

#if (_WIN32_WINNT < 0x0502)
typedef enum _POLICY_SERVER_ENABLE_STATE {
    PolicyServerEnabled = 2,
    PolicyServerDisabled
} POLICY_SERVER_ENABLE_STATE, *PPOLICY_SERVER_ENABLE_STATE;
#endif /* _WIN32_WINNT < 0x0502 */

typedef ULONG POLICY_AUDIT_EVENT_OPTIONS, *PPOLICY_AUDIT_EVENT_OPTIONS;

typedef struct _POLICY_PRIVILEGE_DEFINITION {
    LSA_UNICODE_STRING Name;
    LUID LocalValue;
} POLICY_PRIVILEGE_DEFINITION, *PPOLICY_PRIVILEGE_DEFINITION;

#define LSA_LOOKUP_ISOLATED_AS_LOCAL  0x80000000
#define LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID  0x80000000
#define LSA_LOOKUP_PREFER_INTERNET_NAMES  0x40000000 

typedef enum _POLICY_INFORMATION_CLASS {
    PolicyAuditLogInformation = 1,
    PolicyAuditEventsInformation,
    PolicyPrimaryDomainInformation,
    PolicyPdAccountInformation,
    PolicyAccountDomainInformation,
    PolicyLsaServerRoleInformation,
    PolicyReplicaSourceInformation,
    PolicyDefaultQuotaInformation,
    PolicyModificationInformation,
    PolicyAuditFullSetInformation,
    PolicyAuditFullQueryInformation,
    PolicyDnsDomainInformation,
    PolicyDnsDomainInformationInt,
    PolicyLocalAccountDomainInformation,
    PolicyLastEntry
} POLICY_INFORMATION_CLASS, *PPOLICY_INFORMATION_CLASS;

typedef struct _POLICY_AUDIT_LOG_INFO {
    ULONG AuditLogPercentFull;
    ULONG MaximumLogSize;
    LARGE_INTEGER AuditRetentionPeriod;
    BOOLEAN AuditLogFullShutdownInProgress;
    LARGE_INTEGER TimeToShutdown;
    ULONG NextAuditRecordId;
} POLICY_AUDIT_LOG_INFO, *PPOLICY_AUDIT_LOG_INFO;

typedef struct _POLICY_AUDIT_EVENTS_INFO {
    BOOLEAN AuditingMode;
    PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
    ULONG MaximumAuditEventCount;
} POLICY_AUDIT_EVENTS_INFO, *PPOLICY_AUDIT_EVENTS_INFO;

typedef struct _POLICY_AUDIT_SUBCATEGORIES_INFO {
    ULONG MaximumSubCategoryCount;
    PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
} POLICY_AUDIT_SUBCATEGORIES_INFO, *PPOLICY_AUDIT_SUBCATEGORIES_INFO;

typedef struct _POLICY_AUDIT_CATEGORIES_INFO {
    ULONG MaximumCategoryCount;
    PPOLICY_AUDIT_SUBCATEGORIES_INFO SubCategoriesInfo;
} POLICY_AUDIT_CATEGORIES_INFO, *PPOLICY_AUDIT_CATEGORIES_INFO;

#define PER_USER_POLICY_UNCHANGED  (0x00)
#define PER_USER_AUDIT_SUCCESS_INCLUDE  (0x01)
#define PER_USER_AUDIT_SUCCESS_EXCLUDE  (0x02)
#define PER_USER_AUDIT_FAILURE_INCLUDE  (0x04)
#define PER_USER_AUDIT_FAILURE_EXCLUDE  (0x08)
#define PER_USER_AUDIT_NONE  (0x10)


#define VALID_PER_USER_AUDIT_POLICY_FLAG  ( \
    PER_USER_AUDIT_SUCCESS_INCLUDE | \
    PER_USER_AUDIT_SUCCESS_EXCLUDE | \
    PER_USER_AUDIT_FAILURE_INCLUDE | \
    PER_USER_AUDIT_FAILURE_EXCLUDE | \
    PER_USER_AUDIT_NONE \
    )

typedef struct _POLICY_PRIMARY_DOMAIN_INFO {
    LSA_UNICODE_STRING Name;
    PSID Sid;
} POLICY_PRIMARY_DOMAIN_INFO, *PPOLICY_PRIMARY_DOMAIN_INFO;

typedef struct _POLICY_PD_ACCOUNT_INFO {
    LSA_UNICODE_STRING Name;
} POLICY_PD_ACCOUNT_INFO, *PPOLICY_PD_ACCOUNT_INFO;

typedef struct _POLICY_LSA_SERVER_ROLE_INFO {
    POLICY_LSA_SERVER_ROLE LsaServerRole;
} POLICY_LSA_SERVER_ROLE_INFO, *PPOLICY_LSA_SERVER_ROLE_INFO;

typedef struct _POLICY_REPLICA_SOURCE_INFO {
    LSA_UNICODE_STRING ReplicaSource;
    LSA_UNICODE_STRING ReplicaAccountName;
} POLICY_REPLICA_SOURCE_INFO, *PPOLICY_REPLICA_SOURCE_INFO;

typedef struct _POLICY_DEFAULT_QUOTA_INFO {
    QUOTA_LIMITS QuotaLimits;
} POLICY_DEFAULT_QUOTA_INFO, *PPOLICY_DEFAULT_QUOTA_INFO;

typedef struct _POLICY_MODIFICATION_INFO {
    LARGE_INTEGER ModifiedId;
    LARGE_INTEGER DatabaseCreationTime;
} POLICY_MODIFICATION_INFO, *PPOLICY_MODIFICATION_INFO;

typedef struct _POLICY_AUDIT_FULL_SET_INFO {
    BOOLEAN ShutDownOnFull;
} POLICY_AUDIT_FULL_SET_INFO, *PPOLICY_AUDIT_FULL_SET_INFO;

typedef struct _POLICY_AUDIT_FULL_QUERY_INFO {
    BOOLEAN ShutDownOnFull;
    BOOLEAN LogIsFull;
} POLICY_AUDIT_FULL_QUERY_INFO, *PPOLICY_AUDIT_FULL_QUERY_INFO;

typedef enum _POLICY_DOMAIN_INFORMATION_CLASS {
#if (_WIN32_WINNT <= 0x0500)
    PolicyDomainQualityOfServiceInformation = 1,
#endif /* _WIN32_WINNT <= 0x0500 */
    PolicyDomainEfsInformation = 2,
    PolicyDomainKerberosTicketInformation
} POLICY_DOMAIN_INFORMATION_CLASS, *PPOLICY_DOMAIN_INFORMATION_CLASS;

#if (_WIN32_WINNT < 0x0502)

#define POLICY_QOS_SCHANNEL_REQUIRED  0x00000001
#define POLICY_QOS_OUTBOUND_INTEGRITY  0x00000002
#define POLICY_QOS_OUTBOUND_CONFIDENTIALITY  0x00000004
#define POLICY_QOS_INBOUND_INTEGRITY  0x00000008
#define POLICY_QOS_INBOUND_CONFIDENTIALITY  0x00000010
#define POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE  0x00000020
#define POLICY_QOS_RAS_SERVER_ALLOWED  0x00000040
#define POLICY_QOS_DHCP_SERVER_ALLOWED  0x00000080

#endif /* _WIN32_WINNT < 0x0502 */

#if (_WIN32_WINNT == 0x0500)
typedef struct _POLICY_DOMAIN_QUALITY_OF_SERVICE_INFO {
    ULONG QualityOfService;
} POLICY_DOMAIN_QUALITY_OF_SERVICE_INFO, *PPOLICY_DOMAIN_QUALITY_OF_SERVICE_INFO;
#endif /* _WIN32_WINNT == 0x0500 */

typedef struct _POLICY_DOMAIN_EFS_INFO {
    ULONG InfoLength;
    PUCHAR EfsBlob;
} POLICY_DOMAIN_EFS_INFO, *PPOLICY_DOMAIN_EFS_INFO;

#define POLICY_KERBEROS_VALIDATE_CLIENT  0x00000080

typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO {
    ULONG AuthenticationOptions;
    LARGE_INTEGER MaxServiceTicketAge;
    LARGE_INTEGER MaxTicketAge;
    LARGE_INTEGER MaxRenewAge;
    LARGE_INTEGER MaxClockSkew;
    LARGE_INTEGER Reserved;
} POLICY_DOMAIN_KERBEROS_TICKET_INFO, *PPOLICY_DOMAIN_KERBEROS_TICKET_INFO;

typedef enum _POLICY_NOTIFICATION_INFORMATION_CLASS {
    PolicyNotifyAuditEventsInformation = 1,
    PolicyNotifyAccountDomainInformation,
    PolicyNotifyServerRoleInformation,
    PolicyNotifyDnsDomainInformation,
    PolicyNotifyDomainEfsInformation,
    PolicyNotifyDomainKerberosTicketInformation,
    PolicyNotifyMachineAccountPasswordInformation,
    PolicyNotifyGlobalSaclInformation,
    PolicyNotifyMax
} POLICY_NOTIFICATION_INFORMATION_CLASS, *PPOLICY_NOTIFICATION_INFORMATION_CLASS;

#define ACCOUNT_VIEW  0x00000001L
#define ACCOUNT_ADJUST_PRIVILEGES  0x00000002L
#define ACCOUNT_ADJUST_QUOTAS  0x00000004L
#define ACCOUNT_ADJUST_SYSTEM_ACCESS  0x00000008L

#define ACCOUNT_ALL_ACCESS  ( \
    STANDARD_RIGHTS_REQUIRED | \
    ACCOUNT_VIEW | \
    ACCOUNT_ADJUST_PRIVILEGES  |\
    ACCOUNT_ADJUST_QUOTAS | \
    ACCOUNT_ADJUST_SYSTEM_ACCESS \
    )

#define ACCOUNT_READ  ( \
    STANDARD_RIGHTS_READ | \
    ACCOUNT_VIEW \
    )

#define ACCOUNT_WRITE  ( \
    STANDARD_RIGHTS_WRITE | \
    ACCOUNT_ADJUST_PRIVILEGES | \
    ACCOUNT_ADJUST_QUOTAS | \
    ACCOUNT_ADJUST_SYSTEM_ACCESS \
    )

#define ACCOUNT_EXECUTE  (STANDARD_RIGHTS_EXECUTE)

typedef PVOID LSA_HANDLE, *PLSA_HANDLE;

#define TRUSTED_QUERY_DOMAIN_NAME  0x00000001L
#define TRUSTED_QUERY_CONTROLLERS  0x00000002L
#define TRUSTED_SET_CONTROLLERS  0x00000004L
#define TRUSTED_QUERY_POSIX  0x00000008L
#define TRUSTED_SET_POSIX  0x00000010L
#define TRUSTED_SET_AUTH  0x00000020L
#define TRUSTED_QUERY_AUTH  0x00000040L


#define TRUSTED_ALL_ACCESS  ( \
    STANDARD_RIGHTS_REQUIRED | \
    TRUSTED_QUERY_DOMAIN_NAME | \
    TRUSTED_QUERY_CONTROLLERS | \
    TRUSTED_SET_CONTROLLERS | \
    TRUSTED_QUERY_POSIX | \
    TRUSTED_SET_POSIX | \
    TRUSTED_SET_AUTH | \
    TRUSTED_QUERY_AUTH \
    )

#define TRUSTED_READ  ( \
    STANDARD_RIGHTS_READ | \
    TRUSTED_QUERY_DOMAIN_NAME \
    )

#define TRUSTED_WRITE  ( \
    STANDARD_RIGHTS_WRITE | \
    TRUSTED_SET_CONTROLLERS | \
    TRUSTED_SET_POSIX | \
    TRUSTED_SET_AUTH \
    )

#define TRUSTED_EXECUTE  ( \
    STANDARD_RIGHTS_EXECUTE |\
    TRUSTED_QUERY_CONTROLLERS |\
    TRUSTED_QUERY_POSIX \
    )

typedef enum _TRUSTED_INFORMATION_CLASS {
    TrustedDomainNameInformation = 1,
    TrustedControllersInformation,
    TrustedPosixOffsetInformation,
    TrustedPasswordInformation,
    TrustedDomainInformationBasic,
    TrustedDomainInformationEx,
    TrustedDomainAuthInformation,
    TrustedDomainFullInformation,
    TrustedDomainAuthInformationInternal,
    TrustedDomainFullInformationInternal,
    TrustedDomainInformationEx2Internal,
    TrustedDomainFullInformation2Internal,
    TrustedDomainSupportedEncryptionTypes,
} TRUSTED_INFORMATION_CLASS, *PTRUSTED_INFORMATION_CLASS;

typedef struct _TRUSTED_DOMAIN_NAME_INFO {
    LSA_UNICODE_STRING Name;
} TRUSTED_DOMAIN_NAME_INFO, *PTRUSTED_DOMAIN_NAME_INFO;

typedef struct _TRUSTED_CONTROLLERS_INFO {
    ULONG Entries;
    PLSA_UNICODE_STRING Names;
} TRUSTED_CONTROLLERS_INFO, *PTRUSTED_CONTROLLERS_INFO;

typedef struct _TRUSTED_POSIX_OFFSET_INFO {
    ULONG Offset;
} TRUSTED_POSIX_OFFSET_INFO, *PTRUSTED_POSIX_OFFSET_INFO;

typedef struct _TRUSTED_PASSWORD_INFO {
    LSA_UNICODE_STRING Password;
    LSA_UNICODE_STRING OldPassword;
} TRUSTED_PASSWORD_INFO, *PTRUSTED_PASSWORD_INFO;

typedef LSA_TRUST_INFORMATION TRUSTED_DOMAIN_INFORMATION_BASIC;
typedef PLSA_TRUST_INFORMATION PTRUSTED_DOMAIN_INFORMATION_BASIC;

#define TRUST_DIRECTION_DISABLED  0x00000000
#define TRUST_DIRECTION_INBOUND  0x00000001
#define TRUST_DIRECTION_OUTBOUND  0x00000002
#define TRUST_DIRECTION_BIDIRECTIONAL   (TRUST_DIRECTION_INBOUND | TRUST_DIRECTION_OUTBOUND)

#define TRUST_TYPE_DOWNLEVEL  0x00000001
#define TRUST_TYPE_UPLEVEL  0x00000002
#define TRUST_TYPE_MIT  0x00000003

#if (_WIN32_WINNT < 0x0502)
#define TRUST_TYPE_DCE  0x00000004
#endif /* _WIN32_WINNT < 0x0502 */

#define TRUST_ATTRIBUTE_NON_TRANSITIVE  0x00000001
#define TRUST_ATTRIBUTE_UPLEVEL_ONLY  0x00000002
#if (_WIN32_WINNT == 0x0500)
#define TRUST_ATTRIBUTE_TREE_PARENT  0x00400000
#define TRUST_ATTRIBUTE_TREE_ROOT  0x00800000
#define TRUST_ATTRIBUTES_VALID  0xFF02FFFF
#endif /* _WIN32_WINNT == 0x0500 */

#if (_WIN32_WINNT < 0x0502)
#define TRUST_ATTRIBUTE_FILTER_SIDS  0x00000004
#else /* _WIN32_WINNT >= 0x0502 */
#define TRUST_ATTRIBUTE_QUARANTINED_DOMAIN  0x00000004
#endif /* _WIN32_WINNT >= 0x0502 */

#if (_WIN32_WINNT >= 0x0501)
#define TRUST_ATTRIBUTE_FOREST_TRANSITIVE  0x00000008
#if (_WIN32_WINNT >= 0x0502)
#define TRUST_ATTRIBUTE_CROSS_ORGANIZATION  0x00000010
#define TRUST_ATTRIBUTE_WITHIN_FOREST  0x00000020
#define TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL  0x00000040
#if (_WIN32_WINNT >= 0x0600)
#define TRUST_ATTRIBUTE_TRUST_USES_RC4_ENCRYPTION  0x00000080
#define TRUST_ATTRIBUTE_TRUST_USES_AES_KEYS  0x00000100
#endif /* _WIN32_WINNT >= 0x0600 */
#if (_WIN32_WINNT >= 0x0602)
#define TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION  0x00000200
#define TRUST_ATTRIBUTE_PIM_TRUST  0x00000400
#endif /* _WIN32_WINNT >= 0x0602 */
#endif /* _WIN32_WINNT >= 0x0502 */
#define TRUST_ATTRIBUTES_VALID  0xFF03FFFF
#endif /* _WIN32_WINNT >= 0x0501 */
#define TRUST_ATTRIBUTES_USER  0xFF000000

typedef struct _TRUSTED_DOMAIN_INFORMATION_EX {
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING FlatName;
    PSID  Sid;
    ULONG TrustDirection;
    ULONG TrustType;
    ULONG TrustAttributes;
} TRUSTED_DOMAIN_INFORMATION_EX, *PTRUSTED_DOMAIN_INFORMATION_EX;

typedef struct _TRUSTED_DOMAIN_INFORMATION_EX2 {
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING FlatName;
    PSID  Sid;
    ULONG TrustDirection;
    ULONG TrustType;
    ULONG TrustAttributes;
    ULONG ForestTrustLength;
    PUCHAR ForestTrustInfo;
} TRUSTED_DOMAIN_INFORMATION_EX2, *PTRUSTED_DOMAIN_INFORMATION_EX2;

#define TRUST_AUTH_TYPE_NONE  0
#define TRUST_AUTH_TYPE_NT4OWF  1
#define TRUST_AUTH_TYPE_CLEAR  2
#define TRUST_AUTH_TYPE_VERSION  3

typedef struct _LSA_AUTH_INFORMATION {
    LARGE_INTEGER LastUpdateTime;
    ULONG AuthType;
    ULONG AuthInfoLength;
    PUCHAR AuthInfo;
} LSA_AUTH_INFORMATION, *PLSA_AUTH_INFORMATION;

typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION {
    ULONG IncomingAuthInfos;
    PLSA_AUTH_INFORMATION IncomingAuthenticationInformation;
    PLSA_AUTH_INFORMATION IncomingPreviousAuthenticationInformation;
    ULONG OutgoingAuthInfos;
    PLSA_AUTH_INFORMATION OutgoingAuthenticationInformation;
    PLSA_AUTH_INFORMATION OutgoingPreviousAuthenticationInformation;
} TRUSTED_DOMAIN_AUTH_INFORMATION, *PTRUSTED_DOMAIN_AUTH_INFORMATION;

typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION {
    TRUSTED_DOMAIN_INFORMATION_EX Information;
    TRUSTED_POSIX_OFFSET_INFO PosixOffset;
    TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
} TRUSTED_DOMAIN_FULL_INFORMATION, *PTRUSTED_DOMAIN_FULL_INFORMATION;

typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION2 {
    TRUSTED_DOMAIN_INFORMATION_EX2 Information;
    TRUSTED_POSIX_OFFSET_INFO PosixOffset;
    TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
} TRUSTED_DOMAIN_FULL_INFORMATION2, *PTRUSTED_DOMAIN_FULL_INFORMATION2;

typedef struct _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES {
    ULONG SupportedEncryptionTypes;
} TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES, *PTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;

typedef enum {
    ForestTrustTopLevelName,
    ForestTrustTopLevelNameEx,
    ForestTrustDomainInfo,
    ForestTrustRecordTypeLast = ForestTrustDomainInfo
} LSA_FOREST_TRUST_RECORD_TYPE;

#if (_WIN32_WINNT < 0x0502)
#define LSA_FOREST_TRUST_RECORD_TYPE_UNRECOGNIZED  0x80000000
#endif /* _WIN32_WINNT < 0x0502 */

#define LSA_FTRECORD_DISABLED_REASONS  (0x0000FFFFL)

#define LSA_TLN_DISABLED_NEW  (0x00000001L)
#define LSA_TLN_DISABLED_ADMIN  (0x00000002L)
#define LSA_TLN_DISABLED_CONFLICT  (0x00000004L)

#define LSA_SID_DISABLED_ADMIN  (0x00000001L)
#define LSA_SID_DISABLED_CONFLICT  (0x00000002L)
#define LSA_NB_DISABLED_ADMIN  (0x00000004L)
#define LSA_NB_DISABLED_CONFLICT  (0x00000008L)

typedef struct _LSA_FOREST_TRUST_DOMAIN_INFO {
    PSID Sid;
    LSA_UNICODE_STRING DnsName;
    LSA_UNICODE_STRING NetbiosName;
} LSA_FOREST_TRUST_DOMAIN_INFO, *PLSA_FOREST_TRUST_DOMAIN_INFO;

#if (_WIN32_WINNT >= 0x0502)
#define MAX_FOREST_TRUST_BINARY_DATA_SIZE  (128 * 1024)
#endif /* _WIN32_WINNT >= 0x0502 */

typedef struct _LSA_FOREST_TRUST_BINARY_DATA {
    ULONG Length;
    PUCHAR Buffer;
} LSA_FOREST_TRUST_BINARY_DATA, *PLSA_FOREST_TRUST_BINARY_DATA;

typedef struct _LSA_FOREST_TRUST_RECORD {
    ULONG Flags;
    LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
    LARGE_INTEGER Time;
    union {
        LSA_UNICODE_STRING TopLevelName;
        LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
        LSA_FOREST_TRUST_BINARY_DATA Data;
    } ForestTrustData;
} LSA_FOREST_TRUST_RECORD, *PLSA_FOREST_TRUST_RECORD;

#if (_WIN32_WINNT >= 0x0502)
#define MAX_RECORDS_IN_FOREST_TRUST_INFO  4000
#endif /* _WIN32_WINNT >= 0x0502 */

typedef struct _LSA_FOREST_TRUST_INFORMATION {
    ULONG RecordCount;
    PLSA_FOREST_TRUST_RECORD *Entries;
} LSA_FOREST_TRUST_INFORMATION, *PLSA_FOREST_TRUST_INFORMATION;

typedef enum {
    CollisionTdo,
    CollisionXref,
    CollisionOther
} LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;

typedef struct _LSA_FOREST_TRUST_COLLISION_RECORD {
    ULONG Index;
    LSA_FOREST_TRUST_COLLISION_RECORD_TYPE Type;
    ULONG Flags;
    LSA_UNICODE_STRING Name;
} LSA_FOREST_TRUST_COLLISION_RECORD, *PLSA_FOREST_TRUST_COLLISION_RECORD;

typedef struct _LSA_FOREST_TRUST_COLLISION_INFORMATION {
    ULONG RecordCount;
    PLSA_FOREST_TRUST_COLLISION_RECORD *Entries;
} LSA_FOREST_TRUST_COLLISION_INFORMATION, *PLSA_FOREST_TRUST_COLLISION_INFORMATION;

#define SECRET_SET_VALUE  0x00000001L
#define SECRET_QUERY_VALUE  0x00000002L

#define SECRET_ALL_ACCESS  ( \
    STANDARD_RIGHTS_REQUIRED |\
    SECRET_SET_VALUE |\
    SECRET_QUERY_VALUE \
)

#define SECRET_READ  ( \
    STANDARD_RIGHTS_READ |\
    SECRET_QUERY_VALUE \
)

#define SECRET_WRITE  ( \
    STANDARD_RIGHTS_WRITE | \
    SECRET_SET_VALUE \
)

#define SECRET_EXECUTE  ( \
    STANDARD_RIGHTS_EXECUTE \
)

#define LSA_GLOBAL_SECRET_PREFIX  L"G$"
#define LSA_GLOBAL_SECRET_PREFIX_LENGTH  2

#define LSA_LOCAL_SECRET_PREFIX  L"L$"
#define LSA_LOCAL_SECRET_PREFIX_LENGTH  2

#define LSA_MACHINE_SECRET_PREFIX  L"M$"
#define LSA_MACHINE_SECRET_PREFIX_LENGTH  ((sizeof(LSA_MACHINE_SECRET_PREFIX) - sizeof(WCHAR)) / sizeof(WCHAR))

#define LSA_SECRET_MAXIMUM_COUNT  0x00001000L
#define LSA_SECRET_MAXIMUM_LENGTH  0x00000200L

typedef ULONG LSA_ENUMERATION_HANDLE, *PLSA_ENUMERATION_HANDLE;

typedef struct _LSA_ENUMERATION_INFORMATION {
    PSID Sid;
} LSA_ENUMERATION_INFORMATION, *PLSA_ENUMERATION_INFORMATION;

NTSTATUS NTAPI LsaFreeMemory(PVOID);
NTSTATUS NTAPI LsaClose(LSA_HANDLE);
NTSTATUS NTAPI LsaDelete(LSA_HANDLE);
NTSTATUS NTAPI LsaQuerySecurityObject(LSA_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR *);
NTSTATUS NTAPI LsaSetSecurityObject(LSA_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
NTSTATUS NTAPI LsaChangePassword(PLSA_UNICODE_STRING, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING);

#if (_WIN32_WINNT >= 0x0600)
typedef struct _LSA_LAST_INTER_LOGON_INFO {
    LARGE_INTEGER LastSuccessfulLogon;
    LARGE_INTEGER LastFailedLogon;
    ULONG FailedAttemptCountSinceLastSuccessfulLogon;
} LSA_LAST_INTER_LOGON_INFO, *PLSA_LAST_INTER_LOGON_INFO;
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0501)

typedef struct _SECURITY_LOGON_SESSION_DATA {
    ULONG Size;
    LUID LogonId;
    LSA_UNICODE_STRING UserName;
    LSA_UNICODE_STRING LogonDomain;
    LSA_UNICODE_STRING AuthenticationPackage;
    ULONG LogonType;
    ULONG Session;
    PSID Sid;
    LARGE_INTEGER LogonTime;
    LSA_UNICODE_STRING LogonServer;
    LSA_UNICODE_STRING DnsDomainName;
    LSA_UNICODE_STRING Upn;
#if (_WIN32_WINNT >= 0x0600)
    ULONG UserFlags;
    LSA_LAST_INTER_LOGON_INFO LastLogonInfo;
    LSA_UNICODE_STRING LogonScript;
    LSA_UNICODE_STRING ProfilePath;
    LSA_UNICODE_STRING HomeDirectory;
    LSA_UNICODE_STRING HomeDirectoryDrive;
    LARGE_INTEGER LogoffTime;
    LARGE_INTEGER KickOffTime;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER PasswordCanChange;
    LARGE_INTEGER PasswordMustChange;
#endif /* _WIN32_WINNT >= 0x0600 */
} SECURITY_LOGON_SESSION_DATA, *PSECURITY_LOGON_SESSION_DATA;

NTSTATUS NTAPI LsaEnumerateLogonSessions(PULONG, PLUID *);
NTSTATUS NTAPI LsaGetLogonSessionData(PLUID, PSECURITY_LOGON_SESSION_DATA *);

#endif /* _WIN32_WINNT >= 0x0501 */

NTSTATUS NTAPI LsaOpenPolicy(PLSA_UNICODE_STRING, PLSA_OBJECT_ATTRIBUTES, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaOpenPolicySce(PLSA_UNICODE_STRING, PLSA_OBJECT_ATTRIBUTES, ACCESS_MASK, PLSA_HANDLE);

#define MAXIMUM_CAPES_PER_CAP  0x7F

#define CENTRAL_ACCESS_POLICY_OWNER_RIGHTS_PRESENT_FLAG  0x00000001

#define CENTRAL_ACCESS_POLICY_STAGED_OWNER_RIGHTS_PRESENT_FLAG  0x00000100
#define STAGING_FLAG(Effective)  ((Effective & 0xF) << 8)

#define CENTRAL_ACCESS_POLICY_STAGED_FLAG  0x00010000

#define CENTRAL_ACCESS_POLICY_VALID_FLAG_MASK  ( \
    CENTRAL_ACCESS_POLICY_OWNER_RIGHTS_PRESENT_FLAG | \
    CENTRAL_ACCESS_POLICY_STAGED_OWNER_RIGHTS_PRESENT_FLAG | \
    CENTRAL_ACCESS_POLICY_STAGED_FLAG \
    )

#define LSASETCAPS_RELOAD_FLAG  0x00000001

#define LSASETCAPS_VALID_FLAG_MASK  ( \
    LSASETCAPS_RELOAD_FLAG \
    )

typedef struct _CENTRAL_ACCESS_POLICY_ENTRY {
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING Description;
    LSA_UNICODE_STRING ChangeId;
    ULONG LengthAppliesTo;
    PUCHAR AppliesTo;
    ULONG LengthSD;
    PSECURITY_DESCRIPTOR SD;
    ULONG LengthStagedSD;
    PSECURITY_DESCRIPTOR StagedSD;
    ULONG Flags;
} CENTRAL_ACCESS_POLICY_ENTRY, *PCENTRAL_ACCESS_POLICY_ENTRY;

typedef const CENTRAL_ACCESS_POLICY_ENTRY *PCCENTRAL_ACCESS_POLICY_ENTRY;

typedef struct _CENTRAL_ACCESS_POLICY {
    PSID CAPID;
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING Description;
    LSA_UNICODE_STRING ChangeId;
    ULONG Flags;
    ULONG CAPECount;
    PCENTRAL_ACCESS_POLICY_ENTRY *CAPEs;
} CENTRAL_ACCESS_POLICY, *PCENTRAL_ACCESS_POLICY;

typedef const CENTRAL_ACCESS_POLICY *PCCENTRAL_ACCESS_POLICY;

NTSTATUS NTAPI LsaSetCAPs(PLSA_UNICODE_STRING, ULONG, ULONG);
NTSTATUS NTAPI LsaGetAppliedCAPIDs(PLSA_UNICODE_STRING, PSID **, PULONG);
NTSTATUS NTAPI LsaQueryCAPs(PSID *CAPIDs, ULONG, PCENTRAL_ACCESS_POLICY *, PULONG);
NTSTATUS NTAPI LsaQueryInformationPolicy(LSA_HANDLE, POLICY_INFORMATION_CLASS, PVOID *);
NTSTATUS NTAPI LsaSetInformationPolicy(LSA_HANDLE, POLICY_INFORMATION_CLASS, PVOID);
NTSTATUS NTAPI LsaQueryDomainInformationPolicy(LSA_HANDLE, POLICY_DOMAIN_INFORMATION_CLASS, PVOID *);
NTSTATUS NTAPI LsaSetDomainInformationPolicy(LSA_HANDLE, POLICY_DOMAIN_INFORMATION_CLASS, PVOID);
NTSTATUS NTAPI LsaRegisterPolicyChangeNotification(POLICY_NOTIFICATION_INFORMATION_CLASS, HANDLE);
NTSTATUS NTAPI LsaUnregisterPolicyChangeNotification(POLICY_NOTIFICATION_INFORMATION_CLASS, HANDLE);
NTSTATUS NTAPI LsaClearAuditLog(LSA_HANDLE);
NTSTATUS NTAPI LsaCreateAccount(LSA_HANDLE, PSID, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaEnumerateAccounts(LSA_HANDLE, PLSA_ENUMERATION_HANDLE, PVOID *, ULONG, PULONG);
NTSTATUS NTAPI LsaCreateTrustedDomain(LSA_HANDLE, PLSA_TRUST_INFORMATION, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaEnumerateTrustedDomains(LSA_HANDLE, PLSA_ENUMERATION_HANDLE, PVOID *, ULONG, PULONG);
NTSTATUS NTAPI LsaEnumeratePrivileges(LSA_HANDLE, PLSA_ENUMERATION_HANDLE, PVOID *, ULONG, PULONG);
NTSTATUS NTAPI LsaLookupNames(LSA_HANDLE, ULONG, PLSA_UNICODE_STRING, PLSA_REFERENCED_DOMAIN_LIST *, PLSA_TRANSLATED_SID *);
#if (_WIN32_WINNT >= 0x0501)
NTSTATUS NTAPI LsaLookupNames2(LSA_HANDLE, ULONG, ULONG, PLSA_UNICODE_STRING, PLSA_REFERENCED_DOMAIN_LIST *, PLSA_TRANSLATED_SID2 *);
#endif /* _WIN32_WINNT >= 0x0501 */
NTSTATUS NTAPI LsaLookupSids(LSA_HANDLE, ULONG, PSID *, PLSA_REFERENCED_DOMAIN_LIST *, PLSA_TRANSLATED_NAME *);
NTSTATUS       LsaLookupSids2(LSA_HANDLE, ULONG, ULONG, PSID *, PLSA_REFERENCED_DOMAIN_LIST *, PLSA_TRANSLATED_NAME *);
NTSTATUS NTAPI LsaCreateSecret(LSA_HANDLE, PLSA_UNICODE_STRING, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaOpenAccount(LSA_HANDLE, PSID, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaEnumeratePrivilegesOfAccount(LSA_HANDLE, PPRIVILEGE_SET *);
NTSTATUS NTAPI LsaAddPrivilegesToAccount(LSA_HANDLE, PPRIVILEGE_SET);
NTSTATUS NTAPI LsaRemovePrivilegesFromAccount(LSA_HANDLE, BOOLEAN, PPRIVILEGE_SET);
NTSTATUS NTAPI LsaGetQuotasForAccount(LSA_HANDLE, PQUOTA_LIMITS);
NTSTATUS NTAPI LsaSetQuotasForAccount(LSA_HANDLE, PQUOTA_LIMITS);
NTSTATUS NTAPI LsaGetSystemAccessAccount(LSA_HANDLE, PULONG);
NTSTATUS NTAPI LsaSetSystemAccessAccount(LSA_HANDLE, ULONG);
NTSTATUS NTAPI LsaOpenTrustedDomain(LSA_HANDLE, PSID, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaQueryInfoTrustedDomain(LSA_HANDLE, TRUSTED_INFORMATION_CLASS, PVOID *);
NTSTATUS NTAPI LsaSetInformationTrustedDomain(LSA_HANDLE, TRUSTED_INFORMATION_CLASS, PVOID);
NTSTATUS NTAPI LsaOpenSecret(LSA_HANDLE, PLSA_UNICODE_STRING, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaSetSecret(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING);
NTSTATUS NTAPI LsaQuerySecret(LSA_HANDLE, PLSA_UNICODE_STRING *, PLARGE_INTEGER, PLSA_UNICODE_STRING *, PLARGE_INTEGER);
NTSTATUS NTAPI LsaLookupPrivilegeValue(LSA_HANDLE, PLSA_UNICODE_STRING, PLUID);
NTSTATUS NTAPI LsaLookupPrivilegeName(LSA_HANDLE, PLUID, PLSA_UNICODE_STRING *);
NTSTATUS NTAPI LsaLookupPrivilegeDisplayName(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING *, PSHORT);
NTSTATUS       LsaGetUserName(PLSA_UNICODE_STRING *, PLSA_UNICODE_STRING *);
NTSTATUS       LsaGetRemoteUserName(PLSA_UNICODE_STRING, PLSA_UNICODE_STRING *, PLSA_UNICODE_STRING *);

#define SE_INTERACTIVE_LOGON_NAME  TEXT("SeInteractiveLogonRight")
#define SE_NETWORK_LOGON_NAME  TEXT("SeNetworkLogonRight")
#define SE_BATCH_LOGON_NAME  TEXT("SeBatchLogonRight")
#define SE_SERVICE_LOGON_NAME  TEXT("SeServiceLogonRight")
#define SE_DENY_INTERACTIVE_LOGON_NAME  TEXT("SeDenyInteractiveLogonRight")
#define SE_DENY_NETWORK_LOGON_NAME  TEXT("SeDenyNetworkLogonRight")
#define SE_DENY_BATCH_LOGON_NAME  TEXT("SeDenyBatchLogonRight")
#define SE_DENY_SERVICE_LOGON_NAME  TEXT("SeDenyServiceLogonRight")
#if (_WIN32_WINNT >= 0x0501)
#define SE_REMOTE_INTERACTIVE_LOGON_NAME  TEXT("SeRemoteInteractiveLogonRight")
#define SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME TEXT("SeDenyRemoteInteractiveLogonRight")
#endif /* _WIN32_WINNT >= 0x0501 */

NTSTATUS NTAPI LsaEnumerateAccountsWithUserRight(LSA_HANDLE, PLSA_UNICODE_STRING, PVOID *, PULONG);
NTSTATUS NTAPI LsaEnumerateAccountRights(LSA_HANDLE, PSID, PLSA_UNICODE_STRING *, PULONG);
NTSTATUS NTAPI LsaAddAccountRights(LSA_HANDLE, PSID, PLSA_UNICODE_STRING, ULONG);
NTSTATUS NTAPI LsaRemoveAccountRights(LSA_HANDLE, PSID, BOOLEAN, PLSA_UNICODE_STRING, ULONG);
NTSTATUS NTAPI LsaOpenTrustedDomainByName(LSA_HANDLE, PLSA_UNICODE_STRING, ACCESS_MASK, PLSA_HANDLE);
NTSTATUS NTAPI LsaQueryTrustedDomainInfo(LSA_HANDLE, PSID, TRUSTED_INFORMATION_CLASS, PVOID *);
NTSTATUS NTAPI LsaSetTrustedDomainInformation(LSA_HANDLE, PSID, TRUSTED_INFORMATION_CLASS, PVOID);
NTSTATUS NTAPI LsaDeleteTrustedDomain(LSA_HANDLE, PSID);
NTSTATUS NTAPI LsaQueryTrustedDomainInfoByName(LSA_HANDLE, PLSA_UNICODE_STRING, TRUSTED_INFORMATION_CLASS, PVOID *);
NTSTATUS NTAPI LsaSetTrustedDomainInfoByName(LSA_HANDLE, PLSA_UNICODE_STRING, TRUSTED_INFORMATION_CLASS, PVOID);
NTSTATUS NTAPI LsaEnumerateTrustedDomainsEx(LSA_HANDLE, PLSA_ENUMERATION_HANDLE, PVOID *, ULONG, PULONG);
NTSTATUS NTAPI LsaCreateTrustedDomainEx(LSA_HANDLE, PTRUSTED_DOMAIN_INFORMATION_EX, PTRUSTED_DOMAIN_AUTH_INFORMATION, ACCESS_MASK, PLSA_HANDLE);

#if (_WIN32_WINNT >= 0x0501)
NTSTATUS NTAPI LsaQueryForestTrustInformation(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_FOREST_TRUST_INFORMATION *);
NTSTATUS NTAPI LsaSetForestTrustInformation(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_FOREST_TRUST_INFORMATION, BOOLEAN, PLSA_FOREST_TRUST_COLLISION_INFORMATION *);
#ifdef TESTING_MATCHING_ROUTINE
NTSTATUS NTAPI LsaForestTrustFindMatch(LSA_HANDLE, ULONG, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING *);
#endif /* TESTING_MATCHING_ROUTINE */
#endif /* _WIN32_WINNT >= 0x0501 */

NTSTATUS NTAPI LsaStorePrivateData(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING);
NTSTATUS NTAPI LsaRetrievePrivateData(LSA_HANDLE, PLSA_UNICODE_STRING, PLSA_UNICODE_STRING *);
ULONG NTAPI LsaNtStatusToWinError(NTSTATUS);

#ifndef _NTLSA_IFS_
#define _NTLSA_IFS_
#endif

enum NEGOTIATE_MESSAGES {
    NegEnumPackagePrefixes = 0,
    NegGetCallerName = 1,
    NegTransferCredentials = 2,
#ifdef _NTDEF_
    NegEnumPackageNames = 3,
#else
    NegMsgReserved1 = 3,
#endif
    NegCallPackageMax
};

#define NEGOTIATE_MAX_PREFIX  32

typedef struct _NEGOTIATE_PACKAGE_PREFIX {
    ULONG_PTR PackageId;
    PVOID PackageDataA;
    PVOID PackageDataW;
    ULONG_PTR PrefixLen;
    UCHAR Prefix[NEGOTIATE_MAX_PREFIX];
} NEGOTIATE_PACKAGE_PREFIX, *PNEGOTIATE_PACKAGE_PREFIX;

typedef struct _NEGOTIATE_PACKAGE_PREFIXES {
    ULONG MessageType;
    ULONG PrefixCount;
    ULONG Offset;
#if(_WIN32_WINNT >= 0x0502)
    ULONG Pad;
#endif /* _WIN32_WINNT >= 0x0502 */
} NEGOTIATE_PACKAGE_PREFIXES, *PNEGOTIATE_PACKAGE_PREFIXES;

typedef struct _NEGOTIATE_CALLER_NAME_REQUEST {
    ULONG MessageType;
    LUID LogonId;
} NEGOTIATE_CALLER_NAME_REQUEST, *PNEGOTIATE_CALLER_NAME_REQUEST;

typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE {
    ULONG MessageType;
    PWSTR CallerName;
} NEGOTIATE_CALLER_NAME_RESPONSE, *PNEGOTIATE_CALLER_NAME_RESPONSE;

typedef struct _NEGOTIATE_PACKAGE_NAMES {
    ULONG NamesCount;
    UNICODE_STRING Names[1];
} NEGOTIATE_PACKAGE_NAMES, *PNEGOTIATE_PACKAGE_NAMES;

#define NEGOTIATE_ALLOW_NTLM  0x10000000
#define NEGOTIATE_NEG_NTLM  0x20000000

typedef struct _NEGOTIATE_PACKAGE_PREFIX_WOW {
    ULONG PackageId;
    ULONG PackageDataA;
    ULONG PackageDataW;
    ULONG PrefixLen;
    UCHAR Prefix[NEGOTIATE_MAX_PREFIX];
} NEGOTIATE_PACKAGE_PREFIX_WOW, *PNEGOTIATE_PACKAGE_PREFIX_WOW;

typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE_WOW {
    ULONG MessageType;
    ULONG CallerName;
} NEGOTIATE_CALLER_NAME_RESPONSE_WOW, *PNEGOTIATE_CALLER_NAME_RESPONSE_WOW;

NTSTATUS NTAPI LsaSetPolicyReplicationHandle(PLSA_HANDLE);

#define MAX_USER_RECORDS  1000

typedef struct _LSA_USER_REGISTRATION_INFO {
    LSA_UNICODE_STRING Sid;
    LSA_UNICODE_STRING DeviceId;
    LSA_UNICODE_STRING Username;
    LSA_UNICODE_STRING Thumbprint;
    LARGE_INTEGER RegistrationTime;
} LSA_USER_REGISTRATION_INFO, *PLSA_USER_REGISTRATION_INFO;

typedef struct _LSA_REGISTRATION_INFO {
    ULONG RegisteredCount;
    PLSA_USER_REGISTRATION_INFO* UserRegistrationInfo;
} LSA_REGISTRATION_INFO, *PLSA_REGISTRATION_INFO;

NTSTATUS NTAPI LsaGetDeviceRegistrationInfo(PLSA_REGISTRATION_INFO *);

typedef enum _LSA_CREDENTIAL_KEY_SOURCE_TYPE {
    eFromPrecomputed = 1,
    eFromClearPassword,
    eFromNtOwf,
} LSA_CREDENTIAL_KEY_SOURCE_TYPE, *PLSA_CREDENTIAL_KEY_SOURCE_TYPE;

NTSTATUS SeciIsProtectedUser(PBOOLEAN);

#endif /* _NTLSA_H */
