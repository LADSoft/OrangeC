#ifndef _PROCESSTHREADSAPI_H
#define _PROCESSTHREADSAPI_H

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

/* ApiSet api-ms-win-core-processthreads-l1 */

/* #include <apiset.h> */
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;

typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

#ifdef UNICODE
typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
#else /* !UNICODE */
typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0400) || (_WIN32_WINDOWS > 0x0400)
WINBASEAPI DWORD WINAPI QueueUserAPC(PAPCFUNC, HANDLE, ULONG_PTR);
#endif /* _WIN32_WINNT >= 0x0400 || _WIN32_WINDOWS > 0x0400 */

WINBASEAPI BOOL WINAPI GetProcessTimes(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
WINBASEAPI HANDLE WINAPI GetCurrentProcess(VOID);
WINBASEAPI DWORD WINAPI GetCurrentProcessId(VOID);
WINBASEAPI DECLSPEC_NORETURN VOID WINAPI ExitProcess(UINT);
WINBASEAPI BOOL WINAPI TerminateProcess(HANDLE, UINT);
WINBASEAPI BOOL WINAPI GetExitCodeProcess(HANDLE, LPDWORD);
WINBASEAPI BOOL WINAPI SwitchToThread(VOID);
WINBASEAPI HANDLE WINAPI CreateThread(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
WINBASEAPI HANDLE WINAPI CreateRemoteThread(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
WINBASEAPI HANDLE WINAPI GetCurrentThread(VOID);
WINBASEAPI DWORD WINAPI GetCurrentThreadId(VOID);
WINBASEAPI HANDLE WINAPI OpenThread(DWORD, BOOL, DWORD);
WINBASEAPI BOOL WINAPI SetThreadPriority(HANDLE, int);
WINBASEAPI BOOL WINAPI SetThreadPriorityBoost(HANDLE, BOOL);
WINBASEAPI BOOL WINAPI GetThreadPriorityBoost(HANDLE, PBOOL);
WINBASEAPI int WINAPI GetThreadPriority(HANDLE);
WINBASEAPI DECLSPEC_NORETURN VOID WINAPI ExitThread(DWORD);
WINBASEAPI BOOL WINAPI TerminateThread(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI GetExitCodeThread(HANDLE, LPDWORD);
WINBASEAPI DWORD WINAPI SuspendThread(HANDLE);
WINBASEAPI DWORD WINAPI ResumeThread(HANDLE);

#ifndef TLS_OUT_OF_INDEXES
#define TLS_OUT_OF_INDEXES  ((DWORD)0xFFFFFFFF)
#endif /* TLS_OUT_OF_INDEXES */

WINBASEAPI DWORD WINAPI TlsAlloc(VOID);
WINBASEAPI LPVOID WINAPI TlsGetValue(DWORD);
WINBASEAPI BOOL WINAPI TlsSetValue(DWORD, LPVOID);
WINBASEAPI BOOL WINAPI TlsFree(DWORD);

WINBASEAPI BOOL WINAPI CreateProcessA(LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION);
WINBASEAPI BOOL WINAPI CreateProcessW(LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);
WINBASEAPI BOOL WINAPI SetProcessShutdownParameters(DWORD, DWORD);
WINBASEAPI DWORD WINAPI GetProcessVersion(DWORD);
WINBASEAPI VOID WINAPI GetStartupInfoW(LPSTARTUPINFOW);
WINADVAPI BOOL WINAPI CreateProcessAsUserW(HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);

#ifdef UNICODE
#define CreateProcess  CreateProcessW
#define GetStartupInfo  GetStartupInfoW
#define CreateProcessAsUser  CreateProcessAsUserW
#else /* !UNICODE */
#define CreateProcess  CreateProcessA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
FORCEINLINE HANDLE GetCurrentProcessToken(VOID) { return (HANDLE)(LONG_PTR) - 4; }
FORCEINLINE HANDLE GetCurrentThreadToken(VOID) { return (HANDLE)(LONG_PTR) - 5; }
FORCEINLINE HANDLE GetCurrentThreadEffectiveToken(VOID) { return (HANDLE)(LONG_PTR) - 6; }
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

WINADVAPI BOOL APIENTRY SetThreadToken(PHANDLE, HANDLE);
WINADVAPI BOOL WINAPI OpenProcessToken(HANDLE, DWORD, PHANDLE);
WINADVAPI BOOL WINAPI OpenThreadToken(HANDLE, DWORD, BOOL, PHANDLE);

WINBASEAPI BOOL WINAPI SetPriorityClass(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI SetThreadStackGuarantee(PULONG);
WINBASEAPI DWORD WINAPI GetPriorityClass(HANDLE);
WINBASEAPI BOOL WINAPI ProcessIdToSessionId(DWORD, DWORD *);

#if (_WIN32_WINNT >= 0x0501)
WINBASEAPI DWORD WINAPI GetProcessId(HANDLE);
#endif /* _WIN32_WINNT >= 0x0501 */

typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

#if (_WIN32_WINNT >= 0x0502)
WINBASEAPI DWORD WINAPI GetThreadId(HANDLE);
#endif /* _WIN32_WINNT >= 0x0502 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI VOID WINAPI FlushProcessWriteBuffers(VOID);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)

#define PROCESS_AFFINITY_ENABLE_AUTO_UPDATE  0x00000001UL

#define PROC_THREAD_ATTRIBUTE_REPLACE_VALUE  0x00000001

WINBASEAPI DWORD WINAPI GetProcessIdOfThread(HANDLE);
WINBASEAPI BOOL WINAPI InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD, PSIZE_T);
WINBASEAPI VOID WINAPI DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST);
WINBASEAPI BOOL WINAPI SetProcessAffinityUpdateMode(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI QueryProcessAffinityUpdateMode(HANDLE, LPDWORD);
WINBASEAPI BOOL WINAPI UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID, SIZE_T, PVOID, PSIZE_T);

#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI HANDLE WINAPI CreateRemoteThreadEx(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPPROC_THREAD_ATTRIBUTE_LIST, LPDWORD);

#if defined(_WIN32_WINNT)

#if (_WIN32_WINNT >= 0x0602)
WINBASEAPI VOID WINAPI GetCurrentThreadStackLimits(PULONG_PTR, PULONG_PTR);
#endif /* _WIN32_WINNT >= 0x0602 */

WINBASEAPI BOOL WINAPI GetThreadContext(HANDLE, LPCONTEXT);
WINBASEAPI BOOL WINAPI SetThreadContext(HANDLE, CONST CONTEXT *);

#if (_WIN32_WINNT >= 0x0602)
WINBASEAPI BOOL WINAPI SetProcessMitigationPolicy(PROCESS_MITIGATION_POLICY, PVOID, SIZE_T);
WINBASEAPI BOOL WINAPI GetProcessMitigationPolicy(HANDLE, PROCESS_MITIGATION_POLICY, PVOID, SIZE_T);
#endif /* _WIN32_WINNT >= 0x0602 */

#endif /* defined(_WIN32_WINNT) */

#if defined(_WIN32_WINNT)
WINBASEAPI BOOL WINAPI FlushInstructionCache(HANDLE, LPCVOID, SIZE_T);
WINBASEAPI BOOL WINAPI GetThreadTimes(HANDLE hThread, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
WINBASEAPI HANDLE WINAPI OpenProcess(DWORD, BOOL, DWORD);
BOOL WINAPI IsProcessorFeaturePresent(DWORD);
#endif /* defined(_WIN32_WINNT) */

#if (_WIN32_WINNT >= 0x0501)
WINBASEAPI BOOL WINAPI GetProcessHandleCount(HANDLE, PDWORD);
#endif /* _WIN32_WINNT >= 0x0501 */

#if (_WIN32_WINNT >= 0x0502)
WINBASEAPI DWORD WINAPI GetCurrentProcessorNumber(VOID);
#endif /* _WIN32_WINNT >= 0x0502 */

#if (_WIN32_WINNT >= 0x0601)
WINBASEAPI BOOL WINAPI SetThreadIdealProcessorEx(HANDLE, PPROCESSOR_NUMBER, PPROCESSOR_NUMBER);
WINBASEAPI BOOL WINAPI GetThreadIdealProcessorEx(HANDLE, PPROCESSOR_NUMBER);
WINBASEAPI VOID WINAPI GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER);
#endif /* _WIN32_WINNT >= 0x0601 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINXP)
WINBASEAPI BOOL WINAPI GetProcessPriorityBoost(HANDLE, PBOOL);
WINBASEAPI BOOL WINAPI SetProcessPriorityBoost(HANDLE, BOOL);
WINBASEAPI BOOL WINAPI GetThreadIOPendingFlag(HANDLE, PBOOL);
WINBASEAPI BOOL WINAPI GetSystemTimes(PFILETIME, PFILETIME, PFILETIME);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINXP */

typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

WINBASEAPI BOOL WINAPI GetThreadInformation(HANDLE, THREAD_INFORMATION_CLASS, LPVOID, DWORD);
WINBASEAPI BOOL WINAPI SetThreadInformation(HANDLE, THREAD_INFORMATION_CLASS, LPVOID, DWORD);

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
WINBASEAPI BOOL WINAPI IsProcessCritical(HANDLE, PBOOL);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINBLUE */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)
WINBASEAPI BOOL WINAPI SetProtectedPolicy(LPCGUID, ULONG_PTR, PULONG_PTR);
WINBASEAPI BOOL WINAPI QueryProtectedPolicy(LPCGUID, PULONG_PTR);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

WINBASEAPI DWORD WINAPI SetThreadIdealProcessor(HANDLE, DWORD);

typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

typedef struct _APP_MEMORY_INFORMATION {
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION;

#define PME_CURRENT_VERSION   1

typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
    PMETypeFailFastOnCommitFailure,
    PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE, *PPROCESS_MEMORY_EXHAUSTION_TYPE;

#define PME_FAILFAST_ON_COMMIT_FAIL_DISABLE  0x0
#define PME_FAILFAST_ON_COMMIT_FAIL_ENABLE  0x1

typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO {
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO;

#if (_WIN32_WINNT >= 0x0602)
WINBASEAPI BOOL WINAPI SetProcessInformation(HANDLE, PROCESS_INFORMATION_CLASS, LPVOID, DWORD);
WINBASEAPI BOOL WINAPI GetProcessInformation(HANDLE, PROCESS_INFORMATION_CLASS, LPVOID, DWORD);
#endif /* _WIN32_WINNT >= 0x0602 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)
BOOL WINAPI GetSystemCpuSetInformation(PSYSTEM_CPU_SET_INFORMATION, ULONG, PULONG, HANDLE, ULONG);
BOOL WINAPI GetProcessDefaultCpuSets(HANDLE, PULONG, ULONG, PULONG);
BOOL WINAPI SetProcessDefaultCpuSets(HANDLE, const ULONG *, ULONG);
BOOL WINAPI GetThreadSelectedCpuSets(HANDLE, PULONG, ULONG, PULONG);
BOOL WINAPI SetThreadSelectedCpuSets(HANDLE, const ULONG *, ULONG);
#endif /* _WIN32_WINNT >= WIN32_WINNT_WIN10 */

WINADVAPI BOOL WINAPI CreateProcessAsUserA(HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION);

WINBASEAPI BOOL WINAPI GetProcessShutdownParameters(LPDWORD, LPDWORD);
WINBASEAPI HRESULT WINAPI SetThreadDescription(HANDLE, PCWSTR);
WINBASEAPI HRESULT WINAPI GetThreadDescription(HANDLE, PWSTR *);

#ifndef UNICODE
#define CreateProcessAsUser  CreateProcessAsUserA
#endif /* !UNICODE */

#endif /* _PROCESSTHREADSAPI_H */
