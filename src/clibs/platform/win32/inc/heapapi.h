#ifndef _HEAPAPI_H
#define _HEAPAPI_H

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

/* ApiSet api-ms-win-core-heap-l1 */

/* #include <apiset.h> */
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

#ifndef __ORANGEC__
#define DECLSPEC_ALLOCATOR  __declspec(allocator)
#define DECLSPEC_RELEASE(n)  __declspec(release(n))
#else
#define DECLSPEC_ALLOCATOR
#define DECLSPEC_RELEASE(x)
#endif

typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

WINBASEAPI HANDLE WINAPI HeapCreate(DWORD, SIZE_T, SIZE_T);
WINBASEAPI BOOL WINAPI HeapDestroy(HANDLE);
WINBASEAPI DECLSPEC_ALLOCATOR LPVOID WINAPI HeapAlloc(HANDLE, DWORD, SIZE_T);
WINBASEAPI DECLSPEC_ALLOCATOR LPVOID WINAPI HeapReAlloc(HANDLE, DWORD, LPVOID, SIZE_T);
WINBASEAPI DECLSPEC_RELEASE(3) BOOL WINAPI HeapFree(HANDLE, DWORD, LPVOID);
WINBASEAPI SIZE_T WINAPI HeapSize(HANDLE, DWORD, LPCVOID);
WINBASEAPI HANDLE WINAPI GetProcessHeap(VOID);
WINBASEAPI SIZE_T WINAPI HeapCompact(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI HeapSetInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T);
WINBASEAPI BOOL WINAPI HeapValidate(HANDLE, DWORD, LPCVOID);
#if defined(_WIN32_WINNT)
BOOL WINAPI HeapSummary(HANDLE, DWORD, LPHEAP_SUMMARY);
#endif
WINBASEAPI DWORD WINAPI GetProcessHeaps(DWORD, PHANDLE);
WINBASEAPI BOOL WINAPI HeapLock(HANDLE);
WINBASEAPI BOOL WINAPI HeapUnlock(HANDLE);
WINBASEAPI BOOL WINAPI HeapWalk(HANDLE, LPPROCESS_HEAP_ENTRY);
WINBASEAPI BOOL WINAPI HeapQueryInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T, PSIZE_T);

#endif /* _HEAPAPI_H */
