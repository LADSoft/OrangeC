#ifndef _SECURITYBASEAPI_H
#define _SECURITYBASEAPI_H

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

/* ApiSet api-ms-win-security-base-l1 */

/* #include <apiset.h> */
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

WINADVAPI BOOL WINAPI AccessCheck(PSECURITY_DESCRIPTOR, HANDLE, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckAndAuditAlarmW(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByType(PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPDWORD);
WINADVAPI BOOL WINAPI AccessCheckByTypeAndAuditAlarmW(LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR, LPVOID, HANDLE, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL);
WINADVAPI BOOL WINAPI AddAccessAllowedAce(PACL, DWORD, DWORD, PSID);
WINADVAPI BOOL WINAPI AddAccessAllowedAceEx(PACL, DWORD, DWORD, DWORD, PSID);
WINADVAPI BOOL WINAPI AddAccessAllowedObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID);
WINADVAPI BOOL WINAPI AddAccessDeniedAce(PACL, DWORD, DWORD, PSID);
WINADVAPI BOOL WINAPI AddAccessDeniedAceEx(PACL, DWORD, DWORD, DWORD, PSID);
WINADVAPI BOOL WINAPI AddAccessDeniedObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID);
WINADVAPI BOOL WINAPI AddAce(PACL, DWORD, DWORD, LPVOID, DWORD);
WINADVAPI BOOL WINAPI AddAuditAccessAce(PACL, DWORD, DWORD, PSID, BOOL, BOOL);
WINADVAPI BOOL WINAPI AddAuditAccessAceEx(PACL, DWORD, DWORD, DWORD, PSID, BOOL, BOOL);
WINADVAPI BOOL WINAPI AddAuditAccessObjectAce(PACL, DWORD, DWORD, DWORD, GUID *, GUID *, PSID, BOOL, BOOL);
#if (_WIN32_WINNT >= 0x0600)
WINADVAPI BOOL WINAPI AddMandatoryAce(PACL, DWORD, DWORD, DWORD, PSID);
#endif /* _WIN32_WINNT >=  0x0600 */
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
WINADVAPI BOOL WINAPI AddResourceAttributeAce(PACL, DWORD, DWORD, DWORD, PSID, PCLAIM_SECURITY_ATTRIBUTES_INFORMATION, PDWORD);
WINADVAPI BOOL WINAPI AddScopedPolicyIDAce(PACL, DWORD, DWORD, DWORD, PSID);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
WINADVAPI BOOL WINAPI AdjustTokenGroups(HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS, PDWORD);
WINADVAPI BOOL WINAPI AdjustTokenPrivileges(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD);
WINADVAPI BOOL WINAPI AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY, BYTE, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, PSID *);
WINADVAPI BOOL WINAPI AllocateLocallyUniqueId(PLUID);
WINADVAPI BOOL WINAPI AreAllAccessesGranted(DWORD, DWORD);
WINADVAPI BOOL WINAPI AreAnyAccessesGranted(DWORD, DWORD);
WINADVAPI BOOL APIENTRY CheckTokenMembership(HANDLE, PSID, PBOOL);
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
WINADVAPI BOOL APIENTRY CheckTokenCapability(HANDLE, PSID, PBOOL);
WINADVAPI BOOL APIENTRY GetAppContainerAce(PACL, DWORD, PVOID *, DWORD *);
WINADVAPI BOOL APIENTRY CheckTokenMembershipEx(HANDLE, PSID, DWORD, PBOOL);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
WINADVAPI BOOL WINAPI ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID *, BOOLEAN, PGENERIC_MAPPING);
WINADVAPI BOOL WINAPI CopySid(DWORD, PSID, PSID);
WINADVAPI BOOL WINAPI CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, BOOL, HANDLE, PGENERIC_MAPPING);
WINADVAPI BOOL WINAPI CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID *, BOOL, ULONG, HANDLE, PGENERIC_MAPPING);
WINADVAPI BOOL WINAPI CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, GUID **, ULONG, BOOL, ULONG, HANDLE, PGENERIC_MAPPING);
WINADVAPI BOOL APIENTRY CreateRestrictedToken(HANDLE, DWORD, DWORD, PSID_AND_ATTRIBUTES, DWORD, PLUID_AND_ATTRIBUTES, DWORD, PSID_AND_ATTRIBUTES, PHANDLE);
#if (_WIN32_WINNT >= 0x0501)
WINADVAPI BOOL WINAPI CreateWellKnownSid(WELL_KNOWN_SID_TYPE, PSID, PSID, DWORD *);
WINADVAPI BOOL WINAPI EqualDomainSid(PSID, PSID, BOOL *);
#endif /* _WIN32_WINNT >= 0x0501 */
WINADVAPI BOOL WINAPI DeleteAce(PACL, DWORD);
WINADVAPI BOOL WINAPI DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR *);
WINADVAPI BOOL WINAPI DuplicateToken(HANDLE, SECURITY_IMPERSONATION_LEVEL, PHANDLE);
WINADVAPI BOOL WINAPI DuplicateTokenEx(HANDLE, DWORD, LPSECURITY_ATTRIBUTES, SECURITY_IMPERSONATION_LEVEL, TOKEN_TYPE, PHANDLE);
WINADVAPI BOOL WINAPI EqualPrefixSid(PSID, PSID);
WINADVAPI BOOL WINAPI EqualSid(PSID, PSID);
WINADVAPI BOOL WINAPI FindFirstFreeAce(PACL, LPVOID *);
WINADVAPI PVOID WINAPI FreeSid(PSID);
WINADVAPI BOOL WINAPI GetAce(PACL, DWORD, LPVOID *);
WINADVAPI BOOL WINAPI GetAclInformation(PACL, LPVOID, DWORD, ACL_INFORMATION_CLASS);
WINADVAPI BOOL WINAPI GetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD);
WINADVAPI BOOL WINAPI GetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD);
WINADVAPI DWORD WINAPI GetLengthSid(PSID);
WINADVAPI BOOL WINAPI GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
WINADVAPI BOOL WINAPI GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, LPDWORD);
WINADVAPI BOOL WINAPI GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL);
WINADVAPI BOOL WINAPI GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID *, LPBOOL);
WINADVAPI DWORD WINAPI GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID *, LPBOOL);
WINADVAPI DWORD WINAPI GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR, PUCHAR);
WINADVAPI BOOL WINAPI GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL);
WINADVAPI PSID_IDENTIFIER_AUTHORITY WINAPI GetSidIdentifierAuthority(PSID);
WINADVAPI DWORD WINAPI GetSidLengthRequired(UCHAR);
WINADVAPI PDWORD WINAPI GetSidSubAuthority(PSID, DWORD);
WINADVAPI PUCHAR WINAPI GetSidSubAuthorityCount(PSID);
WINADVAPI BOOL WINAPI GetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, LPVOID, DWORD, PDWORD);
#if (_WIN32_WINNT >= 0x0501)
WINADVAPI BOOL WINAPI GetWindowsAccountDomainSid(PSID, PSID, DWORD *);
#endif /* _WIN32_WINNT >= 0x0501 */
WINADVAPI BOOL APIENTRY ImpersonateAnonymousToken(HANDLE);
WINADVAPI BOOL WINAPI ImpersonateLoggedOnUser(HANDLE);
WINADVAPI BOOL WINAPI ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
WINADVAPI BOOL WINAPI InitializeAcl(PACL, DWORD, DWORD);
WINADVAPI BOOL WINAPI InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR, DWORD);
WINADVAPI BOOL WINAPI InitializeSid(PSID, PSID_IDENTIFIER_AUTHORITY, BYTE);
WINADVAPI BOOL WINAPI IsTokenRestricted(HANDLE);
WINADVAPI BOOL WINAPI IsValidAcl(PACL);
WINADVAPI BOOL WINAPI IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI IsValidSid(PSID);
#if (_WIN32_WINNT >= 0x0501)
WINADVAPI BOOL WINAPI IsWellKnownSid(PSID, WELL_KNOWN_SID_TYPE);
#endif /* _WIN32_WINNT >= 0x0501 */
WINADVAPI BOOL WINAPI MakeAbsoluteSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD, PACL, LPDWORD, PACL, LPDWORD, PSID, LPDWORD, PSID, LPDWORD);
WINADVAPI BOOL WINAPI MakeSelfRelativeSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD);
WINADVAPI VOID WINAPI MapGenericMask(PDWORD, PGENERIC_MAPPING);
WINADVAPI BOOL WINAPI ObjectCloseAuditAlarmW(LPCWSTR, LPVOID, BOOL);
WINADVAPI BOOL WINAPI ObjectDeleteAuditAlarmW(LPCWSTR, LPVOID, BOOL);
WINADVAPI BOOL WINAPI ObjectOpenAuditAlarmW(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, LPBOOL);
WINADVAPI BOOL WINAPI ObjectPrivilegeAuditAlarmW(LPCWSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);
WINADVAPI BOOL WINAPI PrivilegeCheck(HANDLE, PPRIVILEGE_SET, LPBOOL);
WINADVAPI BOOL WINAPI PrivilegedServiceAuditAlarmW(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET, BOOL);
#if (_WIN32_WINNT >= 0x0600)
WINADVAPI VOID WINAPI QuerySecurityAccessMask(SECURITY_INFORMATION, LPDWORD);
#endif /* _WIN32_WINNT >= 0x0600 */
WINADVAPI BOOL WINAPI RevertToSelf(VOID);
WINADVAPI BOOL WINAPI SetAclInformation(PACL, LPVOID, DWORD, ACL_INFORMATION_CLASS);
WINADVAPI BOOL WINAPI SetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI SetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI SetPrivateObjectSecurity(SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, PGENERIC_MAPPING, HANDLE);
WINADVAPI BOOL WINAPI SetPrivateObjectSecurityEx(SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, ULONG, PGENERIC_MAPPING, HANDLE);
#if (_WIN32_WINNT >= 0x0600)
WINADVAPI VOID WINAPI SetSecurityAccessMask(SECURITY_INFORMATION, LPDWORD);
#endif /* _WIN32_WINNT >= 0x0600 */
WINADVAPI BOOL WINAPI SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL, SECURITY_DESCRIPTOR_CONTROL);
WINADVAPI BOOL WINAPI SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
WINADVAPI BOOL WINAPI SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID, BOOL);
WINADVAPI BOOL WINAPI SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID, BOOL);
WINADVAPI DWORD WINAPI SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR, PUCHAR);
WINADVAPI BOOL WINAPI SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
WINADVAPI BOOL WINAPI SetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, LPVOID, DWORD);
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
WINADVAPI BOOL WINAPI SetCachedSigningLevel(PHANDLE, ULONG, ULONG, HANDLE);
WINADVAPI BOOL WINAPI GetCachedSigningLevel(HANDLE, PULONG, PULONG, PUCHAR, PULONG, PULONG);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)
WINADVAPI LONG WINAPI CveEventWrite(PCWSTR, PCWSTR);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

#ifdef UNICODE
#define AccessCheckAndAuditAlarm  AccessCheckAndAuditAlarmW
#define AccessCheckByTypeAndAuditAlarm  AccessCheckByTypeAndAuditAlarmW
#define AccessCheckByTypeResultListAndAuditAlarm  AccessCheckByTypeResultListAndAuditAlarmW
#define AccessCheckByTypeResultListAndAuditAlarmByHandle  AccessCheckByTypeResultListAndAuditAlarmByHandleW
#define GetFileSecurity  GetFileSecurityW
#define ObjectCloseAuditAlarm  ObjectCloseAuditAlarmW
#define ObjectDeleteAuditAlarm  ObjectDeleteAuditAlarmW
#define ObjectOpenAuditAlarm  ObjectOpenAuditAlarmW
#define ObjectPrivilegeAuditAlarm  ObjectPrivilegeAuditAlarmW
#define PrivilegedServiceAuditAlarm  PrivilegedServiceAuditAlarmW
#define SetFileSecurity  SetFileSecurityW
#endif

#endif /* _SECURITYBASEAPI_H */
