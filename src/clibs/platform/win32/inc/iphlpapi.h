#ifndef _IPHLPAPI_H
#define _IPHLPAPI_H

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

/* Interaction with the IP Stack for MIB-II definitions */

#ifdef __cplusplus
extern "C" {
#endif

#include <iprtrmib.h>
#include <ipexport.h>
#include <iptypes.h>
#include <tcpestats.h>

DWORD WINAPI GetNumberOfInterfaces(PDWORD);
DWORD WINAPI GetIfEntry(PMIB_IFROW);
DWORD WINAPI GetIfTable(PMIB_IFTABLE,PULONG,BOOL);
DWORD WINAPI GetIpAddrTable(PMIB_IPADDRTABLE,PULONG,BOOL);
ULONG WINAPI GetIpNetTable(PMIB_IPNETTABLE,PULONG,BOOL);
DWORD WINAPI GetIpForwardTable(PMIB_IPFORWARDTABLE,PULONG,BOOL);
ULONG WINAPI GetTcpTable(PMIB_TCPTABLE,PULONG,BOOL);
DWORD WINAPI GetExtendedTcpTable(PVOID,PDWORD,BOOL,ULONG,TCP_TABLE_CLASS,ULONG);
DWORD WINAPI GetOwnerModuleFromTcpEntry(PMIB_TCPROW_OWNER_MODULE,TCPIP_OWNER_MODULE_INFO_CLASS,PVOID,PDWORD);
ULONG WINAPI GetUdpTable(PMIB_UDPTABLE,PULONG,BOOL);
DWORD WINAPI GetExtendedUdpTable(PVOID,PDWORD,BOOL,ULONG,UDP_TABLE_CLASS,ULONG);
DWORD WINAPI GetOwnerModuleFromUdpEntry(PMIB_UDPROW_OWNER_MODULE,TCPIP_OWNER_MODULE_INFO_CLASS,PVOID,PDWORD);

#if (NTDDI_VERSION >= NTDDI_VISTA)
ULONG WINAPI GetTcpTable2(PMIB_TCPTABLE2,PULONG,BOOL);
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#if (NTDDI_VERSION < NTDDI_VISTA)
DWORD AllocateAndGetTcpExTableFromStack(PVOID*,BOOL,HANDLE,DWORD,DWORD);
DWORD AllocateAndGetUdpExTableFromStack(PVOID*,BOOL,HANDLE,DWORD,DWORD );
#endif /* NTDDI_VERSION < NTDDI_VISTA */

#ifdef _WS2IPDEF_H

#if (NTDDI_VERSION >= NTDDI_VISTA)
ULONG WINAPI GetTcp6Table(PMIB_TCP6TABLE,PULONG,BOOL);
ULONG WINAPI GetTcp6Table2(PMIB_TCP6TABLE2,PULONG,BOOL);
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#ifdef WINAPI
ULONG WINAPI GetPerTcpConnectionEStats(PMIB_TCPROW,TCP_ESTATS_TYPE,PUCHAR,ULONG,ULONG,PUCHAR,ULONG,ULONG,PUCHAR,ULONG,ULONG);
ULONG WINAPI SetPerTcpConnectionEStats(PMIB_TCPROW,TCP_ESTATS_TYPE,PUCHAR,ULONG,ULONG,ULONG);
ULONG WINAPI GetPerTcp6ConnectionEStats(PMIB_TCP6ROW,TCP_ESTATS_TYPE,PUCHAR,ULONG,ULONG,PUCHAR,ULONG,ULONG,PUCHAR,ULONG,ULONG);
ULONG WINAPI SetPerTcp6ConnectionEStats(PMIB_TCP6ROW,TCP_ESTATS_TYPE,PUCHAR,ULONG,ULONG,ULONG);
#endif /* WINAPI */
DWORD WINAPI GetOwnerModuleFromTcp6Entry(PMIB_TCP6ROW_OWNER_MODULE,TCPIP_OWNER_MODULE_INFO_CLASS,PVOID,PDWORD);
ULONG WINAPI GetUdp6Table(PMIB_UDP6TABLE,PULONG,BOOL);
DWORD WINAPI GetOwnerModuleFromUdp6Entry(PMIB_UDP6ROW_OWNER_MODULE,TCPIP_OWNER_MODULE_INFO_CLASS,PVOID,PDWORD);

#endif /* _WS2IPDEF_H */

DWORD GetOwnerModuleFromPidAndInfo(ULONG,ULONGLONG*,TCPIP_OWNER_MODULE_INFO_CLASS,PVOID,PDWORD);

#if (NTDDI_VERSION >= NTDDI_WIN2K)
ULONG WINAPI GetIpStatistics(PMIB_IPSTATS);
ULONG WINAPI GetIcmpStatistics(PMIB_ICMP);
ULONG WINAPI GetTcpStatistics(PMIB_TCPSTATS);
ULONG WINAPI GetUdpStatistics(PMIB_UDPSTATS);
#endif /* NTDDI_VERSION >= NTDDI_WIN2K */

#if (NTDDI_VERSION >= NTDDI_XP)
ULONG WINAPI GetIpStatisticsEx(PMIB_IPSTATS,ULONG);
ULONG WINAPI SetIpStatisticsEx(PMIB_IPSTATS,ULONG);
ULONG WINAPI GetIcmpStatisticsEx(PMIB_ICMP_EX,ULONG);
ULONG WINAPI GetTcpStatisticsEx(PMIB_TCPSTATS,ULONG);
ULONG WINAPI GetUdpStatisticsEx(PMIB_UDPSTATS,ULONG);
#endif /* NTDDI_VERSION >= NTDDI_XP */

DWORD WINAPI SetIfEntry(PMIB_IFROW);
DWORD WINAPI CreateIpForwardEntry(PMIB_IPFORWARDROW);
DWORD WINAPI SetIpForwardEntry(PMIB_IPFORWARDROW);
DWORD WINAPI DeleteIpForwardEntry(PMIB_IPFORWARDROW);

#if (NTDDI_VERSION >= NTDDI_WIN2K)
DWORD WINAPI SetIpStatistics(PMIB_IPSTATS);
#endif /* NTDDI_VERSION >= NTDDI_WIN2K */

DWORD WINAPI SetIpTTL(UINT);
DWORD WINAPI CreateIpNetEntry(PMIB_IPNETROW);
DWORD WINAPI SetIpNetEntry(PMIB_IPNETROW);
DWORD WINAPI DeleteIpNetEntry(PMIB_IPNETROW);
DWORD WINAPI FlushIpNetTable(DWORD);
DWORD WINAPI CreateProxyArpEntry(DWORD,DWORD,DWORD);
DWORD WINAPI DeleteProxyArpEntry(DWORD,DWORD,DWORD);
DWORD WINAPI SetTcpEntry(PMIB_TCPROW);
DWORD WINAPI GetInterfaceInfo(PIP_INTERFACE_INFO,PULONG);
DWORD WINAPI GetUniDirectionalAdapterInfo(PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS,PULONG);

#if (NTDDI_VERSION >= NTDDI_WIN2KSP1)
#ifndef NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED
#define NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED
DWORD WINAPI NhpAllocateAndGetInterfaceInfoFromStack(IP_INTERFACE_NAME_INFO**,PDWORD,BOOL,HANDLE,DWORD);
#endif /* NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED */
#endif /* NTDDI_VERSION >= NTDDI_WIN2KSP1 */

DWORD WINAPI GetBestInterface(IPAddr,PDWORD);
DWORD WINAPI GetBestInterfaceEx(struct sockaddr*,PDWORD);
DWORD WINAPI GetBestRoute(DWORD,DWORD,PMIB_IPFORWARDROW);
DWORD WINAPI NotifyAddrChange(PHANDLE,LPOVERLAPPED);
DWORD WINAPI NotifyRouteChange(PHANDLE,LPOVERLAPPED);
BOOL WINAPI CancelIPChangeNotify(LPOVERLAPPED);
DWORD WINAPI GetAdapterIndex(LPWSTR,PULONG);
DWORD WINAPI AddIPAddress(IPAddr,IPMask,DWORD,PULONG,PULONG);
DWORD WINAPI DeleteIPAddress(ULONG);

#if (NTDDI_VERSION >= NTDDI_WIN2KSP1)
DWORD WINAPI GetNetworkParams(PFIXED_INFO,PULONG);
#endif /* NTDDI_VERSION >= NTDDI_WIN2KSP1 */

ULONG WINAPI GetAdaptersInfo(PIP_ADAPTER_INFO,PULONG);
PIP_ADAPTER_ORDER_MAP WINAPI GetAdapterOrderMap(VOID);

#ifdef _WINSOCK2_H
ULONG WINAPI GetAdaptersAddresses(ULONG,ULONG,PVOID,PIP_ADAPTER_ADDRESSES,PULONG);
#endif /* _WINSOCK2_H */

#if (NTDDI_VERSION >= NTDDI_WIN2KSP1)
DWORD WINAPI GetPerAdapterInfo(ULONG,PIP_PER_ADAPTER_INFO,PULONG);
#endif /* NTDDI_VERSION >= NTDDI_WIN2KSP1 */

DWORD WINAPI IpReleaseAddress(PIP_ADAPTER_INDEX_MAP);
DWORD WINAPI IpRenewAddress(PIP_ADAPTER_INDEX_MAP);
DWORD WINAPI SendARP(IPAddr,IPAddr,PVOID,PULONG);
BOOL WINAPI GetRTTAndHopCount(IPAddr,PULONG,ULONG,PULONG);
DWORD WINAPI GetFriendlyIfIndex(DWORD);
DWORD WINAPI EnableRouter(HANDLE*,OVERLAPPED*);
DWORD WINAPI UnenableRouter(OVERLAPPED*,LPDWORD);
DWORD WINAPI DisableMediaSense(HANDLE*,OVERLAPPED*);
DWORD WINAPI RestoreMediaSense(OVERLAPPED*,LPDWORD);

#if (NTDDI_VERSION >= NTDDI_VISTA)

DWORD WINAPI GetIpErrorString(IP_STATUS,PWSTR,PDWORD);

#ifdef _WS2DEF_H
ULONG WINAPI ResolveNeighbor(SOCKADDR*,PVOID,PULONG);
#endif /* _WS2DEF_H */

ULONG WINAPI CreatePersistentTcpPortReservation(USHORT,USHORT,PULONG64);
ULONG WINAPI CreatePersistentUdpPortReservation(USHORT,USHORT,PULONG64);
ULONG WINAPI DeletePersistentTcpPortReservation(USHORT,USHORT);
ULONG WINAPI DeletePersistentUdpPortReservation(USHORT,USHORT);
ULONG WINAPI LookupPersistentTcpPortReservation(USHORT,USHORT,PULONG64);
ULONG WINAPI LookupPersistentUdpPortReservation(USHORT,USHORT,PULONG64);

#define NET_STRING_IPV4_ADDRESS  0x00000001
#define NET_STRING_IPV4_SERVICE  0x00000002
#define NET_STRING_IPV4_NETWORK  0x00000004
#define NET_STRING_IPV6_ADDRESS  0x00000008
#define NET_STRING_IPV6_ADDRESS_NO_SCOPE  0x00000010
#define NET_STRING_IPV6_SERVICE  0x00000020
#define NET_STRING_IPV6_SERVICE_NO_SCOPE  0x00000040
#define NET_STRING_IPV6_NETWORK  0x00000080
#define NET_STRING_NAMED_ADDRESS  0x00000100
#define NET_STRING_NAMED_SERVICE  0x00000200

#define NET_STRING_IP_ADDRESS  (NET_STRING_IPV4_ADDRESS|NET_STRING_IPV6_ADDRESS)
#define NET_STRING_IP_ADDRESS_NO_SCOPE  (NET_STRING_IPV4_ADDRESS|NET_STRING_IPV6_ADDRESS_NO_SCOPE)
#define NET_STRING_IP_SERVICE  (NET_STRING_IPV4_SERVICE|NET_STRING_IPV6_SERVICE)
#define NET_STRING_IP_SERVICE_NO_SCOPE  (NET_STRING_IPV4_SERVICE|NET_STRING_IPV6_SERVICE_NO_SCOPE)
#define NET_STRING_IP_NETWORK  (NET_STRING_IPV4_NETWORK|NET_STRING_IPV6_NETWORK)
#define NET_STRING_ANY_ADDRESS  (NET_STRING_NAMED_ADDRESS|NET_STRING_IP_ADDRESS)
#define NET_STRING_ANY_ADDRESS_NO_SCOPE  (NET_STRING_NAMED_ADDRESS|NET_STRING_IP_ADDRESS_NO_SCOPE)
#define NET_STRING_ANY_SERVICE  (NET_STRING_NAMED_SERVICE|NET_STRING_IP_SERVICE)
#define NET_STRING_ANY_SERVICE_NO_SCOPE  (NET_STRING_NAMED_SERVICE|NET_STRING_IP_SERVICE_NO_SCOPE)

typedef enum NET_ADDRESS_FORMAT_ {
    NET_ADDRESS_FORMAT_UNSPECIFIED = 0,
    NET_ADDRESS_DNS_NAME,
    NET_ADDRESS_IPV4,
    NET_ADDRESS_IPV6
} NET_ADDRESS_FORMAT;

#if defined(_WS2DEF_H) && defined(_WS2IPDEF_H) && defined(_WINDNS_H)
typedef struct NET_ADDRESS_INFO_ {
   NET_ADDRESS_FORMAT Format;
   union {
      struct {
         WCHAR Address[DNS_MAX_NAME_BUFFER_LENGTH]; 
         WCHAR Port[6];
      } NamedAddress;
      SOCKADDR_IN Ipv4Address;
      SOCKADDR_IN6 Ipv6Address;
      SOCKADDR IpAddress;
   };
} NET_ADDRESS_INFO, *PNET_ADDRESS_INFO;

DWORD WINAPI ParseNetworkString(CONST WCHAR*,DWORD,PNET_ADDRESS_INFO,USHORT*,BYTE*);
#endif /* yada, yada, yada */

#include <netioapi.h>

#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#ifdef __cplusplus
}
#endif

#endif /* _IPHLPAPI_H */
