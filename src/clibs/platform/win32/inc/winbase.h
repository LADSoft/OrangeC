/* #include <winapifamily.h> */

#ifndef _WINBASE_H
#define _WINBASE_H

/* Windows Base API definitions */

#ifdef __ORANGEC__ 
#pragma GCC system_header
#endif

#include <apisetcconv.h>
#include <minwinbase.h>

/*
 * APISETs
 */
#include <processenv.h>
#include <fileapi.h>
#include <debugapi.h>
#include <utilapiset.h>
#include <handleapi.h>
#include <errhandlingapi.h>
#include <fibersapi.h>
#include <namedpipeapi.h>
#include <profileapi.h>
#include <heapapi.h>
#include <ioapiset.h>
#include <synchapi.h>
#include <interlockedapi.h>
#include <processthreadsapi.h>
#include <sysinfoapi.h>
#include <memoryapi.h>
#include <enclaveapi.h>
#include <threadpoollegacyapiset.h>
#include <threadpoolapiset.h>
#include <jobapi.h>
#include <jobapi2.h>
#include <wow64apiset.h>
#include <libloaderapi.h>
#include <securitybaseapi.h>
#include <namespaceapi.h>
#include <systemtopologyapi.h>
#include <processtopologyapi.h>
#include <securityappcontainer.h>
#include <realtimeapiset.h>


#define DefineHandleTable(w)  ((w),TRUE)
#define LimitEmsPages(dw)
#define SetSwapAreaSize(w)  (w)
#define LockSegment(w)  GlobalFix((HANDLE)(w))
#define UnlockSegment(w)  GlobalUnfix((HANDLE)(w))

#define GetCurrentTime()  GetTickCount()

#define Yield()

#define FILE_BEGIN  0
#define FILE_CURRENT  1
#define FILE_END  2

#define WAIT_FAILED ((DWORD)0xFFFFFFFF)
#define WAIT_OBJECT_0  ((STATUS_WAIT_0) + 0)

#define WAIT_ABANDONED  ((STATUS_ABANDONED_WAIT_0) + 0)
#define WAIT_ABANDONED_0  ((STATUS_ABANDONED_WAIT_0) + 0)

#define WAIT_IO_COMPLETION  STATUS_USER_APC

#define SecureZeroMemory  RtlSecureZeroMemory
#define CaptureStackBackTrace  RtlCaptureStackBackTrace

#define FILE_FLAG_WRITE_THROUGH  0x80000000
#define FILE_FLAG_OVERLAPPED  0x40000000
#define FILE_FLAG_NO_BUFFERING  0x20000000
#define FILE_FLAG_RANDOM_ACCESS  0x10000000
#define FILE_FLAG_SEQUENTIAL_SCAN  0x08000000
#define FILE_FLAG_DELETE_ON_CLOSE  0x04000000
#define FILE_FLAG_BACKUP_SEMANTICS  0x02000000
#define FILE_FLAG_POSIX_SEMANTICS  0x01000000
#define FILE_FLAG_SESSION_AWARE  0x00800000
#define FILE_FLAG_OPEN_REPARSE_POINT  0x00200000
#define FILE_FLAG_OPEN_NO_RECALL  0x00100000
#define FILE_FLAG_FIRST_PIPE_INSTANCE  0x00080000

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define FILE_FLAG_OPEN_REQUIRING_OPLOCK 0x00040000
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if(_WIN32_WINNT >= 0x0400)

#define PROGRESS_CONTINUE  0
#define PROGRESS_CANCEL  1
#define PROGRESS_STOP  2
#define PROGRESS_QUIET  3

#define CALLBACK_CHUNK_FINISHED  0x00000000
#define CALLBACK_STREAM_SWITCH  0x00000001

#define COPY_FILE_FAIL_IF_EXISTS  0x00000001
#define COPY_FILE_RESTARTABLE  0x00000002
#define COPY_FILE_OPEN_SOURCE_FOR_WRITE  0x00000004
#define COPY_FILE_ALLOW_DECRYPTED_DESTINATION  0x00000008

#if (_WIN32_WINNT >= 0x0600)
#define COPY_FILE_COPY_SYMLINK  0x00000800
#define COPY_FILE_NO_BUFFERING  0x00001000
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define COPY_FILE_REQUEST_SECURITY_PRIVILEGES  0x00002000
#define COPY_FILE_RESUME_FROM_PAUSE  0x00004000
#define COPY_FILE_NO_OFFLOAD  0x00040000
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)
#define COPY_FILE_IGNORE_EDP_BLOCK  0x00400000
#define COPY_FILE_IGNORE_SOURCE_ENCRYPTION  0x00800000
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

#endif /* _WIN32_WINNT >= 0x0400 */

#if (_WIN32_WINNT >= 0x0500)

#define REPLACEFILE_WRITE_THROUGH  0x00000001
#define REPLACEFILE_IGNORE_MERGE_ERRORS 0x00000002

#if (_WIN32_WINNT >= 0x0600)
#define REPLACEFILE_IGNORE_ACL_ERRORS  0x00000004
#endif /* _WIN32_WINNT >= 0x0600 */

#endif /* _WIN32_WINNT >= 0x0500 */

#define PIPE_ACCESS_INBOUND  0x00000001
#define PIPE_ACCESS_OUTBOUND  0x00000002
#define PIPE_ACCESS_DUPLEX  0x00000003

#define PIPE_CLIENT_END  0x00000000
#define PIPE_SERVER_END  0x00000001

#define PIPE_WAIT  0x00000000
#define PIPE_NOWAIT  0x00000001
#define PIPE_READMODE_BYTE  0x00000000
#define PIPE_READMODE_MESSAGE  0x00000002
#define PIPE_TYPE_BYTE  0x00000000
#define PIPE_TYPE_MESSAGE  0x00000004
#define PIPE_ACCEPT_REMOTE_CLIENTS  0x00000000
#define PIPE_REJECT_REMOTE_CLIENTS  0x00000008

#define PIPE_UNLIMITED_INSTANCES  255

#define SECURITY_ANONYMOUS  (SecurityAnonymous  << 16)
#define SECURITY_IDENTIFICATION  (SecurityIdentification << 16)
#define SECURITY_IMPERSONATION  (SecurityImpersonation  << 16)
#define SECURITY_DELEGATION  (SecurityDelegation  << 16)

#define SECURITY_CONTEXT_TRACKING  0x00040000
#define SECURITY_EFFECTIVE_ONLY  0x00080000

#define SECURITY_SQOS_PRESENT  0x00100000
#define SECURITY_VALID_SQOS_FLAGS  0x001F0000

#if(_WIN32_WINNT >= 0x0400)
typedef VOID (WINAPI *PFIBER_START_ROUTINE)(LPVOID);
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef LPVOID (WINAPI *PFIBER_CALLOUT_ROUTINE) (LPVOID);
#endif /* _WIN32_WINNT >= 0x0400 */

#define FAIL_FAST_GENERATE_EXCEPTION_ADDRESS  0x1
#define FAIL_FAST_NO_HARD_ERROR_DLG  0x2

#if defined(_X86_)
typedef PLDT_ENTRY LPLDT_ENTRY;
#else
typedef LPVOID LPLDT_ENTRY;
#endif

#define SP_SERIALCOMM  ((DWORD)0x00000001)

#define PST_UNSPECIFIED  ((DWORD)0x00000000)
#define PST_RS232  ((DWORD)0x00000001)
#define PST_PARALLELPORT  ((DWORD)0x00000002)
#define PST_RS422  ((DWORD)0x00000003)
#define PST_RS423  ((DWORD)0x00000004)
#define PST_RS449  ((DWORD)0x00000005)
#define PST_MODEM  ((DWORD)0x00000006)
#define PST_FAX  ((DWORD)0x00000021)
#define PST_SCANNER  ((DWORD)0x00000022)
#define PST_NETWORK_BRIDGE  ((DWORD)0x00000100)
#define PST_LAT  ((DWORD)0x00000101)
#define PST_TCPIP_TELNET  ((DWORD)0x00000102)
#define PST_X25  ((DWORD)0x00000103)

#define PCF_DTRDSR  ((DWORD)0x0001)
#define PCF_RTSCTS  ((DWORD)0x0002)
#define PCF_RLSD  ((DWORD)0x0004)
#define PCF_PARITY_CHECK  ((DWORD)0x0008)
#define PCF_XONXOFF  ((DWORD)0x0010)
#define PCF_SETXCHAR  ((DWORD)0x0020)
#define PCF_TOTALTIMEOUTS ((DWORD)0x0040)
#define PCF_INTTIMEOUTS  ((DWORD)0x0080)
#define PCF_SPECIALCHARS  ((DWORD)0x0100)
#define PCF_16BITMODE  ((DWORD)0x0200)

#define SP_PARITY  ((DWORD)0x0001)
#define SP_BAUD  ((DWORD)0x0002)
#define SP_DATABITS  ((DWORD)0x0004)
#define SP_STOPBITS  ((DWORD)0x0008)
#define SP_HANDSHAKING  ((DWORD)0x0010)
#define SP_PARITY_CHECK  ((DWORD)0x0020)
#define SP_RLSD  ((DWORD)0x0040)

#define BAUD_075  ((DWORD)0x00000001)
#define BAUD_110  ((DWORD)0x00000002)
#define BAUD_134_5  ((DWORD)0x00000004)
#define BAUD_150  ((DWORD)0x00000008)
#define BAUD_300  ((DWORD)0x00000010)
#define BAUD_600  ((DWORD)0x00000020)
#define BAUD_1200  ((DWORD)0x00000040)
#define BAUD_1800  ((DWORD)0x00000080)
#define BAUD_2400  ((DWORD)0x00000100)
#define BAUD_4800  ((DWORD)0x00000200)
#define BAUD_7200  ((DWORD)0x00000400)
#define BAUD_9600  ((DWORD)0x00000800)
#define BAUD_14400  ((DWORD)0x00001000)
#define BAUD_19200  ((DWORD)0x00002000)
#define BAUD_38400  ((DWORD)0x00004000)
#define BAUD_56K  ((DWORD)0x00008000)
#define BAUD_128K  ((DWORD)0x00010000)
#define BAUD_115200  ((DWORD)0x00020000)
#define BAUD_57600  ((DWORD)0x00040000)
#define BAUD_USER  ((DWORD)0x10000000)

#define DATABITS_5  ((WORD)0x0001)
#define DATABITS_6  ((WORD)0x0002)
#define DATABITS_7  ((WORD)0x0004)
#define DATABITS_8  ((WORD)0x0008)
#define DATABITS_16  ((WORD)0x0010)
#define DATABITS_16X  ((WORD)0x0020)

#define STOPBITS_10  ((WORD)0x0001)
#define STOPBITS_15  ((WORD)0x0002)
#define STOPBITS_20  ((WORD)0x0004)
#define PARITY_NONE  ((WORD)0x0100)
#define PARITY_ODD  ((WORD)0x0200)
#define PARITY_EVEN  ((WORD)0x0400)
#define PARITY_MARK  ((WORD)0x0800)
#define PARITY_SPACE  ((WORD)0x1000)

typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP, *LPCOMMPROP;

#define COMMPROP_INITIALIZED ((DWORD)0xE73CF52E)

typedef struct _COMSTAT {
    DWORD fCtsHold:1;
    DWORD fDsrHold:1;
    DWORD fRlsdHold:1;
    DWORD fXoffHold:1;
    DWORD fXoffSent:1;
    DWORD fEof:1;
    DWORD fTxim:1;
    DWORD fReserved:25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;

#define DTR_CONTROL_DISABLE  0x00
#define DTR_CONTROL_ENABLE  0x01
#define DTR_CONTROL_HANDSHAKE  0x02

#define RTS_CONTROL_DISABLE  0x00
#define RTS_CONTROL_ENABLE  0x01
#define RTS_CONTROL_HANDSHAKE  0x02
#define RTS_CONTROL_TOGGLE  0x03

typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary:1;
    DWORD fParity:1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff:1;
    DWORD fOutX:1;
    DWORD fInX:1;
    DWORD fErrorChar:1;
    DWORD fNull:1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS, *LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG, *LPCOMMCONFIG;

#define FreeModule(hLibModule)  FreeLibrary((hLibModule))
#define MakeProcInstance(lpProc,hInstance)  (lpProc)
#define FreeProcInstance(lpProc)  (lpProc)

#define GMEM_FIXED  0x0000
#define GMEM_MOVEABLE  0x0002
#define GMEM_NOCOMPACT  0x0010
#define GMEM_NODISCARD  0x0020
#define GMEM_ZEROINIT  0x0040
#define GMEM_MODIFY  0x0080
#define GMEM_DISCARDABLE  0x0100
#define GMEM_NOT_BANKED  0x1000
#define GMEM_SHARE  0x2000
#define GMEM_DDESHARE  0x2000
#define GMEM_NOTIFY  0x4000
#define GMEM_LOWER  GMEM_NOT_BANKED
#define GMEM_VALID_FLAGS  0x7F72
#define GMEM_INVALID_HANDLE 0x8000

#define GHND  (GMEM_MOVEABLE | GMEM_ZEROINIT)
#define GPTR  (GMEM_FIXED | GMEM_ZEROINIT)

#define GlobalLRUNewest(h)  ((HANDLE)(h))
#define GlobalLRUOldest(h)  ((HANDLE)(h))
#define GlobalDiscard(h)  GlobalReAlloc( (h), 0, GMEM_MOVEABLE )

#define GMEM_DISCARDED  0x4000
#define GMEM_LOCKCOUNT  0x00FF

typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;

#define NUMA_NO_PREFERRED_NODE ((DWORD) -1)

#define DEBUG_PROCESS  0x00000001
#define DEBUG_ONLY_THIS_PROCESS  0x00000002
#define CREATE_SUSPENDED  0x00000004
#define DETACHED_PROCESS  0x00000008

#define CREATE_NEW_CONSOLE  0x00000010
#define NORMAL_PRIORITY_CLASS  0x00000020
#define IDLE_PRIORITY_CLASS  0x00000040
#define HIGH_PRIORITY_CLASS  0x00000080

#define REALTIME_PRIORITY_CLASS  0x00000100
#define CREATE_NEW_PROCESS_GROUP  0x00000200
#define CREATE_UNICODE_ENVIRONMENT  0x00000400
#define CREATE_SEPARATE_WOW_VDM  0x00000800

#define CREATE_SHARED_WOW_VDM  0x00001000
#define CREATE_FORCEDOS  0x00002000
#define BELOW_NORMAL_PRIORITY_CLASS  0x00004000
#define ABOVE_NORMAL_PRIORITY_CLASS  0x00008000

#define INHERIT_PARENT_AFFINITY  0x00010000
#define INHERIT_CALLER_PRIORITY  0x00020000
#define CREATE_PROTECTED_PROCESS  0x00040000
#define EXTENDED_STARTUPINFO_PRESENT  0x00080000

#define PROCESS_MODE_BACKGROUND_BEGIN  0x00100000
#define PROCESS_MODE_BACKGROUND_END  0x00200000

#define CREATE_BREAKAWAY_FROM_JOB  0x01000000
#define CREATE_PRESERVE_CODE_AUTHZ_LEVEL  0x02000000
#define CREATE_DEFAULT_ERROR_MODE  0x04000000
#define CREATE_NO_WINDOW  0x08000000

#define PROFILE_USER  0x10000000
#define PROFILE_KERNEL  0x20000000
#define PROFILE_SERVER  0x40000000
#define CREATE_IGNORE_SYSTEM_DEFAULT  0x80000000

#define STACK_SIZE_PARAM_IS_A_RESERVATION  0x00010000

#define THREAD_PRIORITY_LOWEST  THREAD_BASE_PRIORITY_MIN
#define THREAD_PRIORITY_BELOW_NORMAL  (THREAD_PRIORITY_LOWEST+1)
#define THREAD_PRIORITY_NORMAL  0
#define THREAD_PRIORITY_HIGHEST  THREAD_BASE_PRIORITY_MAX
#define THREAD_PRIORITY_ABOVE_NORMAL  (THREAD_PRIORITY_HIGHEST-1)
#define THREAD_PRIORITY_ERROR_RETURN  (MAXLONG)

#define THREAD_PRIORITY_TIME_CRITICAL  THREAD_BASE_PRIORITY_LOWRT
#define THREAD_PRIORITY_IDLE  THREAD_BASE_PRIORITY_IDLE

#define THREAD_MODE_BACKGROUND_BEGIN  0x00010000
#define THREAD_MODE_BACKGROUND_END  0x00020000

#define VOLUME_NAME_DOS  0x0
#define VOLUME_NAME_GUID  0x1
#define VOLUME_NAME_NT  0x2
#define VOLUME_NAME_NONE  0x4

#define FILE_NAME_NORMALIZED  0x0
#define FILE_NAME_OPENED  0x8

typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;

typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;

#define DRIVE_UNKNOWN  0
#define DRIVE_NO_ROOT_DIR 1
#define DRIVE_REMOVABLE  2
#define DRIVE_FIXED  3
#define DRIVE_REMOTE  4
#define DRIVE_CDROM  5
#define DRIVE_RAMDISK  6

#define GetFreeSpace(w)  (0x100000L)

#define FILE_TYPE_UNKNOWN  0x0000
#define FILE_TYPE_DISK  0x0001
#define FILE_TYPE_CHAR  0x0002
#define FILE_TYPE_PIPE  0x0003
#define FILE_TYPE_REMOTE  0x8000

#define STD_INPUT_HANDLE  ((DWORD)-10)
#define STD_OUTPUT_HANDLE  ((DWORD)-11)
#define STD_ERROR_HANDLE  ((DWORD)-12)

#define NOPARITY  0
#define ODDPARITY  1
#define EVENPARITY  2
#define MARKPARITY  3
#define SPACEPARITY  4

#define ONESTOPBIT  0
#define ONE5STOPBITS  1
#define TWOSTOPBITS  2

#define IGNORE  0
#define INFINITE  0xFFFFFFFF

#define CBR_110  110
#define CBR_300  300
#define CBR_600  600
#define CBR_1200  1200
#define CBR_2400  2400
#define CBR_4800  4800
#define CBR_9600  9600
#define CBR_14400  14400
#define CBR_19200  19200
#define CBR_38400  38400
#define CBR_56000  56000
#define CBR_57600  57600
#define CBR_115200  115200
#define CBR_128000  128000
#define CBR_256000  256000

#define CE_RXOVER  0x0001
#define CE_OVERRUN  0x0002
#define CE_RXPARITY  0x0004
#define CE_FRAME  0x0008
#define CE_BREAK  0x0010
#define CE_TXFULL  0x0100
#define CE_PTO  0x0200
#define CE_IOE  0x0400
#define CE_DNS  0x0800
#define CE_OOP  0x1000
#define CE_MODE  0x8000

#define IE_BADID  (-1)
#define IE_OPEN  (-2)
#define IE_NOPEN  (-3)
#define IE_MEMORY  (-4)
#define IE_DEFAULT  (-5)
#define IE_HARDWARE  (-10)
#define IE_BYTESIZE  (-11)
#define IE_BAUDRATE  (-12)

#define EV_RXCHAR  0x0001
#define EV_RXFLAG  0x0002
#define EV_TXEMPTY  0x0004
#define EV_CTS  0x0008
#define EV_DSR  0x0010
#define EV_RLSD  0x0020
#define EV_BREAK  0x0040
#define EV_ERR  0x0080
#define EV_RING  0x0100
#define EV_PERR  0x0200
#define EV_RX80FULL  0x0400
#define EV_EVENT1  0x0800
#define EV_EVENT2  0x1000

#define SETXOFF  1
#define SETXON  2
#define SETRTS  3
#define CLRRTS  4
#define SETDTR  5
#define CLRDTR  6
#define RESETDEV  7
#define SETBREAK  8
#define CLRBREAK  9

#define PURGE_TXABORT  0x0001
#define PURGE_RXABORT  0x0002
#define PURGE_TXCLEAR  0x0004
#define PURGE_RXCLEAR  0x0008

#define LPTx  0x80

#define MS_CTS_ON  ((DWORD)0x0010)
#define MS_DSR_ON  ((DWORD)0x0020)
#define MS_RING_ON  ((DWORD)0x0040)
#define MS_RLSD_ON  ((DWORD)0x0080)

#define S_QUEUEEMPTY  0
#define S_THRESHOLD  1
#define S_ALLTHRESHOLD  2

#define S_NORMAL  0
#define S_LEGATO  1
#define S_STACCATO  2

#define S_PERIOD512  0
#define S_PERIOD1024  1
#define S_PERIOD2048  2
#define S_PERIODVOICE 3
#define S_WHITE512  4
#define S_WHITE1024  5
#define S_WHITE2048  6
#define S_WHITEVOICE  7

#define S_SERDVNA  (-1)
#define S_SEROFM  (-2)
#define S_SERMACT  (-3)
#define S_SERQFUL  (-4)
#define S_SERBDNT  (-5)
#define S_SERDLN  (-6)
#define S_SERDCC  (-7)
#define S_SERDTP  (-8)
#define S_SERDVL  (-9)
#define S_SERDMD  (-10)
#define S_SERDSH  (-11)
#define S_SERDPT  (-12)
#define S_SERDFQ  (-13)
#define S_SERDDR  (-14)
#define S_SERDSR  (-15)
#define S_SERDST  (-16)

#define NMPWAIT_WAIT_FOREVER  0xffffffff
#define NMPWAIT_NOWAIT  0x00000001
#define NMPWAIT_USE_DEFAULT_WAIT  0x00000000

#define FS_CASE_IS_PRESERVED  FILE_CASE_PRESERVED_NAMES
#define FS_CASE_SENSITIVE  FILE_CASE_SENSITIVE_SEARCH
#define FS_UNICODE_STORED_ON_DISK  FILE_UNICODE_ON_DISK
#define FS_PERSISTENT_ACLS  FILE_PERSISTENT_ACLS
#define FS_VOL_IS_COMPRESSED  FILE_VOLUME_IS_COMPRESSED
#define FS_FILE_COMPRESSION  FILE_FILE_COMPRESSION
#define FS_FILE_ENCRYPTION  FILE_SUPPORTS_ENCRYPTION

#define OF_READ  0x00000000
#define OF_WRITE  0x00000001
#define OF_READWRITE  0x00000002
#define OF_SHARE_COMPAT  0x00000000
#define OF_SHARE_EXCLUSIVE  0x00000010
#define OF_SHARE_DENY_WRITE 0x00000020
#define OF_SHARE_DENY_READ  0x00000030
#define OF_SHARE_DENY_NONE  0x00000040
#define OF_PARSE  0x00000100
#define OF_DELETE  0x00000200
#define OF_VERIFY  0x00000400
#define OF_CANCEL  0x00000800
#define OF_CREATE  0x00001000
#define OF_PROMPT  0x00002000
#define OF_EXIST  0x00004000
#define OF_REOPEN  0x00008000

#define OFS_MAXPATHNAME  128
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[OFS_MAXPATHNAME];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

#define UnlockResource(hResData)  ((hResData), 0)
#define MAXINTATOM  0xC000
#define MAKEINTATOM(i)  (LPTSTR)((ULONG_PTR)((WORD)(i)))
#define INVALID_ATOM  ((ATOM)0)

int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int);
int WINAPI wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int);

WINBASEAPI DECLSPEC_ALLOCATOR HGLOBAL WINAPI GlobalAlloc(UINT, SIZE_T);
WINBASEAPI DECLSPEC_ALLOCATOR HGLOBAL WINAPI GlobalReAlloc(HGLOBAL, SIZE_T, UINT);
WINBASEAPI SIZE_T WINAPI GlobalSize(HGLOBAL);
WINBASEAPI UINT WINAPI GlobalFlags(HGLOBAL);
WINBASEAPI LPVOID WINAPI GlobalLock(HGLOBAL);
WINBASEAPI HGLOBAL WINAPI GlobalHandle(LPCVOID);
WINBASEAPI BOOL WINAPI GlobalUnlock(HGLOBAL);
WINBASEAPI HGLOBAL WINAPI GlobalFree(HGLOBAL);
WINBASEAPI SIZE_T WINAPI GlobalCompact(DWORD);
WINBASEAPI VOID WINAPI GlobalFix(HGLOBAL);
WINBASEAPI VOID WINAPI GlobalUnfix(HGLOBAL);
WINBASEAPI LPVOID WINAPI GlobalWire(HGLOBAL);
WINBASEAPI BOOL WINAPI GlobalUnWire(HGLOBAL);
WINBASEAPI VOID WINAPI GlobalMemoryStatus(LPMEMORYSTATUS);

WINBASEAPI DECLSPEC_ALLOCATOR HLOCAL WINAPI LocalAlloc(UINT, SIZE_T);
WINBASEAPI DECLSPEC_ALLOCATOR HLOCAL WINAPI LocalReAlloc(HLOCAL, SIZE_T, UINT);
WINBASEAPI LPVOID WINAPI LocalLock(HLOCAL);
WINBASEAPI HLOCAL WINAPI LocalHandle(LPCVOID);
WINBASEAPI BOOL WINAPI LocalUnlock(HLOCAL);
WINBASEAPI SIZE_T WINAPI LocalSize(HLOCAL);
WINBASEAPI UINT WINAPI LocalFlags(HLOCAL);
WINBASEAPI HLOCAL WINAPI LocalFree(HLOCAL);
WINBASEAPI SIZE_T WINAPI LocalShrink(HLOCAL, UINT);
WINBASEAPI SIZE_T WINAPI LocalCompact(UINT);

#define SCS_32BIT_BINARY  0
#define SCS_DOS_BINARY  1
#define SCS_WOW_BINARY  2
#define SCS_PIF_BINARY  3
#define SCS_POSIX_BINARY  4
#define SCS_OS216_BINARY  5
#define SCS_64BIT_BINARY  6

#ifdef _WIN64
#define SCS_THIS_PLATFORM_BINARY  SCS_64BIT_BINARY
#else /* !_WIN64 */
#define SCS_THIS_PLATFORM_BINARY  SCS_32BIT_BINARY
#endif /* !_WIN64 */

WINBASEAPI BOOL WINAPI GetBinaryTypeA(LPCSTR, LPDWORD);
WINBASEAPI BOOL WINAPI GetBinaryTypeW(LPCWSTR, LPDWORD);

#ifdef UNICODE
#define GetBinaryType  GetBinaryTypeW
#else /* !UNICODE */
#define GetBinaryType  GetBinaryTypeA
#endif /* !UNICODE */

WINBASEAPI DWORD WINAPI GetShortPathNameA(LPCSTR, LPSTR, DWORD);

#ifndef UNICODE
#define GetShortPathName  GetShortPathNameA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0600

WINBASEAPI DWORD WINAPI GetLongPathNameTransactedA(LPCSTR, LPSTR, DWORD, HANDLE);
WINBASEAPI DWORD WINAPI GetLongPathNameTransactedW(LPCWSTR, LPWSTR, DWORD, HANDLE);

#ifdef UNICODE
#define GetLongPathNameTransacted  GetLongPathNameTransactedW
#else /* !UNICODE */
#define GetLongPathNameTransacted  GetLongPathNameTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI BOOL WINAPI GetProcessAffinityMask(HANDLE, PDWORD_PTR, PDWORD_PTR);
WINBASEAPI BOOL WINAPI SetProcessAffinityMask(HANDLE, DWORD_PTR);
WINBASEAPI BOOL WINAPI GetProcessIoCounters(HANDLE, PIO_COUNTERS);
WINBASEAPI BOOL WINAPI GetProcessWorkingSetSize(HANDLE, PSIZE_T, PSIZE_T);
WINBASEAPI BOOL WINAPI SetProcessWorkingSetSize(HANDLE, SIZE_T, SIZE_T);
WINBASEAPI VOID WINAPI FatalExit(int);

WINBASEAPI BOOL WINAPI SetEnvironmentStringsA(LPCH);

#ifndef UNICODE
#define SetEnvironmentStrings  SetEnvironmentStringsA
#endif /* !UNICODE */

#if(_WIN32_WINNT >= 0x0400)

#define FIBER_FLAG_FLOAT_SWITCH  0x1

WINBASEAPI VOID WINAPI SwitchToFiber(LPVOID);
WINBASEAPI VOID WINAPI DeleteFiber(LPVOID);

#if (_WIN32_WINNT >= 0x0501)
WINBASEAPI BOOL WINAPI ConvertFiberToThread(VOID);
#endif /* _WIN32_WINNT >= 0x0501 */

WINBASEAPI LPVOID WINAPI CreateFiberEx(SIZE_T, SIZE_T, DWORD, LPFIBER_START_ROUTINE, LPVOID);
WINBASEAPI LPVOID WINAPI ConvertThreadToFiberEx(LPVOID, DWORD);
WINBASEAPI LPVOID WINAPI CreateFiber(SIZE_T, LPFIBER_START_ROUTINE, LPVOID);
WINBASEAPI LPVOID WINAPI ConvertThreadToFiber(LPVOID);

#if (_WIN32_WINNT >= 0x0601)

#define UMS_VERSION RTL_UMS_VERSION

typedef void *PUMS_CONTEXT;
typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {
    ULONG UmsVersion;
    PUMS_COMPLETION_LIST CompletionList;
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
    PVOID SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread:1;
            ULONG IsUmsWorkerThread:1;
        } DUMMYSTRUCTNAME;
        ULONG ThreadUmsFlags;
    } DUMMYUNIONNAME;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;

WINBASEAPI BOOL WINAPI CreateUmsCompletionList(PUMS_COMPLETION_LIST *);
WINBASEAPI BOOL WINAPI DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST, DWORD, PUMS_CONTEXT *);
WINBASEAPI BOOL WINAPI GetUmsCompletionListEvent(PUMS_COMPLETION_LIST, PHANDLE);
WINBASEAPI BOOL WINAPI ExecuteUmsThread(PUMS_CONTEXT);
WINBASEAPI BOOL WINAPI UmsThreadYield(PVOID);
WINBASEAPI BOOL WINAPI DeleteUmsCompletionList(PUMS_COMPLETION_LIST);
WINBASEAPI PUMS_CONTEXT WINAPI GetCurrentUmsThread(VOID);
WINBASEAPI PUMS_CONTEXT WINAPI GetNextUmsListItem(PUMS_CONTEXT);
WINBASEAPI BOOL WINAPI QueryUmsThreadInformation(PUMS_CONTEXT, UMS_THREAD_INFO_CLASS, PVOID, ULONG, PULONG);
WINBASEAPI BOOL WINAPI SetUmsThreadInformation(PUMS_CONTEXT, UMS_THREAD_INFO_CLASS, PVOID, ULONG);
WINBASEAPI BOOL WINAPI DeleteUmsThreadContext(PUMS_CONTEXT);
WINBASEAPI BOOL WINAPI CreateUmsThreadContext(PUMS_CONTEXT *);
WINBASEAPI BOOL WINAPI EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO);
WINBASEAPI BOOL WINAPI GetUmsSystemThreadInformation(HANDLE, PUMS_SYSTEM_THREAD_INFORMATION);

#endif /* _WIN32_WINNT >= 0x0601 */

#endif /* _WIN32_WINNT >= 0x0400 */

WINBASEAPI DWORD_PTR WINAPI SetThreadAffinityMask(HANDLE, DWORD_PTR);

#if (_WIN32_WINNT >= 0x0600)

#define PROCESS_DEP_ENABLE  0x00000001
#define PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION  0x00000002

WINBASEAPI BOOL WINAPI SetProcessDEPPolicy(DWORD);
WINBASEAPI BOOL WINAPI GetProcessDEPPolicy(HANDLE, LPDWORD, PBOOL);

#endif // _WIN32_WINNT >= 0x0600

WINBASEAPI BOOL WINAPI RequestWakeupLatency(LATENCY_TIME);
WINBASEAPI BOOL WINAPI IsSystemResumeAutomatic(VOID);
WINBASEAPI BOOL WINAPI GetThreadSelectorEntry(HANDLE, DWORD, LPLDT_ENTRY);
WINBASEAPI EXECUTION_STATE WINAPI SetThreadExecutionState(EXECUTION_STATE);

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)

typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

WINBASEAPI HANDLE WINAPI PowerCreateRequest(PREASON_CONTEXT);
WINBASEAPI BOOL WINAPI PowerSetRequest(HANDLE, POWER_REQUEST_TYPE);
WINBASEAPI BOOL WINAPI PowerClearRequest(HANDLE, POWER_REQUEST_TYPE);

#endif // (_WIN32_WINNT >= _WIN32_WINNT_WIN7)

#ifdef WINBASE_DECLARE_RESTORE_LAST_ERROR
WINBASEAPI VOID WINAPI RestoreLastError(DWORD);
typedef VOID (WINAPI *PRESTORE_LAST_ERROR)(DWORD);
#define RESTORE_LAST_ERROR_NAME_A  "RestoreLastError"
#define RESTORE_LAST_ERROR_NAME_W  L"RestoreLastError"
#define RESTORE_LAST_ERROR_NAME  TEXT("RestoreLastError")
#endif /* WINBASE_DECLARE_RESTORE_LAST_ERROR */

#define HasOverlappedIoCompleted(lpOverlapped)  (((DWORD)(lpOverlapped)->Internal) != STATUS_PENDING)

#if (_WIN32_WINNT >= 0x0600)

#define FILE_SKIP_COMPLETION_PORT_ON_SUCCESS  0x1

#define FILE_SKIP_SET_EVENT_ON_HANDLE  0x2

WINBASEAPI BOOL WINAPI SetFileCompletionNotificationModes(HANDLE, UCHAR);

#endif /* _WIN32_WINNT >= 0x0600 */

#define SEM_FAILCRITICALERRORS  0x0001
#define SEM_NOGPFAULTERRORBOX  0x0002
#define SEM_NOALIGNMENTFAULTEXCEPT  0x0004
#define SEM_NOOPENFILEERRORBOX  0x8000

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI Wow64GetThreadContext(HANDLE, PWOW64_CONTEXT);
WINBASEAPI BOOL WINAPI Wow64SetThreadContext(HANDLE, CONST WOW64_CONTEXT *);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0601)
WINBASEAPI BOOL WINAPI Wow64GetThreadSelectorEntry(HANDLE, DWORD, PWOW64_LDT_ENTRY);
#endif /* _WIN32_WINNT >= 0x0601 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI DWORD WINAPI Wow64SuspendThread(HANDLE);
#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI BOOL WINAPI DebugSetProcessKillOnExit(BOOL);
WINBASEAPI BOOL WINAPI DebugBreakProcess(HANDLE);

#if (_WIN32_WINNT >= 0x0403)
#define CRITICAL_SECTION_NO_DEBUG_INFO  RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO
#endif /* _WIN32_WINNT >= 0x0403 */

WINBASEAPI BOOL WINAPI PulseEvent(HANDLE);
WINBASEAPI ATOM WINAPI GlobalDeleteAtom(ATOM);
WINBASEAPI BOOL WINAPI InitAtomTable(DWORD);
WINBASEAPI ATOM WINAPI DeleteAtom(ATOM);
WINBASEAPI UINT WINAPI SetHandleCount(UINT);
WINBASEAPI BOOL WINAPI RequestDeviceWakeup(HANDLE);
WINBASEAPI BOOL WINAPI CancelDeviceWakeupRequest(HANDLE);
WINBASEAPI BOOL WINAPI GetDevicePowerState(HANDLE, BOOL *);
WINBASEAPI BOOL WINAPI SetMessageWaitingIndicator(HANDLE, ULONG);
WINBASEAPI BOOL WINAPI SetFileShortNameA(HANDLE, LPCSTR);
WINBASEAPI BOOL WINAPI SetFileShortNameW(HANDLE, LPCWSTR);

#ifdef UNICODE
#define SetFileShortName  SetFileShortNameW
#else /* !UNICODE */
#define SetFileShortName  SetFileShortNameA
#endif /* !UNICODE */

#define HANDLE_FLAG_INHERIT  0x00000001
#define HANDLE_FLAG_PROTECT_FROM_CLOSE  0x00000002

#define HINSTANCE_ERROR 32

WINBASEAPI DWORD WINAPI LoadModule(LPCSTR, LPVOID);
WINBASEAPI UINT WINAPI WinExec(LPCSTR, UINT);
WINBASEAPI BOOL WINAPI ClearCommBreak(HANDLE);
WINBASEAPI BOOL WINAPI ClearCommError(HANDLE, LPDWORD, LPCOMSTAT);
WINBASEAPI BOOL WINAPI SetupComm(HANDLE, DWORD, DWORD);
WINBASEAPI BOOL WINAPI EscapeCommFunction(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI GetCommConfig(HANDLE, LPCOMMCONFIG, LPDWORD);
WINBASEAPI BOOL WINAPI GetCommMask(HANDLE, LPDWORD);
WINBASEAPI BOOL WINAPI GetCommProperties(HANDLE, LPCOMMPROP);
WINBASEAPI BOOL WINAPI GetCommModemStatus(HANDLE, LPDWORD);
WINBASEAPI BOOL WINAPI GetCommState(HANDLE, LPDCB);
WINBASEAPI BOOL WINAPI GetCommTimeouts(HANDLE, LPCOMMTIMEOUTS);
WINBASEAPI BOOL WINAPI PurgeComm(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI SetCommBreak(HANDLE);
WINBASEAPI BOOL WINAPI SetCommConfig(HANDLE, LPCOMMCONFIG, DWORD);
WINBASEAPI BOOL WINAPI SetCommMask(HANDLE, DWORD);
WINBASEAPI BOOL WINAPI SetCommState(HANDLE, LPDCB);
WINBASEAPI BOOL WINAPI SetCommTimeouts(HANDLE, LPCOMMTIMEOUTS);
WINBASEAPI BOOL WINAPI TransmitCommChar(HANDLE, char);
WINBASEAPI BOOL WINAPI WaitCommEvent(HANDLE, LPDWORD, LPOVERLAPPED);
WINBASEAPI DWORD WINAPI SetTapePosition(HANDLE, DWORD, DWORD, DWORD, DWORD, BOOL);
WINBASEAPI DWORD WINAPI GetTapePosition(HANDLE, DWORD, LPDWORD, LPDWORD, LPDWORD);
WINBASEAPI DWORD WINAPI PrepareTape(HANDLE, DWORD, BOOL);
WINBASEAPI DWORD WINAPI EraseTape(HANDLE, DWORD, BOOL);
WINBASEAPI DWORD WINAPI CreateTapePartition(HANDLE, DWORD, DWORD, DWORD);
WINBASEAPI DWORD WINAPI WriteTapemark(HANDLE, DWORD, DWORD, BOOL);
WINBASEAPI DWORD WINAPI GetTapeStatus(HANDLE);
WINBASEAPI DWORD WINAPI GetTapeParameters(HANDLE, DWORD, LPDWORD, LPVOID);

#define GET_TAPE_MEDIA_INFORMATION  0
#define GET_TAPE_DRIVE_INFORMATION  1

WINBASEAPI DWORD WINAPI SetTapeParameters(HANDLE, DWORD, LPVOID);

#define SET_TAPE_MEDIA_INFORMATION  0
#define SET_TAPE_DRIVE_INFORMATION  1

WINBASEAPI int WINAPI MulDiv(int, int, int);

typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;

#if (NTDDI_VERSION >= NTDDI_WINXPSP3)
WINBASEAPI DEP_SYSTEM_POLICY_TYPE WINAPI GetSystemDEPPolicy(VOID);
#endif /* NTDDI_VERSION >= NTDDI_WINXPSP3 */

#if _WIN32_WINNT >= 0x0501
WINBASEAPI BOOL WINAPI GetSystemRegistryQuota(PDWORD, PDWORD);
#endif /* _WIN32_WINNT >= 0x0501 */

WINBASEAPI BOOL WINAPI FileTimeToDosDateTime(CONST FILETIME *, LPWORD, LPWORD);
WINBASEAPI BOOL WINAPI DosDateTimeToFileTime(WORD, WORD, LPFILETIME);

#define FORMAT_MESSAGE_ALLOCATE_BUFFER 0x00000100

WINBASEAPI DWORD WINAPI FormatMessageA(DWORD, LPCVOID, DWORD, DWORD, LPSTR, DWORD, va_list *);
WINBASEAPI DWORD WINAPI FormatMessageW(DWORD, LPCVOID, DWORD, DWORD, LPWSTR, DWORD, va_list *);

#ifdef UNICODE
#define FormatMessage  FormatMessageW
#else /* !UNICODE */
#define FormatMessage  FormatMessageA
#endif /* !UNICODE */

#define FORMAT_MESSAGE_IGNORE_INSERTS  0x00000200
#define FORMAT_MESSAGE_FROM_STRING  0x00000400
#define FORMAT_MESSAGE_FROM_HMODULE  0x00000800
#define FORMAT_MESSAGE_FROM_SYSTEM  0x00001000
#define FORMAT_MESSAGE_ARGUMENT_ARRAY  0x00002000
#define FORMAT_MESSAGE_MAX_WIDTH_MASK  0x000000FF

WINBASEAPI HANDLE WINAPI CreateMailslotA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
WINBASEAPI HANDLE WINAPI CreateMailslotW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);

#ifdef UNICODE
#define CreateMailslot  CreateMailslotW
#else /* !UNICODE */
#define CreateMailslot  CreateMailslotA
#endif /* !UNICODE */

WINBASEAPI BOOL WINAPI GetMailslotInfo(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD);
WINBASEAPI BOOL WINAPI SetMailslotInfo(HANDLE, DWORD);

WINADVAPI BOOL WINAPI EncryptFileA(LPCSTR);
WINADVAPI BOOL WINAPI EncryptFileW(LPCWSTR);
WINADVAPI BOOL WINAPI DecryptFileA(LPCSTR, DWORD);
WINADVAPI BOOL WINAPI DecryptFileW(LPCWSTR, DWORD);

#ifdef UNICODE
#define EncryptFile  EncryptFileW
#define DecryptFile  DecryptFileW
#else /* !UNICODE */
#define EncryptFile  EncryptFileA
#define DecryptFile  DecryptFileA
#endif /* !UNICODE */

#define FILE_ENCRYPTABLE  0
#define FILE_IS_ENCRYPTED  1
#define FILE_SYSTEM_ATTR  2
#define FILE_ROOT_DIR  3
#define FILE_SYSTEM_DIR  4
#define FILE_UNKNOWN  5
#define FILE_SYSTEM_NOT_SUPPORT  6
#define FILE_USER_DISALLOWED  7
#define FILE_READ_ONLY  8
#define FILE_DIR_DISALLOWED  9

WINADVAPI BOOL WINAPI FileEncryptionStatusA(LPCSTR, LPDWORD);
WINADVAPI BOOL WINAPI FileEncryptionStatusW(LPCWSTR, LPDWORD);

#ifdef UNICODE
#define FileEncryptionStatus  FileEncryptionStatusW
#else /* !UNICODE */
#define FileEncryptionStatus  FileEncryptionStatusA
#endif /* !UNICODE */

#define EFS_USE_RECOVERY_KEYS  (0x1)

typedef DWORD(WINAPI *PFE_EXPORT_FUNC)(PBYTE, PVOID, ULONG);
typedef DWORD(WINAPI *PFE_IMPORT_FUNC)(PBYTE, PVOID, PULONG);

#define CREATE_FOR_IMPORT  (1)
#define CREATE_FOR_DIR  (2)
#define OVERWRITE_HIDDEN  (4)
#define EFSRPC_SECURE_ONLY  (8)
#define EFS_DROP_ALTERNATE_STREAMS  (0x10)

WINADVAPI DWORD WINAPI OpenEncryptedFileRawA(LPCSTR, ULONG, PVOID *);
WINADVAPI DWORD WINAPI OpenEncryptedFileRawW(LPCWSTR, ULONG, PVOID *);

#ifdef UNICODE
#define OpenEncryptedFileRaw  OpenEncryptedFileRawW
#else /* !UNICODE */
#define OpenEncryptedFileRaw  OpenEncryptedFileRawA
#endif /* !UNICODE */

WINADVAPI DWORD WINAPI ReadEncryptedFileRaw(PFE_EXPORT_FUNC, PVOID, PVOID);
WINADVAPI DWORD WINAPI WriteEncryptedFileRaw(PFE_IMPORT_FUNC, PVOID, PVOID);
WINADVAPI VOID WINAPI CloseEncryptedFileRaw(PVOID);

WINBASEAPI int WINAPI lstrcmpA(LPCSTR, LPCSTR);
WINBASEAPI int WINAPI lstrcmpW(LPCWSTR, LPCWSTR);
WINBASEAPI int WINAPI lstrcmpiA(LPCSTR, LPCSTR);
WINBASEAPI int WINAPI lstrcmpiW(LPCWSTR, LPCWSTR);

#ifdef UNICODE
#define lstrcmp  lstrcmpW
#define lstrcmpi  lstrcmpiW
#else /* !UNICODE */
#define lstrcmp  lstrcmpA
#define lstrcmpi  lstrcmpiA
#endif /* !UNICODE */

WINBASEAPI LPSTR WINAPI lstrcpynA(LPSTR, LPCSTR, int);
WINBASEAPI LPWSTR WINAPI lstrcpynW(LPWSTR, LPCWSTR, int);
WINBASEAPI LPSTR WINAPI lstrcpyA(LPSTR, LPCSTR);
WINBASEAPI LPWSTR WINAPI lstrcpyW(LPWSTR, LPCWSTR);
WINBASEAPI LPSTR WINAPI lstrcatA(LPSTR, LPCSTR);
WINBASEAPI LPWSTR WINAPI lstrcatW(LPWSTR, LPCWSTR);
WINBASEAPI int WINAPI lstrlenA(LPCSTR);
WINBASEAPI int WINAPI lstrlenW(LPCWSTR);

#ifdef UNICODE
#define lstrcpyn  lstrcpynW
#define lstrcpy  lstrcpyW
#define lstrcat  lstrcatW
#define lstrlen  lstrlenW
#else /* !UNICODE */
#define lstrcpyn  lstrcpynA
#define lstrcpy  lstrcpyA
#define lstrcat  lstrcatA
#define lstrlen  lstrlenA
#endif /* !UNICODE */

WINBASEAPI HFILE WINAPI OpenFile(LPCSTR, LPOFSTRUCT, UINT);
WINBASEAPI HFILE WINAPI _lopen(LPCSTR, int);
WINBASEAPI HFILE WINAPI _lcreat(LPCSTR, int);
WINBASEAPI UINT WINAPI _lread(HFILE, LPVOID, UINT);
WINBASEAPI UINT WINAPI _lwrite(HFILE, LPCCH, UINT);
WINBASEAPI long WINAPI _hread(HFILE, LPVOID, long);
WINBASEAPI long WINAPI _hwrite(HFILE, LPCCH, long);
WINBASEAPI HFILE WINAPI _lclose(HFILE);
WINBASEAPI LONG WINAPI _llseek(HFILE, LONG, int);

WINADVAPI BOOL WINAPI IsTextUnicode(CONST VOID *, int, LPINT);

#if(_WIN32_WINNT >= 0x0400)
WINBASEAPI DWORD WINAPI SignalObjectAndWait(HANDLE, HANDLE, DWORD, BOOL);
#endif /* _WIN32_WINNT >= 0x0400 */

WINBASEAPI BOOL WINAPI BackupRead(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *);
WINBASEAPI BOOL WINAPI BackupSeek(HANDLE, DWORD, DWORD, LPDWORD, LPDWORD, LPVOID *);
WINBASEAPI BOOL WINAPI BackupWrite(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *);

typedef struct _WIN32_STREAM_ID {
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR cStreamName[ANYSIZE_ARRAY];
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID;

#define BACKUP_INVALID  0x00000000
#define BACKUP_DATA  0x00000001
#define BACKUP_EA_DATA  0x00000002
#define BACKUP_SECURITY_DATA  0x00000003
#define BACKUP_ALTERNATE_DATA  0x00000004
#define BACKUP_LINK  0x00000005
#define BACKUP_PROPERTY_DATA  0x00000006
#define BACKUP_OBJECT_ID  0x00000007
#define BACKUP_REPARSE_DATA  0x00000008
#define BACKUP_SPARSE_BLOCK  0x00000009
#define BACKUP_TXFS_DATA  0x0000000a
#define BACKUP_GHOSTED_FILE_EXTENTS 0x0000000b

#define STREAM_NORMAL_ATTRIBUTE  0x00000000
#define STREAM_MODIFIED_WHEN_READ  0x00000001
#define STREAM_CONTAINS_SECURITY  0x00000002
#define STREAM_CONTAINS_PROPERTIES  0x00000004
#define STREAM_SPARSE_ATTRIBUTE  0x00000008
#define STREAM_CONTAINS_GHOSTED_FILE_EXTENTS 0x00000010

#define STARTF_USESHOWWINDOW  0x00000001
#define STARTF_USESIZE  0x00000002
#define STARTF_USEPOSITION  0x00000004
#define STARTF_USECOUNTCHARS  0x00000008
#define STARTF_USEFILLATTRIBUTE  0x00000010
#define STARTF_RUNFULLSCREEN  0x00000020
#define STARTF_FORCEONFEEDBACK  0x00000040
#define STARTF_FORCEOFFFEEDBACK  0x00000080
#define STARTF_USESTDHANDLES  0x00000100

#if(WINVER >= 0x0400)
#define STARTF_USEHOTKEY  0x00000200
#define STARTF_TITLEISLINKNAME  0x00000800
#define STARTF_TITLEISAPPID  0x00001000
#define STARTF_PREVENTPINNING  0x00002000
#endif /* WINVER >= 0x0400 */

#if(WINVER >= 0x0600)
#define STARTF_UNTRUSTEDSOURCE  0x00008000
#endif /* WINVER >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)

typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;

typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;

#ifdef UNICODE
typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;
#else /* !UNICODE */
typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#define SHUTDOWN_NORETRY  0x00000001

WINBASEAPI HANDLE WINAPI OpenMutexA(DWORD, BOOL, LPCSTR);
WINBASEAPI HANDLE WINAPI CreateSemaphoreA(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR);
WINBASEAPI HANDLE WINAPI OpenSemaphoreA(DWORD, BOOL, LPCSTR);

#ifndef UNICODE
#define OpenMutex  OpenMutexA
#define CreateSemaphore  CreateSemaphoreA
#define OpenSemaphore  OpenSemaphoreA
#endif /* !UNICODE */


#if (_WIN32_WINNT >= 0x0400) || (_WIN32_WINDOWS > 0x0400)

WINBASEAPI HANDLE WINAPI CreateWaitableTimerA(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
WINBASEAPI HANDLE WINAPI OpenWaitableTimerA(DWORD, BOOL, LPCSTR);

#ifndef UNICODE
#define CreateWaitableTimer  CreateWaitableTimerA
#define OpenWaitableTimer  OpenWaitableTimerA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI HANDLE WINAPI CreateSemaphoreExA(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR, DWORD, DWORD);
WINBASEAPI HANDLE WINAPI CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD);

#ifndef UNICODE
#define CreateSemaphoreEx  CreateSemaphoreExA
#define CreateWaitableTimerEx  CreateWaitableTimerExA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#endif /* _WIN32_WINNT >= 0x0400 || _WIN32_WINDOWS > 0x0400 */

WINBASEAPI HANDLE WINAPI CreateFileMappingA(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR);

#ifndef UNICODE
#define CreateFileMapping  CreateFileMappingA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0600

WINBASEAPI HANDLE WINAPI CreateFileMappingNumaA(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR, DWORD);

#ifndef UNICODE
#define CreateFileMappingNuma  CreateFileMappingNumaA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI HANDLE WINAPI OpenFileMappingA(DWORD, BOOL, LPCSTR);

#ifndef UNICODE
#define OpenFileMapping  OpenFileMappingA
#endif /* !UNICODE */

WINBASEAPI DWORD WINAPI GetLogicalDriveStringsA(DWORD, LPSTR);

#ifndef UNICODE
#define GetLogicalDriveStrings  GetLogicalDriveStringsA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0602)
WINBASEAPI HMODULE WINAPI LoadPackagedLibrary(LPCWSTR, DWORD);
#endif /* _WIN32_WINNT >= 0x0602 */

#if (_WIN32_WINNT >= 0x0600)

#define PROCESS_NAME_NATIVE  0x00000001

WINBASEAPI BOOL WINAPI QueryFullProcessImageNameA(HANDLE, DWORD, LPSTR, PDWORD);
WINBASEAPI BOOL WINAPI QueryFullProcessImageNameW(HANDLE, DWORD, LPWSTR, PDWORD);

#ifdef UNICODE
#define QueryFullProcessImageName  QueryFullProcessImageNameW
#else /* !UNICODE */
#define QueryFullProcessImageName  QueryFullProcessImageNameA
#endif /* !UNICODE */

#endif // _WIN32_WINNT >= 0x0600

#if (_WIN32_WINNT >= 0x0600)

#define PROC_THREAD_ATTRIBUTE_NUMBER  0x0000FFFF
#define PROC_THREAD_ATTRIBUTE_THREAD  0x00010000
#define PROC_THREAD_ATTRIBUTE_INPUT  0x00020000
#define PROC_THREAD_ATTRIBUTE_ADDITIVE  0x00040000

#define PROTECTION_LEVEL_SAME  0xFFFFFFFF

#ifndef _USE_FULL_PROC_THREAD_ATTRIBUTE
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
    ProcThreadAttributeSecurityCapabilities = 9,
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
    ProcThreadAttributeProtectionLevel = 11,
#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)
    ProcThreadAttributeJobList = 13,
    ProcThreadAttributeChildProcessPolicy = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter = 16,
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD */
#if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
#endif /* NTDDI_VERSION >= NTDDI_WIN10_RS1 */
} PROC_THREAD_ATTRIBUTE_NUM;
#endif /* !_USE_FULL_PROC_THREAD_ATTRIBUTE */

#define ProcThreadAttributeValue(Number, Thread, Input, Additive) \
    (((Number) & PROC_THREAD_ATTRIBUTE_NUMBER) | \
    ((Thread != FALSE) ? PROC_THREAD_ATTRIBUTE_THREAD : 0) | \
    ((Input != FALSE) ? PROC_THREAD_ATTRIBUTE_INPUT : 0) | \
    ((Additive != FALSE) ? PROC_THREAD_ATTRIBUTE_ADDITIVE : 0))

#define PROC_THREAD_ATTRIBUTE_PARENT_PROCESS \
    ProcThreadAttributeValue (ProcThreadAttributeParentProcess, FALSE, TRUE, FALSE)
#define PROC_THREAD_ATTRIBUTE_HANDLE_LIST \
    ProcThreadAttributeValue (ProcThreadAttributeHandleList, FALSE, TRUE, FALSE)

#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
#define PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY \
    ProcThreadAttributeValue (ProcThreadAttributeGroupAffinity, TRUE, TRUE, FALSE)
#define PROC_THREAD_ATTRIBUTE_PREFERRED_NODE \
    ProcThreadAttributeValue (ProcThreadAttributePreferredNode, FALSE, TRUE, FALSE)
#define PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR \
    ProcThreadAttributeValue (ProcThreadAttributeIdealProcessor, TRUE, TRUE, FALSE)
#define PROC_THREAD_ATTRIBUTE_UMS_THREAD \
    ProcThreadAttributeValue (ProcThreadAttributeUmsThread, TRUE, TRUE, FALSE)
#define PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY \
    ProcThreadAttributeValue (ProcThreadAttributeMitigationPolicy, FALSE, TRUE, FALSE)
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES \
    ProcThreadAttributeValue (ProcThreadAttributeSecurityCapabilities, FALSE, TRUE, FALSE)
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#define PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL \
    ProcThreadAttributeValue (ProcThreadAttributeProtectionLevel, FALSE, TRUE, FALSE)

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
#define PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE  0x01
#define PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE  0x02
#define PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE  0x04
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

#define PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK  (0x00000003 <<  8)
#define PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER  (0x00000000 <<  8)
#define PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON  (0x00000001 <<  8)
#define PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF  (0x00000002 <<  8)
#define PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS  (0x00000003 <<  8)

#define PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK  (0x00000003 << 12)
#define PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER  (0x00000000 << 12)
#define PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON  (0x00000001 << 12)
#define PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF  (0x00000002 << 12)
#define PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED  (0x00000003 << 12)

#define PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK  (0x00000003 << 16)
#define PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER  (0x00000000 << 16)
#define PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON  (0x00000001 << 16)
#define PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF  (0x00000002 << 16)
#define PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED  (0x00000003 << 16)

#define PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK  (0x00000003 << 20)
#define PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER  (0x00000000 << 20)
#define PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON  (0x00000001 << 20)
#define PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF  (0x00000002 << 20)
#define PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED  (0x00000003 << 20)

#define PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK  (0x00000003 << 24)
#define PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER  (0x00000000 << 24)
#define PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON  (0x00000001 << 24)
#define PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF  (0x00000002 << 24)
#define PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED  (0x00000003 << 24)

#define PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK  (0x00000003 << 28)
#define PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER  (0x00000000 << 28)
#define PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON  (0x00000001 << 28)
#define PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF  (0x00000002 << 28)
#define PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED  (0x00000003 << 28)

#define PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK  (0x00000003ui64 << 32)
#define PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER  (0x00000000ui64 << 32)
#define PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON  (0x00000001ui64 << 32)
#define PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF  (0x00000002ui64 << 32)
#define PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED  (0x00000003ui64 << 32)

#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)

#define PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK  (0x00000003ui64 << 36)
#define PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER  (0x00000000ui64 << 36)
#define PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON  (0x00000001ui64 << 36)
#define PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF  (0x00000002ui64 << 36)
#define PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT  (0x00000003ui64 << 36)

#define PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK  (0x00000003ui64 << 40)
#define PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER  (0x00000000ui64 << 40)
#define PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON  (0x00000001ui64 << 40)
#define PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF  (0x00000002ui64 << 40)
#define PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_RESERVED  (0x00000003ui64 << 40)

#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK  (0x00000003ui64 << 44)
#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER  (0x00000000ui64 << 44)
#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON  (0x00000001ui64 << 44)
#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF  (0x00000002ui64 << 44)
#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_RESERVED  (0x00000003ui64 << 44)

#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)

#define PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK  (0x00000003ui64 << 48)
#define PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER  (0x00000000ui64 << 48)
#define PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON  (0x00000001ui64 << 48)
#define PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF  (0x00000002ui64 << 48)
#define PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS  (0x00000003ui64 << 48)

#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK  (0x00000003ui64 << 52)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER  (0x00000000ui64 << 52)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON  (0x00000001ui64 << 52)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF  (0x00000002ui64 << 52)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED  (0x00000003ui64 << 52)

#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK  (0x00000003ui64 << 56)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER  (0x00000000ui64 << 56)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON  (0x00000001ui64 << 56)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF  (0x00000002ui64 << 56)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED  (0x00000003ui64 << 56)

#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK  (0x00000003ui64 << 60)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER  (0x00000000ui64 << 60)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON  (0x00000001ui64 << 60)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF  (0x00000002ui64 << 60)
#define PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED  (0x00000003ui64 << 60)


#endif /* _WIN32_WINNT_WINTHRESHOLD */
#endif /* _WIN32_WINNT_WINBLUE */
#endif /* _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)

#define PROC_THREAD_ATTRIBUTE_JOB_LIST \
    ProcThreadAttributeValue (ProcThreadAttributeJobList, FALSE, TRUE, FALSE)

#define PROCESS_CREATION_CHILD_PROCESS_RESTRICTED  0x01
#define PROCESS_CREATION_CHILD_PROCESS_OVERRIDE  0x02

#define PROCESS_CREATION_DESKTOP_APPX_OVERRIDE  0x04

#define PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY \
    ProcThreadAttributeValue (ProcThreadAttributeChildProcessPolicy, FALSE, TRUE, FALSE)

#define PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT  0x01

#define PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY \
    ProcThreadAttributeValue (ProcThreadAttributeAllApplicationPackagesPolicy, FALSE, TRUE, FALSE)

#define PROCESS_CREATION_ENABLE_WIN32K_FILTER  0x01
#define PROCESS_CREATION_AUDIT_WIN32K_FILTER  0x02

#define PROC_THREAD_ATTRIBUTE_WIN32K_FILTER \
    ProcThreadAttributeValue (ProcThreadAttributeWin32kFilter, FALSE, TRUE, FALSE)

#endif /* _WIN32_WINNT_WINTHRESHOLD */

WINBASEAPI VOID WINAPI GetStartupInfoA(LPSTARTUPINFOA);

#ifndef UNICODE
#define GetStartupInfo  GetStartupInfoA
#endif /* !UNICODE */

WINBASEAPI DWORD WINAPI GetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD);
WINBASEAPI DWORD WINAPI GetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);

#ifdef UNICODE
#define GetFirmwareEnvironmentVariable  GetFirmwareEnvironmentVariableW
#else /* !UNICODE */
#define GetFirmwareEnvironmentVariable  GetFirmwareEnvironmentVariableA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

WINBASEAPI DWORD WINAPI GetFirmwareEnvironmentVariableExA(LPCSTR, LPCSTR, PVOID, DWORD, PDWORD);
WINBASEAPI DWORD WINAPI GetFirmwareEnvironmentVariableExW(LPCWSTR, LPCWSTR, PVOID, DWORD, PDWORD);

#ifdef UNICODE
#define GetFirmwareEnvironmentVariableEx  GetFirmwareEnvironmentVariableExW
#else /* !UNICODE */
#define GetFirmwareEnvironmentVariableEx  GetFirmwareEnvironmentVariableExA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

WINBASEAPI BOOL WINAPI SetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD);
WINBASEAPI BOOL WINAPI SetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);

#ifdef UNICODE
#define SetFirmwareEnvironmentVariable  SetFirmwareEnvironmentVariableW
#else /* !UNICODE */
#define SetFirmwareEnvironmentVariable  SetFirmwareEnvironmentVariableA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

WINBASEAPI BOOL WINAPI SetFirmwareEnvironmentVariableExA(LPCSTR, LPCSTR, PVOID, DWORD, DWORD);
WINBASEAPI BOOL WINAPI SetFirmwareEnvironmentVariableExW(LPCWSTR, LPCWSTR, PVOID, DWORD, DWORD);

#ifdef UNICODE
#define SetFirmwareEnvironmentVariableEx  SetFirmwareEnvironmentVariableExW
#else /* !UNICODE */
#define SetFirmwareEnvironmentVariableEx  SetFirmwareEnvironmentVariableExA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
WINBASEAPI BOOL WINAPI GetFirmwareType(PFIRMWARE_TYPE);
WINBASEAPI BOOL WINAPI IsNativeVhdBoot(PBOOL);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

WINBASEAPI HRSRC WINAPI FindResourceA(HMODULE, LPCSTR, LPCSTR);
WINBASEAPI HRSRC WINAPI FindResourceExA(HMODULE, LPCSTR, LPCSTR, WORD);
WINBASEAPI BOOL WINAPI EnumResourceTypesA(HMODULE, ENUMRESTYPEPROCA, LONG_PTR);
WINBASEAPI BOOL WINAPI EnumResourceTypesW(HMODULE, ENUMRESTYPEPROCW, LONG_PTR);
WINBASEAPI BOOL WINAPI EnumResourceNamesA(HMODULE, LPCSTR, ENUMRESNAMEPROCA, LONG_PTR);
WINBASEAPI BOOL WINAPI EnumResourceLanguagesA(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, LONG_PTR);
WINBASEAPI BOOL WINAPI EnumResourceLanguagesW(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, LONG_PTR);
WINBASEAPI HANDLE WINAPI BeginUpdateResourceA(LPCSTR, BOOL);
WINBASEAPI HANDLE WINAPI BeginUpdateResourceW(LPCWSTR, BOOL);
WINBASEAPI BOOL WINAPI UpdateResourceA(HANDLE, LPCSTR, LPCSTR, WORD, LPVOID, DWORD);
WINBASEAPI BOOL WINAPI UpdateResourceW(HANDLE, LPCWSTR, LPCWSTR, WORD, LPVOID, DWORD);
WINBASEAPI BOOL WINAPI EndUpdateResourceA(HANDLE, BOOL);
WINBASEAPI BOOL WINAPI EndUpdateResourceW(HANDLE, BOOL);

#ifdef UNICODE
#define EnumResourceTypes  EnumResourceTypesW
#define EnumResourceTypes  EnumResourceTypesW
#define EnumResourceLanguages  EnumResourceLanguagesW
#define BeginUpdateResource  BeginUpdateResourceW
#define UpdateResource  UpdateResourceW
#define EndUpdateResource  EndUpdateResourceW
#else /* !UNICODE */
#define FindResource  FindResourceA
#define FindResourceEx  FindResourceExA
#define EnumResourceTypes  EnumResourceTypesA
#define EnumResourceNames  EnumResourceNamesA
#define EnumResourceLanguages  EnumResourceLanguagesA
#define BeginUpdateResource  BeginUpdateResourceA
#define UpdateResource  UpdateResourceA
#define EndUpdateResource  EndUpdateResourceA
#endif /* !UNICODE */

#define ATOM_FLAG_GLOBAL  0x2

WINBASEAPI ATOM WINAPI GlobalAddAtomA(LPCSTR);
WINBASEAPI ATOM WINAPI GlobalAddAtomW(LPCWSTR);
WINBASEAPI ATOM WINAPI GlobalAddAtomExA(LPCSTR, DWORD);
WINBASEAPI ATOM WINAPI GlobalAddAtomExW(LPCWSTR, DWORD);
WINBASEAPI ATOM WINAPI GlobalFindAtomA(LPCSTR);
WINBASEAPI ATOM WINAPI GlobalFindAtomW(LPCWSTR);
WINBASEAPI UINT WINAPI GlobalGetAtomNameA(ATOM, LPSTR, int);
WINBASEAPI UINT WINAPI GlobalGetAtomNameW(ATOM, LPWSTR, int);
WINBASEAPI ATOM WINAPI AddAtomA(LPCSTR);
WINBASEAPI ATOM WINAPI AddAtomW(LPCWSTR);
WINBASEAPI ATOM WINAPI FindAtomA(LPCSTR);
WINBASEAPI ATOM WINAPI FindAtomW(LPCWSTR);
WINBASEAPI UINT WINAPI GetAtomNameA(ATOM, LPSTR, int);
WINBASEAPI UINT WINAPI GetAtomNameW(ATOM, LPWSTR, int);

#ifdef UNICODE
#define GlobalAddAtom  GlobalAddAtomW
#define GlobalAddAtomEx  GlobalAddAtomExW
#define GlobalFindAtom  GlobalFindAtomW
#define GlobalGetAtomName  GlobalGetAtomNameW
#define AddAtom  AddAtomW
#define FindAtom  FindAtomW
#define GetAtomName  GetAtomNameW
#else /* !UNICODE */
#define GlobalAddAtom  GlobalAddAtomA
#define GlobalAddAtomEx  GlobalAddAtomExA
#define GlobalFindAtom  GlobalFindAtomA
#define GlobalGetAtomName  GlobalGetAtomNameA
#define AddAtom  AddAtomA
#define FindAtom  FindAtomA
#define GetAtomName  GetAtomNameA
#endif /* !UNICODE */

WINBASEAPI UINT WINAPI GetProfileIntA(LPCSTR, LPCSTR, INT);
WINBASEAPI UINT WINAPI GetProfileIntW(LPCWSTR, LPCWSTR, INT);
WINBASEAPI DWORD WINAPI GetProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD);
WINBASEAPI DWORD WINAPI GetProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD);
WINBASEAPI BOOL WINAPI WriteProfileStringA(LPCSTR, LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI WriteProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR);
WINBASEAPI DWORD WINAPI GetProfileSectionA(LPCSTR, LPSTR, DWORD);
WINBASEAPI DWORD WINAPI GetProfileSectionW(LPCWSTR, LPWSTR, DWORD);
WINBASEAPI BOOL WINAPI WriteProfileSectionA(LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI WriteProfileSectionW(LPCWSTR, LPCWSTR);
WINBASEAPI UINT WINAPI GetPrivateProfileIntA(LPCSTR, LPCSTR, INT, LPCSTR);
WINBASEAPI UINT WINAPI GetPrivateProfileIntW(LPCWSTR, LPCWSTR, INT, LPCWSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD, LPCSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD, LPCWSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileSectionA(LPCSTR, LPSTR, DWORD, LPCSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileSectionW(LPCWSTR, LPWSTR, DWORD, LPCWSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileSectionA(LPCSTR, LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileSectionW(LPCWSTR, LPCWSTR, LPCWSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileSectionNamesA(LPSTR, DWORD, LPCSTR);
WINBASEAPI DWORD WINAPI GetPrivateProfileSectionNamesW(LPWSTR, DWORD, LPCWSTR);
WINBASEAPI BOOL WINAPI GetPrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
WINBASEAPI BOOL WINAPI GetPrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
WINBASEAPI BOOL WINAPI WritePrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);

#ifdef UNICODE
#define GetProfileInt  GetProfileIntW
#define GetProfileString  GetProfileStringW
#define WriteProfileString  WriteProfileStringW
#define GetProfileSection  GetProfileSectionW
#define WriteProfileSection  WriteProfileSectionW
#define GetPrivateProfileInt  GetPrivateProfileIntW
#define GetPrivateProfileString  GetPrivateProfileStringW
#define WritePrivateProfileString  WritePrivateProfileStringW
#define GetPrivateProfileSection  GetPrivateProfileSectionW
#define WritePrivateProfileSection  WritePrivateProfileSectionW
#define GetPrivateProfileSectionNames  GetPrivateProfileSectionNamesW
#define GetPrivateProfileStruct  GetPrivateProfileStructW
#define WritePrivateProfileStruct  WritePrivateProfileStructW
#else /* !UNICODE */
#define GetProfileInt  GetProfileIntA
#define GetProfileString  GetProfileStringA
#define WriteProfileString  WriteProfileStringA
#define GetProfileSection  GetProfileSectionA
#define WriteProfileSection  WriteProfileSectionA
#define GetPrivateProfileInt  GetPrivateProfileIntA
#define GetPrivateProfileString  GetPrivateProfileStringA
#define WritePrivateProfileString  WritePrivateProfileStringA
#define GetPrivateProfileSection  GetPrivateProfileSectionA
#define WritePrivateProfileSection  WritePrivateProfileSectionA
#define GetPrivateProfileSectionNames  GetPrivateProfileSectionNamesA
#define GetPrivateProfileStruct  GetPrivateProfileStructA
#define WritePrivateProfileStruct  WritePrivateProfileStructA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0501 || defined(WINBASE_DECLARE_GET_SYSTEM_WOW64_DIRECTORY)

WINBASEAPI BOOLEAN WINAPI Wow64EnableWow64FsRedirection(BOOLEAN);

typedef UINT (WINAPI *PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR, UINT);
typedef UINT (WINAPI *PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR, UINT);

#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A  "GetSystemWow64DirectoryA"
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W  L"GetSystemWow64DirectoryA"
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T TEXT("GetSystemWow64DirectoryA")
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A  "GetSystemWow64DirectoryW"
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W  L"GetSystemWow64DirectoryW"
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T TEXT("GetSystemWow64DirectoryW")

#ifdef UNICODE
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T
#else /* !UNICODE */
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W
#define GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0501 */

#if _WIN32_WINNT >= 0x0502

WINBASEAPI BOOL WINAPI SetDllDirectoryA(LPCSTR);
WINBASEAPI BOOL WINAPI SetDllDirectoryW(LPCWSTR);
WINBASEAPI DWORD WINAPI GetDllDirectoryA(DWORD, LPSTR);
WINBASEAPI DWORD WINAPI GetDllDirectoryW(DWORD, LPWSTR);

#ifdef UNICODE
#define SetDllDirectory  SetDllDirectoryW
#define GetDllDirectory  GetDllDirectoryW
#else /* !UNICODE */
#define SetDllDirectory  SetDllDirectoryA
#define GetDllDirectory  GetDllDirectoryA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0502 */

#define BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE  0x1
#define BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE  0x10000
#define BASE_SEARCH_PATH_PERMANENT  0x8000
#define BASE_SEARCH_PATH_INVALID_FLAGS  ~0x18001

WINBASEAPI BOOL WINAPI SetSearchPathMode(DWORD);

WINBASEAPI BOOL WINAPI CreateDirectoryExA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
WINBASEAPI BOOL WINAPI CreateDirectoryExW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);

#ifdef UNICODE
#define CreateDirectoryEx  CreateDirectoryExW
#else /* !UNICODE */
#define CreateDirectoryEx  CreateDirectoryExA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0600

WINBASEAPI BOOL WINAPI CreateDirectoryTransactedA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE);
WINBASEAPI BOOL WINAPI CreateDirectoryTransactedW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE);
WINBASEAPI BOOL WINAPI RemoveDirectoryTransactedA(LPCSTR, HANDLE);
WINBASEAPI BOOL WINAPI RemoveDirectoryTransactedW(LPCWSTR, HANDLE);
WINBASEAPI DWORD WINAPI GetFullPathNameTransactedA(LPCSTR, DWORD, LPSTR, LPSTR *, HANDLE);
WINBASEAPI DWORD WINAPI GetFullPathNameTransactedW(LPCWSTR, DWORD, LPWSTR, LPWSTR *, HANDLE);

#ifdef UNICODE
#define CreateDirectoryTransacted  CreateDirectoryTransactedW
#define RemoveDirectoryTransacted  RemoveDirectoryTransactedW
#define GetFullPathNameTransacted  GetFullPathNameTransactedW
#else /* !UNICODE */
#define CreateDirectoryTransacted  CreateDirectoryTransactedA
#define RemoveDirectoryTransacted  RemoveDirectoryTransactedA
#define GetFullPathNameTransacted  GetFullPathNameTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#define DDD_RAW_TARGET_PATH  0x00000001
#define DDD_REMOVE_DEFINITION  0x00000002
#define DDD_EXACT_MATCH_ON_REMOVE  0x00000004
#define DDD_NO_BROADCAST_SYSTEM  0x00000008
#define DDD_LUID_BROADCAST_DRIVE  0x00000010

WINBASEAPI BOOL WINAPI DefineDosDeviceA(DWORD, LPCSTR, LPCSTR);
WINBASEAPI DWORD WINAPI QueryDosDeviceA(LPCSTR, LPSTR, DWORD);

#ifndef UNICODE
#define DefineDosDevice  DefineDosDeviceA
#define QueryDosDevice  QueryDosDeviceA
#endif /* !UNICODE */

#define EXPAND_LOCAL_DRIVES

#if _WIN32_WINNT >= 0x0600

WINBASEAPI HANDLE WINAPI CreateFileTransactedA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE, HANDLE, PUSHORT, PVOID);
WINBASEAPI HANDLE WINAPI CreateFileTransactedW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE, HANDLE, PUSHORT, PVOID);

#ifdef UNICODE
#define CreateFileTransacted  CreateFileTransactedW
#else /* !UNICODE */
#define CreateFileTransacted  CreateFileTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if _WIN32_WINNT >= 0x0502
WINBASEAPI HANDLE WINAPI ReOpenFile(HANDLE, DWORD, DWORD, DWORD);
#endif /* _WIN32_WINNT >= 0x0502 */

#if _WIN32_WINNT >= 0x0600

WINBASEAPI BOOL WINAPI SetFileAttributesTransactedA(LPCSTR, DWORD, HANDLE);
WINBASEAPI BOOL WINAPI SetFileAttributesTransactedW(LPCWSTR, DWORD, HANDLE);
WINBASEAPI BOOL WINAPI GetFileAttributesTransactedA(LPCSTR, GET_FILEEX_INFO_LEVELS, LPVOID, HANDLE);
WINBASEAPI BOOL WINAPI GetFileAttributesTransactedW(LPCWSTR, GET_FILEEX_INFO_LEVELS, LPVOID, HANDLE);
WINBASEAPI DWORD WINAPI GetCompressedFileSizeTransactedA(LPCSTR, LPDWORD, HANDLE);
WINBASEAPI DWORD WINAPI GetCompressedFileSizeTransactedW(LPCWSTR, LPDWORD, HANDLE);
WINBASEAPI BOOL WINAPI DeleteFileTransactedA(LPCSTR, HANDLE);
WINBASEAPI BOOL WINAPI DeleteFileTransactedW(LPCWSTR, HANDLE);

#ifdef UNICODE
#define SetFileAttributesTransacted  SetFileAttributesTransactedW
#define GetFileAttributesTransacted  GetFileAttributesTransactedW
#define GetCompressedFileSizeTransacted  GetCompressedFileSizeTransactedW
#define DeleteFileTransacted  DeleteFileTransactedW
#else /* !UNICODE */
#define SetFileAttributesTransacted  SetFileAttributesTransactedA
#define GetFileAttributesTransacted  GetFileAttributesTransactedA
#define GetCompressedFileSizeTransacted  GetCompressedFileSizeTransactedA
#define DeleteFileTransacted  DeleteFileTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if _WIN32_WINNT >= 0x0501

WINBASEAPI BOOL WINAPI CheckNameLegalDOS8Dot3A(LPCSTR, LPSTR, DWORD, PBOOL, PBOOL);
WINBASEAPI BOOL WINAPI CheckNameLegalDOS8Dot3W(LPCWSTR, LPSTR, DWORD, PBOOL, PBOOL);

#ifdef UNICODE
#define CheckNameLegalDOS8Dot3  CheckNameLegalDOS8Dot3W
#else /* !UNICODE */
#define CheckNameLegalDOS8Dot3  CheckNameLegalDOS8Dot3A
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0501 */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI HANDLE WINAPI FindFirstFileTransactedA(LPCSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD, HANDLE);
WINBASEAPI HANDLE WINAPI FindFirstFileTransactedW(LPCWSTR, FINDEX_INFO_LEVELS, LPVOID, FINDEX_SEARCH_OPS, LPVOID, DWORD, HANDLE);

#ifdef UNICODE
#define FindFirstFileTransacted  FindFirstFileTransactedW
#else /* !UNICODE */
#define FindFirstFileTransacted  FindFirstFileTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI BOOL WINAPI CopyFileA(LPCSTR, LPCSTR, BOOL);
WINBASEAPI BOOL WINAPI CopyFileW(LPCWSTR, LPCWSTR, BOOL);

#ifdef UNICODE
#define CopyFile  CopyFileW
#else /* !UNICODE */
#define CopyFile  CopyFileA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0400)

typedef DWORD (WINAPI *LPPROGRESS_ROUTINE)(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID);

WINBASEAPI BOOL WINAPI CopyFileExA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
WINBASEAPI BOOL WINAPI CopyFileExW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);

#ifdef UNICODE
#define CopyFileEx  CopyFileExW
#else /* !UNICODE */
#define CopyFileEx  CopyFileExA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0600

WINBASEAPI BOOL WINAPI CopyFileTransactedA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD, HANDLE);
WINBASEAPI BOOL WINAPI CopyFileTransactedW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD, HANDLE);

#ifdef UNICODE
#define CopyFileTransacted  CopyFileTransactedW
#else /* !UNICODE */
#define CopyFileTransacted  CopyFileTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if _WIN32_WINNT >= 0x0601

typedef enum _COPYFILE2_MESSAGE_TYPE {
    COPYFILE2_CALLBACK_NONE = 0,
    COPYFILE2_CALLBACK_CHUNK_STARTED,
    COPYFILE2_CALLBACK_CHUNK_FINISHED,
    COPYFILE2_CALLBACK_STREAM_STARTED,
    COPYFILE2_CALLBACK_STREAM_FINISHED,
    COPYFILE2_CALLBACK_POLL_CONTINUE,
    COPYFILE2_CALLBACK_ERROR,
    COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;

#define COPYFILE2_MESSAGE_COPY_OFFLOAD  (0x00000001L)

typedef struct COPYFILE2_MESSAGE {
    COPYFILE2_MESSAGE_TYPE Type;
    DWORD dwPadding;
    union {
        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;
        struct {
            DWORD dwStreamNumber;
            DWORD dwFlags;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;
        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;
        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;
        struct {
            DWORD dwReserved;
        } PollContinue;
        struct {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD dwStreamNumber;
            HRESULT hrFailure;
            DWORD dwReserved;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } Error;
    } Info;
} COPYFILE2_MESSAGE;

typedef COPYFILE2_MESSAGE_ACTION(CALLBACK *PCOPYFILE2_PROGRESS_ROUTINE)(const COPYFILE2_MESSAGE *, PVOID);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;
    DWORD dwCopyFlags;
    BOOL *pfCancel;
    PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
    PVOID pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

WINBASEAPI HRESULT WINAPI CopyFile2(PCWSTR, PCWSTR, COPYFILE2_EXTENDED_PARAMETERS *);

#endif /* _WIN32_WINNT >= 0x0601 */

#endif /* _WIN32_WINNT >= 0x0400 */

WINBASEAPI BOOL WINAPI MoveFileA(LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI MoveFileW(LPCWSTR, LPCWSTR);
WINBASEAPI BOOL WINAPI MoveFileExA(LPCSTR, LPCSTR, DWORD);
WINBASEAPI BOOL WINAPI MoveFileExW(LPCWSTR, LPCWSTR, DWORD);

#ifdef UNICODE
#define MoveFile  MoveFileW
#define MoveFileEx  MoveFileExW
#else /* !UNICODE */
#define MoveFile  MoveFileA
#define MoveFileEx  MoveFileExA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI MoveFileWithProgressA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD);
WINBASEAPI BOOL WINAPI MoveFileWithProgressW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD);

#ifdef UNICODE
#define MoveFileWithProgress  MoveFileWithProgressW
#else /* !UNICODE */
#define MoveFileWithProgress  MoveFileWithProgressA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI BOOL WINAPI MoveFileTransactedA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD, HANDLE);
WINBASEAPI BOOL WINAPI MoveFileTransactedW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD, HANDLE);

#ifdef UNICODE
#define MoveFileTransacted  MoveFileTransactedW
#else /* !UNICODE */
#define MoveFileTransacted  MoveFileTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#define MOVEFILE_REPLACE_EXISTING  0x00000001
#define MOVEFILE_COPY_ALLOWED  0x00000002
#define MOVEFILE_DELAY_UNTIL_REBOOT  0x00000004
#define MOVEFILE_WRITE_THROUGH  0x00000008
#if (_WIN32_WINNT >= 0x0500)
#define MOVEFILE_CREATE_HARDLINK  0x00000010
#define MOVEFILE_FAIL_IF_NOT_TRACKABLE  0x00000020
#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI ReplaceFileA(LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID);
WINBASEAPI BOOL WINAPI ReplaceFileW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID, LPVOID);

#ifdef UNICODE
#define ReplaceFile  ReplaceFileW
#else /* !UNICODE */
#define ReplaceFile  ReplaceFileA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI CreateHardLinkA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
WINBASEAPI BOOL WINAPI CreateHardLinkW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);

#ifdef UNICODE
#define CreateHardLink  CreateHardLinkW
#else /* !UNICODE */
#define CreateHardLink  CreateHardLinkA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI BOOL WINAPI CreateHardLinkTransactedA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE);
WINBASEAPI BOOL WINAPI CreateHardLinkTransactedW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE);

#ifdef UNICODE
#define CreateHardLinkTransacted  CreateHardLinkTransactedW
#else /* !UNICODE */
#define CreateHardLinkTransacted  CreateHardLinkTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI HANDLE WINAPI FindFirstStreamTransactedW(LPCWSTR, STREAM_INFO_LEVELS, LPVOID, DWORD, HANDLE);
WINBASEAPI HANDLE WINAPI FindFirstFileNameTransactedW(LPCWSTR, DWORD, LPDWORD, PWSTR, HANDLE);
#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI HANDLE WINAPI CreateNamedPipeA(LPCSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
WINBASEAPI BOOL WINAPI GetNamedPipeHandleStateA(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR, DWORD);
WINBASEAPI BOOL WINAPI CallNamedPipeA(LPCSTR, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, DWORD);
WINBASEAPI BOOL WINAPI WaitNamedPipeA(LPCSTR, DWORD);

#ifndef UNICODE
#define CreateNamedPipe  CreateNamedPipeA
#define GetNamedPipeHandleState  GetNamedPipeHandleStateA
#define CallNamedPipe  CallNamedPipeA
#define WaitNamedPipe  WaitNamedPipeA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI BOOL WINAPI GetNamedPipeClientComputerNameA(HANDLE, LPSTR, ULONG);
WINBASEAPI BOOL WINAPI GetNamedPipeClientProcessId(HANDLE, PULONG);
WINBASEAPI BOOL WINAPI GetNamedPipeClientSessionId(HANDLE, PULONG);
WINBASEAPI BOOL WINAPI GetNamedPipeServerProcessId(HANDLE, PULONG);
WINBASEAPI BOOL WINAPI GetNamedPipeServerSessionId(HANDLE, PULONG);

#ifndef UNICODE
#define GetNamedPipeClientComputerName  GetNamedPipeClientComputerNameA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

WINBASEAPI BOOL WINAPI SetVolumeLabelA(LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI SetVolumeLabelW(LPCWSTR, LPCWSTR);

#ifdef UNICODE
#define SetVolumeLabel  SetVolumeLabelW
#else /* !UNICODE */
#define SetVolumeLabel  SetVolumeLabelA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI SetFileBandwidthReservation(HANDLE, DWORD, DWORD, BOOL, LPDWORD, LPDWORD);
WINBASEAPI BOOL WINAPI GetFileBandwidthReservation(HANDLE, LPDWORD, LPDWORD, LPBOOL, LPDWORD, LPDWORD);
#endif /* _WIN32_WINNT >= 0x0600 */

WINADVAPI BOOL WINAPI ClearEventLogA(HANDLE, LPCSTR);
WINADVAPI BOOL WINAPI ClearEventLogW(HANDLE, LPCWSTR);
WINADVAPI BOOL WINAPI BackupEventLogA(HANDLE, LPCSTR);
WINADVAPI BOOL WINAPI BackupEventLogW(HANDLE, LPCWSTR);
WINADVAPI BOOL WINAPI CloseEventLog(HANDLE);
WINADVAPI BOOL WINAPI DeregisterEventSource(HANDLE);
WINADVAPI BOOL WINAPI NotifyChangeEventLog(HANDLE, HANDLE);
WINADVAPI BOOL WINAPI GetNumberOfEventLogRecords(HANDLE, PDWORD);
WINADVAPI BOOL WINAPI GetOldestEventLogRecord(HANDLE, PDWORD);
WINADVAPI HANDLE WINAPI OpenEventLogA(LPCSTR, LPCSTR);
WINADVAPI HANDLE WINAPI OpenEventLogW(LPCWSTR, LPCWSTR);
WINADVAPI HANDLE WINAPI RegisterEventSourceA(LPCSTR, LPCSTR);
WINADVAPI HANDLE WINAPI RegisterEventSourceW(LPCWSTR, LPCWSTR);
WINADVAPI HANDLE WINAPI OpenBackupEventLogA(LPCSTR, LPCSTR);
WINADVAPI HANDLE WINAPI OpenBackupEventLogW(LPCWSTR, LPCWSTR);
WINADVAPI BOOL WINAPI ReadEventLogA(HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD *, DWORD *);
WINADVAPI BOOL WINAPI ReadEventLogW(HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD *, DWORD *);
WINADVAPI BOOL WINAPI ReportEventA(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCSTR *, LPVOID);
WINADVAPI BOOL WINAPI ReportEventW(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCWSTR *, LPVOID);

#ifdef UNICODE
#define ClearEventLog  ClearEventLogW
#define BackupEventLog  BackupEventLogW
#define OpenEventLog  OpenEventLogW
#define RegisterEventSource  RegisterEventSourceW
#define OpenBackupEventLog  OpenBackupEventLogW
#define ReadEventLog  ReadEventLogW
#define ReportEvent  ReportEventW
#else /* !UNICODE */
#define ClearEventLog  ClearEventLogA
#define BackupEventLog  BackupEventLogA
#define OpenEventLog  OpenEventLogA
#define RegisterEventSource  RegisterEventSourceA
#define OpenBackupEventLog  OpenBackupEventLogA
#define ReadEventLog  ReadEventLogA
#define ReportEvent  ReportEventA
#endif /* !UNICODE */

#define EVENTLOG_FULL_INFO  0

typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

WINADVAPI BOOL WINAPI GetEventLogInformation(HANDLE, DWORD, LPVOID, DWORD, LPDWORD);

#if (_WIN32_WINNT >= 0x0602)

#define OPERATION_API_VERSION  1
typedef ULONG OPERATION_ID;

typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;

#define OPERATION_START_TRACE_CURRENT_THREAD  0x1

typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;

#define OPERATION_END_DISCARD  0x1

WINADVAPI BOOL WINAPI OperationStart(OPERATION_START_PARAMETERS *);
WINADVAPI BOOL WINAPI OperationEnd(OPERATION_END_PARAMETERS *);

#endif /* _WIN32_WINNT >= 0x0602 */

WINADVAPI BOOL WINAPI AccessCheckAndAuditAlarmA(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL);

#ifndef UNICODE
#define AccessCheckAndAuditAlarm  AccessCheckAndAuditAlarmA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0500)

WINADVAPI BOOL WINAPI AccessCheckByTypeAndAuditAlarmA(LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL);
WINADVAPI BOOL WINAPI AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR, LPVOID, HANDLE, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, AUDIT_EVENT_TYPE, DWORD, POBJECT_TYPE_LIST, DWORD, PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, LPBOOL);

#ifndef UNICODE
#define AccessCheckByTypeAndAuditAlarm  AccessCheckByTypeAndAuditAlarmA
#define AccessCheckByTypeResultListAndAuditAlarm  AccessCheckByTypeResultListAndAuditAlarmA
#define AccessCheckByTypeResultListAndAuditAlarmByHandle  AccessCheckByTypeResultListAndAuditAlarmByHandleA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0500 */

WINADVAPI BOOL WINAPI ObjectOpenAuditAlarmA(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, LPBOOL);
WINADVAPI BOOL WINAPI ObjectPrivilegeAuditAlarmA(LPCSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);
WINADVAPI BOOL WINAPI ObjectCloseAuditAlarmA(LPCSTR, LPVOID, BOOL);
WINADVAPI BOOL WINAPI ObjectDeleteAuditAlarmA(LPCSTR, LPVOID, BOOL);
WINADVAPI BOOL WINAPI PrivilegedServiceAuditAlarmA(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET, BOOL);

#ifndef UNICODE
#define ObjectOpenAuditAlarm  ObjectOpenAuditAlarmA
#define ObjectPrivilegeAuditAlarm  ObjectPrivilegeAuditAlarmA
#define ObjectCloseAuditAlarm  ObjectCloseAuditAlarmA
#define ObjectDeleteAuditAlarm  ObjectDeleteAuditAlarmA
#define PrivilegedServiceAuditAlarm  PrivilegedServiceAuditAlarmA
#endif /* !UNICODE */

#if(_WIN32_WINNT >= 0x0601)
WINADVAPI BOOL WINAPI AddConditionalAce(PACL, DWORD, DWORD, UCHAR, DWORD, PSID, PWCHAR, DWORD *);
#endif /* _WIN32_WINNT >=  0x0601 */

WINADVAPI BOOL WINAPI SetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI GetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD);

#ifndef UNICODE
#define SetFileSecurity  SetFileSecurityA
#define GetFileSecurity  GetFileSecurityA
#endif /* !UNICODE */

#if(_WIN32_WINNT >= 0x0400)
WINBASEAPI BOOL WINAPI ReadDirectoryChangesW(HANDLE, LPVOID, DWORD, BOOL, DWORD, LPDWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
#endif /* _WIN32_WINNT >= 0x0400 */

#if _WIN32_WINNT >= 0x0600
WINBASEAPI LPVOID WINAPI MapViewOfFileExNuma(HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID, DWORD);
#endif /* _WIN32_WINNT >= 0x0600 */

/* uj, uj, uj */
WINBASEAPI BOOL WINAPI IsBadReadPtr(CONST VOID *, UINT_PTR);
WINBASEAPI BOOL WINAPI IsBadWritePtr(LPVOID, UINT_PTR);
WINBASEAPI BOOL WINAPI IsBadHugeReadPtr(CONST VOID *, UINT_PTR);
WINBASEAPI BOOL WINAPI IsBadHugeWritePtr(LPVOID, UINT_PTR);
WINBASEAPI BOOL WINAPI IsBadCodePtr(FARPROC);
WINBASEAPI BOOL WINAPI IsBadStringPtrA(LPCSTR, UINT_PTR);
WINBASEAPI BOOL WINAPI IsBadStringPtrW(LPCWSTR, UINT_PTR);

#ifdef UNICODE
#define IsBadStringPtr  IsBadStringPtrW
#else /* !UNICODE */
#define IsBadStringPtr  IsBadStringPtrA
#endif /* !UNICODE */

WINADVAPI BOOL WINAPI LookupAccountSidA(LPCSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountSidW(LPCWSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountNameA(LPCSTR, LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountNameW(LPCWSTR, LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE);

#ifdef UNICODE
#define LookupAccountSid  LookupAccountSidW
#define LookupAccountName  LookupAccountNameW
#else /* !UNICODE */
#define LookupAccountSid  LookupAccountSidA
#define LookupAccountName  LookupAccountNameA
#endif /* !UNICODE */

#if _WIN32_WINNT >= 0x0601

WINADVAPI BOOL WINAPI LookupAccountNameLocalA(LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountNameLocalW(LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountSidLocalA(PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE);
WINADVAPI BOOL WINAPI LookupAccountSidLocalW(PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE);

#ifdef UNICODE
#define LookupAccountNameLocal  LookupAccountNameLocalW
#define LookupAccountSidLocal  LookupAccountSidLocalW
#else /* !UNICODE */
#define LookupAccountNameLocal  LookupAccountNameLocalA
#define LookupAccountSidLocal  LookupAccountSidLocalA
#endif /* !UNICODE */

#else /* _WIN32_WINNT < 0x0601 */

#define LookupAccountNameLocalA(n,s,cs,d,cd,u)  LookupAccountNameA(NULL, n, s, cs, d, cd, u)
#define LookupAccountNameLocalW(n,s,cs,d,cd,u)  LookupAccountNameW(NULL, n, s, cs, d, cd, u)
#define LookupAccountSidLocalA(s,n,cn,d,cd,u)  LookupAccountSidA(NULL, s, n, cn, d, cd, u)
#define LookupAccountSidLocalW(s,n,cn,d,cd,u)  LookupAccountSidW(NULL, s, n, cn, d, cd, u)

#ifdef UNICODE
#define LookupAccountNameLocal  LookupAccountNameLocalW
#define LookupAccountSidLocal  LookupAccountSidLocalW
#else /* !UNICODE */
#define LookupAccountNameLocal  LookupAccountNameLocalA
#define LookupAccountSidLocal  LookupAccountSidLocalA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT < 0x0601 */

WINADVAPI BOOL WINAPI LookupPrivilegeValueA(LPCSTR, LPCSTR, PLUID);
WINADVAPI BOOL WINAPI LookupPrivilegeValueW(LPCWSTR, LPCWSTR, PLUID);
WINADVAPI BOOL WINAPI LookupPrivilegeNameA(LPCSTR, PLUID, LPSTR, LPDWORD);
WINADVAPI BOOL WINAPI LookupPrivilegeNameW(LPCWSTR, PLUID, LPWSTR, LPDWORD);
WINADVAPI BOOL WINAPI LookupPrivilegeDisplayNameA(LPCSTR, LPCSTR, LPSTR, LPDWORD, LPDWORD);
WINADVAPI BOOL WINAPI LookupPrivilegeDisplayNameW(LPCWSTR, LPCWSTR, LPWSTR, LPDWORD, LPDWORD);

#ifdef UNICODE
#define LookupPrivilegeValue  LookupPrivilegeValueW
#define LookupPrivilegeName  LookupPrivilegeNameW
#define LookupPrivilegeDisplayName  LookupPrivilegeDisplayNameW
#else /* !UNICODE */
#define LookupPrivilegeValue  LookupPrivilegeValueA
#define LookupPrivilegeName  LookupPrivilegeNameA
#define LookupPrivilegeDisplayName  LookupPrivilegeDisplayNameA
#endif /* !UNICODE */

WINBASEAPI BOOL WINAPI BuildCommDCBA(LPCSTR, LPDCB);
WINBASEAPI BOOL WINAPI BuildCommDCBW(LPCWSTR, LPDCB);
WINBASEAPI BOOL WINAPI BuildCommDCBAndTimeoutsA(LPCSTR, LPDCB, LPCOMMTIMEOUTS);
WINBASEAPI BOOL WINAPI BuildCommDCBAndTimeoutsW(LPCWSTR, LPDCB, LPCOMMTIMEOUTS);
WINBASEAPI BOOL WINAPI CommConfigDialogA(LPCSTR, HWND, LPCOMMCONFIG);
WINBASEAPI BOOL WINAPI CommConfigDialogW(LPCWSTR, HWND, LPCOMMCONFIG);
WINBASEAPI BOOL WINAPI GetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, LPDWORD);
WINBASEAPI BOOL WINAPI GetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, LPDWORD);
WINBASEAPI BOOL WINAPI SetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, DWORD);
WINBASEAPI BOOL WINAPI SetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, DWORD);

#ifdef UNICODE
#define BuildCommDCB  BuildCommDCBW
#define BuildCommDCBAndTimeouts  BuildCommDCBAndTimeoutsW
#define CommConfigDialog  CommConfigDialogW
#define GetDefaultCommConfig  GetDefaultCommConfigW
#define SetDefaultCommConfig  SetDefaultCommConfigW
#else /* !UNICODE */
#define BuildCommDCB  BuildCommDCBA
#define BuildCommDCBAndTimeouts  BuildCommDCBAndTimeoutsA
#define CommConfigDialog  CommConfigDialogA
#define GetDefaultCommConfig  GetDefaultCommConfigA
#define SetDefaultCommConfig  SetDefaultCommConfigA
#endif /* !UNICODE */

#define MAX_COMPUTERNAME_LENGTH  15

WINBASEAPI BOOL WINAPI GetComputerNameA(LPSTR, LPDWORD);
WINBASEAPI BOOL WINAPI GetComputerNameW(LPWSTR, LPDWORD);

#ifdef UNICODE
#define GetComputerName  GetComputerNameW
#else /* !UNICODE */
#define GetComputerName  GetComputerNameA
#endif /* !UNICODE */

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI DnsHostnameToComputerNameA(LPCSTR, LPSTR, LPDWORD);
WINBASEAPI BOOL WINAPI DnsHostnameToComputerNameW(LPCWSTR, LPWSTR, LPDWORD);

#ifdef UNICODE
#define DnsHostnameToComputerName  DnsHostnameToComputerNameW
#else /* !UNICODE */
#define DnsHostnameToComputerName  DnsHostnameToComputerNameA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT */

WINADVAPI BOOL WINAPI GetUserNameA(LPSTR, LPDWORD);
WINADVAPI BOOL WINAPI GetUserNameW(LPWSTR, LPDWORD);

#ifdef UNICODE
#define GetUserName  GetUserNameW
#else /* !UNICODE */
#define GetUserName  GetUserNameA
#endif /* !UNICODE */

#define LOGON32_LOGON_INTERACTIVE  2
#define LOGON32_LOGON_NETWORK  3
#define LOGON32_LOGON_BATCH  4
#define LOGON32_LOGON_SERVICE  5
#define LOGON32_LOGON_UNLOCK  7
#if (_WIN32_WINNT >= 0x0500)
#define LOGON32_LOGON_NETWORK_CLEARTEXT 8
#define LOGON32_LOGON_NEW_CREDENTIALS  9
#endif /* _WIN32_WINNT >= 0x0500 */

#define LOGON32_PROVIDER_DEFAULT  0
#define LOGON32_PROVIDER_WINNT35  1
#if (_WIN32_WINNT >= 0x0400)
#define LOGON32_PROVIDER_WINNT40  2
#endif /* _WIN32_WINNT >= 0x0400 */
#if (_WIN32_WINNT >= 0x0500)
#define LOGON32_PROVIDER_WINNT50  3
#endif /* _WIN32_WINNT >= 0x0500 */
#if (_WIN32_WINNT >= 0x0600)
#define LOGON32_PROVIDER_VIRTUAL  4
#endif /* _WIN32_WINNT >= 0x0600 */

WINADVAPI BOOL WINAPI LogonUserA(LPCSTR, LPCSTR, LPCSTR, DWORD, DWORD, PHANDLE);
WINADVAPI BOOL WINAPI LogonUserW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, PHANDLE);
WINADVAPI BOOL WINAPI LogonUserExA(LPCSTR, LPCSTR, LPCSTR, DWORD, DWORD, PHANDLE, PSID *, PVOID *, LPDWORD, PQUOTA_LIMITS);
WINADVAPI BOOL WINAPI LogonUserExW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, PHANDLE, PSID *, PVOID *, LPDWORD, PQUOTA_LIMITS);

#ifdef UNICODE
#define LogonUser  LogonUserW
#define LogonUserEx  LogonUserExW
#else /* !UNICODE */
#define LogonUser  LogonUserA
#define LogonUserEx  LogonUserExA
#endif /* !UNICODE */

#if(_WIN32_WINNT >= 0x0500)

#define LOGON_WITH_PROFILE  0x00000001
#define LOGON_NETCREDENTIALS_ONLY  0x00000002
#define LOGON_ZERO_PASSWORD_BUFFER  0x80000000

WINADVAPI BOOL WINAPI CreateProcessWithLogonW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);
WINADVAPI BOOL WINAPI CreateProcessWithTokenW(HANDLE, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);

#endif /* _WIN32_WINNT >= 0x0500 */

WINADVAPI BOOL WINAPI IsTokenUntrusted(HANDLE);

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI RegisterWaitForSingleObject(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG, ULONG);
WINBASEAPI BOOL WINAPI UnregisterWait(HANDLE);
WINBASEAPI BOOL WINAPI BindIoCompletionCallback(HANDLE, LPOVERLAPPED_COMPLETION_ROUTINE, ULONG);
WINBASEAPI HANDLE WINAPI SetTimerQueueTimer(HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, BOOL);
WINBASEAPI BOOL WINAPI CancelTimerQueueTimer(HANDLE, HANDLE);
WINBASEAPI BOOL WINAPI DeleteTimerQueue(HANDLE);

#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0600)

FORCEINLINE VOID InitializeThreadpoolEnvironment(PTP_CALLBACK_ENVIRON pcbe) {
    TpInitializeCallbackEnviron(pcbe);
}

FORCEINLINE VOID SetThreadpoolCallbackPool(PTP_CALLBACK_ENVIRON pcbe, PTP_POOL ptpp) {
    TpSetCallbackThreadpool(pcbe, ptpp);
}

FORCEINLINE VOID SetThreadpoolCallbackCleanupGroup(PTP_CALLBACK_ENVIRON pcbe, PTP_CLEANUP_GROUP ptpcg, PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng) {
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

FORCEINLINE VOID SetThreadpoolCallbackRunsLong(PTP_CALLBACK_ENVIRON pcbe) {
    TpSetCallbackLongFunction(pcbe);
}

FORCEINLINE VOID SetThreadpoolCallbackLibrary(PTP_CALLBACK_ENVIRON pcbe, PVOID mod) {
    TpSetCallbackRaceWithDll(pcbe, mod);
}

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
FORCEINLINE VOID SetThreadpoolCallbackPriority(PTP_CALLBACK_ENVIRON pcbe, TP_CALLBACK_PRIORITY Priority) {
    TpSetCallbackPriority(pcbe, Priority);
}
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */

FORCEINLINE VOID DestroyThreadpoolEnvironment(PTP_CALLBACK_ENVIRON pcbe) {
    TpDestroyCallbackEnviron(pcbe);
}

FORCEINLINE VOID SetThreadpoolCallbackPersistent(PTP_CALLBACK_ENVIRON pcbe) {
    TpSetCallbackPersistent(pcbe);
}

WINBASEAPI HANDLE WINAPI CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES, LPVOID, LPCSTR);
WINBASEAPI HANDLE WINAPI OpenPrivateNamespaceA(LPVOID, LPCSTR);

#ifndef UNICODE
#define CreatePrivateNamespace CreatePrivateNamespaceA
#define OpenPrivateNamespace OpenPrivateNamespaceA
#else /* !UNICODE */
#define CreatePrivateNamespace CreatePrivateNamespaceW
#define OpenPrivateNamespace OpenPrivateNamespaceW
#endif /* !UNICODE */

WINBASEAPI HANDLE APIENTRY CreateBoundaryDescriptorA(LPCSTR, ULONG);

#ifndef UNICODE
#define CreateBoundaryDescriptor CreateBoundaryDescriptorA
#else /* !UNICODE */
#define CreateBoundaryDescriptor CreateBoundaryDescriptorW
#endif /* !UNICODE */

WINBASEAPI BOOL WINAPI AddIntegrityLabelToBoundaryDescriptor(HANDLE *, PSID);

#endif /* _WIN32_WINNT >= 0x0600 */

/* plug'n'pray */
#if (_WIN32_WINNT >= 0x0400)

#define HW_PROFILE_GUIDLEN  39
#define MAX_PROFILE_LEN  80

#define DOCKINFO_UNDOCKED  (0x1)
#define DOCKINFO_DOCKED  (0x2)
#define DOCKINFO_USER_SUPPLIED  (0x4)
#define DOCKINFO_USER_UNDOCKED  (DOCKINFO_USER_SUPPLIED | DOCKINFO_UNDOCKED)
#define DOCKINFO_USER_DOCKED  (DOCKINFO_USER_SUPPLIED | DOCKINFO_DOCKED)

typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[HW_PROFILE_GUIDLEN];
    CHAR szHwProfileName[MAX_PROFILE_LEN];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;

typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[HW_PROFILE_GUIDLEN];
    WCHAR szHwProfileName[MAX_PROFILE_LEN];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

#ifdef UNICODE
typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;
#else /* !UNICODE */
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
#endif /* !UNICODE */

WINADVAPI BOOL WINAPI GetCurrentHwProfileA(LPHW_PROFILE_INFOA);
WINADVAPI BOOL WINAPI GetCurrentHwProfileW(LPHW_PROFILE_INFOW);

#ifdef UNICODE
#define GetCurrentHwProfile  GetCurrentHwProfileW
#else /* !UNICODE */
#define GetCurrentHwProfile  GetCurrentHwProfileA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0400 */

WINBASEAPI BOOL WINAPI VerifyVersionInfoA(LPOSVERSIONINFOEXA, DWORD, DWORDLONG);
WINBASEAPI BOOL WINAPI VerifyVersionInfoW(LPOSVERSIONINFOEXW, DWORD, DWORDLONG);

#ifdef UNICODE
#define VerifyVersionInfo  VerifyVersionInfoW
#else /* !UNICODE */
#define VerifyVersionInfo  VerifyVersionInfoA
#endif /* !UNICODE */

#include <winerror.h>
#include <timezoneapi.h>

#define TC_NORMAL  0
#define TC_HARDERR  1
#define TC_GP_TRAP  2
#define TC_SIGNAL  3

#if (WINVER >= 0x0400)

#define AC_LINE_OFFLINE  0x00
#define AC_LINE_ONLINE  0x01
#define AC_LINE_BACKUP_POWER  0x02
#define AC_LINE_UNKNOWN  0xFF

#define BATTERY_FLAG_HIGH  0x01
#define BATTERY_FLAG_LOW  0x02
#define BATTERY_FLAG_CRITICAL  0x04
#define BATTERY_FLAG_CHARGING  0x08
#define BATTERY_FLAG_NO_BATTERY  0x80
#define BATTERY_FLAG_UNKNOWN  0xFF

#define BATTERY_PERCENTAGE_UNKNOWN  0xFF

#define SYSTEM_STATUS_FLAG_POWER_SAVING_ON  0x01

#define BATTERY_LIFE_UNKNOWN  0xFFFFFFFF

typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

WINBASEAPI BOOL WINAPI GetSystemPowerStatus(LPSYSTEM_POWER_STATUS);
WINBASEAPI BOOL WINAPI SetSystemPowerState(BOOL, BOOL);

#endif /* WINVER >= 0x0400 */

#if (_WIN32_WINNT >= 0x0500)

WINBASEAPI BOOL WINAPI MapUserPhysicalPagesScatter(PVOID *, ULONG_PTR, PULONG_PTR);

WINBASEAPI HANDLE WINAPI CreateJobObjectA(LPSECURITY_ATTRIBUTES, LPCSTR);
WINBASEAPI HANDLE WINAPI OpenJobObjectA(DWORD, BOOL, LPCSTR);
WINBASEAPI BOOL WINAPI CreateJobSet(ULONG, PJOB_SET_ARRAY, ULONG);

#ifdef UNICODE
#define CreateJobObject  CreateJobObjectW
#define OpenJobObject  OpenJobObjectW
#else /* !UNICODE */
#define CreateJobObject  CreateJobObjectA
#define OpenJobObject  OpenJobObjectA
#endif /* !UNICODE */

WINBASEAPI HANDLE WINAPI FindFirstVolumeA(LPSTR, DWORD);
WINBASEAPI BOOL WINAPI FindNextVolumeA(HANDLE, LPSTR, DWORD);
WINBASEAPI HANDLE WINAPI FindFirstVolumeMountPointA(LPCSTR, LPSTR, DWORD);
WINBASEAPI HANDLE WINAPI FindFirstVolumeMountPointW(LPCWSTR, LPWSTR, DWORD);
WINBASEAPI BOOL WINAPI FindNextVolumeMountPointA(HANDLE, LPSTR, DWORD);
WINBASEAPI BOOL WINAPI FindNextVolumeMountPointW(HANDLE, LPWSTR, DWORD);
WINBASEAPI BOOL WINAPI FindVolumeMountPointClose(HANDLE);
WINBASEAPI BOOL WINAPI SetVolumeMountPointA(LPCSTR, LPCSTR);
WINBASEAPI BOOL WINAPI SetVolumeMountPointW(LPCWSTR, LPCWSTR);
WINBASEAPI BOOL WINAPI DeleteVolumeMountPointA(LPCSTR);
WINBASEAPI BOOL WINAPI GetVolumeNameForVolumeMountPointA(LPCSTR, LPSTR, DWORD);
WINBASEAPI BOOL WINAPI GetVolumePathNameA(LPCSTR, LPSTR, DWORD);

#ifdef UNICODE
#define FindFirstVolumeMountPoint FindFirstVolumeMountPointW
#define FindNextVolumeMountPoint FindNextVolumeMountPointW
#define SetVolumeMountPoint  SetVolumeMountPointW
#else /* !UNICODE */
#define FindFirstVolume FindFirstVolumeA
#define FindNextVolume FindNextVolumeA
#define FindFirstVolumeMountPoint FindFirstVolumeMountPointA
#define FindNextVolumeMountPoint FindNextVolumeMountPointA
#define SetVolumeMountPoint  SetVolumeMountPointA
#define DeleteVolumeMountPoint  DeleteVolumeMountPointA
#define GetVolumeNameForVolumeMountPoint  GetVolumeNameForVolumeMountPointA
#define GetVolumePathName  GetVolumePathNameA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0500 */

#if (_WIN32_WINNT >= 0x0501)

WINBASEAPI BOOL WINAPI GetVolumePathNamesForVolumeNameA(LPCSTR, LPCH, DWORD, PDWORD);

#ifndef UNICODE
#define GetVolumePathNamesForVolumeName  GetVolumePathNamesForVolumeNameA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0501 */

#if (_WIN32_WINNT >= 0x0500) || (_WIN32_FUSION >= 0x0100) || ISOLATION_AWARE_ENABLED

#define ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID  (0x00000001)
#define ACTCTX_FLAG_LANGID_VALID  (0x00000002)
#define ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID  (0x00000004)
#define ACTCTX_FLAG_RESOURCE_NAME_VALID  (0x00000008)
#define ACTCTX_FLAG_SET_PROCESS_DEFAULT  (0x00000010)
#define ACTCTX_FLAG_APPLICATION_NAME_VALID  (0x00000020)
#define ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF  (0x00000040)
#define ACTCTX_FLAG_HMODULE_VALID  (0x00000080)

typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;

typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

#ifdef UNICODE
typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;
typedef PCACTCTXW PCACTCTX;
#else /* !UNICODE */
typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
typedef PCACTCTXA PCACTCTX;
#endif /* !UNICODE */

WINBASEAPI HANDLE WINAPI CreateActCtxA(PCACTCTXA);
WINBASEAPI HANDLE WINAPI CreateActCtxW(PCACTCTXW);
WINBASEAPI VOID WINAPI AddRefActCtx(HANDLE);
WINBASEAPI VOID WINAPI ReleaseActCtx(HANDLE);
WINBASEAPI BOOL WINAPI ZombifyActCtx(HANDLE);
WINBASEAPI BOOL WINAPI ActivateActCtx(HANDLE hActCtx, ULONG_PTR *);

#ifdef UNICODE
#define CreateActCtx  CreateActCtxW
#else /* !UNICODE */
#define CreateActCtx  CreateActCtxA
#endif /* !UNICODE */

#define DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION  (0x00000001)

WINBASEAPI BOOL WINAPI DeactivateActCtx(DWORD, ULONG_PTR);
WINBASEAPI BOOL WINAPI GetCurrentActCtx(HANDLE *);

typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

#define FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX  (0x00000001)
#define FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS  (0x00000002)
#define FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA  (0x00000004)

WINBASEAPI BOOL WINAPI FindActCtxSectionStringA(DWORD, const GUID *, ULONG, LPCSTR, PACTCTX_SECTION_KEYED_DATA);
WINBASEAPI BOOL WINAPI FindActCtxSectionStringW(DWORD, const GUID *, ULONG, LPCWSTR, PACTCTX_SECTION_KEYED_DATA);
WINBASEAPI BOOL WINAPI FindActCtxSectionGuid(DWORD, const GUID *, ULONG, const GUID *, PACTCTX_SECTION_KEYED_DATA);

#ifdef UNICODE
#define FindActCtxSectionString  FindActCtxSectionStringW
#else /* !UNICODE */
#define FindActCtxSectionString  FindActCtxSectionStringA
#endif /* !UNICODE */

#ifndef ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED

typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

#define ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED  1
#endif /* !ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED */

#define QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX  (0x00000004)
#define QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE  (0x00000008)
#define QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS  (0x00000010)
#define QUERY_ACTCTX_FLAG_NO_ADDREF  (0x80000000)

WINBASEAPI BOOL WINAPI QueryActCtxW(DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T *);

typedef BOOL(WINAPI *PQUERYACTCTXW_FUNC) (DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T *);

#endif /* (_WIN32_WINNT > 0x0500) || (_WIN32_FUSION >= 0x0100) || ISOLATION_AWARE_ENABLED */

#if _WIN32_WINNT >= 0x0501
WINBASEAPI DWORD WINAPI WTSGetActiveConsoleSessionId(VOID);
#endif /* _WIN32_WINNT >= 0x0501 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)
WINBASEAPI DWORD WINAPI WTSGetServiceSessionId(VOID);
WINBASEAPI BOOLEAN WINAPI WTSIsServerContainer(VOID);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD */

#if _WIN32_WINNT >= 0x0601
WINBASEAPI WORD WINAPI GetActiveProcessorGroupCount(VOID);
WINBASEAPI WORD WINAPI GetMaximumProcessorGroupCount(VOID);
WINBASEAPI DWORD WINAPI GetActiveProcessorCount(WORD GroupNumber);
WINBASEAPI DWORD WINAPI GetMaximumProcessorCount(WORD GroupNumber);
#endif /* _WIN32_WINNT >=0x0601 */

WINBASEAPI BOOL WINAPI GetNumaProcessorNode(UCHAR, PUCHAR);

#if _WIN32_WINNT >= 0x0601
WINBASEAPI BOOL WINAPI GetNumaNodeNumberFromHandle(HANDLE, PUSHORT);
#endif /* _WIN32_WINNT >=0x0601 */

#if _WIN32_WINNT >= 0x0601
WINBASEAPI BOOL WINAPI GetNumaProcessorNodeEx(PPROCESSOR_NUMBER, PUSHORT);
#endif /* _WIN32_WINNT >=0x0601 */

WINBASEAPI BOOL WINAPI GetNumaNodeProcessorMask(UCHAR, PULONGLONG);
WINBASEAPI BOOL WINAPI GetNumaAvailableMemoryNode(UCHAR, PULONGLONG);

#if _WIN32_WINNT >= 0x0601
WINBASEAPI BOOL WINAPI GetNumaAvailableMemoryNodeEx(USHORT, PULONGLONG);
#endif /* _WIN32_WINNT >=0x0601 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI GetNumaProximityNode(ULONG, PUCHAR);
#endif /* _WIN32_WINNT >= 0x0600 */

typedef DWORD (WINAPI *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);

#define RESTART_MAX_CMD_LINE  1024

#define RESTART_NO_CRASH  1
#define RESTART_NO_HANG  2
#define RESTART_NO_PATCH  4
#define RESTART_NO_REBOOT  8

#define RECOVERY_DEFAULT_PING_INTERVAL  5000
#define RECOVERY_MAX_PING_INTERVAL  (5 * 60 * 1000)

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI HRESULT WINAPI RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK, PVOID, DWORD, DWORD);
WINBASEAPI HRESULT WINAPI UnregisterApplicationRecoveryCallback(void);
WINBASEAPI HRESULT WINAPI RegisterApplicationRestart(PCWSTR, DWORD);
WINBASEAPI HRESULT WINAPI UnregisterApplicationRestart(void);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI HRESULT WINAPI GetApplicationRecoveryCallback(HANDLE, APPLICATION_RECOVERY_CALLBACK *, PVOID *, PDWORD, PDWORD);
WINBASEAPI HRESULT WINAPI GetApplicationRestartSettings(HANDLE, PWSTR, PDWORD, PDWORD);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI HRESULT WINAPI ApplicationRecoveryInProgress(PBOOL);
WINBASEAPI VOID WINAPI ApplicationRecoveryFinished(BOOL);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)

typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10_RS1)
#define FILE_RENAME_FLAG_REPLACE_IF_EXISTS  0x00000001
#define FILE_RENAME_FLAG_POSIX_SEMANTICS  0x00000002
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10_RS1 */

typedef struct _FILE_RENAME_INFO {
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10_RS1)
    union {
        BOOLEAN ReplaceIfExists;
        DWORD Flags;
    } DUMMYUNIONNAME;
#else /* _WIN32_WINNT < _WIN32_WINNT_WIN10_RS1 */
    BOOLEAN ReplaceIfExists;
#endif /* _WIN32_WINNT < _WIN32_WINNT_WIN10_RS1 */
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFile;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10_RS1)

#define FILE_DISPOSITION_FLAG_DO_NOT_DELETE  0x00000000
#define FILE_DISPOSITION_FLAG_DELETE  0x00000001
#define FILE_DISPOSITION_FLAG_POSIX_SEMANTICS  0x00000002
#define FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK  0x00000004
#define FILE_DISPOSITION_FLAG_ON_CLOSE  0x00000008

typedef struct _FILE_DISPOSITION_INFO_EX {
    DWORD Flags;
} FILE_DISPOSITION_INFO_EX, *PFILE_DISPOSITION_INFO_EX;

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10_RS1 */

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
    IoPriorityHintVeryLow = 0,
    IoPriorityHintLow,
    IoPriorityHintNormal,
    MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;

#define STORAGE_INFO_FLAGS_ALIGNED_DEVICE  0x00000001
#define STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE  0x00000002

#define STORAGE_INFO_OFFSET_UNKNOWN  (0xffffffff)

typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;

typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;

typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#define REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK  0x00000001
#define REMOTE_PROTOCOL_INFO_FLAG_OFFLINE  0x00000002

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE  0x00000004
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define RPI_FLAG_SMB2_SHARECAP_TIMEWARP  0x00000002
#define RPI_FLAG_SMB2_SHARECAP_DFS  0x00000008
#define RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY 0x00000010
#define RPI_FLAG_SMB2_SHARECAP_SCALEOUT  0x00000020
#define RPI_FLAG_SMB2_SHARECAP_CLUSTER  0x00000040
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
#define RPI_SMB2_FLAG_SERVERCAP_DFS  0x00000001
#define RPI_SMB2_FLAG_SERVERCAP_LEASING  0x00000002
#define RPI_SMB2_FLAG_SERVERCAP_LARGEMTU  0x00000004
#define RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL  0x00000008
#define RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES  0x00000010
#define RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING  0x00000020
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

typedef struct _FILE_REMOTE_PROTOCOL_INFO {
    USHORT StructureVersion;
    USHORT StructureSize;
    ULONG Protocol;
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    ULONG Flags;
    struct {
        ULONG Reserved[8];
    } GenericReserved;
#if (_WIN32_WINNT < _WIN32_WINNT_WIN8)
    struct {
        ULONG Reserved[16];
    } ProtocolSpecificReserved;
#endif /* _WIN32_WINNT < _WIN32_WINNT_WIN8 */
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
    union {
        struct {
            struct {
                ULONG Capabilities;
            } Server;
            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;
        } Smb2;
        ULONG Reserved[16];
    } ProtocolSpecific;
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

WINBASEAPI BOOL WINAPI GetFileInformationByHandleEx(HANDLE, FILE_INFO_BY_HANDLE_CLASS, LPVOID, DWORD);

typedef enum _FILE_ID_TYPE {
    FileIdType,
    ObjectIdType,
    ExtendedFileIdType,
    MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)
        FILE_ID_128 ExtendedFileId;
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */
    } DUMMYUNIONNAME;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

WINBASEAPI HANDLE WINAPI OpenFileById(HANDLE, LPFILE_ID_DESCRIPTOR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD);

#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)

#define SYMBOLIC_LINK_FLAG_DIRECTORY  (0x1)
#define SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE  (0x2)

#define VALID_SYMBOLIC_LINK_FLAGS  SYMBOLIC_LINK_FLAG_DIRECTORY

WINBASEAPI BOOLEAN APIENTRY CreateSymbolicLinkA(LPCSTR, LPCSTR, DWORD);
WINBASEAPI BOOLEAN APIENTRY CreateSymbolicLinkW(LPCWSTR, LPCWSTR, DWORD);

#ifdef UNICODE
#define CreateSymbolicLink  CreateSymbolicLinkW
#else /* !UNICODE */
#define CreateSymbolicLink  CreateSymbolicLinkA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI QueryActCtxSettingsW(DWORD, HANDLE, PCWSTR, PCWSTR, PWSTR, SIZE_T, SIZE_T *);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)

WINBASEAPI BOOLEAN APIENTRY CreateSymbolicLinkTransactedA(LPCSTR, LPCSTR, DWORD, HANDLE);
WINBASEAPI BOOLEAN APIENTRY CreateSymbolicLinkTransactedW(LPCWSTR, LPCWSTR, DWORD, HANDLE);

#ifdef UNICODE
#define CreateSymbolicLinkTransacted  CreateSymbolicLinkTransactedW
#else /* !UNICODE */
#define CreateSymbolicLinkTransacted  CreateSymbolicLinkTransactedA
#endif /* !UNICODE */

#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI ReplacePartitionUnit(PWSTR, PWSTR, ULONG);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (_WIN32_WINNT >= 0x0600)
WINBASEAPI BOOL WINAPI AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK);
WINBASEAPI BOOL WINAPI RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK);
#endif /* _WIN32_WINNT >= 0x0600 */

#if (NTDDI_VERSION >= NTDDI_WIN7SP1)

WINBASEAPI BOOL WINAPI CopyContext( PCONTEXT, DWORD, PCONTEXT);
WINBASEAPI BOOL WINAPI InitializeContext(PVOID, DWORD, PCONTEXT *, PDWORD);

#if defined(_AMD64_) || defined(_X86_)

WINBASEAPI DWORD64 WINAPI GetEnabledXStateFeatures(VOID);
WINBASEAPI BOOL WINAPI GetXStateFeaturesMask(PCONTEXT, PDWORD64);
WINBASEAPI PVOID WINAPI LocateXStateFeature(PCONTEXT, DWORD, PDWORD);
WINBASEAPI BOOL WINAPI SetXStateFeaturesMask(PCONTEXT, DWORD64);

#endif /* defined(_AMD64_) || defined(_X86_) */

#endif /* (NTDDI_VERSION >= NTDDI_WIN7SP1) */

#if (_WIN32_WINNT >= 0x0601)

WINBASEAPI DWORD APIENTRY EnableThreadProfiling(HANDLE, DWORD, DWORD64, HANDLE *);
WINBASEAPI DWORD APIENTRY DisableThreadProfiling(HANDLE);
WINBASEAPI DWORD APIENTRY QueryThreadProfiling(HANDLE, PBOOLEAN);
WINBASEAPI DWORD APIENTRY ReadThreadProfilingData(HANDLE, DWORD, PPERFORMANCE_DATA);

#endif /* (_WIN32_WINNT >= 0x0601) */

#if defined(ISOLATION_AWARE_ENABLED) && (ISOLATION_AWARE_ENABLED != 0)
#error Isolation aware inline functions not supported
/* #include "winbase.inl" */
#endif /* ISOLATION_AWARE_ENABLED */


#endif /* _WINBASE_H */
