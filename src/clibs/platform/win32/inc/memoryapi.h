#ifndef _MEMORYAPI_H
#define _MEMORYAPI_H

#ifdef __ORANGEC__ 
#pragma once
#endif

/* ApiSet api-ms-win-core-memory-l1-1-0 */

/* #include <apiset.h> */
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

#define FILE_MAP_WRITE       SECTION_MAP_WRITE
#define FILE_MAP_READ        SECTION_MAP_READ
#define FILE_MAP_ALL_ACCESS  SECTION_ALL_ACCESS
#define FILE_MAP_EXECUTE     SECTION_MAP_EXECUTE_EXPLICIT

#define FILE_MAP_COPY     0x00000001
#define FILE_MAP_RESERVE  0x80000000

WINBASEAPI LPVOID WINAPI VirtualAlloc(LPVOID, SIZE_T, DWORD, DWORD);
WINBASEAPI BOOL WINAPI VirtualProtect(LPVOID, SIZE_T, DWORD, PDWORD);
WINBASEAPI BOOL WINAPI VirtualFree(LPVOID, SIZE_T, DWORD);
WINBASEAPI SIZE_T WINAPI VirtualQuery(LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T);
WINBASEAPI LPVOID WINAPI VirtualAllocEx(HANDLE, LPVOID, SIZE_T, DWORD, DWORD);
WINBASEAPI BOOL WINAPI VirtualFreeEx(HANDLE, LPVOID, SIZE_T, DWORD);
WINBASEAPI BOOL WINAPI VirtualProtectEx(HANDLE, LPVOID, SIZE_T, DWORD, PDWORD);
WINBASEAPI SIZE_T WINAPI VirtualQueryEx(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T);
WINBASEAPI BOOL WINAPI ReadProcessMemory(HANDLE, LPCVOID, LPVOID, SIZE_T, SIZE_T *);
WINBASEAPI BOOL WINAPI WriteProcessMemory(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *);
WINBASEAPI HANDLE WINAPI CreateFileMappingW(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR);
WINBASEAPI HANDLE WINAPI OpenFileMappingW(DWORD, BOOL, LPCWSTR);
WINBASEAPI LPVOID WINAPI MapViewOfFile(HANDLE, DWORD, DWORD, DWORD, SIZE_T);
WINBASEAPI LPVOID WINAPI MapViewOfFileEx(HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID);
WINBASEAPI BOOL WINAPI FlushViewOfFile(LPCVOID, SIZE_T);
WINBASEAPI BOOL WINAPI UnmapViewOfFile(LPCVOID);
WINBASEAPI SIZE_T WINAPI GetLargePageMinimum(VOID);
WINBASEAPI BOOL WINAPI GetProcessWorkingSetSizeEx(HANDLE, PSIZE_T, PSIZE_T, PDWORD);
WINBASEAPI BOOL WINAPI SetProcessWorkingSetSizeEx(HANDLE, SIZE_T, SIZE_T, DWORD);
WINBASEAPI BOOL WINAPI VirtualLock(LPVOID, SIZE_T);
WINBASEAPI BOOL WINAPI VirtualUnlock(LPVOID, SIZE_T);
WINBASEAPI UINT WINAPI GetWriteWatch(DWORD, PVOID, SIZE_T, PVOID *, ULONG_PTR *, LPDWORD);
WINBASEAPI UINT WINAPI ResetWriteWatch(LPVOID, SIZE_T);

#ifdef UNICODE
#define CreateFileMapping  CreateFileMappingW
#define OpenFileMapping  OpenFileMappingW
#endif /* UNICODE */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINXP)

typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

WINBASEAPI HANDLE WINAPI CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE);
WINBASEAPI BOOL WINAPI QueryMemoryResourceNotification(HANDLE, PBOOL);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINXP */

#if (_WIN32_WINNT >= _WIN32_WINNT_WS03)

#define FILE_CACHE_FLAGS_DEFINED
#define FILE_CACHE_MAX_HARD_ENABLE   0x00000001
#define FILE_CACHE_MAX_HARD_DISABLE  0x00000002
#define FILE_CACHE_MIN_HARD_ENABLE   0x00000004
#define FILE_CACHE_MIN_HARD_DISABLE  0x00000008

WINBASEAPI BOOL WINAPI GetSystemFileCacheSize(PSIZE_T, PSIZE_T, PDWORD);
WINBASEAPI BOOL WINAPI SetSystemFileCacheSize(SIZE_T, SIZE_T, DWORD);

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WS03 */

#if (_WIN32_WINNT >= _WIN32_WINNT_VISTA)
WINBASEAPI HANDLE WINAPI CreateFileMappingNumaW(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR, DWORD);

#ifdef UNICODE
#define CreateFileMappingNuma CreateFileMappingNumaW
#endif /* UNICODE */

#endif /* _WIN32_WINNT >= _WIN32_WINNT_VISTA */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

WINBASEAPI BOOL WINAPI PrefetchVirtualMemory(HANDLE, ULONG_PTR, PWIN32_MEMORY_RANGE_ENTRY, ULONG);
WINBASEAPI HANDLE WINAPI CreateFileMappingFromApp(HANDLE, PSECURITY_ATTRIBUTES, ULONG, ULONG64, PCWSTR);
WINBASEAPI PVOID WINAPI MapViewOfFileFromApp(HANDLE, ULONG, ULONG64, SIZE_T);
WINBASEAPI BOOL WINAPI UnmapViewOfFileEx(PVOID, ULONG);

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINXP)
WINBASEAPI BOOL WINAPI AllocateUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR);
WINBASEAPI BOOL WINAPI FreeUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR);
WINBASEAPI BOOL WINAPI MapUserPhysicalPages(PVOID, ULONG_PTR, PULONG_PTR);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINXP */

#if (_WIN32_WINNT >= _WIN32_WINNT_VISTA)
WINBASEAPI BOOL WINAPI AllocateUserPhysicalPagesNuma(HANDLE, PULONG_PTR, PULONG_PTR, DWORD);
WINBASEAPI LPVOID WINAPI VirtualAllocExNuma(HANDLE, LPVOID, SIZE_T, DWORD, DWORD, DWORD);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_VISTA */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

#define MEHC_PATROL_SCRUBBER_PRESENT  0x1

WINBASEAPI BOOL WINAPI GetMemoryErrorHandlingCapabilities(PULONG);

typedef VOID WINAPI BAD_MEMORY_CALLBACK_ROUTINE(VOID);
typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

WINBASEAPI PVOID WINAPI RegisterBadMemoryNotification(PBAD_MEMORY_CALLBACK_ROUTINE);

WINBASEAPI BOOL WINAPI UnregisterBadMemoryNotification(PVOID);

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)

#if (NTDDI_VERSION > NTDDI_WINBLUE)

typedef enum OFFER_PRIORITY {
    VmOfferPriorityVeryLow = 1,
    VmOfferPriorityLow,
    VmOfferPriorityBelowNormal,
    VmOfferPriorityNormal
} OFFER_PRIORITY;

DWORD WINAPI OfferVirtualMemory(PVOID, SIZE_T, OFFER_PRIORITY);
DWORD WINAPI ReclaimVirtualMemory(void const *, SIZE_T);
DWORD WINAPI DiscardVirtualMemory(PVOID, SIZE_T);

#endif /* NTDDI_VERSION > NTDDI_WINBLUE */

#endif /* (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)

#define FILE_MAP_TARGETS_INVALID  0x40000000

WINBASEAPI BOOL WINAPI SetProcessValidCallTargets(HANDLE, PVOID, SIZE_T, ULONG, PCFG_CALL_TARGET_INFO);

WINBASEAPI PVOID WINAPI VirtualAllocFromApp(PVOID, SIZE_T, ULONG, ULONG);
WINBASEAPI BOOL WINAPI VirtualProtectFromApp(PVOID, SIZE_T, ULONG, PULONG);
WINBASEAPI HANDLE WINAPI OpenFileMappingFromApp(ULONG, BOOL, PCWSTR);

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN10 */

#if (NTDDI_VERSION >= NTDDI_WIN10_RS1)

typedef enum WIN32_MEMORY_INFORMATION_CLASS {
    MemoryRegionInfo
} WIN32_MEMORY_INFORMATION_CLASS;

typedef struct WIN32_MEMORY_REGION_INFORMATION {
    PVOID AllocationBase;
    ULONG AllocationProtect;

    union {
        ULONG Flags;
        struct {
            ULONG Private: 1;
            ULONG MappedDataFile: 1;
            ULONG MappedImage: 1;
            ULONG MappedPageFile: 1;
            ULONG MappedPhysical: 1;
            ULONG DirectMapped: 1;
            ULONG Reserved: 26;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    SIZE_T RegionSize;
    SIZE_T CommitSize;
} WIN32_MEMORY_REGION_INFORMATION;

WINBASEAPI BOOL WINAPI QueryVirtualMemoryInformation(HANDLE, const VOID *, WIN32_MEMORY_INFORMATION_CLASS, PVOID, SIZE_T, PSIZE_T);

#endif /* NTDDI_VERSION >= NTDDI_WIN10_RS1 */

#endif /* _MEMORYAPI_H */
