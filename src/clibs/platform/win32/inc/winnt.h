#ifndef _WINNT_H
#define _WINNT_H

#ifdef __ORANGEC__ 
#pragma once
#endif

#define __forceinline inline
/* Windows NT definitions */


#include <ctype.h>

#define ANYSIZE_ARRAY  1

#ifndef DUMMYUNIONNAME
#if defined(NONAMELESSUNION)
#define DUMMYUNIONNAME  u
#define DUMMYUNIONNAME2  u2
#define DUMMYUNIONNAME3  u3
#define DUMMYUNIONNAME4  u4
#define DUMMYUNIONNAME5  u5
#define DUMMYUNIONNAME6  u6
#define DUMMYUNIONNAME7  u7
#define DUMMYUNIONNAME8  u8
#define DUMMYUNIONNAME9  u9
#else
#define DUMMYUNIONNAME
#define DUMMYUNIONNAME2
#define DUMMYUNIONNAME3
#define DUMMYUNIONNAME4
#define DUMMYUNIONNAME5
#define DUMMYUNIONNAME6
#define DUMMYUNIONNAME7
#define DUMMYUNIONNAME8
#define DUMMYUNIONNAME9
#endif
#endif /* !DUMMYUNIONNAME */

#ifndef DUMMYSTRUCTNAME
#if defined(NONAMELESSUNION)
#define DUMMYSTRUCTNAME  s
#define DUMMYSTRUCTNAME2 s2
#define DUMMYSTRUCTNAME3 s3
#define DUMMYSTRUCTNAME4 s4
#define DUMMYSTRUCTNAME5 s5
#define DUMMYSTRUCTNAME6 s6
#else
#define DUMMYSTRUCTNAME
#define DUMMYSTRUCTNAME2
#define DUMMYSTRUCTNAME3
#define DUMMYSTRUCTNAME4
#define DUMMYSTRUCTNAME5
#define DUMMYSTRUCTNAME6
#endif
#endif /* !DUMMYSTRUCTNAME */

/* #include <specstrings.h> */
/* #include <kernelspecs.h> */

#if defined(_M_MRX000) && defined(ENABLE_RESTRICTED)
#define RESTRICTED_POINTER __restrict
#else
#define RESTRICTED_POINTER
#endif

#if defined(_M_MRX000) || defined(_M_ALPHA) || defined(_M_PPC) || defined(_M_AMD64)
#define ALIGNMENT_MACHINE
#define UNALIGNED  __unaligned
#if defined(_WIN64)
#define UNALIGNED64  __unaligned
#else /* !_WIN64 */
#define UNALIGNED64
#endif /* !_WIN64 */
#else
#undef ALIGNMENT_MACHINE
#define UNALIGNED
#define UNALIGNED64
#endif

#if defined(_WIN64) || defined(_M_ALPHA)
#define MAX_NATURAL_ALIGNMENT  sizeof(ULONGLONG)
#define MEMORY_ALLOCATION_ALIGNMENT  16
#else
#define MAX_NATURAL_ALIGNMENT  sizeof(DWORD)
#define MEMORY_ALLOCATION_ALIGNMENT  8
#endif

#define TYPE_ALIGNMENT(t)  __alignof(t)

#if defined(_AMD64_) || defined(_X86_)
#define PROBE_ALIGNMENT(_s)  TYPE_ALIGNMENT(DWORD)
#elif !defined(RC_INVOKED)
#error "No Target Architecture"
#endif

#define PROBE_ALIGNMENT32(_s)  TYPE_ALIGNMENT(DWORD)

#define C_ASSERT(e)  typedef char __C_ASSERT__[(e)?1:-1]

#include <basetsd.h>

#if defined(_M_IX86) || defined(_M_AMD64)
#define DECLSPEC_IMPORT __declspec(dllimport)
#else
#define DECLSPEC_IMPORT
#endif

#ifndef DECLSPEC_NORETURN
#define DECLSPEC_NORETURN  __declspec(noreturn)
#endif /* DECLSPEC_NORETURN */

#ifndef DECLSPEC_NOTHROW
#define DECLSPEC_NOTHROW
#endif /* DECLSPEC_NOTHROW */

#ifndef DECLSPEC_ALIGN
#define DECLSPEC_ALIGN(x)  __declspec(align(x))
#endif /* DECLSPEC_ALIGN */

#ifndef SYSTEM_CACHE_ALIGNMENT_SIZE
#if defined(_AMD64_) || defined(_X86_)
#define SYSTEM_CACHE_ALIGNMENT_SIZE  64
#else /* !(_AMD64_ || _X86) */
#define SYSTEM_CACHE_ALIGNMENT_SIZE  128
#endif /* !(_AMD64_ || _X86) */
#endif /* SYSTEM_CACHE_ALIGNMENT_SIZE */

#ifndef DECLSPEC_CACHEALIGN
#define DECLSPEC_CACHEALIGN  DECLSPEC_ALIGN(SYSTEM_CACHE_ALIGNMENT_SIZE)
#endif

#ifndef DECLSPEC_UUID
#define DECLSPEC_UUID(x)
#endif /* DECLSPEC_UUID */

#ifndef DECLSPEC_NOVTABLE
#define DECLSPEC_NOVTABLE
#endif /* DECLSPEC_NOVTABLE */

#ifndef DECLSPEC_SELECTANY
#define DECLSPEC_SELECTANY
#endif /* DECLSPEC_SELECTANY */

#ifndef NOP_FUNCTION
#define NOP_FUNCTION  (void)0
#endif /* NOP_FUNCTION */

#ifndef DECLSPEC_ADDRSAFE
#define DECLSPEC_ADDRSAFE
#endif /* DECLSPEC_ADDRSAFE */

#ifndef DECLSPEC_SAFEBUFFERS
#define DECLSPEC_SAFEBUFFERS
#endif /* DECLSPEC_SAFEBUFFERS */

#ifndef DECLSPEC_NOINLINE
#define DECLSPEC_NOINLINE  __declspec(noinline)
#endif /* DECLSPEC_NOINLINE */

#ifndef DECLSPEC_GUARDNOCF
#define DECLSPEC_GUARDNOCF
#endif /* DECLSPEC_GUARDNOCF */

#ifndef DECLSPEC_GUARD_SUPPRESS
#define DECLSPEC_GUARD_SUPPRESS
#endif /* DECLSPEC_GUARD_SUPPRESS */

#ifndef FORCEINLINE
#define FORCEINLINE __forceinline
#endif /* FORCEINLINE */

#define CFORCEINLINE  FORCEINLINE
#define STKFORCEINLINE  FORCEINLINE
#ifndef PFORCEINLINE
#define PFORCEINLINE  FORCEINLINE
#endif /* PFORCEINLINE */

#ifndef DECLSPEC_DEPRECATED
#define DECLSPEC_DEPRECATED  __declspec(deprecated)
#define DEPRECATE_SUPPORTED
#endif /* DECLSPEC_DEPRECATED */

#ifdef DEPRECATE_DDK_FUNCTIONS
#ifdef _NTDDK_
#define DECLSPEC_DEPRECATED_DDK  DECLSPEC_DEPRECATED
#ifdef DEPRECATE_SUPPORTED
#define PRAGMA_DEPRECATED_DDK  1
#endif
#else /* !_NTDDK_ */
#define DECLSPEC_DEPRECATED_DDK
#define PRAGMA_DEPRECATED_DDK  1
#endif /* !_NTDDK_ */
#else /* !DEPRECATE_DDK_FUNCTIONS */
#define DECLSPEC_DEPRECATED_DDK
#define PRAGMA_DEPRECATED_DDK  0
#endif /* !DEPRECATE_DDK_FUNCTIONS */

typedef void *PVOID;
typedef void *POINTER_64 PVOID64;

#if defined(_STDCALL_SUPPORTED)
#define NTAPI __stdcall
#else
#define _cdecl
#define __cdecl
#define NTAPI
#endif

#define NTAPI_INLINE  NTAPI

#define NTSYSAPI  DECLSPEC_IMPORT
#define NTSYSCALLAPI  DECLSPEC_IMPORT

#ifndef VOID
#define VOID void
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef int INT;
#endif /* VOID */

typedef wchar_t WCHAR;

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef CONST WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef CONST PWSTR *PCZPWSTR;
typedef WCHAR UNALIGNED *LPUWSTR, *PUWSTR;
typedef CONST WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef CONST PCWSTR *PCZPCWSTR;
typedef CONST WCHAR UNALIGNED *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef CONST WCHAR *PCZZWSTR;
typedef WCHAR UNALIGNED *PUZZWSTR;
typedef CONST WCHAR UNALIGNED *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef CONST WCHAR *PCNZWCH;
typedef WCHAR UNALIGNED *PUNZWCH;
typedef CONST WCHAR UNALIGNED *PCUNZWCH;

#if (_WIN32_WINNT >= 0x0600)

typedef CONST WCHAR *LPCWCHAR, *PCWCHAR;
typedef CONST WCHAR UNALIGNED *LPCUWCHAR, *PCUWCHAR;

typedef unsigned long UCSCHAR;

#define UCSCHAR_INVALID_CHARACTER  (0xffffffff)

#define MIN_UCSCHAR  (0)
#define MAX_UCSCHAR  (0x0010FFFF)

typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR UNALIGNED *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR UNALIGNED *PCUUCSSTR;

typedef UCSCHAR UNALIGNED *PUUCSCHAR;
typedef const UCSCHAR UNALIGNED *PCUUCSCHAR;

#endif /* _WIN32_WINNT >= 0x0600 */

typedef CHAR *PCHAR, *LPCH, *PCH;
typedef CONST CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef CONST PSTR *PCZPSTR;
typedef CONST CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef CONST PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef CONST CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef CONST CHAR *PCNZCH;

#ifdef UNICODE

#ifndef _TCHAR_DEFINED
#define _TCHAR_DEFINED
typedef WCHAR TCHAR, *PTCHAR;
typedef WCHAR TBYTE, *PTBYTE;
#endif /* _TCHAR_DEFINED */

typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
/* typedef LPWSTR LP; */
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;

#define __TEXT(quote)  L##quote

#else /* !UNICODE */

#ifndef _TCHAR_DEFINED
#define _TCHAR_DEFINED
typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE, *PTBYTE;
#endif /* _TCHAR_DEFINED */

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;

#define __TEXT(quote) quote  

#endif /* !UNICODE */

#define TEXT(quote)  __TEXT(quote)  

typedef SHORT *PSHORT;
typedef LONG *PLONG;

#define ALL_PROCESSOR_GROUPS  0xffff

typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;

typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;

#ifdef _WIN64
#define MAXIMUM_PROC_PER_GROUP  64
#else /* !_WIN64 */
#define MAXIMUM_PROC_PER_GROUP  32
#endif /* !_WIN64 */

#define MAXIMUM_PROCESSORS  MAXIMUM_PROC_PER_GROUP

#ifdef STRICT
typedef void *HANDLE;
#define DECLARE_HANDLE(name) struct name##__{int unused;}; typedef struct name##__ *name
#else
typedef PVOID HANDLE;
#define DECLARE_HANDLE(name) typedef HANDLE name
#endif
typedef HANDLE *PHANDLE;

typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;

#ifndef _HRESULT_DEFINED
#define _HRESULT_DEFINED
typedef long HRESULT;
#endif /* _HRESULT_DEFINED */

#ifdef __cplusplus
#define EXTERN_C  extern "C"
#else
#define EXTERN_C  extern
#endif

#ifdef _68K_
#define STDMETHODCALLTYPE  __cdecl
#else
#define STDMETHODCALLTYPE  __stdcall
#endif
#define STDMETHODVCALLTYPE  __cdecl

#define STDAPICALLTYPE  __stdcall
#define STDAPIVCALLTYPE  __cdecl

#define STDAPI  EXTERN_C HRESULT STDAPICALLTYPE
#define STDAPI_(type)  EXTERN_C type STDAPICALLTYPE

#define STDMETHODIMP  HRESULT STDMETHODCALLTYPE
#define STDMETHODIMP_(type)  type STDMETHODCALLTYPE

#define STDOVERRIDEMETHODIMP  __override STDMETHODIMP
#define STDOVERRIDEMETHODIMP_(type) __override STDMETHODIMP_(type)

#define IFACEMETHODIMP  __override STDMETHODIMP
#define IFACEMETHODIMP_(type)  __override STDMETHODIMP_(type)

#define STDAPIV  EXTERN_C HRESULT STDAPIVCALLTYPE
#define STDAPIV_(type)  EXTERN_C type STDAPIVCALLTYPE

#define STDMETHODIMPV  HRESULT STDMETHODVCALLTYPE
#define STDMETHODIMPV_(type)  type STDMETHODVCALLTYPE

#define STDOVERRIDEMETHODIMPV  __override STDMETHODIMPV
#define STDOVERRIDEMETHODIMPV_(type) __override STDMETHODIMPV_(type)

#define IFACEMETHODIMPV  __override STDMETHODIMPV
#define IFACEMETHODIMPV_(type)  __override STDMETHODIMPV_(type)

typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD  LANGID;

#ifndef __COMPARTMENT_ID_DEFINED__
#define __COMPARTMENT_ID_DEFINED__
typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;
#endif /* __COMPARTMENT_ID_DEFINED__ */

#define APPLICATION_ERROR_MASK  0x20000000
#define ERROR_SEVERITY_SUCCESS  0x00000000
#define ERROR_SEVERITY_INFORMATIONAL 0x40000000
#define ERROR_SEVERITY_WARNING  0x80000000
#define ERROR_SEVERITY_ERROR  0xC0000000

typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;

#define _ULONGLONG_
#if (!defined(_M_IX86) || (defined(_INTEGRAL_MAX_BITS) && _INTEGRAL_MAX_BITS >= 64))
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
#define MAXLONGLONG  (0x7fffffffffffffff)
#else
typedef double LONGLONG;
typedef double ULONGLONG;
#endif

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;

typedef LONGLONG USN;

typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } DUMMYSTRUCTNAME;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;

typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } DUMMYSTRUCTNAME;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;

typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;

typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;

#define _DWORDLONG_
typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;

#if defined(_68K_) || defined(_M_AMD64)

#define Int32x32To64(a,b)  (((__int64)((long)(a))) * ((__int64)((long)(b))))
#define UInt32x32To64(a,b)  (((unsigned __int64)((unsigned int)(a))) * ((unsigned __int64)((unsigned int)(b))))

#define Int64ShllMod32(a,b)  (((unsigned __int64)(a)) << (b))
#define Int64ShraMod32(a,b)  (((__int64)(a)) >> (b))
#define Int64ShrlMod32(a,b)  (((unsigned __int64)(a)) >> (b))

#elif defined(_M_IX86)

#define Int32x32To64(a, b)  ((__int64)(((__int64)((long)(a))) * ((long)(b))))
#define UInt32x32To64(a, b) ((unsigned __int64)(((unsigned __int64)((unsigned int)(a))) * ((unsigned int)(b))))

ULONGLONG NTAPI Int64ShllMod32(ULONGLONG, DWORD);
LONGLONG NTAPI Int64ShraMod32(LONGLONG, DWORD);
ULONGLONG NTAPI Int64ShrlMod32(ULONGLONG, DWORD);

#elif defined(RC_INVOKED)
#else
#error "No target architecture"
#endif /* machine */

#if defined(_M_AMD64)

#define RotateLeft8  _rotl8
#define RotateLeft16  _rotl16
#define RotateRight8  _rotr8
#define RotateRight16  _rotr16

unsigned __int8 __cdecl _rotl8(unsigned __int8, unsigned __int8);
unsigned __int16 __cdecl _rotl16(unsigned __int16, unsigned __int8);
unsigned __int8 __cdecl _rotr8(unsigned __int8, unsigned __int8);
unsigned __int16 __cdecl _rotr16(unsigned __int16, unsigned __int8);

#endif /* _M_AMD64 */

#define RotateLeft32 _rotl
#define RotateLeft64 _llrotl
#define RotateRight32 _rotr
#define RotateRight64 _llrotr

unsigned int __cdecl _rotl(unsigned int, int);
unsigned __int64 __cdecl _llrotl(unsigned __int64, int);
unsigned int __cdecl _rotr(unsigned int, int);
unsigned __int64 __cdecl _llrotr(unsigned __int64, int);

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotr)

#define ANSI_NULL  ((CHAR)0)
#define UNICODE_NULL  ((WCHAR)0)
#define UNICODE_STRING_MAX_BYTES  ((WORD)65534)
#define UNICODE_STRING_MAX_CHARS  (32767)

typedef BYTE  BOOLEAN;
typedef BOOLEAN *PBOOLEAN;

typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;

typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;

typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;

#include <guiddef.h>

#ifndef __OBJECTID_DEFINED
#define __OBJECTID_DEFINED
typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#endif /* __OBJECTID_DEFINED */

#define MINCHAR  0x80
#define MAXCHAR  0x7f
#define MINSHORT  0x8000
#define MAXSHORT  0x7fff
#define MINLONG  0x80000000
#define MAXLONG  0x7fffffff
#define MAXBYTE  0xff
#define MAXWORD  0xffff
#define MAXDWORD  0xffffffff

#define FIELD_OFFSET(type, field)   ((LONG)(LONG_PTR)&(((type *)0)->field))
#define UFIELD_OFFSET(type, field)  ((DWORD)(LONG_PTR)&(((type *)0)->field))

#define RTL_FIELD_SIZE(type, field) (sizeof(((type *)0)->field))

#define RTL_SIZEOF_THROUGH_FIELD(type, field) \
  (FIELD_OFFSET(type, field) + RTL_FIELD_SIZE(type, field))

#define RTL_CONTAINS_FIELD(Struct, Size, Field) \
  ((((PCHAR)(&(Struct)->Field)) + sizeof((Struct)->Field)) <= (((PCHAR)(Struct))+(Size)))

#define RTL_NUMBER_OF_V1(A)  (sizeof(A)/sizeof((A)[0]))

#define RTL_NUMBER_OF_V2(A)  RTL_NUMBER_OF_V1(A)

#ifdef ENABLE_RTL_NUMBER_OF_V2
#define RTL_NUMBER_OF(A)  RTL_NUMBER_OF_V2(A)
#else
#define RTL_NUMBER_OF(A)  RTL_NUMBER_OF_V1(A)
#endif

#define ARRAYSIZE(A)  RTL_NUMBER_OF_V2(A)
#define _ARRAYSIZE(A)  RTL_NUMBER_OF_V1(A)

#define RTL_FIELD_TYPE(type,field)  (((type*)0)->field)

#define RTL_NUMBER_OF_FIELD(type,field)  (RTL_NUMBER_OF(RTL_FIELD_TYPE(type, field)))

#define RTL_PADDING_BETWEEN_FIELDS(T, F1, F2) \
  ((FIELD_OFFSET(T, F2) > FIELD_OFFSET(T, F1)) \
  ? (FIELD_OFFSET(T, F2) - FIELD_OFFSET(T, F1) - RTL_FIELD_SIZE(T, F1)) \
  : (FIELD_OFFSET(T, F1) - FIELD_OFFSET(T, F2) - RTL_FIELD_SIZE(T, F2)))

#define RTL_CONST_CAST(type)  (type)

#define RTL_BITS_OF(sizeOfArg)  (sizeof(sizeOfArg) * 8)

#define RTL_BITS_OF_FIELD(type,field)  (RTL_BITS_OF(RTL_FIELD_TYPE(type, field)))

#define CONTAINING_RECORD(address,type,field)  ((type *)( \
  (PCHAR)(address) - \
  (ULONG_PTR)(&((type *)0)->field)))

#include <excpt.h>

/*
 * Exception disposition return values.
 */
typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
typedef EXCEPTION_DISPOSITION NTAPI EXCEPTION_ROUTINE(struct _EXCEPTION_RECORD *, PVOID, struct _CONTEXT *, PVOID);
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;

#define ENCLAVE_SHORT_ID_LENGTH  16
#define ENCLAVE_LONG_ID_LENGTH  32

#define VER_SERVER_NT  0x80000000
#define VER_WORKSTATION_NT  0x40000000
#define VER_SUITE_SMALLBUSINESS  0x00000001
#define VER_SUITE_ENTERPRISE  0x00000002
#define VER_SUITE_BACKOFFICE  0x00000004
#define VER_SUITE_COMMUNICATIONS  0x00000008
#define VER_SUITE_TERMINAL  0x00000010
#define VER_SUITE_SMALLBUSINESS_RESTRICTED  0x00000020
#define VER_SUITE_EMBEDDEDNT  0x00000040
#define VER_SUITE_DATACENTER  0x00000080
#define VER_SUITE_SINGLEUSERTS  0x00000100
#define VER_SUITE_PERSONAL  0x00000200
#define VER_SUITE_BLADE  0x00000400
#define VER_SUITE_EMBEDDED_RESTRICTED  0x00000800
#define VER_SUITE_SECURITY_APPLIANCE  0x00001000
#define VER_SUITE_STORAGE_SERVER  0x00002000
#define VER_SUITE_COMPUTE_SERVER  0x00004000
#define VER_SUITE_WH_SERVER  0x00008000

#define PRODUCT_UNDEFINED  0x00000000

#define PRODUCT_ULTIMATE  0x00000001
#define PRODUCT_HOME_BASIC  0x00000002
#define PRODUCT_HOME_PREMIUM  0x00000003
#define PRODUCT_ENTERPRISE  0x00000004
#define PRODUCT_HOME_BASIC_N  0x00000005
#define PRODUCT_BUSINESS  0x00000006
#define PRODUCT_STANDARD_SERVER  0x00000007
#define PRODUCT_DATACENTER_SERVER  0x00000008
#define PRODUCT_SMALLBUSINESS_SERVER  0x00000009
#define PRODUCT_ENTERPRISE_SERVER  0x0000000A
#define PRODUCT_STARTER  0x0000000B
#define PRODUCT_DATACENTER_SERVER_CORE  0x0000000C
#define PRODUCT_STANDARD_SERVER_CORE  0x0000000D
#define PRODUCT_ENTERPRISE_SERVER_CORE  0x0000000E
#define PRODUCT_ENTERPRISE_SERVER_IA64  0x0000000F
#define PRODUCT_BUSINESS_N  0x00000010
#define PRODUCT_WEB_SERVER  0x00000011
#define PRODUCT_CLUSTER_SERVER  0x00000012
#define PRODUCT_HOME_SERVER  0x00000013
#define PRODUCT_STORAGE_EXPRESS_SERVER  0x00000014
#define PRODUCT_STORAGE_STANDARD_SERVER  0x00000015
#define PRODUCT_STORAGE_WORKGROUP_SERVER  0x00000016
#define PRODUCT_STORAGE_ENTERPRISE_SERVER  0x00000017
#define PRODUCT_SERVER_FOR_SMALLBUSINESS  0x00000018
#define PRODUCT_SMALLBUSINESS_SERVER_PREMIUM  0x00000019
#define PRODUCT_HOME_PREMIUM_N  0x0000001A
#define PRODUCT_ENTERPRISE_N  0x0000001B
#define PRODUCT_ULTIMATE_N  0x0000001C
#define PRODUCT_WEB_SERVER_CORE  0x0000001D
#define PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT  0x0000001E
#define PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY  0x0000001F
#define PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING  0x00000020
#define PRODUCT_SERVER_FOUNDATION  0x00000021
#define PRODUCT_HOME_PREMIUM_SERVER  0x00000022
#define PRODUCT_SERVER_FOR_SMALLBUSINESS_V  0x00000023
#define PRODUCT_STANDARD_SERVER_V  0x00000024
#define PRODUCT_DATACENTER_SERVER_V  0x00000025
#define PRODUCT_ENTERPRISE_SERVER_V  0x00000026
#define PRODUCT_DATACENTER_SERVER_CORE_V  0x00000027
#define PRODUCT_STANDARD_SERVER_CORE_V  0x00000028
#define PRODUCT_ENTERPRISE_SERVER_CORE_V  0x00000029
#define PRODUCT_HYPERV  0x0000002A
#define PRODUCT_STORAGE_EXPRESS_SERVER_CORE  0x0000002B
#define PRODUCT_STORAGE_STANDARD_SERVER_CORE  0x0000002C
#define PRODUCT_STORAGE_WORKGROUP_SERVER_CORE  0x0000002D
#define PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE  0x0000002E
#define PRODUCT_STARTER_N  0x0000002F
#define PRODUCT_PROFESSIONAL  0x00000030
#define PRODUCT_PROFESSIONAL_N  0x00000031
#define PRODUCT_SB_SOLUTION_SERVER  0x00000032
#define PRODUCT_SERVER_FOR_SB_SOLUTIONS  0x00000033
#define PRODUCT_STANDARD_SERVER_SOLUTIONS  0x00000034
#define PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE  0x00000035
#define PRODUCT_SB_SOLUTION_SERVER_EM  0x00000036
#define PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM  0x00000037
#define PRODUCT_SOLUTION_EMBEDDEDSERVER  0x00000038
#define PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE  0x00000039
#define PRODUCT_PROFESSIONAL_EMBEDDED  0x0000003A
#define PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT  0x0000003B
#define PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL  0x0000003C
#define PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC  0x0000003D
#define PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC  0x0000003E
#define PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE  0x0000003F
#define PRODUCT_CLUSTER_SERVER_V  0x00000040
#define PRODUCT_EMBEDDED  0x00000041
#define PRODUCT_STARTER_E  0x00000042
#define PRODUCT_HOME_BASIC_E  0x00000043
#define PRODUCT_HOME_PREMIUM_E  0x00000044
#define PRODUCT_PROFESSIONAL_E  0x00000045
#define PRODUCT_ENTERPRISE_E  0x00000046
#define PRODUCT_ULTIMATE_E  0x00000047
#define PRODUCT_ENTERPRISE_EVALUATION  0x00000048
#define PRODUCT_MULTIPOINT_STANDARD_SERVER  0x0000004C
#define PRODUCT_MULTIPOINT_PREMIUM_SERVER  0x0000004D
#define PRODUCT_STANDARD_EVALUATION_SERVER  0x0000004F
#define PRODUCT_DATACENTER_EVALUATION_SERVER  0x00000050
#define PRODUCT_ENTERPRISE_N_EVALUATION  0x00000054
#define PRODUCT_EMBEDDED_AUTOMOTIVE  0x00000055
#define PRODUCT_EMBEDDED_INDUSTRY_A  0x00000056
#define PRODUCT_THINPC  0x00000057
#define PRODUCT_EMBEDDED_A  0x00000058
#define PRODUCT_EMBEDDED_INDUSTRY  0x00000059
#define PRODUCT_EMBEDDED_E  0x0000005A
#define PRODUCT_EMBEDDED_INDUSTRY_E  0x0000005B
#define PRODUCT_EMBEDDED_INDUSTRY_A_E  0x0000005C
#define PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER  0x0000005F
#define PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER  0x00000060
#define PRODUCT_CORE_ARM  0x00000061
#define PRODUCT_CORE_N  0x00000062
#define PRODUCT_CORE_COUNTRYSPECIFIC  0x00000063
#define PRODUCT_CORE_SINGLELANGUAGE  0x00000064
#define PRODUCT_CORE  0x00000065
#define PRODUCT_PROFESSIONAL_WMC  0x00000067
#define PRODUCT_MOBILE_CORE  0x00000068
#define PRODUCT_EMBEDDED_INDUSTRY_EVAL  0x00000069
#define PRODUCT_EMBEDDED_INDUSTRY_E_EVAL  0x0000006A
#define PRODUCT_EMBEDDED_EVAL  0x0000006B
#define PRODUCT_EMBEDDED_E_EVAL  0x0000006C
#define PRODUCT_NANO_SERVER  0x0000006D
#define PRODUCT_CLOUD_STORAGE_SERVER  0x0000006E
#define PRODUCT_CORE_CONNECTED  0x0000006F
#define PRODUCT_PROFESSIONAL_STUDENT  0x00000070
#define PRODUCT_CORE_CONNECTED_N  0x00000071
#define PRODUCT_PROFESSIONAL_STUDENT_N  0x00000072
#define PRODUCT_CORE_CONNECTED_SINGLELANGUAGE  0x00000073
#define PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC  0x00000074
#define PRODUCT_CONNECTED_CAR  0x00000075
#define PRODUCT_INDUSTRY_HANDHELD  0x00000076
#define PRODUCT_PPI_PRO  0x00000077
#define PRODUCT_ARM64_SERVER  0x00000078
#define PRODUCT_EDUCATION  0x00000079
#define PRODUCT_EDUCATION_N  0x0000007A
#define PRODUCT_IOTUAP  0x0000007B
#define PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER  0x0000007C
#define PRODUCT_ENTERPRISE_S  0x0000007D
#define PRODUCT_ENTERPRISE_S_N  0x0000007E
#define PRODUCT_PROFESSIONAL_S  0x0000007F
#define PRODUCT_PROFESSIONAL_S_N  0x00000080
#define PRODUCT_ENTERPRISE_S_EVALUATION  0x00000081
#define PRODUCT_ENTERPRISE_S_N_EVALUATION  0x00000082
#define PRODUCT_HOLOGRAPHIC  0x00000087
#define PRODUCT_PRO_SINGLE_LANGUAGE  0x0000008A
#define PRODUCT_PRO_CHINA  0x0000008B
#define PRODUCT_ENTERPRISE_SUBSCRIPTION  0x0000008C
#define PRODUCT_ENTERPRISE_SUBSCRIPTION_N  0x0000008D
#define PRODUCT_DATACENTER_NANO_SERVER  0x0000008F
#define PRODUCT_STANDARD_NANO_SERVER  0x00000090
#define PRODUCT_DATACENTER_A_SERVER_CORE  0x00000091
#define PRODUCT_STANDARD_A_SERVER_CORE  0x00000092
#define PRODUCT_DATACENTER_WS_SERVER_CORE  0x00000093
#define PRODUCT_STANDARD_WS_SERVER_CORE  0x00000094
#define PRODUCT_UTILITY_VM  0x00000095
#define PRODUCT_DATACENTER_EVALUATION_SERVER_CORE  0x0000009F
#define PRODUCT_STANDARD_EVALUATION_SERVER_CORE  0x000000A0
#define PRODUCT_PRO_WORKSTATION  0x000000A1
#define PRODUCT_PRO_WORKSTATION_N  0x000000A2
#define PRODUCT_PRO_FOR_EDUCATION  0x000000A4
#define PRODUCT_PRO_FOR_EDUCATION_N  0x000000A5
#define PRODUCT_AZURE_SERVER_CORE  0x000000A8
#define PRODUCT_AZURE_NANO_SERVER  0x000000A9

#define PRODUCT_UNLICENSED  0xABCDABCD

#include <sdkddkver.h>

#define LANG_NEUTRAL  0x00
#define LANG_INVARIANT  0x7f

#define LANG_AFRIKAANS  0x36
#define LANG_ALBANIAN  0x1c
#define LANG_ALSATIAN  0x84
#define LANG_AMHARIC  0x5e
#define LANG_ARABIC  0x01
#define LANG_ARMENIAN  0x2b
#define LANG_ASSAMESE  0x4d
#define LANG_AZERI  0x2c
#define LANG_AZERBAIJANI  0x2c
#define LANG_BANGLA  0x45
#define LANG_BASHKIR  0x6d
#define LANG_BASQUE  0x2d
#define LANG_BELARUSIAN  0x23
#define LANG_BENGALI  0x45
#define LANG_BRETON  0x7e
#define LANG_BOSNIAN  0x1a
#define LANG_BOSNIAN_NEUTRAL  0x781a
#define LANG_BULGARIAN  0x02
#define LANG_CATALAN  0x03
#define LANG_CENTRAL_KURDISH  0x92
#define LANG_CHEROKEE  0x5c
#define LANG_CHINESE  0x04
#define LANG_CHINESE_SIMPLIFIED  0x04
#define LANG_CHINESE_TRADITIONAL  0x7c04
#define LANG_CORSICAN  0x83
#define LANG_CROATIAN  0x1a
#define LANG_CZECH  0x05
#define LANG_DANISH  0x06
#define LANG_DARI  0x8c
#define LANG_DIVEHI  0x65
#define LANG_DUTCH  0x13
#define LANG_ENGLISH  0x09
#define LANG_ESTONIAN  0x25
#define LANG_FAEROESE  0x38
#define LANG_FARSI  0x29  /* use LANG_PERSIAN */
#define LANG_FILIPINO  0x64
#define LANG_FINNISH  0x0b
#define LANG_FRENCH  0x0c
#define LANG_FRISIAN  0x62
#define LANG_FULAH  0x67
#define LANG_GALICIAN  0x56
#define LANG_GEORGIAN  0x37
#define LANG_GERMAN  0x07
#define LANG_GREEK  0x08
#define LANG_GREENLANDIC  0x6f
#define LANG_GUJARATI  0x47
#define LANG_HAUSA  0x68
#define LANG_HAWAIIAN  0x75
#define LANG_HEBREW  0x0d
#define LANG_HINDI  0x39
#define LANG_HUNGARIAN  0x0e
#define LANG_ICELANDIC  0x0f
#define LANG_IGBO  0x70
#define LANG_INDONESIAN  0x21
#define LANG_INUKTITUT  0x5d
#define LANG_IRISH  0x3c  /* Use with SUBLANG_IRISH_IRELAND */
#define LANG_ITALIAN  0x10
#define LANG_JAPANESE  0x11
#define LANG_KANNADA  0x4b
#define LANG_KASHMIRI  0x60
#define LANG_KAZAK  0x3f
#define LANG_KHMER  0x53
#define LANG_KICHE  0x86
#define LANG_KINYARWANDA  0x87
#define LANG_KONKANI  0x57
#define LANG_KOREAN  0x12
#define LANG_KYRGYZ  0x40
#define LANG_LAO  0x54
#define LANG_LATVIAN  0x26
#define LANG_LITHUANIAN  0x27
#define LANG_LOWER_SORBIAN  0x2e
#define LANG_LUXEMBOURGISH  0x6e
#define LANG_MACEDONIAN  0x2f
#define LANG_MALAY  0x3e
#define LANG_MALAYALAM  0x4c
#define LANG_MALTESE  0x3a
#define LANG_MANIPURI  0x58
#define LANG_MAORI  0x81
#define LANG_MAPUDUNGUN  0x7a
#define LANG_MARATHI  0x4e
#define LANG_MOHAWK  0x7c
#define LANG_MONGOLIAN  0x50
#define LANG_NEPALI  0x61
#define LANG_NORWEGIAN  0x14
#define LANG_OCCITAN  0x82
#define LANG_ODIA  0x48
#define LANG_ORIYA  0x48  /* use LANG_ODIA */
#define LANG_PASHTO  0x63
#define LANG_PERSIAN  0x29
#define LANG_POLISH  0x15
#define LANG_PORTUGUESE  0x16
#define LANG_PULAR  0x67   /* use LANG_FULAH */
#define LANG_PUNJABI  0x46
#define LANG_QUECHUA  0x6b
#define LANG_ROMANIAN  0x18
#define LANG_ROMANSH  0x17
#define LANG_RUSSIAN  0x19
#define LANG_SAKHA  0x85
#define LANG_SAMI  0x3b
#define LANG_SANSKRIT  0x4f
#define LANG_SCOTTISH_GAELIC  0x91
#define LANG_SERBIAN  0x1a  
#define LANG_SERBIAN_NEUTRAL  0x7c1a  
#define LANG_SINDHI  0x59
#define LANG_SINHALESE  0x5b
#define LANG_SLOVAK  0x1b
#define LANG_SLOVENIAN  0x24
#define LANG_SOTHO  0x6c
#define LANG_SPANISH  0x0a
#define LANG_SWAHILI  0x41
#define LANG_SWEDISH  0x1d
#define LANG_SYRIAC  0x5a
#define LANG_TAJIK  0x28
#define LANG_TAMAZIGHT  0x5f
#define LANG_TAMIL  0x49
#define LANG_TATAR  0x44
#define LANG_TELUGU  0x4a
#define LANG_THAI  0x1e
#define LANG_TIBETAN  0x51
#define LANG_TIGRIGNA  0x73
#define LANG_TIGRINYA  0x73
#define LANG_TSWANA  0x32
#define LANG_TURKISH  0x1f
#define LANG_TURKMEN  0x42
#define LANG_UIGHUR  0x80
#define LANG_UKRAINIAN  0x22
#define LANG_UPPER_SORBIAN  0x2e
#define LANG_URDU  0x20
#define LANG_UZBEK  0x43
#define LANG_VALENCIAN  0x03
#define LANG_VIETNAMESE  0x2a
#define LANG_WELSH  0x52
#define LANG_WOLOF  0x88
#define LANG_XHOSA  0x34
#define LANG_YAKUT  0x85
#define LANG_YI  0x78
#define LANG_YORUBA  0x6a
#define LANG_ZULU  0x35

#define SUBLANG_NEUTRAL  0x00
#define SUBLANG_DEFAULT  0x01
#define SUBLANG_SYS_DEFAULT  0x02
#define SUBLANG_CUSTOM_DEFAULT  0x03
#define SUBLANG_CUSTOM_UNSPECIFIED  0x04
#define SUBLANG_UI_CUSTOM_DEFAULT  0x05

#define SUBLANG_AFRIKAANS_SOUTH_AFRICA  0x01
#define SUBLANG_ALBANIAN_ALBANIA  0x01
#define SUBLANG_ALSATIAN_FRANCE  0x01
#define SUBLANG_AMHARIC_ETHIOPIA  0x01
#define SUBLANG_ARABIC_SAUDI_ARABIA  0x01
#define SUBLANG_ARABIC_IRAQ  0x02
#define SUBLANG_ARABIC_EGYPT  0x03
#define SUBLANG_ARABIC_LIBYA  0x04
#define SUBLANG_ARABIC_ALGERIA  0x05
#define SUBLANG_ARABIC_MOROCCO  0x06
#define SUBLANG_ARABIC_TUNISIA  0x07
#define SUBLANG_ARABIC_OMAN  0x08
#define SUBLANG_ARABIC_YEMEN  0x09
#define SUBLANG_ARABIC_SYRIA  0x0a
#define SUBLANG_ARABIC_JORDAN  0x0b
#define SUBLANG_ARABIC_LEBANON  0x0c
#define SUBLANG_ARABIC_KUWAIT  0x0d
#define SUBLANG_ARABIC_UAE  0x0e
#define SUBLANG_ARABIC_BAHRAIN  0x0f
#define SUBLANG_ARABIC_QATAR  0x10
#define SUBLANG_ARMENIAN_ARMENIA  0x01
#define SUBLANG_ASSAMESE_INDIA  0x01
#define SUBLANG_AZERI_LATIN  0x01
#define SUBLANG_AZERI_CYRILLIC  0x02
#define SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN  0x01
#define SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC  0x02
#define SUBLANG_BANGLA_INDIA  0x01
#define SUBLANG_BANGLA_BANGLADESH  0x02
#define SUBLANG_BASHKIR_RUSSIA  0x01
#define SUBLANG_BASQUE_BASQUE  0x01
#define SUBLANG_BELARUSIAN_BELARUS  0x01
#define SUBLANG_BENGALI_INDIA  0x01
#define SUBLANG_BENGALI_BANGLADESH  0x02
#define SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN  0x05
#define SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC 0x08
#define SUBLANG_BRETON_FRANCE  0x01
#define SUBLANG_BULGARIAN_BULGARIA  0x01
#define SUBLANG_CATALAN_CATALAN  0x01
#define SUBLANG_CENTRAL_KURDISH_IRAQ  0x01
#define SUBLANG_CHEROKEE_CHEROKEE  0x01
#define SUBLANG_CHINESE_TRADITIONAL  0x01
#define SUBLANG_CHINESE_SIMPLIFIED  0x02
#define SUBLANG_CHINESE_HONGKONG  0x03
#define SUBLANG_CHINESE_SINGAPORE  0x04
#define SUBLANG_CHINESE_MACAU  0x05
#define SUBLANG_CORSICAN_FRANCE  0x01
#define SUBLANG_CZECH_CZECH_REPUBLIC  0x01
#define SUBLANG_CROATIAN_CROATIA  0x01
#define SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN  0x04  
#define SUBLANG_DANISH_DENMARK  0x01
#define SUBLANG_DARI_AFGHANISTAN  0x01
#define SUBLANG_DIVEHI_MALDIVES  0x01
#define SUBLANG_DUTCH  0x01
#define SUBLANG_DUTCH_BELGIAN  0x02  
#define SUBLANG_ENGLISH_US  0x01
#define SUBLANG_ENGLISH_UK  0x02  
#define SUBLANG_ENGLISH_AUS  0x03  
#define SUBLANG_ENGLISH_CAN  0x04  
#define SUBLANG_ENGLISH_NZ  0x05  
#define SUBLANG_ENGLISH_EIRE  0x06  
#define SUBLANG_ENGLISH_SOUTH_AFRICA  0x07  
#define SUBLANG_ENGLISH_JAMAICA  0x08  
#define SUBLANG_ENGLISH_CARIBBEAN  0x09  
#define SUBLANG_ENGLISH_BELIZE  0x0a  
#define SUBLANG_ENGLISH_TRINIDAD  0x0b  
#define SUBLANG_ENGLISH_ZIMBABWE  0x0c  
#define SUBLANG_ENGLISH_PHILIPPINES  0x0d  
#define SUBLANG_ENGLISH_INDIA  0x10  
#define SUBLANG_ENGLISH_MALAYSIA  0x11
#define SUBLANG_ENGLISH_SINGAPORE  0x12  
#define SUBLANG_ESTONIAN_ESTONIA  0x01
#define SUBLANG_FAEROESE_FAROE_ISLANDS  0x01
#define SUBLANG_FILIPINO_PHILIPPINES  0x01
#define SUBLANG_FINNISH_FINLAND  0x01
#define SUBLANG_FRENCH  0x01
#define SUBLANG_FRENCH_BELGIAN  0x02  
#define SUBLANG_FRENCH_CANADIAN  0x03  
#define SUBLANG_FRENCH_SWISS  0x04  
#define SUBLANG_FRENCH_LUXEMBOURG  0x05  
#define SUBLANG_FRENCH_MONACO  0x06  
#define SUBLANG_FRISIAN_NETHERLANDS  0x01
#define SUBLANG_FULAH_SENEGAL  0x02
#define SUBLANG_GALICIAN_GALICIAN  0x01
#define SUBLANG_GEORGIAN_GEORGIA  0x01
#define SUBLANG_GERMAN  0x01
#define SUBLANG_GERMAN_SWISS  0x02  
#define SUBLANG_GERMAN_AUSTRIAN  0x03  
#define SUBLANG_GERMAN_LUXEMBOURG  0x04  
#define SUBLANG_GERMAN_LIECHTENSTEIN  0x05  
#define SUBLANG_GREEK_GREECE  0x01
#define SUBLANG_GREENLANDIC_GREENLAND  0x01
#define SUBLANG_GUJARATI_INDIA  0x01
#define SUBLANG_HAUSA_NIGERIA_LATIN  0x01
#define SUBLANG_HAWAIIAN_US  0x01
#define SUBLANG_HEBREW_ISRAEL  0x01
#define SUBLANG_HINDI_INDIA  0x01
#define SUBLANG_HUNGARIAN_HUNGARY  0x01
#define SUBLANG_ICELANDIC_ICELAND  0x01
#define SUBLANG_IGBO_NIGERIA  0x01
#define SUBLANG_INDONESIAN_INDONESIA  0x01
#define SUBLANG_INUKTITUT_CANADA  0x01
#define SUBLANG_INUKTITUT_CANADA_LATIN  0x02  
#define SUBLANG_IRISH_IRELAND  0x02  
#define SUBLANG_ITALIAN  0x01
#define SUBLANG_ITALIAN_SWISS  0x02  
#define SUBLANG_JAPANESE_JAPAN  0x01
#define SUBLANG_KANNADA_INDIA  0x01
#define SUBLANG_KASHMIRI_SASIA  0x02  
#define SUBLANG_KASHMIRI_INDIA  0x02  
#define SUBLANG_KAZAK_KAZAKHSTAN  0x01
#define SUBLANG_KHMER_CAMBODIA  0x01
#define SUBLANG_KICHE_GUATEMALA  0x01
#define SUBLANG_KINYARWANDA_RWANDA  0x01
#define SUBLANG_KONKANI_INDIA  0x01
#define SUBLANG_KOREAN  0x01
#define SUBLANG_KYRGYZ_KYRGYZSTAN  0x01
#define SUBLANG_LAO_LAO  0x01
#define SUBLANG_LATVIAN_LATVIA  0x01
#define SUBLANG_LITHUANIAN  0x01
#define SUBLANG_LOWER_SORBIAN_GERMANY  0x02  
#define SUBLANG_LUXEMBOURGISH_LUXEMBOURG  0x01
#define SUBLANG_MACEDONIAN_MACEDONIA  0x01
#define SUBLANG_MALAY_MALAYSIA  0x01
#define SUBLANG_MALAY_BRUNEI_DARUSSALAM  0x02  
#define SUBLANG_MALAYALAM_INDIA  0x01
#define SUBLANG_MALTESE_MALTA  0x01
#define SUBLANG_MAORI_NEW_ZEALAND  0x01
#define SUBLANG_MAPUDUNGUN_CHILE  0x01
#define SUBLANG_MARATHI_INDIA  0x01
#define SUBLANG_MOHAWK_MOHAWK  0x01
#define SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA  0x01
#define SUBLANG_MONGOLIAN_PRC  0x02  
#define SUBLANG_NEPALI_INDIA  0x02  
#define SUBLANG_NEPALI_NEPAL  0x01
#define SUBLANG_NORWEGIAN_BOKMAL  0x01
#define SUBLANG_NORWEGIAN_NYNORSK  0x02  
#define SUBLANG_OCCITAN_FRANCE  0x01
#define SUBLANG_ODIA_INDIA  0x01
#define SUBLANG_ORIYA_INDIA  0x01
#define SUBLANG_PASHTO_AFGHANISTAN  0x01
#define SUBLANG_PERSIAN_IRAN  0x01
#define SUBLANG_POLISH_POLAND  0x01
#define SUBLANG_PORTUGUESE  0x02  
#define SUBLANG_PORTUGUESE_BRAZILIAN  0x01
#define SUBLANG_PULAR_SENEGAL  0x02
#define SUBLANG_PUNJABI_INDIA  0x01
#define SUBLANG_PUNJABI_PAKISTAN  0x02
#define SUBLANG_QUECHUA_BOLIVIA  0x01
#define SUBLANG_QUECHUA_ECUADOR  0x02  
#define SUBLANG_QUECHUA_PERU  0x03  
#define SUBLANG_ROMANIAN_ROMANIA  0x01
#define SUBLANG_ROMANSH_SWITZERLAND  0x01
#define SUBLANG_RUSSIAN_RUSSIA  0x01
#define SUBLANG_SAKHA_RUSSIA  0x01
#define SUBLANG_SAMI_NORTHERN_NORWAY  0x01
#define SUBLANG_SAMI_NORTHERN_SWEDEN  0x02  
#define SUBLANG_SAMI_NORTHERN_FINLAND  0x03  
#define SUBLANG_SAMI_LULE_NORWAY  0x04  
#define SUBLANG_SAMI_LULE_SWEDEN  0x05  
#define SUBLANG_SAMI_SOUTHERN_NORWAY  0x06  
#define SUBLANG_SAMI_SOUTHERN_SWEDEN  0x07  
#define SUBLANG_SAMI_SKOLT_FINLAND  0x08  
#define SUBLANG_SAMI_INARI_FINLAND  0x09  
#define SUBLANG_SANSKRIT_INDIA  0x01
#define SUBLANG_SCOTTISH_GAELIC  0x01
#define SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN  0x06  
#define SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC 0x07  
#define SUBLANG_SERBIAN_MONTENEGRO_LATIN  0x0b  
#define SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC  0x0c  
#define SUBLANG_SERBIAN_SERBIA_LATIN  0x09  
#define SUBLANG_SERBIAN_SERBIA_CYRILLIC  0x0a  
#define SUBLANG_SERBIAN_CROATIA  0x01
#define SUBLANG_SERBIAN_LATIN  0x02  
#define SUBLANG_SERBIAN_CYRILLIC  0x03  
#define SUBLANG_SINDHI_INDIA  0x01
#define SUBLANG_SINDHI_PAKISTAN  0x02  
#define SUBLANG_SINDHI_AFGHANISTAN  0x02  
#define SUBLANG_SINHALESE_SRI_LANKA  0x01
#define SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA  0x01
#define SUBLANG_SLOVAK_SLOVAKIA  0x01
#define SUBLANG_SLOVENIAN_SLOVENIA  0x01
#define SUBLANG_SPANISH  0x01
#define SUBLANG_SPANISH_MEXICAN  0x02  
#define SUBLANG_SPANISH_MODERN  0x03  
#define SUBLANG_SPANISH_GUATEMALA  0x04  
#define SUBLANG_SPANISH_COSTA_RICA  0x05  
#define SUBLANG_SPANISH_PANAMA  0x06  
#define SUBLANG_SPANISH_DOMINICAN_REPUBLIC  0x07  
#define SUBLANG_SPANISH_VENEZUELA  0x08  
#define SUBLANG_SPANISH_COLOMBIA  0x09  
#define SUBLANG_SPANISH_PERU  0x0a  
#define SUBLANG_SPANISH_ARGENTINA  0x0b  
#define SUBLANG_SPANISH_ECUADOR  0x0c  
#define SUBLANG_SPANISH_CHILE  0x0d  
#define SUBLANG_SPANISH_URUGUAY  0x0e  
#define SUBLANG_SPANISH_PARAGUAY  0x0f  
#define SUBLANG_SPANISH_BOLIVIA  0x10  
#define SUBLANG_SPANISH_EL_SALVADOR  0x11
#define SUBLANG_SPANISH_HONDURAS  0x12  
#define SUBLANG_SPANISH_NICARAGUA  0x13  
#define SUBLANG_SPANISH_PUERTO_RICO  0x14  
#define SUBLANG_SPANISH_US  0x15  
#define SUBLANG_SWAHILI_KENYA  0x01
#define SUBLANG_SWEDISH  0x01
#define SUBLANG_SWEDISH_FINLAND  0x02  
#define SUBLANG_SYRIAC_SYRIA  0x01
#define SUBLANG_TAJIK_TAJIKISTAN  0x01
#define SUBLANG_TAMAZIGHT_ALGERIA_LATIN  0x02  
#define SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH  0x04
#define SUBLANG_TAMIL_INDIA  0x01
#define SUBLANG_TAMIL_SRI_LANKA  0x02
#define SUBLANG_TATAR_RUSSIA  0x01
#define SUBLANG_TELUGU_INDIA  0x01
#define SUBLANG_THAI_THAILAND  0x01
#define SUBLANG_TIBETAN_PRC  0x01
#define SUBLANG_TIGRIGNA_ERITREA  0x02
#define SUBLANG_TIGRINYA_ERITREA  0x02
#define SUBLANG_TIGRINYA_ETHIOPIA  0x01
#define SUBLANG_TSWANA_BOTSWANA  0x02
#define SUBLANG_TSWANA_SOUTH_AFRICA  0x01
#define SUBLANG_TURKISH_TURKEY  0x01
#define SUBLANG_TURKMEN_TURKMENISTAN  0x01
#define SUBLANG_UIGHUR_PRC  0x01
#define SUBLANG_UKRAINIAN_UKRAINE  0x01
#define SUBLANG_UPPER_SORBIAN_GERMANY  0x01
#define SUBLANG_URDU_PAKISTAN  0x01
#define SUBLANG_URDU_INDIA  0x02  
#define SUBLANG_UZBEK_LATIN  0x01
#define SUBLANG_UZBEK_CYRILLIC  0x02  
#define SUBLANG_VALENCIAN_VALENCIA  0x02
#define SUBLANG_VIETNAMESE_VIETNAM  0x01
#define SUBLANG_WELSH_UNITED_KINGDOM  0x01
#define SUBLANG_WOLOF_SENEGAL  0x01
#define SUBLANG_XHOSA_SOUTH_AFRICA  0x01
#define SUBLANG_YAKUT_RUSSIA  0x01
#define SUBLANG_YI_PRC  0x01
#define SUBLANG_YORUBA_NIGERIA  0x01
#define SUBLANG_ZULU_SOUTH_AFRICA  0x01

#define SORT_DEFAULT  0x0  

#define SORT_INVARIANT_MATH  0x1

#define SORT_JAPANESE_XJIS  0x0
#define SORT_JAPANESE_UNICODE  0x1
#define SORT_JAPANESE_RADICALSTROKE  0x4

#define SORT_CHINESE_BIG5  0x0
#define SORT_CHINESE_PRCP  0x0
#define SORT_CHINESE_UNICODE  0x1
#define SORT_CHINESE_PRC  0x2
#define SORT_CHINESE_BOPOMOFO  0x3
#define SORT_CHINESE_RADICALSTROKE  0x4

#define SORT_KOREAN_KSC  0x0
#define SORT_KOREAN_UNICODE  0x1

#define SORT_GERMAN_PHONE_BOOK  0x1  

#define SORT_HUNGARIAN_DEFAULT  0x0  
#define SORT_HUNGARIAN_TECHNICAL  0x1  

#define SORT_GEORGIAN_TRADITIONAL  0x0  
#define SORT_GEORGIAN_MODERN  0x1  

#define MAKELANGID(p, s)  ((((WORD  )(s)) << 10) | (WORD  )(p))
#define PRIMARYLANGID(lgid)  ((WORD  )(lgid) & 0x3ff)
#define SUBLANGID(lgid)  ((WORD  )(lgid) >> 10)

#define NLS_VALID_LOCALE_MASK  0x000fffff

#define MAKELCID(lgid,srtid)  ((DWORD)((((DWORD)((WORD)(srtid)))<<16)|((DWORD)((WORD)(lgid)))))
#define MAKESORTLCID(lgid,srtid,ver)  ((DWORD)((MAKELCID(lgid,srtid))|(((DWORD)((WORD)(ver)))<<20)))
#define LANGIDFROMLCID(lcid)  ((WORD)(lcid))
#define SORTIDFROMLCID(lcid)  ((WORD)((((DWORD)(lcid))>>16)&0xf))
#define SORTVERSIONFROMLCID(lcid)  ((WORD)((((DWORD)(lcid))>>20)&0xf))

#define LOCALE_NAME_MAX_LENGTH  85

#define LANG_SYSTEM_DEFAULT  (MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT))
#define LANG_USER_DEFAULT  (MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT))

#define LOCALE_SYSTEM_DEFAULT  (MAKELCID(LANG_SYSTEM_DEFAULT, SORT_DEFAULT))
#define LOCALE_USER_DEFAULT  (MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT))

#define LOCALE_CUSTOM_DEFAULT  \
  (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_DEFAULT), SORT_DEFAULT))

#define LOCALE_CUSTOM_UNSPECIFIED  \
  (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_CUSTOM_UNSPECIFIED), SORT_DEFAULT))

#define LOCALE_CUSTOM_UI_DEFAULT  \
  (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_UI_CUSTOM_DEFAULT), SORT_DEFAULT))

#define LOCALE_NEUTRAL  \
  (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), SORT_DEFAULT))

#define LOCALE_INVARIANT  \
  (MAKELCID(MAKELANGID(LANG_INVARIANT, SUBLANG_NEUTRAL), SORT_DEFAULT))

#define LOCALE_TRANSIENT_KEYBOARD1  0x2000
#define LOCALE_TRANSIENT_KEYBOARD2  0x2400
#define LOCALE_TRANSIENT_KEYBOARD3  0x2800
#define LOCALE_TRANSIENT_KEYBOARD4  0x2c00

#define LOCALE_UNASSIGNED_LCID  LOCALE_CUSTOM_UNSPECIFIED

#define UNREFERENCED_PARAMETER(P)  ((void)(P))
#define DBG_UNREFERENCED_PARAMETER(P)  (P)
#define DBG_UNREFERENCED_LOCAL_VARIABLE(V)  (V)

#define DEFAULT_UNREACHABLE

#define DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE)

#define COMPILETIME_OR_2FLAGS(a,b)  ((UINT)(a)|(UINT)(b))
#define COMPILETIME_OR_3FLAGS(a,b,c)  ((UINT)(a)|(UINT)(b)|(UINT)(c))
#define COMPILETIME_OR_4FLAGS(a,b,c,d)  ((UINT)(a)|(UINT)(b)|(UINT)(c)|(UINT)(d))
#define COMPILETIME_OR_5FLAGS(a,b,c,d,e)  ((UINT)(a)|(UINT)(b)|(UINT)(c)|(UINT)(d)|(UINT)(e))
#define COMPILETIME_OR_6FLAGS(a,b,c,d,e,f)  ((UINT)(a)|(UINT)(b)|(UINT)(c)|(UINT)(d)|(UINT)(e)|(UINT)(f))

#ifndef UMDF_USING_NTSTATUS 

#ifndef WIN32_NO_STATUS 

#define STATUS_WAIT_0  ((DWORD)0x00000000L)
#define STATUS_ABANDONED_WAIT_0  ((DWORD)0x00000080L)
#define STATUS_USER_APC  ((DWORD)0x000000C0L)
#define STATUS_TIMEOUT  ((DWORD)0x00000102L)
#define STATUS_PENDING  ((DWORD)0x00000103L)
#define DBG_EXCEPTION_HANDLED  ((DWORD)0x00010001L)
#define DBG_CONTINUE  ((DWORD)0x00010002L)
#define STATUS_SEGMENT_NOTIFICATION  ((DWORD)0x40000005L)
#define STATUS_FATAL_APP_EXIT  ((DWORD)0x40000015L)
#define DBG_REPLY_LATER  ((DWORD   )0x40010001L)
#define DBG_TERMINATE_THREAD  ((DWORD)0x40010003L)
#define DBG_TERMINATE_PROCESS  ((DWORD)0x40010004L)
#define DBG_CONTROL_C  ((DWORD)0x40010005L)
#define DBG_PRINTEXCEPTION_C  ((DWORD)0x40010006L)
#define DBG_RIPEXCEPTION  ((DWORD)0x40010007L)
#define DBG_CONTROL_BREAK  ((DWORD)0x40010008L)
#define DBG_COMMAND_EXCEPTION  ((DWORD)0x40010009L)
#define DBG_PRINTEXCEPTION_WIDE_C  ((DWORD)0x4001000AL)
#define STATUS_GUARD_PAGE_VIOLATION  ((DWORD)0x80000001L)
#define STATUS_DATATYPE_MISALIGNMENT  ((DWORD)0x80000002L)
#define STATUS_BREAKPOINT  ((DWORD)0x80000003L)
#define STATUS_SINGLE_STEP  ((DWORD)0x80000004L)
#define STATUS_LONGJUMP  ((DWORD)0x80000026L)
#define STATUS_UNWIND_CONSOLIDATE  ((DWORD)0x80000029L)
#define DBG_EXCEPTION_NOT_HANDLED  ((DWORD)0x80010001L)
#define STATUS_ACCESS_VIOLATION  ((DWORD)0xC0000005L)
#define STATUS_IN_PAGE_ERROR  ((DWORD)0xC0000006L)
#define STATUS_INVALID_HANDLE  ((DWORD)0xC0000008L)
#define STATUS_INVALID_PARAMETER  ((DWORD)0xC000000DL)
#define STATUS_NO_MEMORY  ((DWORD)0xC0000017L)
#define STATUS_ILLEGAL_INSTRUCTION  ((DWORD)0xC000001DL)
#define STATUS_NONCONTINUABLE_EXCEPTION  ((DWORD)0xC0000025L)
#define STATUS_INVALID_DISPOSITION  ((DWORD)0xC0000026L)
#define STATUS_ARRAY_BOUNDS_EXCEEDED  ((DWORD)0xC000008CL)
#define STATUS_FLOAT_DENORMAL_OPERAND  ((DWORD)0xC000008DL)
#define STATUS_FLOAT_DIVIDE_BY_ZERO  ((DWORD)0xC000008EL)
#define STATUS_FLOAT_INEXACT_RESULT  ((DWORD)0xC000008FL)
#define STATUS_FLOAT_INVALID_OPERATION  ((DWORD)0xC0000090L)
#define STATUS_FLOAT_OVERFLOW  ((DWORD)0xC0000091L)
#define STATUS_FLOAT_STACK_CHECK  ((DWORD)0xC0000092L)
#define STATUS_FLOAT_UNDERFLOW  ((DWORD)0xC0000093L)
#define STATUS_INTEGER_DIVIDE_BY_ZERO  ((DWORD)0xC0000094L)
#define STATUS_INTEGER_OVERFLOW  ((DWORD)0xC0000095L)
#define STATUS_PRIVILEGED_INSTRUCTION  ((DWORD)0xC0000096L)
#define STATUS_STACK_OVERFLOW  ((DWORD)0xC00000FDL)
#define STATUS_DLL_NOT_FOUND  ((DWORD)0xC0000135L)
#define STATUS_ORDINAL_NOT_FOUND  ((DWORD)0xC0000138L)
#define STATUS_ENTRYPOINT_NOT_FOUND  ((DWORD)0xC0000139L)
#define STATUS_CONTROL_C_EXIT  ((DWORD)0xC000013AL)
#define STATUS_DLL_INIT_FAILED  ((DWORD)0xC0000142L)
#define STATUS_FLOAT_MULTIPLE_FAULTS  ((DWORD)0xC00002B4L)
#define STATUS_FLOAT_MULTIPLE_TRAPS  ((DWORD)0xC00002B5L)
#define STATUS_REG_NAT_CONSUMPTION  ((DWORD)0xC00002C9L)
#define STATUS_HEAP_CORRUPTION  ((DWORD)0xC0000374L)
#define STATUS_STACK_BUFFER_OVERRUN  ((DWORD)0xC0000409L)
#define STATUS_INVALID_CRUNTIME_PARAMETER ((DWORD)0xC0000417L)
#define STATUS_ASSERTION_FAILURE  ((DWORD)0xC0000420L)
#if defined(STATUS_SUCCESS) || (_WIN32_WINNT > 0x0500) || (_WIN32_FUSION >= 0x0100)
#define STATUS_SXS_EARLY_DEACTIVATION  ((DWORD)0xC015000FL)
#define STATUS_SXS_INVALID_DEACTIVATION  ((DWORD)0xC0150010L)
#endif /* defined(STATUS_SUCCESS) || (_WIN32_WINNT > 0x0500) || (_WIN32_FUSION >= 0x0100) */

#endif /* WIN32_NO_STATUS  */

#endif /* UMDF_USING_NTSTATUS */

#define MAXIMUM_WAIT_OBJECTS  64

#define MAXIMUM_SUSPEND_COUNT MAXCHAR 

typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;

typedef struct DECLSPEC_ALIGN(16) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;

typedef struct DECLSPEC_ALIGN(16) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
#ifdef _WIN64
    M128A XmmRegisters[16];
    BYTE Reserved4[96];
#else /* !_WIN64 */
    M128A XmmRegisters[8];
    BYTE  Reserved4[224];
#endif /* !_WIN64 */
} XSAVE_FORMAT, *PXSAVE_FORMAT;

typedef struct DECLSPEC_ALIGN(8) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct DECLSPEC_ALIGN(16) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
    PXSAVE_AREA Area;
#ifdef _X86_
    DWORD Reserved2;
#endif /* _X86_ */
    PVOID Buffer;
#ifdef _X86_
    DWORD Reserved3;
#endif /* _X86_ */
} XSTATE_CONTEXT, *PXSTATE_CONTEXT;

typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;

#ifdef _AMD64_

#if defined(_M_AMD64)

#define BitTest _bittest
#define BitTestAndComplement _bittestandcomplement
#define BitTestAndSet _bittestandset
#define BitTestAndReset _bittestandreset
#if 0
#define InterlockedBitTestAndSet _interlockedbittestandset
#define InterlockedBitTestAndSetAcquire _interlockedbittestandset
#define InterlockedBitTestAndSetRelease _interlockedbittestandset
#define InterlockedBitTestAndSetNoFence _interlockedbittestandset
#define InterlockedBitTestAndReset _interlockedbittestandreset
#define InterlockedBitTestAndResetAcquire _interlockedbittestandreset
#define InterlockedBitTestAndResetRelease _interlockedbittestandreset
#define InterlockedBitTestAndResetNoFence _interlockedbittestandreset

#define BitTest64 _bittest64
#define BitTestAndComplement64 _bittestandcomplement64
#define BitTestAndSet64 _bittestandset64
#define BitTestAndReset64 _bittestandreset64
#define InterlockedBitTestAndSet64 _interlockedbittestandset64
#define InterlockedBitTestAndSet64Acquire _interlockedbittestandset64
#define InterlockedBitTestAndSet64Release _interlockedbittestandset64
#define InterlockedBitTestAndSet64NoFence _interlockedbittestandset64
#define InterlockedBitTestAndReset64 _interlockedbittestandreset64
#define InterlockedBitTestAndReset64Acquire _interlockedbittestandreset64
#define InterlockedBitTestAndReset64Release _interlockedbittestandreset64
#define InterlockedBitTestAndReset64NoFence _interlockedbittestandreset64
#endif

BOOLEAN __cdecl _bittest(LONG const *, LONG);
BOOLEAN __cdecl _bittestandcomplement(LONG *, LONG);
BOOLEAN __cdecl _bittestandset(LONG *, LONG);
BOOLEAN __cdecl _bittestandreset(LONG *, LONG);
BOOLEAN __cdecl _interlockedbittestandset(LONG /*volatile*/ *, LONG);
BOOLEAN __cdecl _interlockedbittestandreset(LONG /*volatile*/ *, LONG);
BOOLEAN __cdecl _bittest64(LONG64 const *, LONG64);
BOOLEAN __cdecl _bittestandcomplement64(LONG64 *, LONG64);
BOOLEAN __cdecl _bittestandset64(LONG64 *, LONG64);
BOOLEAN __cdecl _bittestandreset64(LONG64 *, LONG64);
BOOLEAN __cdecl _interlockedbittestandset64(LONG64 /*volatile*/ *, LONG64);
BOOLEAN __cdecl _interlockedbittestandreset64(LONG64 /*volatile*/ *, LONG64);

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)

#define BitScanForward _BitScanForward
#define BitScanReverse _BitScanReverse
#define BitScanForward64 _BitScanForward64
#define BitScanReverse64 _BitScanReverse64

BOOLEAN __cdecl _BitScanForward(DWORD *, DWORD);
BOOLEAN __cdecl _BitScanReverse(DWORD *, DWORD);
BOOLEAN __cdecl _BitScanForward64(DWORD *, DWORD64);
BOOLEAN __cdecl _BitScanReverse64(DWORD *, DWORD64);

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)

#if 0
#define InterlockedIncrement16  _InterlockedIncrement16
#define InterlockedIncrementAcquire16  _InterlockedIncrement16
#define InterlockedIncrementRelease16  _InterlockedIncrement16
#define InterlockedIncrementNoFence16  _InterlockedIncrement16
#define InterlockedDecrement16  _InterlockedDecrement16
#define InterlockedDecrementAcquire16  _InterlockedDecrement16
#define InterlockedDecrementRelease16  _InterlockedDecrement16
#define InterlockedDecrementNoFence16  _InterlockedDecrement16
#define InterlockedCompareExchange16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeAcquire16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeRelease16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeNoFence16  _InterlockedCompareExchange16

#define InterlockedAnd  _InterlockedAnd
#define InterlockedAndAcquire  _InterlockedAnd
#define InterlockedAndRelease  _InterlockedAnd
#define InterlockedAndNoFence  _InterlockedAnd
#define InterlockedOr  _InterlockedOr
#define InterlockedOrAcquire  _InterlockedOr
#define InterlockedOrRelease  _InterlockedOr
#define InterlockedOrNoFence  _InterlockedOr
#define InterlockedXor  _InterlockedXor
#define InterlockedXorAcquire  _InterlockedXor
#define InterlockedXorRelease  _InterlockedXor
#define InterlockedXorNoFence  _InterlockedXor
#define InterlockedIncrement  _InterlockedIncrement
#define InterlockedIncrementAcquire  _InterlockedIncrement
#define InterlockedIncrementRelease  _InterlockedIncrement
#define InterlockedIncrementNoFence  _InterlockedIncrement
#define InterlockedDecrement  _InterlockedDecrement
#define InterlockedDecrementAcquire  _InterlockedDecrement
#define InterlockedDecrementRelease  _InterlockedDecrement
#define InterlockedDecrementNoFence  _InterlockedDecrement
#define InterlockedAdd  _InlineInterlockedAdd
#define InterlockedAddAcquire  _InlineInterlockedAdd
#define InterlockedAddRelease  _InlineInterlockedAdd
#define InterlockedAddNoFence  _InlineInterlockedAdd
#define InterlockedExchange  _InterlockedExchange
#define InterlockedExchangeAcquire  _InterlockedExchange
#define InterlockedExchangeNoFence  _InterlockedExchange
#define InterlockedExchangeAdd  _InterlockedExchangeAdd
#define InterlockedExchangeAddAcquire  _InterlockedExchangeAdd
#define InterlockedExchangeAddRelease  _InterlockedExchangeAdd
#define InterlockedExchangeAddNoFence  _InterlockedExchangeAdd
#define InterlockedCompareExchange  _InterlockedCompareExchange
#define InterlockedCompareExchangeAcquire  _InterlockedCompareExchange
#define InterlockedCompareExchangeRelease  _InterlockedCompareExchange
#define InterlockedCompareExchangeNoFence  _InterlockedCompareExchange

#define InterlockedAnd64  _InterlockedAnd64
#define InterlockedAnd64Acquire  _InterlockedAnd64
#define InterlockedAnd64Release  _InterlockedAnd64
#define InterlockedAnd64NoFence  _InterlockedAnd64
#define InterlockedAndAffinity  InterlockedAnd64
#define InterlockedOr64  _InterlockedOr64
#define InterlockedOr64Acquire  _InterlockedOr64
#define InterlockedOr64Release  _InterlockedOr64
#define InterlockedOr64NoFence  _InterlockedOr64
#define InterlockedOrAffinity  InterlockedOr64
#define InterlockedXor64  _InterlockedXor64
#define InterlockedXor64Acquire  _InterlockedXor64
#define InterlockedXor64Release  _InterlockedXor64
#define InterlockedXor64NoFence  _InterlockedXor64
#define InterlockedIncrement64  _InterlockedIncrement64
#define InterlockedIncrementAcquire64  _InterlockedIncrement64
#define InterlockedIncrementRelease64  _InterlockedIncrement64
#define InterlockedIncrementNoFence64  _InterlockedIncrement64
#define InterlockedDecrement64  _InterlockedDecrement64
#define InterlockedDecrementAcquire64  _InterlockedDecrement64
#define InterlockedDecrementRelease64  _InterlockedDecrement64
#define InterlockedDecrementNoFence64  _InterlockedDecrement64
#define InterlockedAdd64  _InlineInterlockedAdd64
#define InterlockedAddAcquire64  _InlineInterlockedAdd64
#define InterlockedAddRelease64  _InlineInterlockedAdd64
#define InterlockedAddNoFence64  _InlineInterlockedAdd64
#define InterlockedExchange64  _InterlockedExchange64
#define InterlockedExchangeAcquire64  InterlockedExchange64
#define InterlockedExchangeNoFence64  InterlockedExchange64
#define InterlockedExchangeAdd64  _InterlockedExchangeAdd64
#define InterlockedExchangeAddAcquire64  _InterlockedExchangeAdd64
#define InterlockedExchangeAddRelease64  _InterlockedExchangeAdd64
#define InterlockedExchangeAddNoFence64  _InterlockedExchangeAdd64
#define InterlockedCompareExchange64  _InterlockedCompareExchange64
#define InterlockedCompareExchangeAcquire64  InterlockedCompareExchange64
#define InterlockedCompareExchangeRelease64  InterlockedCompareExchange64
#define InterlockedCompareExchangeNoFence64  InterlockedCompareExchange64
#define InterlockedCompareExchange128  _InterlockedCompareExchange128

#define InterlockedExchangePointer  _InterlockedExchangePointer
#define InterlockedExchangePointerNoFence  _InterlockedExchangePointer
#define InterlockedExchangePointerAcquire  _InterlockedExchangePointer
#define InterlockedCompareExchangePointer  _InterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerAcquire  _InterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerRelease  _InterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerNoFence  _InterlockedCompareExchangePointer

#endif


#define InterlockedExchangeAddSizeT(a,b)  InterlockedExchangeAdd64((LONG64 *)a, b)
#define InterlockedExchangeAddSizeTAcquire(a,b)  InterlockedExchangeAdd64((LONG64 *)a, b)
#define InterlockedExchangeAddSizeTNoFence(a,b)  InterlockedExchangeAdd64((LONG64 *)a, b)
#define InterlockedIncrementSizeT(a)  InterlockedIncrement64((LONG64 *)a)
#define InterlockedIncrementSizeTNoFence(a)  InterlockedIncrement64((LONG64 *)a)
#define InterlockedDecrementSizeT(a)  InterlockedDecrement64((LONG64 *)a)
#define InterlockedDecrementSizeTNoFence(a)  InterlockedDecrement64((LONG64 *)a)

SHORT /* __cdecl */  __stdcall InterlockedIncrement16(SHORT volatile *);
SHORT /* __cdecl */  __stdcall InterlockedDecrement16(SHORT volatile *);
SHORT /* __cdecl */  __stdcall InterlockedCompareExchange16(SHORT volatile *, SHORT, SHORT);
LONG /* __cdecl */  __stdcall InterlockedAnd(LONG volatile *, LONG);
LONG /* __cdecl */  __stdcall InterlockedOr(LONG volatile *, LONG);
LONG /* __cdecl */  __stdcall InterlockedXor(LONG volatile *, LONG);
LONG64 /* __cdecl */  __stdcall InterlockedAnd64(LONG64 volatile *, LONG64);
LONG64 /* __cdecl */  __stdcall InterlockedOr64(LONG64 volatile *, LONG64);
LONG64 /* __cdecl */  __stdcall InterlockedXor64(LONG64 volatile *, LONG64);
LONG /* __cdecl */  __stdcall InterlockedIncrement(LONG volatile *);
LONG /* __cdecl */  __stdcall InterlockedDecrement(LONG volatile *);
LONG /* __cdecl */  __stdcall InterlockedExchange(LONG volatile *, LONG);
LONG /* __cdecl */  __stdcall InterlockedExchangeAdd(LONG volatile *, LONG);

#ifndef _X86AMD64_
__forceinline LONG InterlockedAdd(LONG volatile *Addend, LONG Value) {
    return InterlockedExchangeAdd(Addend, Value) + Value;
}
#endif /* !_X86AMD64_ */

LONG /* __cdecl */  __stdcall InterlockedCompareExchange(LONG volatile *, LONG, LONG);
LONG64 /* __cdecl */  __stdcall InterlockedIncrement64(LONG64 volatile *);
LONG64 /* __cdecl */  __stdcall InterlockedDecrement64(LONG64 volatile *);
LONG64 /* __cdecl */  __stdcall InterlockedExchange64(LONG64 volatile *, LONG64);
LONG64 /* __cdecl */  __stdcall InterlockedExchangeAdd64(LONG64 volatile *, LONG64);

#ifndef _X86AMD64_
__forceinline LONG64 _InlineInterlockedAdd64(LONG64 volatile *Addend, LONG64 Value) {
    return InterlockedExchangeAdd64(Addend, Value) + Value;
}
#endif /* !_X86AMD64_ */

LONG64 /* __cdecl */  __stdcall InterlockedCompareExchange64(LONG64 volatile *, LONG64, LONG64);
BOOLEAN /* __cdecl */  __stdcall InterlockedCompareExchange128(LONG64 volatile *, LONG64, LONG64, LONG64 *);
PVOID /* __cdecl */  __stdcall InterlockedCompareExchangePointer(PVOID volatile *, PVOID, PVOID);
PVOID /* __cdecl */  __stdcall InterlockedExchangePointer(PVOID volatile *, PVOID);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)
#pragma intrinsic(_InterlockedCompareExchange128)
#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)
#endif

#if 0
#define InterlockedExchange8 _InterlockedExchange8
#define InterlockedExchange16 _InterlockedExchange16
#endif

CHAR /* __cdecl */  __stdcall InterlockedExchange8(CHAR volatile *, CHAR);
SHORT /* __cdecl */  __stdcall InterlockedExchange16(SHORT volatile *, SHORT);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
#endif

#if 0
#define InterlockedExchangeAdd8 _InterlockedExchangeAdd8
#define InterlockedAnd8 _InterlockedAnd8
#define InterlockedOr8 _InterlockedOr8
#define InterlockedXor8 _InterlockedXor8
#define InterlockedAnd16 _InterlockedAnd16
#define InterlockedOr16 _InterlockedOr16
#define InterlockedXor16 _InterlockedXor16
#endif

char /* __cdecl */  __stdcall InterlockedExchangeAdd8(char volatile *, char);
char /* __cdecl */  __stdcall InterlockedAnd8(char volatile *, char);
char /* __cdecl */  __stdcall InterlockedOr8(char volatile *, char);
char /* __cdecl */  __stdcall InterlockedXor8(char volatile *, char);
SHORT /* __cdecl */  __stdcall InterlockedAnd16(SHORT volatile *, SHORT);
SHORT /* __cdecl */  __stdcall InterlockedOr16(SHORT volatile *, SHORT);
SHORT /* __cdecl */  __stdcall InterlockedXor16(SHORT volatile *, SHORT);

#ifndef __ORANGEC__
#pragma intrinsic (_InterlockedExchangeAdd8)
#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
#endif

#define CpuIdEx  __cpuidex

void __cdecl __cpuidex(int [4], int, int);

#pragma intrinsic(__cpuidex)

#define CacheLineFlush(Address)  _mm_clflush(Address)

void __cdecl _mm_clflush(void const *);

#pragma intrinsic(_mm_clflush)

#ifndef __ORANGEC__
#undef  _ReadWriteBarrier
#define _ReadWriteBarrier  __memory_barrier
#pragma intrinsic(__memory_barrier)
#else
void __cdecl _ReadWriteBarrier(void);
#pragma intrinsic(_ReadWriteBarrier)
#endif

#define FastFence  __faststorefence

#define LoadFence  _mm_lfence
#define MemoryFence  _mm_mfence
#define StoreFence  _mm_sfence

void __cdecl __faststorefence(void);
void __cdecl _mm_lfence(void);
void __cdecl _mm_mfence(void);
void __cdecl _mm_sfence(void);
void __cdecl _mm_pause(void);
void __cdecl _mm_prefetch(CONST CHAR *, int);
void __cdecl _m_prefetchw(/*volatile*/ CONST VOID *);

#define _MM_HINT_T0  1
#define _MM_HINT_T1  2
#define _MM_HINT_T2  3
#define _MM_HINT_NTA  0

#ifndef __ORANGEC__
#pragma intrinsic(__faststorefence)
#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)
#endif

#define YieldProcessor  _mm_pause
#define MemoryBarrier  __faststorefence
#define PreFetchCacheLine(l,a)  _mm_prefetch((CONST CHAR *) a, l)
#define PrefetchForWrite(p)  _m_prefetchw(p)
#define ReadForWriteAccess(p)  (_m_prefetchw(p), *(p))

#define PF_TEMPORAL_LEVEL_1  _MM_HINT_T0
#define PF_TEMPORAL_LEVEL_2  _MM_HINT_T1
#define PF_TEMPORAL_LEVEL_3  _MM_HINT_T2
#define PF_NON_TEMPORAL_LEVEL_ALL  _MM_HINT_NTA

#define ReadMxCsr  _mm_getcsr
#define WriteMxCsr  _mm_setcsr

unsigned int __cdecl _mm_getcsr(void);
void __cdecl _mm_setcsr(unsigned int);

#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)

#define GetCallersEflags()  __getcallerseflags()

unsigned __int32 __cdecl __getcallerseflags(void);

#ifndef __ORANGEC__
#pragma intrinsic(__getcallerseflags)
#endif

#define GetSegmentLimit  __segmentlimit

DWORD __cdecl __segmentlimit(DWORD);

#ifndef __ORANGEC__
#pragma intrinsic(__segmentlimit)
#endif

#define ReadPMC  __readpmc

DWORD64 __cdecl __readpmc(DWORD);

#ifndef __ORANGEC__
#pragma intrinsic(__readpmc)
#endif

#define ReadTimeStampCounter()  __rdtsc()

DWORD64 __cdecl __rdtsc(void);

#pragma intrinsic(__rdtsc)

void __cdecl __movsb(PBYTE, BYTE const *, SIZE_T);
void __cdecl __movsw(PWORD, WORD const *, SIZE_T);
void __cdecl __movsd(PDWORD, DWORD const *, SIZE_T);
void __cdecl __movsq(PDWORD64, DWORD64 const *, SIZE_T);

#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)

void __cdecl __stosb(PBYTE, BYTE, SIZE_T);
void __cdecl __stosw(PWORD, WORD, SIZE_T);
void __cdecl __stosd(PDWORD, DWORD, SIZE_T);
void __cdecl __stosq(PDWORD64, DWORD64, SIZE_T);

#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)

#define MultiplyHigh  __mulh
#define UnsignedMultiplyHigh  __umulh

LONGLONG MultiplyHigh(LONG64, LONG64);
ULONGLONG UnsignedMultiplyHigh(DWORD64, DWORD64);

#ifndef __ORANGEC__
#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)
#endif

#define PopulationCount64  __popcnt64

DWORD64 PopulationCount64(DWORD64);

#ifndef __ORANGEC__
#pragma intrinsic(__popcnt64)
#endif

#define ShiftLeft128  __shiftleft128
#define ShiftRight128  __shiftright128

DWORD64 __cdecl ShiftLeft128(DWORD64, DWORD64, BYTE);
DWORD64 __cdecl ShiftRight128(DWORD64, DWORD64, BYTE);

#ifndef __ORANGEC__
#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)
#endif

#define Multiply128  _mul128

LONG64 Multiply128(LONG64, LONG64, LONG64 *);

#ifndef __ORANGEC__
#pragma intrinsic(_mul128)
#endif

#ifndef UnsignedMultiply128
#define UnsignedMultiply128  _umul128
DWORD64 UnsignedMultiply128(DWORD64, DWORD64, DWORD64 *);
#ifndef __ORANGEC__
#pragma intrinsic(_umul128)
#endif
#endif /* UnsignedMultiply128 */

__forceinline LONG64 MultiplyExtract128(LONG64 Multiplier, LONG64 Multiplicand, BYTE Shift) {
    LONG64 extractedProduct;
    LONG64 highProduct;
    LONG64 lowProduct;
    BOOLEAN negate;
    DWORD64 uhighProduct;
    DWORD64 ulowProduct;

    lowProduct = Multiply128(Multiplier, Multiplicand, &highProduct);
    negate = FALSE;
    uhighProduct = (DWORD64)highProduct;
    ulowProduct = (DWORD64)lowProduct;
    if (highProduct < 0) {
        negate = TRUE;
        uhighProduct = (DWORD64)(-highProduct);
        ulowProduct = (DWORD64)(-lowProduct);
        if (ulowProduct != 0) {
            uhighProduct -= 1;
        }
    }

    extractedProduct = (LONG64)ShiftRight128(ulowProduct, uhighProduct, Shift);
    if (negate != FALSE) {
        extractedProduct = -extractedProduct;
    }

    return extractedProduct;
}

__forceinline DWORD64 UnsignedMultiplyExtract128(DWORD64 Multiplier, DWORD64 Multiplicand, BYTE Shift) {
    DWORD64 extractedProduct;
    DWORD64 highProduct;
    DWORD64 lowProduct;

    lowProduct = UnsignedMultiply128(Multiplier, Multiplicand, &highProduct);
    extractedProduct = ShiftRight128(lowProduct, highProduct, Shift);
    return extractedProduct;
}

BYTE __cdecl __readgsbyte(DWORD);
WORD __cdecl __readgsword(DWORD);
DWORD __cdecl __readgsdword(DWORD);
DWORD64 __cdecl __readgsqword(DWORD);
void __cdecl __writegsbyte(DWORD, BYTE);
void __cdecl __writegsword(DWORD, WORD);
void __cdecl __writegsdword(DWORD, DWORD);
void __cdecl __writegsqword(DWORD, DWORD64);

#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)

void __cdecl __incgsbyte(DWORD);
void __cdecl __addgsbyte(DWORD, BYTE);
void __cdecl __incgsword(DWORD);
void __cdecl __addgsword(DWORD, WORD);
void __cdecl __incgsdword(DWORD);
void __cdecl __addgsdword(DWORD, DWORD);
void __cdecl __incgsqword(DWORD);
void __cdecl __addgsqword(DWORD, DWORD64);

#if 0
#pragma intrinsic(__incgsbyte)
#pragma intrinsic(__addgsbyte)
#pragma intrinsic(__incgsword)
#pragma intrinsic(__addgsword)
#pragma intrinsic(__incgsdword)
#pragma intrinsic(__addgsdword)
#pragma intrinsic(__incgsqword)
#pragma intrinsic(__addgsqword)
#endif

#endif /* _M_AMD64 */

#define EXCEPTION_READ_FAULT  0
#define EXCEPTION_WRITE_FAULT  1
#define EXCEPTION_EXECUTE_FAULT  8

#define CONTEXT_AMD64  0x100000

#define CONTEXT_CONTROL (CONTEXT_AMD64|0x1L)
#define CONTEXT_INTEGER (CONTEXT_AMD64|0x2L)
#define CONTEXT_SEGMENTS (CONTEXT_AMD64|0x4L)
#define CONTEXT_FLOATING_POINT  (CONTEXT_AMD64|0x8L)
#define CONTEXT_DEBUG_REGISTERS (CONTEXT_AMD64|0x10L)

#define CONTEXT_FULL  (CONTEXT_CONTROL|CONTEXT_INTEGER|CONTEXT_FLOATING_POINT)

#define CONTEXT_ALL  (CONTEXT_CONTROL|CONTEXT_INTEGER|CONTEXT_SEGMENTS|CONTEXT_FLOATING_POINT|CONTEXT_DEBUG_REGISTERS)

#define CONTEXT_XSTATE (CONTEXT_AMD64|0x40L)

#define CONTEXT_EXCEPTION_ACTIVE  0x8000000
#define CONTEXT_SERVICE_ACTIVE  0x10000000
#define CONTEXT_EXCEPTION_REQUEST  0x40000000
#define CONTEXT_EXCEPTION_REPORTING  0x80000000

#define INITIAL_MXCSR  0x1f80
#define INITIAL_FPCSR  0x027f

typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;

typedef struct DECLSPEC_ALIGN (16) _CONTEXT {
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;
    union {
        XMM_SAVE_AREA32 FltSave;
        struct {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    M128A VectorRegister[26];
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;

/*
typedef struct _RUNTIME_FUNCTION {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
} RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;
*/
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, *PSCOPE_TABLE;

#define RUNTIME_FUNCTION_INDIRECT  0x1

#define UNW_FLAG_NHANDLER  0x0
#define UNW_FLAG_EHANDLER  0x1
#define UNW_FLAG_UHANDLER  0x2
#define UNW_FLAG_CHAININFO  0x4

#define UNW_FLAG_NO_EPILOGUE  0x80000000UL

#define UNWIND_HISTORY_TABLE_SIZE  12

typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY;

typedef struct _UNWIND_HISTORY_TABLE {
    DWORD Count;
    BYTE LocalHint;
    BYTE GlobalHint;
    BYTE Search;
    BYTE Once;
    DWORD64 LowAddress;
    DWORD64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[UNWIND_HISTORY_TABLE_SIZE];
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE;

typedef PRUNTIME_FUNCTION GET_RUNTIME_FUNCTION_CALLBACK(DWORD64, PVOID);
typedef GET_RUNTIME_FUNCTION_CALLBACK *PGET_RUNTIME_FUNCTION_CALLBACK;

typedef DWORD OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK(HANDLE, PVOID, PDWORD, PRUNTIME_FUNCTION *);
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;

#define OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME \
  "OutOfProcessFunctionTableCallback"

typedef struct _DISPATCHER_CONTEXT {
    DWORD64 ControlPc;
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    DWORD64 EstablisherFrame;
    DWORD64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    PUNWIND_HISTORY_TABLE HistoryTable;
    DWORD ScopeIndex;
    DWORD Fill0;
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;

struct _EXCEPTION_POINTERS;

typedef LONG (*PEXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *ExceptionPointers, PVOID EstablisherFrame);
typedef VOID (*PTERMINATION_HANDLER)(BOOLEAN AbnormalTermination, PVOID EstablisherFrame);

/*
NTSYSAPI VOID __cdecl RtlRestoreContext(PCONTEXT, struct _EXCEPTION_RECORD *);
NTSYSAPI BOOLEAN __cdecl RtlAddFunctionTable(PRUNTIME_FUNCTION, DWORD, DWORD64);
NTSYSAPI PRUNTIME_FUNCTION NTAPI RtlLookupFunctionEntry(DWORD64, PDWORD64, PUNWIND_HISTORY_TABLE);
*/

typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    union {
        PM128A FloatingContext[16];
        struct {
            PM128A Xmm0;
            PM128A Xmm1;
            PM128A Xmm2;
            PM128A Xmm3;
            PM128A Xmm4;
            PM128A Xmm5;
            PM128A Xmm6;
            PM128A Xmm7;
            PM128A Xmm8;
            PM128A Xmm9;
            PM128A Xmm10;
            PM128A Xmm11;
            PM128A Xmm12;
            PM128A Xmm13;
            PM128A Xmm14;
            PM128A Xmm15;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    union {
        PDWORD64 IntegerContext[16];
        struct {
            PDWORD64 Rax;
            PDWORD64 Rcx;
            PDWORD64 Rdx;
            PDWORD64 Rbx;
            PDWORD64 Rsp;
            PDWORD64 Rbp;
            PDWORD64 Rsi;
            PDWORD64 Rdi;
            PDWORD64 R8;
            PDWORD64 R9;
            PDWORD64 R10;
            PDWORD64 R11;
            PDWORD64 R12;
            PDWORD64 R13;
            PDWORD64 R14;
            PDWORD64 R15;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME2;
} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;

/*
NTSYSAPI PEXCEPTION_ROUTINE NTAPI RtlVirtualUnwind(DWORD, DWORD64, DWORD64, PRUNTIME_FUNCTION, PCONTEXT, PVOID *, PDWORD64, PKNONVOLATILE_CONTEXT_POINTERS);
NTSYSAPI BOOLEAN __cdecl RtlInstallFunctionTableCallback(DWORD64, DWORD64, DWORD, PGET_RUNTIME_FUNCTION_CALLBACK, PVOID, PCWSTR);
NTSYSAPI BOOLEAN __cdecl RtlDeleteFunctionTable(PRUNTIME_FUNCTION);
*/

#endif /* _AMD64_ */

#ifndef _DBGRAISEASSERTIONFAILURE_
#define _DBGRAISEASSERTIONFAILURE_

#if defined(_AMD64_)

#if defined(_M_AMD64)

#ifndef __ORANGEC__

void __cdecl __int2c(void);

#pragma intrinsic(__int2c)

#define DbgRaiseAssertionFailure()  __int2c()

#endif

#endif /* _M_AMD64 */

#elif defined(_X86_)

#if defined(_M_IX86)

#ifndef __MSIL__
__forceinline void DbgRaiseAssertionFailure(VOID) { __asm int 0x2c }
#endif

#endif /* _M_IX86 */

#endif /* yada, yada, yada */
#endif /* _DBGRAISEASSERTIONFAILURE_ */

#ifdef _X86_

#if defined(_M_IX86)

#define BitTest  _bittest
#define BitTestAndComplement  _bittestandcomplement
#define BitTestAndSet  _bittestandset
#define BitTestAndReset  _bittestandreset

#if 0
#define InterlockedBitTestAndSet  _interlockedbittestandset
#define InterlockedBitTestAndSetAcquire  _interlockedbittestandset
#define InterlockedBitTestAndSetRelease  _interlockedbittestandset
#define InterlockedBitTestAndSetNoFence  _interlockedbittestandset
#define InterlockedBitTestAndReset  _interlockedbittestandreset
#define InterlockedBitTestAndResetAcquire  _interlockedbittestandreset
#define InterlockedBitTestAndResetRelease  _interlockedbittestandreset
#define InterlockedBitTestAndResetNoFence  _interlockedbittestandreset
#endif

BOOLEAN __cdecl _bittest(const LONG *, LONG);
BOOLEAN __cdecl _bittestandcomplement(LONG *, LONG);
BOOLEAN __cdecl _bittestandset(LONG *, LONG);
BOOLEAN __cdecl _bittestandreset(LONG *, LONG);
BOOLEAN __cdecl _interlockedbittestandset(LONG /*volatile*/ *, LONG);
BOOLEAN __cdecl _interlockedbittestandreset(LONG /*volatile*/ *, LONG);

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#define BitScanForward  _BitScanForward
#define BitScanReverse  _BitScanReverse

BOOLEAN __cdecl _BitScanForward(DWORD *, DWORD);
BOOLEAN __cdecl _BitScanReverse(DWORD *, DWORD);

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)

FORCEINLINE BOOLEAN _InlineBitScanForward64(DWORD *Index, DWORD64 Mask) {
    if (_BitScanForward(Index, (DWORD)Mask)) {
        return 1;
    }
    if (_BitScanForward(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }
    return 0;
}

#define BitScanForward64  _InlineBitScanForward64

FORCEINLINE BOOLEAN _InlineBitScanReverse64(DWORD *Index, DWORD64 Mask) {
    if (_BitScanReverse(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }
    if (_BitScanReverse(Index, (DWORD)Mask)) {
        return 1;
    }
    return 0;
}

#define BitScanReverse64  _InlineBitScanReverse64

#if 0
#define InterlockedIncrement16  _InterlockedIncrement16
#define InterlockedIncrementAcquire16  _InterlockedIncrement16
#define InterlockedIncrementRelease16  _InterlockedIncrement16
#define InterlockedIncrementNoFence16  _InterlockedIncrement16

#define InterlockedDecrement16  _InterlockedDecrement16
#define InterlockedDecrementAcquire16  _InterlockedDecrement16
#define InterlockedDecrementRelease16  _InterlockedDecrement16
#define InterlockedDecrementNoFence16  _InterlockedDecrement16

#define InterlockedCompareExchange16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeAcquire16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeRelease16  _InterlockedCompareExchange16
#define InterlockedCompareExchangeNoFence16  _InterlockedCompareExchange16

#define InterlockedCompareExchange64  _InterlockedCompareExchange64
#define InterlockedCompareExchangeAcquire64  _InterlockedCompareExchange64
#define InterlockedCompareExchangeRelease64  _InterlockedCompareExchange64
#define InterlockedCompareExchangeNoFence64  _InterlockedCompareExchange64
#endif

SHORT /* __cdecl */ __stdcall InterlockedIncrement16(SHORT volatile *);
SHORT /* __cdecl */ __stdcall InterlockedDecrement16(SHORT volatile *);
SHORT /* __cdecl */ __stdcall InterlockedCompareExchange16(SHORT volatile *, SHORT, SHORT);
LONG64 /* __cdecl */ __stdcall InterlockedCompareExchange64(LONG64 volatile *, LONG64, LONG64);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedCompareExchange64)
#endif

#if 0
#define InterlockedAnd  _InterlockedAnd
#define InterlockedAndAcquire  _InterlockedAnd
#define InterlockedAndRelease  _InterlockedAnd
#define InterlockedAndNoFence  _InterlockedAnd

#define InterlockedOr  _InterlockedOr
#define InterlockedOrAcquire  _InterlockedOr
#define InterlockedOrRelease  _InterlockedOr
#define InterlockedOrNoFence  _InterlockedOr

#define InterlockedXor  _InterlockedXor
#define InterlockedXorAcquire  _InterlockedXor
#define InterlockedXorRelease  _InterlockedXor
#define InterlockedXorNoFence  _InterlockedXor

#define InterlockedIncrement  _InterlockedIncrement
#define InterlockedIncrementAcquire  _InterlockedIncrement
#define InterlockedIncrementRelease  _InterlockedIncrement
#define InterlockedIncrementNoFence  _InterlockedIncrement

#define InterlockedDecrement  _InterlockedDecrement
#define InterlockedDecrementAcquire  _InterlockedDecrement
#define InterlockedDecrementRelease  _InterlockedDecrement
#define InterlockedDecrementNoFence  _InterlockedDecrement

#define InterlockedAdd  _InlineInterlockedAdd
#define InterlockedAddAcquire  _InlineInterlockedAdd
#define InterlockedAddRelease  _InlineInterlockedAdd
#define InterlockedAddNoFence  _InlineInterlockedAdd
#define InterlockedAddNoFence64  _InlineInterlockedAdd64

#define InterlockedExchange  _InterlockedExchange
#define InterlockedExchangeAcquire  _InterlockedExchange
#define InterlockedExchangeNoFence  _InterlockedExchange

#define InterlockedExchangeAdd  _InterlockedExchangeAdd
#define InterlockedExchangeAddAcquire  _InterlockedExchangeAdd
#define InterlockedExchangeAddRelease  _InterlockedExchangeAdd
#define InterlockedExchangeAddNoFence  _InterlockedExchangeAdd

#define InterlockedCompareExchange  _InterlockedCompareExchange
#define InterlockedCompareExchangeAcquire  _InterlockedCompareExchange
#define InterlockedCompareExchangeRelease  _InterlockedCompareExchange
#define InterlockedCompareExchangeNoFence  _InterlockedCompareExchange

#define InterlockedExchange16  _InterlockedExchange16
#endif

LONG /* __cdecl */ __stdcall InterlockedAnd(LONG volatile *, LONG);
LONG /* __cdecl */ __stdcall InterlockedOr(LONG volatile *, LONG);
LONG /* __cdecl */ __stdcall InterlockedXor(LONG volatile *, LONG);
LONG /* __cdecl */ __stdcall InterlockedIncrement(LONG volatile *);
LONG /* __cdecl */ __stdcall InterlockedDecrement(LONG volatile *);
LONG /* __cdecl */ __stdcall InterlockedExchange(LONG volatile *, LONG);
LONG /* __cdecl */ __stdcall InterlockedExchangeAdd(LONG volatile *, LONG);

FORCEINLINE LONG _InlineInterlockedAdd(LONG volatile *Addend, LONG Value) {
    return InterlockedExchangeAdd(Addend, Value) + Value;
}

LONG /* __cdecl */ __stdcall InterlockedCompareExchange(LONG volatile *, LONG, LONG);

#undef _InterlockedExchangePointer

FORCEINLINE PVOID _InlineInterlockedExchangePointer(PVOID volatile *Destination, PVOID Value) {
    return (PVOID)InterlockedExchange((LONG volatile *)Destination, (LONG)Value);
}

#define InterlockedExchangePointer  _InlineInterlockedExchangePointer
#define InterlockedExchangePointerAcquire  _InlineInterlockedExchangePointer
#define InterlockedExchangePointerRelease  _InlineInterlockedExchangePointer
#define InterlockedExchangePointerNoFence  _InlineInterlockedExchangePointer

FORCEINLINE PVOID _InlineInterlockedCompareExchangePointer(PVOID volatile *Destination, PVOID ExChange, PVOID Comperand) {
    return (PVOID)InterlockedCompareExchange((LONG volatile *)Destination, (LONG)ExChange, (LONG)Comperand);
}

#define InterlockedCompareExchangePointer  _InlineInterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerAcquire  _InlineInterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerRelease  _InlineInterlockedCompareExchangePointer
#define InterlockedCompareExchangePointerNoFence  _InlineInterlockedCompareExchangePointer

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#endif

#if 0
#define InterlockedExchange8  _InterlockedExchange8
#define InterlockedExchange16  _InterlockedExchange16
#endif

CHAR /* __cdecl */ __stdcall InterlockedExchange8(CHAR volatile *, CHAR);
SHORT /* __cdecl */ __stdcall InterlockedExchange16(SHORT volatile *, SHORT);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
#endif

#if 0
#define InterlockedExchangeAdd8  _InterlockedExchangeAdd8
#define InterlockedAnd8  _InterlockedAnd8
#define InterlockedOr8  _InterlockedOr8
#define InterlockedXor8  _InterlockedXor8
#define InterlockedAnd16  _InterlockedAnd16
#define InterlockedOr16  _InterlockedOr16
#define InterlockedXor16  _InterlockedXor16
#define InterlockedCompareExchange16  _InterlockedCompareExchange16
#define InterlockedIncrement16  _InterlockedIncrement16
#define InterlockedDecrement16  _InterlockedDecrement16
#endif

char /* __cdecl */ __stdcall InterlockedExchangeAdd8(char volatile *, char);
char /* __cdecl */ __stdcall InterlockedAnd8(char volatile *, char);
char /* __cdecl */ __stdcall InterlockedOr8(char volatile *, char);
char /* __cdecl */ __stdcall InterlockedXor8(char volatile *, char);
SHORT /* __cdecl */ __stdcall InterlockedAnd16(SHORT volatile *, SHORT);
SHORT /* __cdecl */ __stdcall InterlockedXor16(SHORT volatile *, SHORT);
SHORT /* __cdecl */ __stdcall InterlockedCompareExchange16(SHORT volatile *, SHORT, SHORT);
SHORT /* __cdecl */ __stdcall InterlockedOr16(SHORT volatile *, SHORT);
SHORT /* __cdecl */ __stdcall InterlockedIncrement16(SHORT volatile *);
SHORT /* __cdecl */ __stdcall InterlockedDecrement16(SHORT volatile *);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedExchangeAdd8)
#pragma intrinsic(_InterlockedAnd8)
#pragma intrinsic(_InterlockedOr8)
#pragma intrinsic(_InterlockedXor8)
#pragma intrinsic(_InterlockedAnd16)
#pragma intrinsic(_InterlockedOr16)
#pragma intrinsic(_InterlockedXor16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#endif

#if 0
#define InterlockedCompareExchange64  _InterlockedCompareExchange64
#endif

FORCEINLINE LONG64 _InlineInterlockedAnd64(LONG64 volatile *Destination, LONG64 Value) {
    LONG64 Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination, Old & Value, Old) != Old);
    return Old;
}

#if 0
#define InterlockedAnd64  _InlineInterlockedAnd64
#define InterlockedAnd64Acquire  _InlineInterlockedAnd64
#define InterlockedAnd64Release  _InlineInterlockedAnd64
#define InterlockedAnd64NoFence  _InlineInterlockedAnd64
#endif

FORCEINLINE LONG64 _InlineInterlockedAdd64(LONG64 volatile *Addend, LONG64 Value) {
    LONG64 Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend, Old + Value, Old) != Old);
    return Old + Value;
}

#if 0
#define InterlockedAdd64  _InlineInterlockedAdd64
#define InterlockedAddAcquire64  _InlineInterlockedAdd64
#define InterlockedAddRelease64  _InlineInterlockedAdd64
#define InterlockedAddNoFence64  _InlineInterlockedAdd64
#endif

#define InterlockedExchangeAddSizeT(a,b)  InterlockedExchangeAdd((LONG *)a, b)
#define InterlockedExchangeAddSizeTAcquire(a,b)  InterlockedExchangeAdd((LONG *)a, b)
#define InterlockedExchangeAddSizeTNoFence(a,b)  InterlockedExchangeAdd((LONG *)a, b)
#define InterlockedIncrementSizeT(a)  InterlockedIncrement((LONG *)a)
#define InterlockedIncrementSizeTNoFence(a)  InterlockedIncrement((LONG *)a)
#define InterlockedDecrementSizeT(a)  InterlockedDecrement((LONG *)a)
#define InterlockedDecrementSizeTNoFence(a)  InterlockedDecrement((LONG *)a)

LONG /*__cdecl*/ __stdcall InterlockedXor(LONG volatile *, LONG);

#ifndef __ORANGEC__
#pragma intrinsic(_InterlockedXor)
#endif

#if 0
#define InterlockedXor  _InterlockedXor
#endif

LONGLONG FORCEINLINE _InlineInterlockedOr64(LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination, Old | Value, Old) != Old);
    return Old;
}

#if 0
#define InterlockedOr64  _InlineInterlockedOr64
#endif

FORCEINLINE LONG64 _InlineInterlockedXor64(LONG64 volatile *Destination, LONG64 Value) {
    LONG64 Old;
    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination, Old ^ Value, Old) != Old);
    return Old;
}

#if 0
#define InterlockedXor64  _InlineInterlockedXor64
#endif

LONGLONG FORCEINLINE _InlineInterlockedIncrement64(LONGLONG volatile *Addend) {
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend, Old + 1, Old) != Old);
    return Old + 1;
}

#if 0
#define InterlockedIncrement64  _InlineInterlockedIncrement64
#define InterlockedIncrementAcquire64  InterlockedIncrement64
#endif

FORCEINLINE LONGLONG _InlineInterlockedDecrement64(LONGLONG volatile *Addend) {
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend, Old - 1, Old) != Old);
    return Old - 1;
}

#if 0
#define InterlockedDecrement64  _InlineInterlockedDecrement64
#endif

FORCEINLINE LONGLONG _InlineInterlockedExchange64(LONGLONG volatile *Target, LONGLONG Value) {
    LONGLONG Old;
    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target, Value, Old) != Old);
    return Old;
}

#if 0
#define InterlockedExchange64  _InlineInterlockedExchange64
#define InterlockedExchangeAcquire64  InterlockedExchange64
#define InterlockedExchangeNoFence64  _InlineInterlockedExchange64
#endif

FORCEINLINE LONGLONG _InlineInterlockedExchangeAdd64(LONGLONG volatile *Addend, LONGLONG Value) {
    LONGLONG Old;
    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend, Old + Value, Old) != Old);
    return Old;
}

#if 0
#define InterlockedExchangeAdd64  _InlineInterlockedExchangeAdd64
#define InterlockedExchangeAddNoFence64  _InlineInterlockedExchangeAdd64
#endif
void __cdecl __incfsbyte(DWORD);
void __cdecl __addfsbyte(DWORD, BYTE);
void __cdecl __incfsword(DWORD);
void __cdecl __addfsword(DWORD, WORD);
void __cdecl __incfsdword(DWORD);
void __cdecl __addfsdword(DWORD, DWORD);

#if 0
#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)
#endif

#if _MSC_VER >= 1500

#define CpuIdEx  __cpuidex

void __cdecl __cpuidex(int [4], int, int);

#pragma intrinsic(__cpuidex)

#endif

BYTE __cdecl __readfsbyte(DWORD);
WORD __cdecl __readfsword(DWORD);
DWORD __cdecl __readfsdword(DWORD);
void __cdecl __writefsbyte(DWORD, BYTE);
void __cdecl __writefsword(DWORD, WORD);
void __cdecl __writefsdword(DWORD, DWORD);

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)

void __cdecl _mm_pause(VOID);

#pragma intrinsic(_mm_pause)

#define YieldProcessor  _mm_pause

FORCEINLINE VOID MemoryBarrier(VOID) {
    LONG Barrier;
    (void)InterlockedOr(&Barrier, 0);
    return;
}

#define _MM_HINT_T0  1
#define _MM_HINT_T1  2
#define _MM_HINT_T2  3
#define _MM_HINT_NTA  0

void __cdecl _mm_prefetch(CONST CHAR *, int);

#pragma intrinsic(_mm_prefetch)

#define PF_TEMPORAL_LEVEL_1  _MM_HINT_T0
#define PF_TEMPORAL_LEVEL_2  _MM_HINT_T1
#define PF_TEMPORAL_LEVEL_3  _MM_HINT_T2
#define PF_NON_TEMPORAL_LEVEL_ALL  _MM_HINT_NTA

#define PreFetchCacheLine(l,a)  _mm_prefetch((CONST CHAR *) a, l)
#define PrefetchForWrite(p)
#define ReadForWriteAccess(p)  (*(p))

#define ReadPMC  __readpmc

DWORD64 __cdecl __readpmc(DWORD);

#ifndef __ORANGEC__
#pragma intrinsic(__readpmc)
#endif

#define ReadTimeStampCounter()  __rdtsc()

DWORD64 __cdecl __rdtsc(void);

#pragma intrinsic(__rdtsc)

__inline PVOID GetFiberData( void )    { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10); }
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10); }

#endif /* _M_IX86 */

#define EXCEPTION_READ_FAULT  0
#define EXCEPTION_WRITE_FAULT  1
#define EXCEPTION_EXECUTE_FAULT  8

#define SIZE_OF_80387_REGISTERS  80

#define CONTEXT_i386  0x00010000
#define CONTEXT_i486  0x00010000

#define CONTEXT_CONTROL  (CONTEXT_i386|0x00000001L) 
#define CONTEXT_INTEGER  (CONTEXT_i386|0x00000002L) 
#define CONTEXT_SEGMENTS  (CONTEXT_i386|0x00000004L) 
#define CONTEXT_FLOATING_POINT  (CONTEXT_i386|0x00000008L) 
#define CONTEXT_DEBUG_REGISTERS (CONTEXT_i386|0x00000010L) 
#define CONTEXT_EXTENDED_REGISTERS  (CONTEXT_i386|0x00000020L) 

#define CONTEXT_FULL  (CONTEXT_CONTROL|CONTEXT_INTEGER|CONTEXT_SEGMENTS)

#define CONTEXT_ALL  (CONTEXT_CONTROL|CONTEXT_INTEGER|CONTEXT_SEGMENTS|CONTEXT_FLOATING_POINT|CONTEXT_DEBUG_REGISTERS|CONTEXT_EXTENDED_REGISTERS)

#define CONTEXT_XSTATE  (CONTEXT_i386|0x00000040L)

#define CONTEXT_EXCEPTION_ACTIVE     0x08000000L
#define CONTEXT_SERVICE_ACTIVE       0x10000000L
#define CONTEXT_EXCEPTION_REQUEST    0x40000000L
#define CONTEXT_EXCEPTION_REPORTING  0x80000000L

typedef struct _FLOATING_SAVE_AREA {
  DWORD  ControlWord;
  DWORD  StatusWord;
  DWORD  TagWord;
  DWORD  ErrorOffset;
  DWORD  ErrorSelector;
  DWORD  DataOffset;
  DWORD  DataSelector;
  BYTE  RegisterArea[SIZE_OF_80387_REGISTERS];
  DWORD  Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

#define MAXIMUM_SUPPORTED_EXTENSION  512

C_ASSERT(sizeof(XSAVE_FORMAT) == MAXIMUM_SUPPORTED_EXTENSION);

#include "pshpack4.h"

typedef struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];
} CONTEXT, *PCONTEXT;

#include "poppack.h"

#endif /* _X86 */

#ifndef _LDT_ENTRY_DEFINED
#define _LDT_ENTRY_DEFINED

typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid:8;
            DWORD Type:5;
            DWORD Dpl:2;
            DWORD Pres:1;
            DWORD LimitHi:4;
            DWORD Sys:1;
            DWORD Reserved_0:1;
            DWORD Default_Big:1;
            DWORD Granularity:1;
            DWORD BaseHi:8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#endif /* _LDT_ENTRY_DEFINED */

#if defined(_M_AMD64) || defined(_M_IX86)

FORCEINLINE CHAR ReadAcquire8(CHAR const volatile *Source) {
    CHAR Value;
    Value = *Source;
    return Value;
}

FORCEINLINE CHAR ReadNoFence8(CHAR const volatile *Source) {
    CHAR Value;
    Value = *Source;
    return Value;
}

FORCEINLINE VOID WriteRelease8(CHAR volatile *Destination, CHAR Value) {
    *Destination = Value;
    return;
}

FORCEINLINE VOID WriteNoFence8(CHAR volatile *Destination, CHAR Value) {
    *Destination = Value;
    return;
}

FORCEINLINE SHORT ReadAcquire16(SHORT const volatile *Source) {
    SHORT Value;
    Value = *Source;
    return Value;
}

FORCEINLINE SHORT ReadNoFence16(SHORT const volatile *Source) {
    SHORT Value;
    Value = *Source;
    return Value;
}

FORCEINLINE VOID WriteRelease16(SHORT volatile *Destination, SHORT Value) {
    *Destination = Value;
    return;
}

FORCEINLINE VOID WriteNoFence16(SHORT volatile *Destination, SHORT Value) {
    *Destination = Value;
    return;
}

FORCEINLINE LONG ReadAcquire(LONG const volatile *Source) {
    LONG Value;
    Value = *Source;
    return Value;
}

FORCEINLINE LONG ReadNoFence(LONG const volatile *Source) {
    LONG Value;
    Value = *Source;
    return Value;
}

CFORCEINLINE VOID WriteRelease(LONG volatile *Destination, LONG Value) {
    *Destination = Value;
    return;
}

FORCEINLINE VOID WriteNoFence(LONG volatile *Destination, LONG Value) {
    *Destination = Value;
    return;
}

FORCEINLINE LONG64 ReadAcquire64(LONG64 const volatile *Source) {
    LONG64 Value;
    Value = *Source;
    return Value;
}

FORCEINLINE LONG64 ReadNoFence64(LONG64 const volatile *Source) {
    LONG64 Value;
    Value = *Source;
    return Value;
}

CFORCEINLINE VOID WriteRelease64(LONG64 volatile *Destination, LONG64 Value) {
    *Destination = Value;
    return;
}

FORCEINLINE VOID WriteNoFence64(LONG64 volatile *Destination, LONG64 Value) {
    *Destination = Value;
    return;
}

#endif /* defined(_M_AMD64) || defined(_M_IX86) */

FORCEINLINE CHAR ReadRaw8(CHAR const volatile *Source) {
    CHAR Value;
    Value = *(CHAR *)Source;
    return Value;
}

FORCEINLINE VOID WriteRaw8(CHAR volatile *Destination, CHAR Value) {
    *(CHAR *)Destination = Value;
    return;
}

FORCEINLINE SHORT ReadRaw16(SHORT const volatile *Source) {
    SHORT Value;
    Value = *(SHORT *)Source;
    return Value;
}

FORCEINLINE VOID WriteRaw16(SHORT volatile *Destination, SHORT Value) {
    *(SHORT *)Destination = Value;
    return;
}

FORCEINLINE LONG ReadRaw(LONG const volatile *Source) {
    LONG Value;
    Value = *(LONG *)Source;
    return Value;
}

CFORCEINLINE VOID WriteRaw(LONG volatile *Destination, LONG Value) {
    *(LONG *)Destination = Value;
    return;
}

FORCEINLINE LONG64 ReadRaw64(LONG64 const volatile *Source) {
    LONG64 Value;
    Value = *(LONG64 *)Source;
    return Value;
}

FORCEINLINE VOID WriteRaw64(LONG64 volatile *Destination, LONG64 Value) {
    *(LONG64 *)Destination = Value;
    return;
}

FORCEINLINE BYTE ReadUCharAcquire(BYTE const volatile *Source) {
    return (BYTE)ReadAcquire8((PCHAR)Source);
}

FORCEINLINE BYTE ReadUCharNoFence(BYTE const volatile *Source) {
    return (BYTE)ReadNoFence8((PCHAR)Source);
}

FORCEINLINE BYTE ReadBooleanAcquire(BOOLEAN const volatile *Source) {
    return (BOOLEAN)ReadAcquire8((PCHAR)Source);
}

FORCEINLINE BYTE ReadBooleanNoFence(BOOLEAN const volatile *Source) {
    return (BOOLEAN)ReadNoFence8((PCHAR)Source);
}

FORCEINLINE BYTE ReadUCharRaw(BYTE const volatile *Source) {
    return (BYTE)ReadRaw8((PCHAR)Source);
}

FORCEINLINE VOID WriteUCharRelease(BYTE volatile *Destination, BYTE Value) {
    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

FORCEINLINE VOID WriteUCharNoFence(BYTE volatile *Destination, BYTE Value) {
    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

FORCEINLINE VOID WriteBooleanRelease(BOOLEAN volatile *Destination, BOOLEAN Value) {
    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

FORCEINLINE VOID WriteBooleanNoFence(BOOLEAN volatile *Destination, BOOLEAN Value) {
    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

FORCEINLINE VOID WriteUCharRaw(BYTE volatile *Destination, BYTE Value) {
    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

FORCEINLINE WORD ReadUShortAcquire(WORD const volatile *Source) {
    return (WORD)ReadAcquire16((PSHORT)Source);
}

FORCEINLINE WORD ReadUShortNoFence(WORD const volatile *Source) {
    return (WORD)ReadNoFence16((PSHORT)Source);
}

FORCEINLINE WORD ReadUShortRaw(WORD const volatile *Source) {
    return (WORD)ReadRaw16((PSHORT)Source);
}

FORCEINLINE VOID WriteUShortRelease(WORD volatile *Destination, WORD Value) {
    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

FORCEINLINE VOID WriteUShortNoFence(WORD volatile *Destination, WORD Value) {
    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

FORCEINLINE VOID WriteUShortRaw(WORD volatile *Destination, WORD Value) {
    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

FORCEINLINE DWORD ReadULongAcquire(DWORD const volatile *Source) {
    return (DWORD)ReadAcquire((PLONG)Source);
}

FORCEINLINE DWORD ReadULongNoFence(DWORD const volatile *Source) {
    return (DWORD)ReadNoFence((PLONG)Source);
}

FORCEINLINE DWORD ReadULongRaw(DWORD const volatile *Source) {
    return (DWORD)ReadRaw((PLONG)Source);
}

CFORCEINLINE VOID WriteULongRelease(DWORD volatile *Destination, DWORD Value) {
    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

FORCEINLINE VOID WriteULongNoFence(DWORD volatile *Destination, DWORD Value) {
    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

FORCEINLINE VOID WriteULongRaw(DWORD volatile *Destination, DWORD Value) {
    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

FORCEINLINE DWORD64 ReadULong64Acquire(DWORD64 const volatile *Source) {
    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

FORCEINLINE DWORD64 ReadULong64NoFence(DWORD64 const volatile *Source) {
    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

FORCEINLINE DWORD64 ReadULong64Raw(DWORD64 const volatile *Source) {
    return (DWORD64)ReadRaw64((PLONG64)Source);
}

CFORCEINLINE VOID WriteULong64Release(DWORD64 volatile *Destination, DWORD64 Value) {
    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

FORCEINLINE VOID WriteULong64NoFence(DWORD64 volatile *Destination, DWORD64 Value) {
    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

FORCEINLINE VOID WriteULong64Raw(DWORD64 volatile *Destination, DWORD64 Value) {
    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}

#define ReadSizeTAcquire  ReadULongPtrAcquire
#define ReadSizeTNoFence  ReadULongPtrNoFence
#define ReadSizeTRaw  ReadULongPtrRaw
#define WriteSizeTRelease  WriteULongPtrRelease
#define WriteSizeTNoFence  WriteULongPtrNoFence
#define WriteSizeTRaw  WriteULongPtrRaw

#if !defined(_WIN64)

FORCEINLINE PVOID ReadPointerAcquire(PVOID const volatile *Source) {
    return (PVOID)ReadAcquire((PLONG)Source);
}

FORCEINLINE PVOID ReadPointerNoFence(PVOID const volatile *Source) {
    return (PVOID)ReadNoFence((PLONG)Source);
}

FORCEINLINE PVOID ReadPointerRaw(PVOID const volatile *Source) {
    return (PVOID)ReadRaw((PLONG)Source);
}

CFORCEINLINE VOID WritePointerRelease(PVOID volatile *Destination, PVOID Value) {
    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

FORCEINLINE VOID WritePointerNoFence(PVOID volatile *Destination, PVOID Value) {
    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

FORCEINLINE VOID WritePointerRaw(PVOID volatile *Destination, PVOID Value) {
    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

#define ReadLongPtrAcquire  ReadAcquire
#define ReadLongPtrNoFence  ReadNoFence
#define ReadLongPtrRaw  ReadRaw
#define WriteLongPtrRelease  WriteRelease
#define WriteLongPtrNoFence  WriteNoFence
#define WriteLongPtrRaw  WriteRaw
#define ReadULongPtrAcquire  ReadULongAcquire
#define ReadULongPtrNoFence  ReadULongNoFence
#define ReadULongPtrRaw  ReadULongRaw
#define WriteULongPtrRelease  WriteULongRelease
#define WriteULongPtrNoFence  WriteULongNoFence
#define WriteULongPtrRaw  WriteULongRaw

#else /* DEFINED(_WIN64) */

FORCEINLINE PVOID ReadPointerAcquire(PVOID const volatile *Source) {
    return (PVOID)ReadAcquire64((PLONG64)Source);
}

FORCEINLINE PVOID ReadPointerNoFence(PVOID const volatile *Source) {
    return (PVOID)ReadNoFence64((PLONG64)Source);
}

FORCEINLINE PVOID ReadPointerRaw(PVOID const volatile *Source) {
    return (PVOID)ReadRaw64((PLONG64)Source);
}

FORCEINLINE VOID WritePointerRelease(PVOID volatile *Destination, PVOID Value) {
    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

FORCEINLINE VOID WritePointerNoFence(PVOID volatile *Destination, PVOID Value) {
    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

FORCEINLINE VOID WritePointerRaw(PVOID volatile *Destination, PVOID Value) {
    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}

#define ReadLongPtrAcquire ReadAcquire64
#define ReadLongPtrNoFence ReadNoFence64
#define ReadLongPtrRaw ReadRaw64
#define WriteLongPtrRelease WriteRelease64
#define WriteLongPtrNoFence WriteNoFence64
#define WriteLongPtrRaw WriteRaw64
#define ReadULongPtrAcquire ReadULong64Acquire
#define ReadULongPtrNoFence ReadULong64NoFence
#define ReadULongPtrRaw ReadULong64Raw
#define WriteULongPtrRelease WriteULong64Release
#define WriteULongPtrNoFence WriteULong64NoFence
#define WriteULongPtrRaw WriteULong64Raw

#endif /* defined(_WIN64) */

#define WOW64_CONTEXT_i386  0x00010000
#define WOW64_CONTEXT_i486  0x00010000

#define WOW64_CONTEXT_CONTROL  (WOW64_CONTEXT_i386|0x00000001L) 
#define WOW64_CONTEXT_INTEGER  (WOW64_CONTEXT_i386|0x00000002L) 
#define WOW64_CONTEXT_SEGMENTS  (WOW64_CONTEXT_i386|0x00000004L) 
#define WOW64_CONTEXT_FLOATING_POINT  (WOW64_CONTEXT_i386|0x00000008L) 
#define WOW64_CONTEXT_DEBUG_REGISTERS  (WOW64_CONTEXT_i386|0x00000010L) 
#define WOW64_CONTEXT_EXTENDED_REGISTERS  (WOW64_CONTEXT_i386|0x00000020L) 

#define WOW64_CONTEXT_FULL  (WOW64_CONTEXT_CONTROL|WOW64_CONTEXT_INTEGER|WOW64_CONTEXT_SEGMENTS)

#define WOW64_CONTEXT_ALL  (WOW64_CONTEXT_CONTROL|WOW64_CONTEXT_INTEGER|WOW64_CONTEXT_SEGMENTS|WOW64_CONTEXT_FLOATING_POINT|WOW64_CONTEXT_DEBUG_REGISTERS|WOW64_CONTEXT_EXTENDED_REGISTERS)

#define WOW64_CONTEXT_XSTATE  (WOW64_CONTEXT_i386|0x00000040L)

#define WOW64_CONTEXT_EXCEPTION_ACTIVE     0x08000000
#define WOW64_CONTEXT_SERVICE_ACTIVE       0x10000000
#define WOW64_CONTEXT_EXCEPTION_REQUEST    0x40000000
#define WOW64_CONTEXT_EXCEPTION_REPORTING  0x80000000

#define WOW64_SIZE_OF_80387_REGISTERS  80

#define WOW64_MAXIMUM_SUPPORTED_EXTENSION  512

typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[WOW64_SIZE_OF_80387_REGISTERS];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

#include "pshpack4.h"

typedef struct _WOW64_CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    WOW64_FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[WOW64_MAXIMUM_SUPPORTED_EXTENSION];
} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;

#include "poppack.h"

typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid:8;
            DWORD Type:5;
            DWORD Dpl:2;
            DWORD Pres:1;
            DWORD LimitHi:4;
            DWORD Sys:1;
            DWORD Reserved_0:1;
            DWORD Default_Big:1;
            DWORD Granularity:1;
            DWORD BaseHi:8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;

#define EXCEPTION_NONCONTINUABLE  0x1
#define EXCEPTION_UNWINDING  0x2
#define EXCEPTION_EXIT_UNWIND  0x4
#define EXCEPTION_STACK_INVALID  0x8
#define EXCEPTION_NESTED_CALL  0x10
#define EXCEPTION_TARGET_UNWIND  0x20
#define EXCEPTION_COLLIDED_UNWIND  0x40

#define EXCEPTION_UNWIND (EXCEPTION_UNWINDING|EXCEPTION_EXIT_UNWIND|EXCEPTION_TARGET_UNWIND|EXCEPTION_COLLIDED_UNWIND)

#define IS_UNWINDING(Flag)  ((Flag & EXCEPTION_UNWIND) != 0)
#define IS_DISPATCHING(Flag)  ((Flag & EXCEPTION_UNWIND) == 0)
#define IS_TARGET_UNWIND(Flag)  (Flag & EXCEPTION_TARGET_UNWIND)

#define EXCEPTION_MAXIMUM_PARAMETERS  15

typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;

typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

typedef PVOID PACCESS_TOKEN;  
typedef PVOID PSECURITY_DESCRIPTOR;  
typedef PVOID PSID;  
typedef PVOID PCLAIMS_BLOB;     

typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;

#define DELETE  (0x00010000L)
#define READ_CONTROL  (0x00020000L)
#define WRITE_DAC  (0x00040000L)
#define WRITE_OWNER  (0x00080000L)
#define SYNCHRONIZE  (0x00100000L)

#define STANDARD_RIGHTS_REQUIRED  (0x000F0000L)

#define STANDARD_RIGHTS_READ  (READ_CONTROL)
#define STANDARD_RIGHTS_WRITE  (READ_CONTROL)
#define STANDARD_RIGHTS_EXECUTE  (READ_CONTROL)

#define STANDARD_RIGHTS_ALL  (0x001F0000L)

#define SPECIFIC_RIGHTS_ALL  (0x0000FFFFL)

#define ACCESS_SYSTEM_SECURITY  (0x01000000L)

#define MAXIMUM_ALLOWED  (0x02000000L)

#define GENERIC_READ  (0x80000000L)
#define GENERIC_WRITE  (0x40000000L)
#define GENERIC_EXECUTE  (0x20000000L)
#define GENERIC_ALL  (0x10000000L)

typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;

#include <pshpack4.h>

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[ANYSIZE_ARRAY];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#include <poppack.h>

#ifndef SID_IDENTIFIER_AUTHORITY_DEFINED
#define SID_IDENTIFIER_AUTHORITY_DEFINED
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#endif /* SID_IDENTIFIER_AUTHORITY_DEFINED */

#ifndef SID_DEFINED
#define SID_DEFINED
typedef struct _SID {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[ANYSIZE_ARRAY];
} SID, *PISID;
#endif /* SID_DEFINED */

#define SID_REVISION  (1)  
#define SID_MAX_SUB_AUTHORITIES  (15)
#define SID_RECOMMENDED_SUB_AUTHORITIES  (1)  

#define SECURITY_MAX_SID_SIZE  \
  (sizeof(SID) - sizeof(DWORD) + (SID_MAX_SUB_AUTHORITIES * sizeof(DWORD)))

typedef union _SE_SID {
    SID Sid;
    BYTE  Buffer[SECURITY_MAX_SID_SIZE];
} SE_SID, *PSE_SID;

typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession,
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[ANYSIZE_ARRAY];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;

#define SID_HASH_SIZE 32
typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[SID_HASH_SIZE];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;

#define SECURITY_NULL_SID_AUTHORITY  {0,0,0,0,0,0}
#define SECURITY_WORLD_SID_AUTHORITY  {0,0,0,0,0,1}
#define SECURITY_LOCAL_SID_AUTHORITY  {0,0,0,0,0,2}
#define SECURITY_CREATOR_SID_AUTHORITY  {0,0,0,0,0,3}
#define SECURITY_NON_UNIQUE_AUTHORITY  {0,0,0,0,0,4}
#define SECURITY_RESOURCE_MANAGER_AUTHORITY  {0,0,0,0,0,9}

#define SECURITY_NULL_RID  (0x00000000L)
#define SECURITY_WORLD_RID  (0x00000000L)
#define SECURITY_LOCAL_RID  (0x00000000L)
#define SECURITY_LOCAL_LOGON_RID  (0x00000001L)

#define SECURITY_CREATOR_OWNER_RID  (0x00000000L)
#define SECURITY_CREATOR_GROUP_RID  (0x00000001L)

#define SECURITY_CREATOR_OWNER_SERVER_RID (0x00000002L)
#define SECURITY_CREATOR_GROUP_SERVER_RID (0x00000003L)

#define SECURITY_CREATOR_OWNER_RIGHTS_RID (0x00000004L)

#define SECURITY_NT_AUTHORITY  {0,0,0,0,0,5}  

#define SECURITY_DIALUP_RID  (0x00000001L)
#define SECURITY_NETWORK_RID  (0x00000002L)
#define SECURITY_BATCH_RID  (0x00000003L)
#define SECURITY_INTERACTIVE_RID  (0x00000004L)
#define SECURITY_LOGON_IDS_RID  (0x00000005L)
#define SECURITY_LOGON_IDS_RID_COUNT  (3L)
#define SECURITY_SERVICE_RID  (0x00000006L)
#define SECURITY_ANONYMOUS_LOGON_RID  (0x00000007L)
#define SECURITY_PROXY_RID  (0x00000008L)
#define SECURITY_ENTERPRISE_CONTROLLERS_RID (0x00000009L)
#define SECURITY_SERVER_LOGON_RID  SECURITY_ENTERPRISE_CONTROLLERS_RID
#define SECURITY_PRINCIPAL_SELF_RID  (0x0000000AL)
#define SECURITY_AUTHENTICATED_USER_RID (0x0000000BL)
#define SECURITY_RESTRICTED_CODE_RID  (0x0000000CL)
#define SECURITY_TERMINAL_SERVER_RID  (0x0000000DL)
#define SECURITY_REMOTE_LOGON_RID  (0x0000000EL)
#define SECURITY_THIS_ORGANIZATION_RID  (0x0000000FL)
#define SECURITY_IUSER_RID  (0x00000011L)
#define SECURITY_LOCAL_SYSTEM_RID  (0x00000012L)
#define SECURITY_LOCAL_SERVICE_RID  (0x00000013L)
#define SECURITY_NETWORK_SERVICE_RID  (0x00000014L)

#define SECURITY_NT_NON_UNIQUE  (0x00000015L)
#define SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT  (3L)

#define SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID (0x00000016L)

#define SECURITY_BUILTIN_DOMAIN_RID  (0x00000020L)
#define SECURITY_WRITE_RESTRICTED_CODE_RID (0x00000021L)

#define SECURITY_PACKAGE_BASE_RID  (0x00000040L)
#define SECURITY_PACKAGE_RID_COUNT  (2L)
#define SECURITY_PACKAGE_NTLM_RID  (0x0000000AL)
#define SECURITY_PACKAGE_SCHANNEL_RID  (0x0000000EL)
#define SECURITY_PACKAGE_DIGEST_RID  (0x00000015L)

#define SECURITY_CRED_TYPE_BASE_RID  (0x00000041L)
#define SECURITY_CRED_TYPE_RID_COUNT  (2L)
#define SECURITY_CRED_TYPE_THIS_ORG_CERT_RID  (0x00000001L)

#define SECURITY_MIN_BASE_RID  (0x00000050L)

#define SECURITY_SERVICE_ID_BASE_RID  (0x00000050L)
#define SECURITY_SERVICE_ID_RID_COUNT  (6L)

#define SECURITY_RESERVED_ID_BASE_RID  (0x00000051L)

#define SECURITY_APPPOOL_ID_BASE_RID  (0x00000052L)
#define SECURITY_APPPOOL_ID_RID_COUNT  (6L)

#define SECURITY_VIRTUALSERVER_ID_BASE_RID  (0x00000053L)
#define SECURITY_VIRTUALSERVER_ID_RID_COUNT  (6L)

#define SECURITY_USERMODEDRIVERHOST_ID_BASE_RID  (0x00000054L)
#define SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT (6L)

#define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID  (0x00000055L)
#define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT (6L)

#define SECURITY_WMIHOST_ID_BASE_RID  (0x00000056L)
#define SECURITY_WMIHOST_ID_RID_COUNT (6L)

#define SECURITY_TASK_ID_BASE_RID  (0x00000057L)

#define SECURITY_NFS_ID_BASE_RID  (0x00000058L)

#define SECURITY_COM_ID_BASE_RID  (0x00000059L)

#define SECURITY_WINDOW_MANAGER_BASE_RID     (0x0000005AL)

#define SECURITY_RDV_GFX_BASE_RID       (0x0000005BL)

#define SECURITY_DASHOST_ID_BASE_RID    (0x0000005CL)
#define SECURITY_DASHOST_ID_RID_COUNT   (6L)

#define SECURITY_USERMANAGER_ID_BASE_RID    (0x0000005DL)
#define SECURITY_USERMANAGER_ID_RID_COUNT   (6L)

#define SECURITY_WINRM_ID_BASE_RID      (0x0000005EL)
#define SECURITY_WINRM_ID_RID_COUNT     (6L)

#define SECURITY_CCG_ID_BASE_RID    (0x0000005FL)

#define SECURITY_VIRTUALACCOUNT_ID_RID_COUNT  (6L)

#define SECURITY_MAX_BASE_RID  (0x0000006FL)
#define SECURITY_MAX_ALWAYS_FILTERED  (0x000003E7L)
#define SECURITY_MIN_NEVER_FILTERED  (0x000003E8L)

#define SECURITY_OTHER_ORGANIZATION_RID (0x000003E8L)

#define SECURITY_WINDOWSMOBILE_ID_BASE_RID (0x00000070L)

#define SECURITY_INSTALLER_GROUP_CAPABILITY_BASE (0x20)
#define SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT (9)

#define SECURITY_INSTALLER_CAPABILITY_RID_COUNT (10)

#define SECURITY_LOCAL_ACCOUNT_RID (0x00000071L)
#define SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID (0x00000072L)

#define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED       (0x000001F0L)
#define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS     (0x000001F1L)
#define DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS (0x000001F2L)

#define FOREST_USER_RID_MAX  (0x000001F3L)

#define DOMAIN_USER_RID_ADMIN  (0x000001F4L)
#define DOMAIN_USER_RID_GUEST  (0x000001F5L)
#define DOMAIN_USER_RID_KRBTGT  (0x000001F6L)
#define DOMAIN_USER_RID_DEFAULT_ACCOUNT  (0x000001F7L)

#define DOMAIN_USER_RID_MAX  (0x000003E7L)

#define DOMAIN_GROUP_RID_ADMINS  (0x00000200L)
#define DOMAIN_GROUP_RID_USERS  (0x00000201L)
#define DOMAIN_GROUP_RID_GUESTS  (0x00000202L)
#define DOMAIN_GROUP_RID_COMPUTERS  (0x00000203L)
#define DOMAIN_GROUP_RID_CONTROLLERS  (0x00000204L)
#define DOMAIN_GROUP_RID_CERT_ADMINS  (0x00000205L)
#define DOMAIN_GROUP_RID_SCHEMA_ADMINS  (0x00000206L)
#define DOMAIN_GROUP_RID_ENTERPRISE_ADMINS  (0x00000207L)
#define DOMAIN_GROUP_RID_POLICY_ADMINS  (0x00000208L)
#define DOMAIN_GROUP_RID_READONLY_CONTROLLERS  (0x00000209L)
#define DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS  (0x0000020AL)
#define DOMAIN_GROUP_RID_CDC_RESERVED  (0x0000020CL)
#define DOMAIN_GROUP_RID_PROTECTED_USERS  (0x0000020DL)
#define DOMAIN_GROUP_RID_KEY_ADMINS  (0x0000020EL)
#define DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS  (0x0000020FL)

#define DOMAIN_ALIAS_RID_ADMINS  (0x00000220L)
#define DOMAIN_ALIAS_RID_USERS  (0x00000221L)
#define DOMAIN_ALIAS_RID_GUESTS  (0x00000222L)
#define DOMAIN_ALIAS_RID_POWER_USERS  (0x00000223L)

#define DOMAIN_ALIAS_RID_ACCOUNT_OPS  (0x00000224L)
#define DOMAIN_ALIAS_RID_SYSTEM_OPS  (0x00000225L)
#define DOMAIN_ALIAS_RID_PRINT_OPS  (0x00000226L)
#define DOMAIN_ALIAS_RID_BACKUP_OPS  (0x00000227L)

#define DOMAIN_ALIAS_RID_REPLICATOR  (0x00000228L)
#define DOMAIN_ALIAS_RID_RAS_SERVERS  (0x00000229L)
#define DOMAIN_ALIAS_RID_PREW2KCOMPACCESS  (0x0000022AL)
#define DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS  (0x0000022BL)
#define DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS  (0x0000022CL)
#define DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS (0x0000022DL)

#define DOMAIN_ALIAS_RID_MONITORING_USERS  (0x0000022EL)
#define DOMAIN_ALIAS_RID_LOGGING_USERS  (0x0000022FL)
#define DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS  (0x00000230L)
#define DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS  (0x00000231L)
#define DOMAIN_ALIAS_RID_DCOM_USERS  (0x00000232L)
#define DOMAIN_ALIAS_RID_IUSERS  (0x00000238L)
#define DOMAIN_ALIAS_RID_CRYPTO_OPERATORS  (0x00000239L)
#define DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP  (0x0000023BL)
#define DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP (0x0000023CL)
#define DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP  (0x0000023DL)
#define DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP  (0x0000023EL)
#define DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS  (0x0000023FL)
#define DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS  (0x00000240L)
#define DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS  (0x00000241L)
#define DOMAIN_ALIAS_RID_HYPER_V_ADMINS  (0x00000242L)
#define DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS  (0x00000243L)
#define DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS  (0x00000244L)
#define DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT  (0x00000245L)
#define DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS  (0x00000246L)

#define SECURITY_APP_PACKAGE_AUTHORITY  {0,0,0,0,0,15}

#define SECURITY_APP_PACKAGE_BASE_RID  (0x00000002L)
#define SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT  (2L)
#define SECURITY_APP_PACKAGE_RID_COUNT  (8L)
#define SECURITY_CAPABILITY_BASE_RID  (0x00000003L)
#define SECURITY_CAPABILITY_APP_RID  (0x000000400)
#define SECURITY_BUILTIN_CAPABILITY_RID_COUNT  (2L)
#define SECURITY_CAPABILITY_RID_COUNT  (5L)
#define SECURITY_PARENT_PACKAGE_RID_COUNT  (SECURITY_APP_PACKAGE_RID_COUNT)
#define SECURITY_CHILD_PACKAGE_RID_COUNT  (12L)

#define SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE  (0x00000001L)
#define SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE  (0x00000002L)

#define SECURITY_CAPABILITY_INTERNET_CLIENT  (0x00000001L)
#define SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER  (0x00000002L)
#define SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER  (0x00000003L)
#define SECURITY_CAPABILITY_PICTURES_LIBRARY  (0x00000004L)
#define SECURITY_CAPABILITY_VIDEOS_LIBRARY  (0x00000005L)
#define SECURITY_CAPABILITY_MUSIC_LIBRARY  (0x00000006L)
#define SECURITY_CAPABILITY_DOCUMENTS_LIBRARY  (0x00000007L)
#define SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION  (0x00000008L)
#define SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES  (0x00000009L)
#define SECURITY_CAPABILITY_REMOVABLE_STORAGE  (0x0000000AL)
#define SECURITY_CAPABILITY_APPOINTMENTS  (0x0000000BL)
#define SECURITY_CAPABILITY_CONTACTS  (0x0000000CL)

#define SECURITY_CAPABILITY_INTERNET_EXPLORER  (0x00001000L)

#define SECURITY_MANDATORY_LABEL_AUTHORITY  {0,0,0,0,0,16}
#define SECURITY_MANDATORY_UNTRUSTED_RID  (0x00000000L)
#define SECURITY_MANDATORY_LOW_RID  (0x00001000L)
#define SECURITY_MANDATORY_MEDIUM_RID  (0x00002000L)
#define SECURITY_MANDATORY_MEDIUM_PLUS_RID  (SECURITY_MANDATORY_MEDIUM_RID + 0x100)
#define SECURITY_MANDATORY_HIGH_RID  (0x00003000L)
#define SECURITY_MANDATORY_SYSTEM_RID  (0x00004000L)
#define SECURITY_MANDATORY_PROTECTED_PROCESS_RID  (0x00005000L)

#define SECURITY_MANDATORY_MAXIMUM_USER_RID  SECURITY_MANDATORY_SYSTEM_RID

#define MANDATORY_LEVEL_TO_MANDATORY_RID(IL)  (IL * 0x1000)

#define SECURITY_SCOPED_POLICY_ID_AUTHORITY  {0,0,0,0,0,17}

#define SECURITY_AUTHENTICATION_AUTHORITY  {0,0,0,0,0,18}
#define SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT  (1L)
#define SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID  (0x00000001L)
#define SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID  (0x00000002L)
#define SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID  (0x00000003L)
#define SECURITY_AUTHENTICATION_KEY_TRUST_RID  (0x00000004L)
#define SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID  (0x00000005L)
#define SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID  (0x00000006L)

#define SECURITY_PROCESS_TRUST_AUTHORITY  {0,0,0,0,0,19}
#define SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT  (2L)

#define SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID  (0x00000400L)
#define SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID  (0x00000200L)
#define SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID  (0x00000000L)

#define SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID  (0x00002000L)
#define SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID  (0x00001000L)
#define SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID  (0x00000000L)

#define SECURITY_TRUSTED_INSTALLER_RID1 956008885
#define SECURITY_TRUSTED_INSTALLER_RID2 3418522649
#define SECURITY_TRUSTED_INSTALLER_RID3 1831038044
#define SECURITY_TRUSTED_INSTALLER_RID4 1853292631
#define SECURITY_TRUSTED_INSTALLER_RID5 2271478464

typedef enum {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
} WELL_KNOWN_SID_TYPE;

#define SYSTEM_LUID  { 0x3e7, 0x0 }
#define ANONYMOUS_LOGON_LUID  { 0x3e6, 0x0 }
#define LOCALSERVICE_LUID  { 0x3e5, 0x0 }
#define NETWORKSERVICE_LUID  { 0x3e4, 0x0 }
#define IUSER_LUID  { 0x3e3, 0x0 }

#define SE_GROUP_MANDATORY  (0x00000001L)
#define SE_GROUP_ENABLED_BY_DEFAULT  (0x00000002L)
#define SE_GROUP_ENABLED  (0x00000004L)
#define SE_GROUP_OWNER  (0x00000008L)
#define SE_GROUP_USE_FOR_DENY_ONLY  (0x00000010L)
#define SE_GROUP_INTEGRITY  (0x00000020L)
#define SE_GROUP_INTEGRITY_ENABLED  (0x00000040L)
#define SE_GROUP_LOGON_ID  (0xC0000000L)
#define SE_GROUP_RESOURCE  (0x20000000L)

#define SE_GROUP_VALID_ATTRIBUTES  (SE_GROUP_MANDATORY  | \
  SE_GROUP_ENABLED_BY_DEFAULT | \
  SE_GROUP_ENABLED  | \
  SE_GROUP_OWNER  | \
  SE_GROUP_USE_FOR_DENY_ONLY  | \
  SE_GROUP_LOGON_ID  | \
  SE_GROUP_RESOURCE  | \
  SE_GROUP_INTEGRITY  | \
  SE_GROUP_INTEGRITY_ENABLED)

#define ACL_REVISION  (2)
#define ACL_REVISION_DS  (4)

#define ACL_REVISION1  (1)
#define MIN_ACL_REVISION ACL_REVISION2
#define ACL_REVISION2  (2)
#define ACL_REVISION3  (3)
#define ACL_REVISION4  (4)
#define MAX_ACL_REVISION ACL_REVISION4

typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;

typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;

#define ACCESS_MIN_MS_ACE_TYPE  (0x0)
#define ACCESS_ALLOWED_ACE_TYPE  (0x0)
#define ACCESS_DENIED_ACE_TYPE  (0x1)
#define SYSTEM_AUDIT_ACE_TYPE  (0x2)
#define SYSTEM_ALARM_ACE_TYPE  (0x3)
#define ACCESS_MAX_MS_V2_ACE_TYPE  (0x3)

#define ACCESS_ALLOWED_COMPOUND_ACE_TYPE  (0x4)
#define ACCESS_MAX_MS_V3_ACE_TYPE  (0x4)

#define ACCESS_MIN_MS_OBJECT_ACE_TYPE  (0x5)
#define ACCESS_ALLOWED_OBJECT_ACE_TYPE  (0x5)
#define ACCESS_DENIED_OBJECT_ACE_TYPE  (0x6)
#define SYSTEM_AUDIT_OBJECT_ACE_TYPE  (0x7)
#define SYSTEM_ALARM_OBJECT_ACE_TYPE  (0x8)
#define ACCESS_MAX_MS_OBJECT_ACE_TYPE  (0x8)

#define ACCESS_MAX_MS_V4_ACE_TYPE  (0x8)
#define ACCESS_MAX_MS_ACE_TYPE  (0x8)

#define ACCESS_ALLOWED_CALLBACK_ACE_TYPE  (0x9)
#define ACCESS_DENIED_CALLBACK_ACE_TYPE  (0xA)
#define ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE (0xB)
#define ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE  (0xC)
#define SYSTEM_AUDIT_CALLBACK_ACE_TYPE  (0xD)
#define SYSTEM_ALARM_CALLBACK_ACE_TYPE  (0xE)
#define SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE  (0xF)
#define SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE  (0x10)

#define SYSTEM_MANDATORY_LABEL_ACE_TYPE  (0x11)
#define SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE  (0x12)
#define SYSTEM_SCOPED_POLICY_ID_ACE_TYPE  (0x13)
#define SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE  (0x14)
#define ACCESS_MAX_MS_V5_ACE_TYPE  (0x14)

#define OBJECT_INHERIT_ACE  (0x1)
#define CONTAINER_INHERIT_ACE  (0x2)
#define NO_PROPAGATE_INHERIT_ACE  (0x4)
#define INHERIT_ONLY_ACE  (0x8)
#define INHERITED_ACE  (0x10)
#define VALID_INHERIT_FLAGS  (0x1F)

#define SUCCESSFUL_ACCESS_ACE_FLAG  (0x40)
#define FAILED_ACCESS_ACE_FLAG  (0x80)

typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

#define SYSTEM_MANDATORY_LABEL_NO_WRITE_UP  0x1
#define SYSTEM_MANDATORY_LABEL_NO_READ_UP  0x2
#define SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP  0x4

#define SYSTEM_MANDATORY_LABEL_VALID_MASK  (SYSTEM_MANDATORY_LABEL_NO_WRITE_UP | \
  SYSTEM_MANDATORY_LABEL_NO_READ_UP  | \
  SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP)

#define SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK   0x00ffffff
#define SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK  0xffffffff

typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;

#define ACE_OBJECT_TYPE_PRESENT  0x1
#define ACE_INHERITED_OBJECT_TYPE_PRESENT  0x2

typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;

typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

#define SECURITY_DESCRIPTOR_REVISION  (1)
#define SECURITY_DESCRIPTOR_REVISION1  (1)

#define SECURITY_DESCRIPTOR_MIN_LENGTH  (sizeof(SECURITY_DESCRIPTOR))

typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

#define SE_OWNER_DEFAULTED  (0x0001)
#define SE_GROUP_DEFAULTED  (0x0002)
#define SE_DACL_PRESENT  (0x0004)
#define SE_DACL_DEFAULTED  (0x0008)
#define SE_SACL_PRESENT  (0x0010)
#define SE_SACL_DEFAULTED  (0x0020)
#define SE_DACL_AUTO_INHERIT_REQ  (0x0100)
#define SE_SACL_AUTO_INHERIT_REQ  (0x0200)
#define SE_DACL_AUTO_INHERITED  (0x0400)
#define SE_SACL_AUTO_INHERITED  (0x0800)
#define SE_DACL_PROTECTED  (0x1000)
#define SE_SACL_PROTECTED  (0x2000)
#define SE_RM_CONTROL_VALID  (0x4000)
#define SE_SELF_RELATIVE  (0x8000)

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;

typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;

#define ACCESS_OBJECT_GUID  0
#define ACCESS_PROPERTY_SET_GUID 1
#define ACCESS_PROPERTY_GUID  2

#define ACCESS_MAX_LEVEL  4

typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;

#define AUDIT_ALLOW_NO_PRIVILEGE 0x1

#define ACCESS_DS_SOURCE_A "DS"
#define ACCESS_DS_SOURCE_W L"DS"
#define ACCESS_DS_OBJECT_TYPE_NAME_A "Directory Service Object"
#define ACCESS_DS_OBJECT_TYPE_NAME_W L"Directory Service Object"

#define SE_PRIVILEGE_ENABLED_BY_DEFAULT (0x00000001L)
#define SE_PRIVILEGE_ENABLED  (0x00000002L)
#define SE_PRIVILEGE_REMOVED  (0X00000004L)
#define SE_PRIVILEGE_USED_FOR_ACCESS  (0x80000000L)

#define SE_PRIVILEGE_VALID_ATTRIBUTES  (SE_PRIVILEGE_ENABLED_BY_DEFAULT | \
  SE_PRIVILEGE_ENABLED  | \
  SE_PRIVILEGE_REMOVED  | \
  SE_PRIVILEGE_USED_FOR_ACCESS)

#define PRIVILEGE_SET_ALL_NECESSARY  (1)

typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[ANYSIZE_ARRAY];
} PRIVILEGE_SET, *PPRIVILEGE_SET;

#define ACCESS_REASON_TYPE_MASK  0xffff0000
#define ACCESS_REASON_DATA_MASK  0x0000ffff

#define ACCESS_REASON_STAGING_MASK  0x80000000
#define ACCESS_REASON_EXDATA_MASK   0x7f000000

typedef enum _ACCESS_REASON_TYPE {
    AccessReasonNone = 0x00000000,
    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,
    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,
    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,
    AccessReasonNotGrantedToAppContainer = 0x00070000,
    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,
    AccessReasonIntegrityLevel = 0x00300000,
    AccessReasonOwnership = 0x00400000,
    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,
    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,
    AccessReasonTrustLabel = 0x00900000
} ACCESS_REASON_TYPE;

typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS {
    ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;

#define SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE  0x00000001
#define SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE  0x00000002
#define SE_SECURITY_DESCRIPTOR_VALID_FLAGS  0x00000003

typedef struct _SE_SECURITY_DESCRIPTOR {
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST {
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;

typedef struct _SE_ACCESS_REPLY {
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET *Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;

#define SE_CREATE_TOKEN_NAME  TEXT("SeCreateTokenPrivilege")
#define SE_ASSIGNPRIMARYTOKEN_NAME  TEXT("SeAssignPrimaryTokenPrivilege")
#define SE_LOCK_MEMORY_NAME  TEXT("SeLockMemoryPrivilege")
#define SE_INCREASE_QUOTA_NAME  TEXT("SeIncreaseQuotaPrivilege")
#define SE_UNSOLICITED_INPUT_NAME  TEXT("SeUnsolicitedInputPrivilege")
#define SE_MACHINE_ACCOUNT_NAME  TEXT("SeMachineAccountPrivilege")
#define SE_TCB_NAME  TEXT("SeTcbPrivilege")
#define SE_SECURITY_NAME  TEXT("SeSecurityPrivilege")
#define SE_TAKE_OWNERSHIP_NAME  TEXT("SeTakeOwnershipPrivilege")
#define SE_LOAD_DRIVER_NAME  TEXT("SeLoadDriverPrivilege")
#define SE_SYSTEM_PROFILE_NAME  TEXT("SeSystemProfilePrivilege")
#define SE_SYSTEMTIME_NAME  TEXT("SeSystemtimePrivilege")
#define SE_PROF_SINGLE_PROCESS_NAME  TEXT("SeProfileSingleProcessPrivilege")
#define SE_INC_BASE_PRIORITY_NAME  TEXT("SeIncreaseBasePriorityPrivilege")
#define SE_CREATE_PAGEFILE_NAME  TEXT("SeCreatePagefilePrivilege")
#define SE_CREATE_PERMANENT_NAME  TEXT("SeCreatePermanentPrivilege")
#define SE_BACKUP_NAME  TEXT("SeBackupPrivilege")
#define SE_RESTORE_NAME  TEXT("SeRestorePrivilege")
#define SE_SHUTDOWN_NAME  TEXT("SeShutdownPrivilege")
#define SE_DEBUG_NAME  TEXT("SeDebugPrivilege")
#define SE_AUDIT_NAME  TEXT("SeAuditPrivilege")
#define SE_SYSTEM_ENVIRONMENT_NAME  TEXT("SeSystemEnvironmentPrivilege")
#define SE_CHANGE_NOTIFY_NAME  TEXT("SeChangeNotifyPrivilege")
#define SE_REMOTE_SHUTDOWN_NAME  TEXT("SeRemoteShutdownPrivilege")
#define SE_UNDOCK_NAME  TEXT("SeUndockPrivilege")
#define SE_SYNC_AGENT_NAME  TEXT("SeSyncAgentPrivilege")
#define SE_ENABLE_DELEGATION_NAME  TEXT("SeEnableDelegationPrivilege")
#define SE_MANAGE_VOLUME_NAME  TEXT("SeManageVolumePrivilege")
#define SE_IMPERSONATE_NAME  TEXT("SeImpersonatePrivilege")
#define SE_CREATE_GLOBAL_NAME  TEXT("SeCreateGlobalPrivilege")
#define SE_TRUSTED_CREDMAN_ACCESS_NAME  TEXT("SeTrustedCredManAccessPrivilege")
#define SE_RELABEL_NAME  TEXT("SeRelabelPrivilege")
#define SE_INC_WORKING_SET_NAME  TEXT("SeIncreaseWorkingSetPrivilege")
#define SE_TIME_ZONE_NAME  TEXT("SeTimeZonePrivilege")
#define SE_CREATE_SYMBOLIC_LINK_NAME  TEXT("SeCreateSymbolicLinkPrivilege")
#define SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME  TEXT("SeDelegateSessionUserImpersonatePrivilege")

#define SE_ACTIVATE_AS_USER_CAPABILITY  L"activateAsUser"
#define SE_CONSTRAINED_IMPERSONATION_CAPABILITY  L"constrainedImpersonation"
#define SE_SESSION_IMPERSONATION_CAPABILITY  L"sessionImpersonation"
#define SE_MUMA_CAPABILITY  L"muma"

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

#define SECURITY_MAX_IMPERSONATION_LEVEL SecurityDelegation
#define SECURITY_MIN_IMPERSONATION_LEVEL SecurityAnonymous
#define DEFAULT_IMPERSONATION_LEVEL SecurityImpersonation
#define VALID_IMPERSONATION_LEVEL(L)  (((L) >= SECURITY_MIN_IMPERSONATION_LEVEL) && ((L) <= SECURITY_MAX_IMPERSONATION_LEVEL))

#define TOKEN_ASSIGN_PRIMARY  (0x0001)
#define TOKEN_DUPLICATE  (0x0002)
#define TOKEN_IMPERSONATE  (0x0004)
#define TOKEN_QUERY  (0x0008)
#define TOKEN_QUERY_SOURCE  (0x0010)
#define TOKEN_ADJUST_PRIVILEGES (0x0020)
#define TOKEN_ADJUST_GROUPS  (0x0040)
#define TOKEN_ADJUST_DEFAULT  (0x0080)
#define TOKEN_ADJUST_SESSIONID  (0x0100)

#define TOKEN_ALL_ACCESS_P (STANDARD_RIGHTS_REQUIRED  |\
  TOKEN_ASSIGN_PRIMARY  |\
  TOKEN_DUPLICATE  |\
  TOKEN_IMPERSONATE  |\
  TOKEN_QUERY  |\
  TOKEN_QUERY_SOURCE  |\
  TOKEN_ADJUST_PRIVILEGES  |\
  TOKEN_ADJUST_GROUPS  |\
  TOKEN_ADJUST_DEFAULT )

#if ((defined(_WIN32_WINNT) && (_WIN32_WINNT > 0x0400)) || (!defined(_WIN32_WINNT)))
#define TOKEN_ALL_ACCESS  (TOKEN_ALL_ACCESS_P |\
  TOKEN_ADJUST_SESSIONID )
#else
#define TOKEN_ALL_ACCESS  (TOKEN_ALL_ACCESS_P)
#endif

#define TOKEN_READ  (STANDARD_RIGHTS_READ  |\
  TOKEN_QUERY)


#define TOKEN_WRITE  (STANDARD_RIGHTS_WRITE  |\
  TOKEN_ADJUST_PRIVILEGES  |\
  TOKEN_ADJUST_GROUPS  |\
  TOKEN_ADJUST_DEFAULT)

#define TOKEN_EXECUTE  (STANDARD_RIGHTS_EXECUTE)

#define TOKEN_TRUST_CONSTRAINT_MASK  (STANDARD_RIGHTS_READ|TOKEN_QUERY|TOKEN_QUERY_SOURCE)

#if (NTDDI_VERSION >= NTDDI_WIN8)
#define TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 (TOKEN_QUERY | TOKEN_QUERY_SOURCE)
#define TOKEN_ACCESS_PSEUDO_HANDLE TOKEN_ACCESS_PSEUDO_HANDLE_WIN8
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
} TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;

typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _SE_TOKEN_USER {
    union {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } DUMMYUNIONNAME;
    union {
        SID Sid;
        BYTE  Buffer[SECURITY_MAX_SID_SIZE];
    } DUMMYUNIONNAME2;
} SE_TOKEN_USER, PSE_TOKEN_USER;

#define TOKEN_USER_MAX_SIZE  (sizeof(TOKEN_USER) + SECURITY_MAX_SID_SIZE)

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[ANYSIZE_ARRAY];
} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[ANYSIZE_ARRAY];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;

typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;

#define TOKEN_OWNER_MAX_SIZE (sizeof(TOKEN_OWNER) + SECURITY_MAX_SID_SIZE)

typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;

typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;

#define TOKEN_MANDATORY_POLICY_OFF  0x0
#define TOKEN_MANDATORY_POLICY_NO_WRITE_UP  0x1
#define TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN 0x2

#define TOKEN_MANDATORY_POLICY_VALID_MASK  (TOKEN_MANDATORY_POLICY_NO_WRITE_UP|\
  TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN)

#define TOKEN_INTEGRITY_LEVEL_MAX_SIZE  ((((DWORD)(sizeof(TOKEN_MANDATORY_LABEL)) + sizeof(PVOID) - 1) & ~(sizeof(PVOID)-1)) + SECURITY_MAX_SID_SIZE)

typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;

#define POLICY_AUDIT_SUBCATEGORY_COUNT (59)

typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[((POLICY_AUDIT_SUBCATEGORY_COUNT) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;

#define TOKEN_SOURCE_LENGTH 8

typedef struct _TOKEN_SOURCE {
    CHAR SourceName[TOKEN_SOURCE_LENGTH];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;

typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;

typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession;
} TOKEN_ORIGIN, *PTOKEN_ORIGIN;

typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

#define TOKEN_APPCONTAINER_SID_MAX_SIZE  (sizeof(TOKEN_APPCONTAINER_INFORMATION) + SECURITY_MAX_SID_SIZE)

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;

#define CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID   0x00
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64     0x01
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64    0x02
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING    0x03

typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

#define CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN      0x04
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_SID       0x05
#define CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN   0x06

typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;
    DWORD   ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;

#define CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING  0x10

#define CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE  0x0001
#define CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE  0x0002
#define CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY  0x0004
#define CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT  0x0008
#define CLAIM_SECURITY_ATTRIBUTE_DISABLED  0x0010
#define CLAIM_SECURITY_ATTRIBUTE_MANDATORY  0x0020

#define CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS  ( \
    CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE | \
    CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE | \
    CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY | \
    CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT | \
    CLAIM_SECURITY_ATTRIBUTE_DISABLED | \
    CLAIM_SECURITY_ATTRIBUTE_MANDATORY)

#define CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS   0xFFFF0000

typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
    PWSTR Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;
    union {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    }
    Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
    DWORD Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;
    union {
        DWORD pInt64[ANYSIZE_ARRAY];
        DWORD pUint64[ANYSIZE_ARRAY];
        DWORD ppString[ANYSIZE_ARRAY];
        DWORD pFqbn[ANYSIZE_ARRAY];
        DWORD pOctetString[ANYSIZE_ARRAY];
    }
    Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;

#define CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1  1

#define CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION  CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1

typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
    WORD Version;
    WORD Reserved;
    DWORD AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    }
    Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;

#define SECURITY_DYNAMIC_TRACKING  (TRUE)
#define SECURITY_STATIC_TRACKING  (FALSE)

typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE, *PSECURITY_CONTEXT_TRACKING_MODE;

typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;

typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;

#define DISABLE_MAX_PRIVILEGE  0x1 
#define SANDBOX_INERT  0x2 
#define LUA_TOKEN  0x4 
#define WRITE_RESTRICTED  0x8 

typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;

#define OWNER_SECURITY_INFORMATION  (0x00000001L)
#define GROUP_SECURITY_INFORMATION  (0x00000002L)
#define DACL_SECURITY_INFORMATION  (0x00000004L)
#define SACL_SECURITY_INFORMATION  (0x00000008L)
#define LABEL_SECURITY_INFORMATION  (0x00000010L)
#define ATTRIBUTE_SECURITY_INFORMATION  (0x00000020L)
#define SCOPE_SECURITY_INFORMATION  (0x00000040L)
#define PROCESS_TRUST_LABEL_SECURITY_INFORMATION  (0x00000080L) 
#define BACKUP_SECURITY_INFORMATION  (0x00010000L)

#define PROTECTED_DACL_SECURITY_INFORMATION  (0x80000000L)
#define PROTECTED_SACL_SECURITY_INFORMATION  (0x40000000L)
#define UNPROTECTED_DACL_SECURITY_INFORMATION  (0x20000000L)
#define UNPROTECTED_SACL_SECURITY_INFORMATION  (0x10000000L)

typedef BYTE SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;

#define SE_SIGNING_LEVEL_UNCHECKED         0x00000000
#define SE_SIGNING_LEVEL_UNSIGNED          0x00000001
#define SE_SIGNING_LEVEL_ENTERPRISE        0x00000002
#define SE_SIGNING_LEVEL_CUSTOM_1          0x00000003
#define SE_SIGNING_LEVEL_AUTHENTICODE      0x00000004
#define SE_SIGNING_LEVEL_CUSTOM_2          0x00000005
#define SE_SIGNING_LEVEL_STORE             0x00000006
#define SE_SIGNING_LEVEL_CUSTOM_3          0x00000007
#define SE_SIGNING_LEVEL_ANTIMALWARE       SE_SIGNING_LEVEL_CUSTOM_3
#define SE_SIGNING_LEVEL_MICROSOFT         0x00000008
#define SE_SIGNING_LEVEL_CUSTOM_4          0x00000009
#define SE_SIGNING_LEVEL_CUSTOM_5          0x0000000A
#define SE_SIGNING_LEVEL_DYNAMIC_CODEGEN   0x0000000B
#define SE_SIGNING_LEVEL_WINDOWS           0x0000000C
#define SE_SIGNING_LEVEL_CUSTOM_7          0x0000000D
#define SE_SIGNING_LEVEL_WINDOWS_TCB       0x0000000E
#define SE_SIGNING_LEVEL_CUSTOM_6          0x0000000F

typedef enum _SE_IMAGE_SIGNATURE_TYPE {
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded,
    SeImageSignatureCache,
    SeImageSignatureCatalogCached,
    SeImageSignatureCatalogNotCached,
    SeImageSignatureCatalogHint,
    SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;

typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;

#define SE_LEARNING_MODE_FLAG_PERMISSIVE  0x00000001

typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;

#define PROCESS_TERMINATE  (0x0001)
#define PROCESS_CREATE_THREAD  (0x0002)
#define PROCESS_SET_SESSIONID  (0x0004)
#define PROCESS_VM_OPERATION  (0x0008)
#define PROCESS_VM_READ  (0x0010)
#define PROCESS_VM_WRITE  (0x0020)
#define PROCESS_DUP_HANDLE  (0x0040)
#define PROCESS_CREATE_PROCESS  (0x0080)
#define PROCESS_SET_QUOTA  (0x0100)
#define PROCESS_SET_INFORMATION  (0x0200)
#define PROCESS_QUERY_INFORMATION  (0x0400)
#define PROCESS_SUSPEND_RESUME  (0x0800)
#define PROCESS_QUERY_LIMITED_INFORMATION  (0x1000)
#define PROCESS_SET_LIMITED_INFORMATION  (0x2000)  
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define PROCESS_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0xFFFF)
#else /* NTDDI_VERSION < NTDDI_VISTA */
#define PROCESS_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0xFFF)
#endif /* NTDDI_VERSION < NTDDI_VISTA */

#define THREAD_TERMINATE  (0x0001)  
#define THREAD_SUSPEND_RESUME  (0x0002)  
#define THREAD_GET_CONTEXT  (0x0008)  
#define THREAD_SET_CONTEXT  (0x0010)  
#define THREAD_QUERY_INFORMATION  (0x0040)  
#define THREAD_SET_INFORMATION  (0x0020)  
#define THREAD_SET_THREAD_TOKEN  (0x0080)
#define THREAD_IMPERSONATE  (0x0100)
#define THREAD_DIRECT_IMPERSONATION  (0x0200)

#define THREAD_SET_LIMITED_INFORMATION  (0x0400)  
#define THREAD_QUERY_LIMITED_INFORMATION (0x0800)  
#define THREAD_RESUME  (0x1000)
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define THREAD_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0xFFFF)
#else /* NTDDI_VERSION < NTDDI_VISTA */
#define THREAD_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3FF)
#endif /* NTDDI_VERSION < NTDDI_VISTA */
#define JOB_OBJECT_ASSIGN_PROCESS  (0x0001)
#define JOB_OBJECT_SET_ATTRIBUTES  (0x0002)
#define JOB_OBJECT_QUERY  (0x0004)
#define JOB_OBJECT_TERMINATE  (0x0008)
#define JOB_OBJECT_SET_SECURITY_ATTRIBUTES  (0x0010)
#define JOB_OBJECT_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x1F)

typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;

#define FLS_MAXIMUM_AVAILABLE  128
#define TLS_MINIMUM_AVAILABLE  64

typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
#if defined(_MSC_EXTENSIONS)
    union {
        PVOID FiberData;
        DWORD Version;
    };
#else /* !_MSC_EXTENSIONS */
    PVOID FiberData;
#endif /* !_MSC_EXTENSIONS */
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;

typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
#if defined(_MSC_EXTENSIONS)
    union {
        DWORD FiberData;
        DWORD Version;
    };
#else /* !_MSC_EXTENSIONS */
    DWORD FiberData;
#endif /* !_MSC_EXTENSIONS */
    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
#if defined(_MSC_EXTENSIONS)
    union {
        DWORD64 FiberData;
        DWORD Version;
    };
#else /* !_MSC_EXTENSIONS */
    DWORD64 FiberData;
#endif /* !_MSC_EXTENSIONS */
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;

#define THREAD_DYNAMIC_CODE_ALLOW  1

#define THREAD_BASE_PRIORITY_LOWRT  15
#define THREAD_BASE_PRIORITY_MAX  2
#define THREAD_BASE_PRIORITY_MIN  (-2)
#define THREAD_BASE_PRIORITY_IDLE  (-15)

typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
    PVOID UmsContext;
    PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _WOW64_ARCHITECTURE_INFORMATION {
    DWORD Machine: 16;
    DWORD KernelMode: 1;
    DWORD UserMode: 1;
    DWORD Native: 1;
    DWORD Process: 1;
    DWORD ReservedZero0: 12;
} WOW64_ARCHITECTURE_INFORMATION;

#define MEMORY_PRIORITY_LOWEST  0
#define MEMORY_PRIORITY_VERY_LOW  1
#define MEMORY_PRIORITY_LOW  2
#define MEMORY_PRIORITY_MEDIUM  3
#define MEMORY_PRIORITY_BELOW_NORMAL  4
#define MEMORY_PRIORITY_NORMAL  5

#define DYNAMIC_EH_CONTINUATION_TARGET_ADD  (0x00000001)
#define DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED  (0x00000002)

typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
    ULONG_PTR TargetAddress;
    ULONG_PTR Flags;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET;

typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
    WORD NumberOfTargets;
    WORD Reserved;
    DWORD Reserved2;
    PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;

#define QUOTA_LIMITS_HARDWS_MIN_ENABLE   0x00000001
#define QUOTA_LIMITS_HARDWS_MIN_DISABLE  0x00000002
#define QUOTA_LIMITS_HARDWS_MAX_ENABLE   0x00000004
#define QUOTA_LIMITS_HARDWS_MAX_DISABLE  0x00000008
#define QUOTA_LIMITS_USE_DEFAULT_LIMITS  0x00000010

typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent:7;
        DWORD Reserved0:25;
    } DUMMYSTRUCTNAME;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;

#define MAX_HW_COUNTERS  16
#define THREAD_PROFILING_FLAG_DISPATCH  0x00000001

typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;

typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization: 1;
            DWORD EnableForceRelocateImages: 1;
            DWORD EnableHighEntropy: 1;
            DWORD DisallowStrippedImages: 1;
            DWORD ReservedFlags: 28;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable: 1;
            DWORD DisableAtlThunkEmulation: 1;
            DWORD ReservedFlags: 30;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference: 1;
            DWORD HandleExceptionsPermanentlyEnabled: 1;
            DWORD ReservedFlags: 30;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls: 1;
            DWORD ReservedFlags: 31;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints: 1;
            DWORD ReservedFlags: 31;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode: 1;
            DWORD AllowThreadOptOut: 1;
            DWORD ReservedFlags: 30;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableControlFlowGuard: 1;
            DWORD ReservedFlags: 31;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly: 1;
            DWORD StoreSignedOnly: 1;
            DWORD MitigationOptIn: 1;
            DWORD ReservedFlags: 29;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableNonSystemFonts: 1;
            DWORD AuditNonSystemFontLoading: 1;
            DWORD ReservedFlags: 30;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD NoRemoteImages: 1;
            DWORD NoLowMandatoryLabelImages: 1;
            DWORD PreferSystem32Images: 1;
            DWORD ReservedFlags: 29;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags;
    HANDLE JobToken;
    PTOKEN_GROUPS SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL, *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } DUMMYUNIONNAME;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } DUMMYUNIONNAME2;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
    } DUMMYUNIONNAME3;
    DWORD LimitFlags;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } DUMMYUNIONNAME;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } DUMMYUNIONNAME2;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    } DUMMYUNIONNAME3;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
        struct {
            WORD MinRate;
            WORD MaxRate;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;

DEFINE_ENUM_FLAG_OPERATORS(JOB_OBJECT_NET_RATE_CONTROL_FLAGS)
C_ASSERT(JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS == (JOB_OBJECT_NET_RATE_CONTROL_ENABLE + JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH + JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG));

#define JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG  64

typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    DWORD64 MaxBandwidth;
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    BYTE  DscpTag;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION;

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = JOB_OBJECT_IO_RATE_CONTROL_ENABLE|JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;

DEFINE_ENUM_FLAG_OPERATORS(JOB_OBJECT_IO_RATE_CONTROL_FLAGS)

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;

typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;

typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
    ULONG_PTR IoCount;
    ULONGLONG TotalNonOverlappedQueueTime;
    ULONGLONG TotalNonOverlappedServiceTime;
    ULONGLONG TotalSize;
} JOBOBJECT_IO_ATTRIBUTION_STATS, *PJOBOBJECT_IO_ATTRIBUTION_STATS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
    DWORD ControlFlags;
    JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, *PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;

#define JOB_OBJECT_TERMINATE_AT_END_OF_JOB  0
#define JOB_OBJECT_POST_AT_END_OF_JOB  1

#define JOB_OBJECT_MSG_END_OF_JOB_TIME  1
#define JOB_OBJECT_MSG_END_OF_PROCESS_TIME  2
#define JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT  3
#define JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO  4
#define JOB_OBJECT_MSG_NEW_PROCESS  6
#define JOB_OBJECT_MSG_EXIT_PROCESS  7
#define JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS  8
#define JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT  9
#define JOB_OBJECT_MSG_JOB_MEMORY_LIMIT  10
#define JOB_OBJECT_MSG_NOTIFICATION_LIMIT  11
#define JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT  12
#define JOB_OBJECT_MSG_SILO_TERMINATED  13

#define JOB_OBJECT_MSG_MINIMUM 1
#define JOB_OBJECT_MSG_MAXIMUM 13

#define JOB_OBJECT_VALID_COMPLETION_FILTER \
    (((1UL << (JOB_OBJECT_MSG_MAXIMUM + 1)) - 1) - \
     ((1UL << JOB_OBJECT_MSG_MINIMUM) - 1))

#define JOB_OBJECT_LIMIT_WORKINGSET  0x00000001
#define JOB_OBJECT_LIMIT_PROCESS_TIME  0x00000002
#define JOB_OBJECT_LIMIT_JOB_TIME  0x00000004
#define JOB_OBJECT_LIMIT_ACTIVE_PROCESS  0x00000008
#define JOB_OBJECT_LIMIT_AFFINITY  0x00000010
#define JOB_OBJECT_LIMIT_PRIORITY_CLASS  0x00000020
#define JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME  0x00000040
#define JOB_OBJECT_LIMIT_SCHEDULING_CLASS  0x00000080

#define JOB_OBJECT_LIMIT_PROCESS_MEMORY  0x00000100
#define JOB_OBJECT_LIMIT_JOB_MEMORY  0x00000200
#define JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH  JOB_OBJECT_LIMIT_JOB_MEMORY
#define JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION 0x00000400
#define JOB_OBJECT_LIMIT_BREAKAWAY_OK  0x00000800
#define JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK  0x00001000
#define JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE  0x00002000
#define JOB_OBJECT_LIMIT_SUBSET_AFFINITY  0x00004000
#define JOB_OBJECT_LIMIT_JOB_MEMORY_LOW  0x00008000

#define JOB_OBJECT_LIMIT_JOB_READ_BYTES  0x00010000
#define JOB_OBJECT_LIMIT_JOB_WRITE_BYTES  0x00020000
#define JOB_OBJECT_LIMIT_RATE_CONTROL  0x00040000
#define JOB_OBJECT_LIMIT_CPU_RATE_CONTROL  JOB_OBJECT_LIMIT_RATE_CONTROL
#define JOB_OBJECT_LIMIT_IO_RATE_CONTROL  0x00080000
#define JOB_OBJECT_LIMIT_NET_RATE_CONTROL  0x00100000

#define JOB_OBJECT_LIMIT_VALID_FLAGS  0x0007ffff
#define JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS  0x000000ff
#define JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS  0x00007fff
#define JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS \
    (JOB_OBJECT_LIMIT_JOB_READ_BYTES | \
     JOB_OBJECT_LIMIT_JOB_WRITE_BYTES | \
     JOB_OBJECT_LIMIT_JOB_TIME | \
     JOB_OBJECT_LIMIT_JOB_MEMORY_LOW | \
     JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH | \
     JOB_OBJECT_LIMIT_CPU_RATE_CONTROL | \
     JOB_OBJECT_LIMIT_IO_RATE_CONTROL | \
     JOB_OBJECT_LIMIT_NET_RATE_CONTROL)

#define JOB_OBJECT_UILIMIT_NONE  0x00000000

#define JOB_OBJECT_UILIMIT_HANDLES  0x00000001
#define JOB_OBJECT_UILIMIT_READCLIPBOARD  0x00000002
#define JOB_OBJECT_UILIMIT_WRITECLIPBOARD  0x00000004
#define JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS 0x00000008
#define JOB_OBJECT_UILIMIT_DISPLAYSETTINGS  0x00000010
#define JOB_OBJECT_UILIMIT_GLOBALATOMS  0x00000020
#define JOB_OBJECT_UILIMIT_DESKTOP  0x00000040
#define JOB_OBJECT_UILIMIT_EXITWINDOWS  0x00000080

#define JOB_OBJECT_UILIMIT_ALL  0x000000FF

#define JOB_OBJECT_UI_VALID_FLAGS  0x000000FF

#define JOB_OBJECT_SECURITY_NO_ADMIN  0x00000001
#define JOB_OBJECT_SECURITY_RESTRICTED_TOKEN  0x00000002
#define JOB_OBJECT_SECURITY_ONLY_TOKEN  0x00000004
#define JOB_OBJECT_SECURITY_FILTER_TOKENS  0x00000008

#define JOB_OBJECT_SECURITY_VALID_FLAGS  0x0000000f

#define JOB_OBJECT_CPU_RATE_CONTROL_ENABLE  0x1
#define JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED  0x2
#define JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP  0x4
#define JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY  0x8
#define JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE  0x10
#define JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS  0x1f

typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    JobObjectReserved10Information,
    JobObjectReserved11Information,
    JobObjectReserved12Information,
    JobObjectReserved13Information,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation,
    JobObjectNotificationLimitInformation2,
    JobObjectLimitViolationInformation2,
    JobObjectCreateSilo,
    JobObjectSiloBasicInformation,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information,
    JobObjectReserved17Information,
    JobObjectReserved18Information,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;

typedef struct _SILOOBJECT_BASIC_INFORMATION {
    DWORD SiloId;
    DWORD SiloParentId;
    DWORD NumberOfProcesses;
    BOOLEAN IsInServerSilo;
    BYTE Reserved[3];
} SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION;

typedef enum _SERVERSILO_STATE {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED,
    SERVERSILO_SHUTTING_DOWN,
    SERVERSILO_TERMINATING,
    SERVERSILO_TERMINATED,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef struct _SERVERSILO_BASIC_INFORMATION {
    DWORD ServiceSessionId;
    SERVERSILO_STATE State;
    DWORD ExitStatus;
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION;

typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;

#define EVENT_MODIFY_STATE  0x0002  
#define EVENT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3) 

#define MUTANT_QUERY_STATE  0x0001

#define MUTANT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|MUTANT_QUERY_STATE)

#define SEMAPHORE_MODIFY_STATE  0x0002  
#define SEMAPHORE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3) 

#define TIMER_QUERY_STATE  0x0001
#define TIMER_MODIFY_STATE  0x0002

#define TIMER_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|TIMER_QUERY_STATE|TIMER_MODIFY_STATE)

#define TIME_ZONE_ID_UNKNOWN  0
#define TIME_ZONE_ID_STANDARD 1
#define TIME_ZONE_ID_DAYLIGHT 2

typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;

#define LTP_PC_SMT 0x1

typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;

#define CACHE_FULLY_ASSOCIATIVE 0xFF

typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } DUMMYUNIONNAME;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE  EfficiencyClass;
    BYTE  Reserved[20];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[ANYSIZE_ARRAY];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[ANYSIZE_ARRAY];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } DUMMYUNIONNAME;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE;

#define SYSTEM_CPU_SET_INFORMATION_PARKED  0x1
#define SYSTEM_CPU_SET_INFORMATION_ALLOCATED  0x2
#define SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS  0x4
#define SYSTEM_CPU_SET_INFORMATION_REALTIME  0x8

struct _SYSTEM_CPU_SET_INFORMATION {
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union {
        struct {
            DWORD Id;
            WORD Group;
            BYTE LogicalProcessorIndex;
            BYTE CoreIndex;
            BYTE LastLevelCacheIndex;
            BYTE NumaNodeIndex;
            BYTE EfficiencyClass;
            union {
                BYTE  AllFlags;
                struct {
                    BYTE Parked: 1;
                    BYTE Allocated: 1;
                    BYTE AllocatedToTargetProcess: 1;
                    BYTE RealTime: 1;
                    BYTE ReservedFlags: 4;
                } DUMMYSTRUCTNAME;
            } DUMMYUNIONNAME2;
            DWORD Reserved;
            DWORD64 AllocationTag;
        } CpuSet;
    } DUMMYUNIONNAME;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;

typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;

#define PROCESSOR_INTEL_386  386
#define PROCESSOR_INTEL_486  486
#define PROCESSOR_INTEL_PENTIUM 586
#define PROCESSOR_INTEL_IA64  2200
#define PROCESSOR_AMD_X8664  8664
#define PROCESSOR_MIPS_R4000  4000  
#define PROCESSOR_ALPHA_21064  21064
#define PROCESSOR_PPC_601  601
#define PROCESSOR_PPC_603  603
#define PROCESSOR_PPC_604  604
#define PROCESSOR_PPC_620  620
#define PROCESSOR_HITACHI_SH3  10003  
#define PROCESSOR_HITACHI_SH3E  10004  
#define PROCESSOR_HITACHI_SH4  10005  
#define PROCESSOR_MOTOROLA_821  821  
#define PROCESSOR_SHx_SH3  103  
#define PROCESSOR_SHx_SH4  104  
#define PROCESSOR_STRONGARM  2577  
#define PROCESSOR_ARM720  1824  
#define PROCESSOR_ARM820  2080  
#define PROCESSOR_ARM920  2336  
#define PROCESSOR_ARM_7TDMI  70001  
#define PROCESSOR_OPTIL  0x494f  

#define PROCESSOR_ARCHITECTURE_INTEL  0
#define PROCESSOR_ARCHITECTURE_MIPS  1
#define PROCESSOR_ARCHITECTURE_ALPHA  2
#define PROCESSOR_ARCHITECTURE_PPC  3
#define PROCESSOR_ARCHITECTURE_SHX  4
#define PROCESSOR_ARCHITECTURE_ARM  5
#define PROCESSOR_ARCHITECTURE_IA64  6
#define PROCESSOR_ARCHITECTURE_ALPHA64  7
#define PROCESSOR_ARCHITECTURE_MSIL  8
#define PROCESSOR_ARCHITECTURE_AMD64  9
#define PROCESSOR_ARCHITECTURE_IA32_ON_WIN64  10
#define PROCESSOR_ARCHITECTURE_NEUTRAL  11
#define PROCESSOR_ARCHITECTURE_ARM64  12
#define PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64   13

#define PROCESSOR_ARCHITECTURE_UNKNOWN  0xFFFF

#define PF_FLOATING_POINT_PRECISION_ERRATA  0
#define PF_FLOATING_POINT_EMULATED  1
#define PF_COMPARE_EXCHANGE_DOUBLE  2
#define PF_MMX_INSTRUCTIONS_AVAILABLE  3
#define PF_PPC_MOVEMEM_64BIT_OK  4
#define PF_ALPHA_BYTE_INSTRUCTIONS  5
#define PF_XMMI_INSTRUCTIONS_AVAILABLE  6
#define PF_3DNOW_INSTRUCTIONS_AVAILABLE  7
#define PF_RDTSC_INSTRUCTION_AVAILABLE  8
#define PF_PAE_ENABLED  9
#define PF_XMMI64_INSTRUCTIONS_AVAILABLE  10
#define PF_SSE_DAZ_MODE_AVAILABLE  11
#define PF_NX_ENABLED  12
#define PF_SSE3_INSTRUCTIONS_AVAILABLE  13
#define PF_COMPARE_EXCHANGE128  14
#define PF_COMPARE64_EXCHANGE128  15
#define PF_CHANNELS_ENABLED  16
#define PF_XSAVE_ENABLED  17
#define PF_ARM_VFP_32_REGISTERS_AVAILABLE  18
#define PF_ARM_NEON_INSTRUCTIONS_AVAILABLE  19
#define PF_SECOND_LEVEL_ADDRESS_TRANSLATION  20
#define PF_VIRT_FIRMWARE_ENABLED  21
#define PF_RDWRFSGSBASE_AVAILABLE  22
#define PF_FASTFAIL_AVAILABLE  23
#define PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE  24
#define PF_ARM_64BIT_LOADSTORE_ATOMIC  25
#define PF_ARM_EXTERNAL_CACHE_AVAILABLE  26
#define PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE  27
#define PF_RDRAND_INSTRUCTION_AVAILABLE  28
#define PF_ARM_V8_INSTRUCTIONS_AVAILABLE  29
#define PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE  30
#define PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE  31
#define PF_RDTSCP_INSTRUCTION_AVAILABLE  32
#define PF_RDPID_INSTRUCTION_AVAILABLE  33
#define PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE  34
#define PF_MONITORX_INSTRUCTION_AVAILABLE  35

#define XSTATE_LEGACY_FLOATING_POINT  (0)
#define XSTATE_LEGACY_SSE  (1)
#define XSTATE_GSSE  (2)
#define XSTATE_AVX  (XSTATE_GSSE)
#define XSTATE_MPX_BNDREGS  (3)
#define XSTATE_MPX_BNDCSR  (4)
#define XSTATE_AVX512_KMASK  (5)
#define XSTATE_AVX512_ZMM_H  (6)
#define XSTATE_AVX512_ZMM  (7)
#define XSTATE_IPT  (8)
#define XSTATE_LWP  (62)
#define MAXIMUM_XSTATE_FEATURES  64

#define XSTATE_MASK_LEGACY_FLOATING_POINT  (1ULL << (XSTATE_LEGACY_FLOATING_POINT))
#define XSTATE_MASK_LEGACY_SSE  (1ULL << (XSTATE_LEGACY_SSE))
#define XSTATE_MASK_LEGACY  (XSTATE_MASK_LEGACY_FLOATING_POINT|XSTATE_MASK_LEGACY_SSE)
#define XSTATE_MASK_GSSE  (1ULL << (XSTATE_GSSE))
#define XSTATE_MASK_AVX  (XSTATE_MASK_GSSE)
#define XSTATE_MASK_MPX  ((1ULL << (XSTATE_MPX_BNDREGS))|(1ULL << (XSTATE_MPX_BNDCSR)))
#define XSTATE_MASK_AVX512  ((1ULL << (XSTATE_AVX512_KMASK))|(1ULL << (XSTATE_AVX512_ZMM_H))|(1ULL << (XSTATE_AVX512_ZMM)))
#define XSTATE_MASK_IPT  (1ULL << (XSTATE_IPT))
#define XSTATE_MASK_LWP  (1ULL << (XSTATE_LWP))
#define XSTATE_MASK_ALLOWED  (XSTATE_MASK_LEGACY|XSTATE_MASK_AVX|XSTATE_MASK_MPX|XSTATE_MASK_AVX512|XSTATE_MASK_IPT|XSTATE_MASK_LWP)
#define XSTATE_MASK_PERSISTENT  ((1ULL << (XSTATE_MPX_BNDCSR))|XSTATE_MASK_LWP)

#define XSTATE_COMPACTION_ENABLE  63
#define XSTATE_COMPACTION_ENABLE_MASK  (1LL << (XSTATE_COMPACTION_ENABLE))

#define XSTATE_ALIGN_BIT  1
#define XSTATE_ALIGN_MASK  (1LL << (XSTATE_ALIGN_BIT))

#define XSTATE_CONTROLFLAG_XSAVEOPT_MASK  (1)
#define XSTATE_CONTROLFLAG_XSAVEC_MASK    (2)
#define XSTATE_CONTROLFLAG_VALID_MASK     (XSTATE_CONTROLFLAG_XSAVEOPT_MASK|XSTATE_CONTROLFLAG_XSAVEC_MASK)

typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    DWORD64 EnabledFeatures;
    DWORD64 EnabledVolatileFeatures;
    DWORD Size;
    union {
        DWORD ControlFlags;
        struct {
            DWORD OptimizedSave: 1;
            DWORD CompactionEnabled: 1;
        };
    };
    XSTATE_FEATURE Features[MAXIMUM_XSTATE_FEATURES];
    DWORD64 EnabledSupervisorFeatures;
    DWORD64 AlignedFeatures;
    DWORD AllFeatureSize;
    DWORD AllFeatures[MAXIMUM_XSTATE_FEATURES];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;

typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct DECLSPEC_ALIGN (16) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;

#define CFG_CALL_TARGET_VALID  (0x00000001)
#define CFG_CALL_TARGET_PROCESSED  (0x00000002)

typedef struct _CFG_CALL_TARGET_INFO {
    ULONG_PTR Offset;
    ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO;

#define SECTION_QUERY  0x0001
#define SECTION_MAP_WRITE  0x0002
#define SECTION_MAP_READ  0x0004
#define SECTION_MAP_EXECUTE  0x0008
#define SECTION_EXTEND_SIZE  0x0010
#define SECTION_MAP_EXECUTE_EXPLICIT 0x0020 

#define SECTION_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SECTION_QUERY|SECTION_MAP_WRITE|SECTION_MAP_READ|SECTION_MAP_EXECUTE|SECTION_EXTEND_SIZE)

#define SESSION_QUERY_ACCESS  0x0001
#define SESSION_MODIFY_ACCESS 0x0002

#define SESSION_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SESSION_QUERY_ACCESS|SESSION_MODIFY_ACCESS)

#define MEMORY_PARTITION_QUERY_ACCESS  0x0001
#define MEMORY_PARTITION_MODIFY_ACCESS 0x0002

#define MEMORY_PARTITION_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|MEMORY_PARTITION_QUERY_ACCESS|MEMORY_PARTITION_MODIFY_ACCESS)

#define PAGE_NOACCESS  0x01
#define PAGE_READONLY  0x02
#define PAGE_READWRITE  0x04
#define PAGE_WRITECOPY  0x08
#define PAGE_EXECUTE  0x10
#define PAGE_EXECUTE_READ  0x20
#define PAGE_EXECUTE_READWRITE 0x40
#define PAGE_EXECUTE_WRITECOPY 0x80
#define PAGE_GUARD  0x100
#define PAGE_NOCACHE  0x200
#define PAGE_WRITECOMBINE  0x400
#define PAGE_REVERT_TO_FILE_MAP  0x80000000
#define PAGE_ENCLAVE_THREAD_CONTROL  0x80000000
#define PAGE_TARGETS_NO_UPDATE  0x40000000 
#define PAGE_TARGETS_INVALID  0x40000000
#define PAGE_ENCLAVE_UNVALIDATED  0x20000000
#define MEM_COMMIT  0x1000
#define MEM_RESERVE  0x2000
#define MEM_DECOMMIT  0x4000
#define MEM_RELEASE  0x8000
#define MEM_FREE  0x10000
#define MEM_PRIVATE  0x20000
#define MEM_MAPPED  0x40000
#define MEM_RESET  0x80000
#define MEM_TOP_DOWN  0x100000
#define MEM_WRITE_WATCH  0x200000
#define MEM_PHYSICAL  0x400000
#define MEM_ROTATE  0x800000
#define MEM_DIFFERENT_IMAGE_BASE_OK  0x800000
#define MEM_RESET_UNDO  0x1000000
#define MEM_LARGE_PAGES  0x20000000
#define MEM_4MB_PAGES  0x80000000
#define MEM_64K_PAGES  (MEM_LARGE_PAGES|MEM_PHYSICAL)
#define SEC_64K_PAGES  0x00080000
#define SEC_FILE  0x800000
#define SEC_IMAGE  0x1000000
#define SEC_PROTECTED_IMAGE  0x2000000
#define SEC_RESERVE  0x4000000
#define SEC_COMMIT  0x8000000
#define SEC_NOCACHE  0x10000000  
#define SEC_WRITECOMBINE 0x40000000
#define SEC_LARGE_PAGES  0x80000000
#define SEC_IMAGE_NO_EXECUTE  (SEC_IMAGE|SEC_NOCACHE)
#define MEM_IMAGE  SEC_IMAGE
#define WRITE_WATCH_FLAG_RESET 0x01
#define MEM_UNMAP_WITH_TRANSIENT_BOOST  0x01

#define ENCLAVE_TYPE_SGX  0x00000001

typedef struct _ENCLAVE_CREATE_INFO_SGX {
    BYTE Secs[4096];
} ENCLAVE_CREATE_INFO_SGX, *PENCLAVE_CREATE_INFO_SGX;

typedef struct _ENCLAVE_INIT_INFO_SGX {
    BYTE SigStruct[1808];
    BYTE Reserved1[240];
    BYTE EInitToken[304];
    BYTE Reserved2[1744];
} ENCLAVE_INIT_INFO_SGX, *PENCLAVE_INIT_INFO_SGX;

#define FILE_READ_DATA  (0x0001)
#define FILE_LIST_DIRECTORY  (0x0001)

#define FILE_WRITE_DATA  (0x0002)
#define FILE_ADD_FILE  (0x0002)

#define FILE_APPEND_DATA  (0x0004)
#define FILE_ADD_SUBDIRECTORY  (0x0004)
#define FILE_CREATE_PIPE_INSTANCE  (0x0004)
#define FILE_READ_EA  (0x0008)
#define FILE_WRITE_EA  (0x0010)
#define FILE_EXECUTE  (0x0020)
#define FILE_TRAVERSE  (0x0020)
#define FILE_DELETE_CHILD  (0x0040)
#define FILE_READ_ATTRIBUTES  (0x0080)
#define FILE_WRITE_ATTRIBUTES  (0x0100)
#define FILE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x1FF)
#define FILE_GENERIC_READ  (STANDARD_RIGHTS_READ|FILE_READ_DATA|FILE_READ_ATTRIBUTES|FILE_READ_EA|SYNCHRONIZE)
#define FILE_GENERIC_WRITE  (STANDARD_RIGHTS_WRITE|FILE_WRITE_DATA|FILE_WRITE_ATTRIBUTES|FILE_WRITE_EA|FILE_APPEND_DATA|SYNCHRONIZE)
#define FILE_GENERIC_EXECUTE  (STANDARD_RIGHTS_EXECUTE|FILE_READ_ATTRIBUTES|FILE_EXECUTE|SYNCHRONIZE)

#define FILE_SHARE_READ  0x00000001
#define FILE_SHARE_WRITE  0x00000002
#define FILE_SHARE_DELETE  0x00000004
#define FILE_ATTRIBUTE_READONLY  0x00000001
#define FILE_ATTRIBUTE_HIDDEN  0x00000002
#define FILE_ATTRIBUTE_SYSTEM  0x00000004
#define FILE_ATTRIBUTE_DIRECTORY  0x00000010
#define FILE_ATTRIBUTE_ARCHIVE  0x00000020
#define FILE_ATTRIBUTE_DEVICE  0x00000040
#define FILE_ATTRIBUTE_NORMAL  0x00000080
#define FILE_ATTRIBUTE_TEMPORARY  0x00000100
#define FILE_ATTRIBUTE_SPARSE_FILE  0x00000200
#define FILE_ATTRIBUTE_REPARSE_POINT  0x00000400
#define FILE_ATTRIBUTE_COMPRESSED  0x00000800
#define FILE_ATTRIBUTE_OFFLINE  0x00001000
#define FILE_ATTRIBUTE_NOT_CONTENT_INDEXED  0x00002000
#define FILE_ATTRIBUTE_ENCRYPTED  0x00004000
#define FILE_ATTRIBUTE_INTEGRITY_STREAM  0x00008000
#define FILE_ATTRIBUTE_VIRTUAL  0x00010000
#define FILE_ATTRIBUTE_NO_SCRUB_DATA  0x00020000
#define FILE_ATTRIBUTE_EA  0x00040000
#define FILE_NOTIFY_CHANGE_FILE_NAME  0x00000001
#define FILE_NOTIFY_CHANGE_DIR_NAME  0x00000002
#define FILE_NOTIFY_CHANGE_ATTRIBUTES  0x00000004
#define FILE_NOTIFY_CHANGE_SIZE  0x00000008
#define FILE_NOTIFY_CHANGE_LAST_WRITE  0x00000010
#define FILE_NOTIFY_CHANGE_LAST_ACCESS  0x00000020
#define FILE_NOTIFY_CHANGE_CREATION  0x00000040
#define FILE_NOTIFY_CHANGE_SECURITY  0x00000100
#define FILE_ACTION_ADDED  0x00000001
#define FILE_ACTION_REMOVED  0x00000002
#define FILE_ACTION_MODIFIED  0x00000003
#define FILE_ACTION_RENAMED_OLD_NAME  0x00000004
#define FILE_ACTION_RENAMED_NEW_NAME  0x00000005
#define MAILSLOT_NO_MESSAGE  ((DWORD)-1)
#define MAILSLOT_WAIT_FOREVER  ((DWORD)-1)
#define FILE_CASE_SENSITIVE_SEARCH  0x00000001
#define FILE_CASE_PRESERVED_NAMES  0x00000002
#define FILE_UNICODE_ON_DISK  0x00000004
#define FILE_PERSISTENT_ACLS  0x00000008
#define FILE_FILE_COMPRESSION  0x00000010
#define FILE_VOLUME_QUOTAS  0x00000020
#define FILE_SUPPORTS_SPARSE_FILES  0x00000040
#define FILE_SUPPORTS_REPARSE_POINTS  0x00000080
#define FILE_SUPPORTS_REMOTE_STORAGE  0x00000100
#define FILE_VOLUME_IS_COMPRESSED  0x00008000
#define FILE_SUPPORTS_OBJECT_IDS  0x00010000
#define FILE_SUPPORTS_ENCRYPTION  0x00020000
#define FILE_NAMED_STREAMS  0x00040000
#define FILE_READ_ONLY_VOLUME  0x00080000
#define FILE_SEQUENTIAL_WRITE_ONCE  0x00100000
#define FILE_SUPPORTS_TRANSACTIONS  0x00200000
#define FILE_SUPPORTS_HARD_LINKS  0x00400000
#define FILE_SUPPORTS_EXTENDED_ATTRIBUTES  0x00800000
#define FILE_SUPPORTS_OPEN_BY_FILE_ID  0x01000000
#define FILE_SUPPORTS_USN_JOURNAL  0x02000000
#define FILE_SUPPORTS_INTEGRITY_STREAMS  0x04000000
#define FILE_SUPPORTS_BLOCK_REFCOUNTING  0x08000000
#define FILE_SUPPORTS_SPARSE_VDL  0x10000000
#define FILE_DAX_VOLUME  0x20000000
#define FILE_SUPPORTS_GHOSTING  0x40000000

#define FILE_INVALID_FILE_ID  ((LONGLONG)-1LL)

typedef struct _FILE_ID_128 {
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;

typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;

typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;

#if (NTDDI_VERSION >= NTDDI_WIN8)
#define FLUSH_FLAGS_FILE_DATA_ONLY  0x00000001
#define FLUSH_FLAGS_NO_SYNC  0x00000002
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

#if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
#define FLUSH_FLAGS_FILE_DATA_SYNC_ONLY  0x00000004
#endif /* NTDDI_VERSION >= NTDDI_WIN10_RS1 */

typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;

#define REPARSE_GUID_DATA_BUFFER_HEADER_SIZE  FIELD_OFFSET(REPARSE_GUID_DATA_BUFFER, GenericReparseBuffer)

#define MAXIMUM_REPARSE_DATA_BUFFER_SIZE  (16 * 1024)

#define IO_REPARSE_TAG_RESERVED_ZERO  (0)
#define IO_REPARSE_TAG_RESERVED_ONE  (1)
#define IO_REPARSE_TAG_RESERVED_TWO  (2)

#define IO_REPARSE_TAG_RESERVED_RANGE  IO_REPARSE_TAG_RESERVED_ONE

#define IsReparseTagMicrosoft(_tag)  (((_tag) & 0x80000000))
#define IsReparseTagNameSurrogate(_tag)  (((_tag) & 0x20000000))
#define IsReparseTagDirectory(_tag)  (((_tag) & 0x10000000))

#define IO_REPARSE_TAG_MOUNT_POINT  (0xA0000003L)
#define IO_REPARSE_TAG_HSM  (0xC0000004L)
#define IO_REPARSE_TAG_HSM2  (0x80000006L)
#define IO_REPARSE_TAG_SIS  (0x80000007L)
#define IO_REPARSE_TAG_WIM  (0x80000008L)
#define IO_REPARSE_TAG_CSV  (0x80000009L)
#define IO_REPARSE_TAG_DFS  (0x8000000AL)
#define IO_REPARSE_TAG_SYMLINK  (0xA000000CL)
#define IO_REPARSE_TAG_DFSR  (0x80000012L)
#define IO_REPARSE_TAG_DEDUP  (0x80000013L)
#define IO_REPARSE_TAG_NFS  (0x80000014L)
#define IO_REPARSE_TAG_FILE_PLACEHOLDER  (0x80000015L)
#define IO_REPARSE_TAG_WOF  (0x80000017L)
#define IO_REPARSE_TAG_WCI  (0x80000018L)
#define IO_REPARSE_TAG_GLOBAL_REPARSE  (0x80000019L)
#define IO_REPARSE_TAG_CLOUD  (0x9000001AL)
#define IO_REPARSE_TAG_APPEXECLINK  (0x8000001BL)
#define IO_REPARSE_TAG_GVFS  (0x9000001CL)

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

#define SCRUB_DATA_INPUT_FLAG_RESUME  0x00000001
#define SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC  0x00000002
#define SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA  0x00000004

#define SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE  0x00000001

#define SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE  0x00010000
#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
#define SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED  0x00020000
#define SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED  0x00040000
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINBLUE */

typedef struct _SCRUB_DATA_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORD MaximumIos;
    DWORD Reserved[17];
    BYTE ResumeContext[816];
} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;

#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
typedef struct _SCRUB_PARITY_EXTENT {
    LONGLONG Offset;
    ULONGLONG Length;
} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {
    WORD Size;
    WORD Flags;
    WORD NumberOfParityExtents;
    WORD MaximumNumberOfParityExtents;
    SCRUB_PARITY_EXTENT ParityExtents[ANYSIZE_ARRAY];
} SCRUB_PARITY_EXTENT_DATA , *PSCRUB_PARITY_EXTENT_DATA;
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINBLUE */

typedef struct _SCRUB_DATA_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORD Status;
    ULONGLONG ErrorFileOffset;
    ULONGLONG ErrorLength;
    ULONGLONG NumberOfBytesRepaired;
    ULONGLONG NumberOfBytesFailed;
    ULONGLONG InternalFileReference;
#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
    WORD ResumeContextLength;
    WORD ParityExtentDataOffset;
    DWORD Reserved[5];
#else /* _WIN32_WINNT >= _WIN32_WINNT_WINBLUE */
    DWORD Reserved[6];
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WINBLUE */
    BYTE ResumeContext[816];
} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;

#endif /*_WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8)

typedef enum _SharedVirtualDiskSupportType {
    SharedVirtualDisksUnsupported = 0,
    SharedVirtualDisksSupported = 1,
    SharedVirtualDiskSnapshotsSupported = 3,
    SharedVirtualDiskCDPSnapshotsSupported = 7
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState {
    SharedVirtualDiskHandleStateNone = 0,
    SharedVirtualDiskHandleStateFileShared = 1,
    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;

typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
    SharedVirtualDiskSupportType SharedVirtualDiskSupport;
    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;

#define IsVirtualDiskFileShared(HandleState)  (((HandleState) & SharedVirtualDiskHandleStateFileShared) != 0)

#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN8 */

#define IO_COMPLETION_MODIFY_STATE  0x0002  
#define IO_COMPLETION_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3) 

#define IO_QOS_MAX_RESERVATION  1000000000ULL

#ifndef SMB_CCF_APP_INSTANCE_EA_NAME
#define SMB_CCF_APP_INSTANCE_EA_NAME  "ClusteredApplicationInstance"
#endif /* SMB_CCF_APP_INSTANCE_EA_NAME */

#ifndef _NETWORK_APP_INSTANCE_EA_DEFINED
#define _NETWORK_APP_INSTANCE_EA_DEFINED

#if (NTDDI_VERSION >= NTDDI_WIN10)

#ifndef NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR
#define NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR 0x00000001
#endif //NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR

typedef struct _NETWORK_APP_INSTANCE_EA {
    GUID AppInstanceID;
    DWORD CsvFlags;
} NETWORK_APP_INSTANCE_EA, *PNETWORK_APP_INSTANCE_EA;

#endif /* NTDDI_VERSION >= NTDDI_WIN10 */

#endif /* _NETWORK_APP_INSTANCE_EA_DEFINED */

#define DUPLICATE_CLOSE_SOURCE  0x00000001  
#define DUPLICATE_SAME_ACCESS  0x00000002  

DEFINE_GUID(GUID_MAX_POWER_SAVINGS, 0xA1841308, 0x3541, 0x4FAB, 0xBC, 0x81, 0xF7, 0x15, 0x56, 0xF2, 0x0B, 0x4A );
DEFINE_GUID(GUID_MIN_POWER_SAVINGS, 0x8C5E7FDA, 0xE8BF, 0x4A96, 0x9A, 0x85, 0xA6, 0xE2, 0x3A, 0x8C, 0x63, 0x5C );
DEFINE_GUID(GUID_TYPICAL_POWER_SAVINGS, 0x381B4222, 0xF694, 0x41F0, 0x96, 0x85, 0xFF, 0x5B, 0xB2, 0x60, 0xDF, 0x2E );
DEFINE_GUID(NO_SUBGROUP_GUID, 0xFEA3413E, 0x7E05, 0x4911, 0x9A, 0x71, 0x70, 0x03, 0x31, 0xF1, 0xC2, 0x94 );
DEFINE_GUID(ALL_POWERSCHEMES_GUID, 0x68A1E95E, 0x13EA, 0x41E1, 0x80, 0x11, 0x0C, 0x49, 0x6C, 0xA4, 0x90, 0xB0 );
DEFINE_GUID(GUID_POWERSCHEME_PERSONALITY, 0x245D8541, 0x3943, 0x4422, 0xB0, 0x25, 0x13, 0xA7, 0x84, 0xF6, 0x79, 0xB7 );
DEFINE_GUID(GUID_ACTIVE_POWERSCHEME, 0x31F9F286, 0x5084, 0x42FE, 0xB7, 0x20, 0x2B, 0x02, 0x64, 0x99, 0x37, 0x63 );
DEFINE_GUID(GUID_IDLE_RESILIENCY_SUBGROUP, 0x2e601130, 0x5351, 0x4d9d, 0x8e, 0x4, 0x25, 0x29, 0x66, 0xba, 0xd0, 0x54);
DEFINE_GUID(GUID_IDLE_RESILIENCY_PERIOD, 0xc42b79aa, 0xaa3a, 0x484b, 0xa9, 0x8f, 0x2c, 0xf3, 0x2a, 0xa9, 0xa, 0x28);
DEFINE_GUID(GUID_DEEP_SLEEP_ENABLED, 0xd502f7ee, 0x1dc7, 0x4efd, 0xa5, 0x5d, 0xf0, 0x4b, 0x6f, 0x5c, 0x5, 0x45);
DEFINE_GUID(GUID_DEEP_SLEEP_PLATFORM_STATE, 0xd23f2fb8, 0x9536, 0x4038, 0x9c, 0x94, 0x1c, 0xe0, 0x2e, 0x5c, 0x21, 0x52);
DEFINE_GUID(GUID_DISK_COALESCING_POWERDOWN_TIMEOUT, 0xc36f0eb4, 0x2988, 0x4a70, 0x8e, 0xee, 0x8, 0x84, 0xfc, 0x2c, 0x24, 0x33);
DEFINE_GUID(GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT, 0x3166bc41, 0x7e98, 0x4e03, 0xb3, 0x4e, 0xec, 0xf, 0x5f, 0x2b, 0x21, 0x8e);
DEFINE_GUID(GUID_VIDEO_SUBGROUP, 0x7516B95F, 0xF776, 0x4464, 0x8C, 0x53, 0x06, 0x16, 0x7F, 0x40, 0xCC, 0x99 );
DEFINE_GUID(GUID_VIDEO_POWERDOWN_TIMEOUT, 0x3C0BC021, 0xC8A8, 0x4E07, 0xA9, 0x73, 0x6B, 0x14, 0xCB, 0xCB, 0x2B, 0x7E );
DEFINE_GUID(GUID_VIDEO_ANNOYANCE_TIMEOUT, 0x82DBCF2D, 0xCD67, 0x40C5, 0xBF, 0xDC, 0x9F, 0x1A, 0x5C, 0xCD, 0x46, 0x63 );
DEFINE_GUID(GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE, 0xEED904DF, 0xB142, 0x4183, 0xB1, 0x0B, 0x5A, 0x11, 0x97, 0xA3, 0x78, 0x64 );
DEFINE_GUID(GUID_VIDEO_DIM_TIMEOUT, 0x17aaa29b, 0x8b43, 0x4b94, 0xaa, 0xfe, 0x35, 0xf6, 0x4d, 0xaa, 0xf1, 0xee);
DEFINE_GUID(GUID_VIDEO_ADAPTIVE_POWERDOWN, 0x90959D22, 0xD6A1, 0x49B9, 0xAF, 0x93, 0xBC, 0xE8, 0x85, 0xAD, 0x33, 0x5B );
DEFINE_GUID(GUID_DISK_MAX_POWER, 0x51dea550, 0xbb38, 0x4bc4, 0x99, 0x1b, 0xea, 0xcf, 0x37, 0xbe, 0x5e, 0xc8);
DEFINE_GUID(GUID_MONITOR_POWER_ON, 0x02731015, 0x4510, 0x4526, 0x99, 0xE6, 0xE5, 0xA1, 0x7E, 0xBD, 0x1A, 0xEA );
DEFINE_GUID(GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS, 0xaded5e82L, 0xb909, 0x4619, 0x99, 0x49, 0xf5, 0xd7, 0x1d, 0xac, 0x0b, 0xcb);
DEFINE_GUID(GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS, 0xf1fbfde2, 0xa960, 0x4165, 0x9f, 0x88, 0x50, 0x66, 0x79, 0x11, 0xce, 0x96);
DEFINE_GUID(GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS, 0x8ffee2c6, 0x2d01, 0x46be, 0xad, 0xb9, 0x39, 0x8a, 0xdd, 0xc5, 0xb4, 0xff);
DEFINE_GUID(GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS, 0xFBD9AA66, 0x9553, 0x4097, 0xBA, 0x44, 0xED, 0x6E, 0x9D, 0x65, 0xEA, 0xB8);
DEFINE_GUID(GUID_SESSION_DISPLAY_STATE, 0x73A5E93A, 0x5BB1, 0x4F93, 0x89, 0x5B, 0xDB, 0xD0, 0xDA, 0x85, 0x59, 0x67 );
DEFINE_GUID(GUID_CONSOLE_DISPLAY_STATE, 0x6fe69556, 0x704a, 0x47a0, 0x8f, 0x24, 0xc2, 0x8d, 0x93, 0x6f, 0xda, 0x47);
DEFINE_GUID(GUID_ALLOW_DISPLAY_REQUIRED, 0xA9CEB8DA, 0xCD46, 0x44FB, 0xA9, 0x8B, 0x02, 0xAF, 0x69, 0xDE, 0x46, 0x23 );
DEFINE_GUID(GUID_VIDEO_CONSOLE_LOCK_TIMEOUT, 0x8ec4b3a5, 0x6868, 0x48c2, 0xbe, 0x75, 0x4f, 0x30, 0x44, 0xbe, 0x88, 0xa7);
DEFINE_GUID(GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP, 0x8619b916, 0xe004, 0x4dd8, 0x9b, 0x66, 0xda, 0xe8, 0x6f, 0x80, 0x66, 0x98);
DEFINE_GUID(GUID_NON_ADAPTIVE_INPUT_TIMEOUT, 0x5adbbfbc, 0x74e, 0x4da1, 0xba, 0x38, 0xdb, 0x8b, 0x36, 0xb2, 0xc8, 0xf3);
DEFINE_GUID(GUID_DISK_SUBGROUP, 0x0012EE47, 0x9041, 0x4B5D, 0x9B, 0x77, 0x53, 0x5F, 0xBA, 0x8B, 0x14, 0x42 );
DEFINE_GUID(GUID_DISK_POWERDOWN_TIMEOUT, 0x6738E2C4, 0xE8A5, 0x4A42, 0xB1, 0x6A, 0xE0, 0x40, 0xE7, 0x69, 0x75, 0x6E );
DEFINE_GUID(GUID_DISK_IDLE_TIMEOUT, 0x58E39BA8, 0xB8E6, 0x4EF6, 0x90, 0xD0, 0x89, 0xAE, 0x32, 0xB2, 0x58, 0xD6 );
DEFINE_GUID(GUID_DISK_BURST_IGNORE_THRESHOLD, 0x80e3c60e, 0xbb94, 0x4ad8, 0xbb, 0xe0, 0x0d, 0x31, 0x95, 0xef, 0xc6, 0x63 );
DEFINE_GUID(GUID_DISK_ADAPTIVE_POWERDOWN, 0x396A32E1, 0x499A, 0x40B2, 0x91, 0x24, 0xA9, 0x6A, 0xFE, 0x70, 0x76, 0x67 );
DEFINE_GUID(GUID_SLEEP_SUBGROUP, 0x238C9FA8, 0x0AAD, 0x41ED, 0x83, 0xF4, 0x97, 0xBE, 0x24, 0x2C, 0x8F, 0x20 );
DEFINE_GUID(GUID_SLEEP_IDLE_THRESHOLD, 0x81cd32e0, 0x7833, 0x44f3, 0x87, 0x37, 0x70, 0x81, 0xf3, 0x8d, 0x1f, 0x70 );
DEFINE_GUID(GUID_STANDBY_TIMEOUT, 0x29F6C1DB, 0x86DA, 0x48C5, 0x9F, 0xDB, 0xF2, 0xB6, 0x7B, 0x1F, 0x44, 0xDA );
DEFINE_GUID(GUID_UNATTEND_SLEEP_TIMEOUT, 0x7bc4a2f9, 0xd8fc, 0x4469, 0xb0, 0x7b, 0x33, 0xeb, 0x78, 0x5a, 0xac, 0xa0 );
DEFINE_GUID(GUID_HIBERNATE_TIMEOUT, 0x9D7815A6, 0x7EE4, 0x497E, 0x88, 0x88, 0x51, 0x5A, 0x05, 0xF0, 0x23, 0x64 );
DEFINE_GUID(GUID_HIBERNATE_FASTS4_POLICY, 0x94AC6D29, 0x73CE, 0x41A6, 0x80, 0x9F, 0x63, 0x63, 0xBA, 0x21, 0xB4, 0x7E );
DEFINE_GUID(GUID_CRITICAL_POWER_TRANSITION,  0xB7A27025, 0xE569, 0x46c2, 0xA5, 0x04, 0x2B, 0x96, 0xCA, 0xD2, 0x25, 0xA1);
DEFINE_GUID(GUID_SYSTEM_AWAYMODE, 0x98A7F580, 0x01F7, 0x48AA, 0x9C, 0x0F, 0x44, 0x35, 0x2C, 0x29, 0xE5, 0xC0 );
DEFINE_GUID(GUID_ALLOW_AWAYMODE, 0x25dfa149, 0x5dd1, 0x4736, 0xb5, 0xab, 0xe8, 0xa3, 0x7b, 0x5b, 0x81, 0x87 );
DEFINE_GUID(GUID_USER_PRESENCE_PREDICTION, 0x82011705, 0xfb95, 0x4d46, 0x8d, 0x35, 0x40, 0x42, 0xb1, 0xd2, 0xd, 0xef );
DEFINE_GUID(GUID_STANDBY_BUDGET_GRACE_PERIOD, 0x60c07fe1, 0x0556, 0x45cf, 0x99, 0x03, 0xd5, 0x6e, 0x32, 0x21, 0x2, 0x42 );
DEFINE_GUID(GUID_STANDBY_BUDGET_PERCENT, 0x9fe527be, 0x1b70, 0x48da, 0x93, 0x0d, 0x7b, 0xcf, 0x17, 0xb4, 0x49, 0x90 );
DEFINE_GUID(GUID_STANDBY_RESERVE_GRACE_PERIOD, 0xc763ee92, 0x71e8, 0x4127, 0x84, 0xeb, 0xf6, 0xed, 0x04, 0x3a, 0x3e, 0x3d );
DEFINE_GUID(GUID_STANDBY_RESERVE_TIME, 0x468FE7E5, 0x1158, 0x46EC, 0x88, 0xbc, 0x5b, 0x96, 0xc9, 0xe4, 0x4f, 0xd0 );
DEFINE_GUID(GUID_STANDBY_RESET_PERCENT, 0x49cb11a5, 0x56e2, 0x4afb, 0x9d, 0x38, 0x3d, 0xf4, 0x78, 0x72, 0xe2, 0x1b);
DEFINE_GUID(GUID_ALLOW_STANDBY_STATES, 0xabfc2519, 0x3608, 0x4c2a, 0x94, 0xea, 0x17, 0x1b, 0x0e, 0xd5, 0x46, 0xab );
DEFINE_GUID(GUID_ALLOW_RTC_WAKE, 0xBD3B718A, 0x0680, 0x4D9D, 0x8A, 0xB2, 0xE1, 0xD2, 0xB4, 0xAC, 0x80, 0x6D );
DEFINE_GUID(GUID_ALLOW_SYSTEM_REQUIRED, 0xA4B195F5, 0x8225, 0x47D8, 0x80, 0x12, 0x9D, 0x41, 0x36, 0x97, 0x86, 0xE2 );
DEFINE_GUID(GUID_POWER_SAVING_STATUS, 0xe00958c0, 0xc213, 0x4ace, 0xac, 0x77, 0xfe, 0xcc, 0xed, 0x2e, 0xee, 0xa5);
DEFINE_GUID(GUID_ENERGY_SAVER_SUBGROUP, 0xDE830923, 0xA562, 0x41AF, 0xA0, 0x86, 0xE3, 0xA2, 0xC6, 0xBA, 0xD2, 0xDA );
DEFINE_GUID(GUID_ENERGY_SAVER_BATTERY_THRESHOLD, 0xE69653CA, 0xCF7F, 0x4F05, 0xAA, 0x73, 0xCB, 0x83, 0x3F, 0xA9, 0x0A, 0xD4 );
DEFINE_GUID(GUID_ENERGY_SAVER_BRIGHTNESS, 0x13D09884, 0xF74E, 0x474A, 0xA8, 0x52, 0xB6, 0xBD, 0xE8, 0xAD, 0x03, 0xA8 );
DEFINE_GUID(GUID_ENERGY_SAVER_POLICY, 0x5c5bb349, 0xad29, 0x4ee2, 0x9d, 0xb, 0x2b, 0x25, 0x27, 0xf, 0x7a, 0x81 );
DEFINE_GUID(GUID_SYSTEM_BUTTON_SUBGROUP, 0x4F971E89, 0xEEBD, 0x4455, 0xA8, 0xDE, 0x9E, 0x59, 0x04, 0x0E, 0x73, 0x47 );

#define POWERBUTTON_ACTION_INDEX_NOTHING  0
#define POWERBUTTON_ACTION_INDEX_SLEEP  1
#define POWERBUTTON_ACTION_INDEX_HIBERNATE  2
#define POWERBUTTON_ACTION_INDEX_SHUTDOWN  3
#define POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY  4

#define POWERBUTTON_ACTION_VALUE_NOTHING  0
#define POWERBUTTON_ACTION_VALUE_SLEEP  2
#define POWERBUTTON_ACTION_VALUE_HIBERNATE  3
#define POWERBUTTON_ACTION_VALUE_SHUTDOWN  6
#define POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY  8

DEFINE_GUID(GUID_POWERBUTTON_ACTION, 0x7648EFA3, 0xDD9C, 0x4E3E, 0xB5, 0x66, 0x50, 0xF9, 0x29, 0x38, 0x62, 0x80 );
DEFINE_GUID(GUID_SLEEPBUTTON_ACTION, 0x96996BC0, 0xAD50, 0x47EC, 0x92, 0x3B, 0x6F, 0x41, 0x87, 0x4D, 0xD9, 0xEB );
DEFINE_GUID(GUID_USERINTERFACEBUTTON_ACTION, 0xA7066653, 0x8D6C, 0x40A8, 0x91, 0x0E, 0xA1, 0xF5, 0x4B, 0x84, 0xC7, 0xE5 );
DEFINE_GUID(GUID_LIDCLOSE_ACTION, 0x5CA83367, 0x6E45, 0x459F, 0xA2, 0x7B, 0x47, 0x6B, 0x1D, 0x01, 0xC9, 0x36 );
DEFINE_GUID(GUID_LIDOPEN_POWERSTATE, 0x99FF10E7, 0x23B1, 0x4C07, 0xA9, 0xD1, 0x5C, 0x32, 0x06, 0xD7, 0x41, 0xB4 );
DEFINE_GUID(GUID_BATTERY_SUBGROUP, 0xE73A048D, 0xBF27, 0x4F12, 0x97, 0x31, 0x8B, 0x20, 0x76, 0xE8, 0x89, 0x1F );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_ACTION_0, 0x637EA02F, 0xBBCB, 0x4015, 0x8E, 0x2C, 0xA1, 0xC7, 0xB9, 0xC0, 0xB5, 0x46 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_LEVEL_0, 0x9A66D8D7, 0x4FF7, 0x4EF9, 0xB5, 0xA2, 0x5A, 0x32, 0x6C, 0xA2, 0xA4, 0x69 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_FLAGS_0, 0x5dbb7c9f, 0x38e9, 0x40d2, 0x97, 0x49, 0x4f, 0x8a, 0x0e, 0x9f, 0x64, 0x0f );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_ACTION_1, 0xD8742DCB, 0x3E6A, 0x4B3C, 0xB3, 0xFE, 0x37, 0x46, 0x23, 0xCD, 0xCF, 0x06 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_LEVEL_1, 0x8183BA9A, 0xE910, 0x48DA, 0x87, 0x69, 0x14, 0xAE, 0x6D, 0xC1, 0x17, 0x0A );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_FLAGS_1, 0xbcded951, 0x187b, 0x4d05, 0xbc, 0xcc, 0xf7, 0xe5, 0x19, 0x60, 0xc2, 0x58 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_ACTION_2, 0x421CBA38, 0x1A8E, 0x4881, 0xAC, 0x89, 0xE3, 0x3A, 0x8B, 0x04, 0xEC, 0xE4 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_LEVEL_2, 0x07A07CA2, 0xADAF, 0x40D7, 0xB0, 0x77, 0x53, 0x3A, 0xAD, 0xED, 0x1B, 0xFA );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_FLAGS_2, 0x7fd2f0c4, 0xfeb7, 0x4da3, 0x81, 0x17, 0xe3, 0xfb, 0xed, 0xc4, 0x65, 0x82 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_ACTION_3, 0x80472613, 0x9780, 0x455E, 0xB3, 0x08, 0x72, 0xD3, 0x00, 0x3C, 0xF2, 0xF8 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_LEVEL_3, 0x58AFD5A6, 0xC2DD, 0x47D2, 0x9F, 0xBF, 0xEF, 0x70, 0xCC, 0x5C, 0x59, 0x65 );
DEFINE_GUID(GUID_BATTERY_DISCHARGE_FLAGS_3, 0x73613ccf, 0xdbfa, 0x4279, 0x83, 0x56, 0x49, 0x35, 0xf6, 0xbf, 0x62, 0xf3 );
DEFINE_GUID(GUID_PROCESSOR_SETTINGS_SUBGROUP, 0x54533251, 0x82BE, 0x4824, 0x96, 0xC1, 0x47, 0xB6, 0x0B, 0x74, 0x0D, 0x00 );
DEFINE_GUID(GUID_PROCESSOR_THROTTLE_POLICY, 0x57027304, 0x4AF6, 0x4104, 0x92, 0x60, 0xE3, 0xD9, 0x52, 0x48, 0xFC, 0x36 );

#define PERFSTATE_POLICY_CHANGE_IDEAL  0
#define PERFSTATE_POLICY_CHANGE_SINGLE 1
#define PERFSTATE_POLICY_CHANGE_ROCKET 2
#define PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE  3

#define PERFSTATE_POLICY_CHANGE_DECREASE_MAX  PERFSTATE_POLICY_CHANGE_ROCKET
#define PERFSTATE_POLICY_CHANGE_INCREASE_MAX  PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE

DEFINE_GUID(GUID_PROCESSOR_THROTTLE_MAXIMUM, 0xBC5038F7, 0x23E0, 0x4960, 0x96, 0xDA, 0x33, 0xAB, 0xAF, 0x59, 0x35, 0xEC );
DEFINE_GUID(GUID_PROCESSOR_THROTTLE_MAXIMUM_1, 0xBC5038F7, 0x23E0, 0x4960, 0x96, 0xDA, 0x33, 0xAB, 0xAF, 0x59, 0x35, 0xED );
DEFINE_GUID(GUID_PROCESSOR_THROTTLE_MINIMUM, 0x893DEE8E, 0x2BEF, 0x41E0, 0x89, 0xC6, 0xB5, 0x5D, 0x09, 0x29, 0x96, 0x4C );
DEFINE_GUID(GUID_PROCESSOR_THROTTLE_MINIMUM_1, 0x893DEE8E, 0x2BEF, 0x41E0, 0x89, 0xC6, 0xB5, 0x5D, 0x09, 0x29, 0x96, 0x4D );
DEFINE_GUID(GUID_PROCESSOR_ALLOW_THROTTLING, 0x3b04d4fd, 0x1cc7, 0x4f23, 0xab, 0x1c, 0xd1, 0x33, 0x78, 0x19, 0xc4, 0xbb );

#define PROCESSOR_THROTTLE_DISABLED  0
#define PROCESSOR_THROTTLE_ENABLED   1
#define PROCESSOR_THROTTLE_AUTOMATIC 2

DEFINE_GUID( GUID_PROCESSOR_IDLESTATE_POLICY, 0x68f262a7, 0xf621, 0x4069, 0xb9, 0xa5, 0x48, 0x74, 0x16, 0x9b, 0xe2, 0x3c);
DEFINE_GUID( GUID_PROCESSOR_PERFSTATE_POLICY, 0xBBDC3814, 0x18E9, 0x4463, 0x8A, 0x55, 0xD1, 0x97, 0x32, 0x7C, 0x45, 0xC0);
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_THRESHOLD, 0x06cadf0e, 0x64ed, 0x448a, 0x89, 0x27, 0xce, 0x7b, 0xf9, 0x0e, 0xb3, 0x5d );
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1, 0x06cadf0e, 0x64ed, 0x448a, 0x89, 0x27, 0xce, 0x7b, 0xf9, 0x0e, 0xb3, 0x5e );
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_THRESHOLD, 0x12a0ab44, 0xfe28, 0x4fa9, 0xb3, 0xbd, 0x4b, 0x64, 0xf4, 0x49, 0x60, 0xa6 );
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1, 0x12a0ab44, 0xfe28, 0x4fa9, 0xb3, 0xbd, 0x4b, 0x64, 0xf4, 0x49, 0x60, 0xa7 );
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_POLICY, 0x465e1f50, 0xb610, 0x473a, 0xab, 0x58, 0x0, 0xd1, 0x7, 0x7d, 0xc4, 0x18);
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_POLICY_1, 0x465e1f50, 0xb610, 0x473a, 0xab, 0x58, 0x0, 0xd1, 0x7, 0x7d, 0xc4, 0x19);
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_POLICY, 0x40fbefc7, 0x2e9d, 0x4d25, 0xa1, 0x85, 0xc, 0xfd, 0x85, 0x74, 0xba, 0xc6);
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_POLICY_1, 0x40fbefc7, 0x2e9d, 0x4d25, 0xa1, 0x85, 0xc, 0xfd, 0x85, 0x74, 0xba, 0xc7);
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_TIME, 0x984cf492, 0x3bed, 0x4488, 0xa8, 0xf9, 0x42, 0x86, 0xc9, 0x7b, 0xf5, 0xaa);
DEFINE_GUID( GUID_PROCESSOR_PERF_INCREASE_TIME_1, 0x984cf492, 0x3bed, 0x4488, 0xa8, 0xf9, 0x42, 0x86, 0xc9, 0x7b, 0xf5, 0xab);
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_TIME, 0xd8edeb9b, 0x95cf, 0x4f95, 0xa7, 0x3c, 0xb0, 0x61, 0x97, 0x36, 0x93, 0xc8);
DEFINE_GUID( GUID_PROCESSOR_PERF_DECREASE_TIME_1, 0xd8edeb9b, 0x95cf, 0x4f95, 0xa7, 0x3c, 0xb0, 0x61, 0x97, 0x36, 0x93, 0xc9);
DEFINE_GUID( GUID_PROCESSOR_PERF_TIME_CHECK, 0x4d2b0152, 0x7d5c, 0x498b, 0x88, 0xe2, 0x34, 0x34, 0x53, 0x92, 0xa2, 0xc5);
DEFINE_GUID(GUID_PROCESSOR_PERF_BOOST_POLICY, 0x45bcc044, 0xd885, 0x43e2, 0x86, 0x5, 0xee, 0xe, 0xc6, 0xe9, 0x6b, 0x59);

#define PROCESSOR_PERF_BOOST_POLICY_DISABLED  0
#define PROCESSOR_PERF_BOOST_POLICY_MAX  100

DEFINE_GUID(GUID_PROCESSOR_PERF_BOOST_MODE,0xbe337238, 0xd82, 0x4146, 0xa9, 0x60, 0x4f, 0x37, 0x49, 0xd4, 0x70, 0xc7);

#define PROCESSOR_PERF_BOOST_MODE_DISABLED  0
#define PROCESSOR_PERF_BOOST_MODE_ENABLED  1
#define PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE  2
#define PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED  3
#define PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE  4
#define PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED  5
#define PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED  6
#define PROCESSOR_PERF_BOOST_MODE_MAX  PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED

DEFINE_GUID(GUID_PROCESSOR_PERF_AUTONOMOUS_MODE,0x8baa4a8a, 0x14c6, 0x4451, 0x8e, 0x8b, 0x14, 0xbd, 0xbd, 0x19, 0x75, 0x37);

#define PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED  0
#define PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED  1

DEFINE_GUID(GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE,0x36687f9e, 0xe3a5, 0x4dbf, 0xb1, 0xdc, 0x15, 0xeb, 0x38, 0x1c, 0x68, 0x63);

#define PROCESSOR_PERF_PERFORMANCE_PREFERENCE  0xff
#define PROCESSOR_PERF_ENERGY_PREFERENCE  0

DEFINE_GUID(GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW,0xcfeda3d0, 0x7697, 0x4566, 0xa9, 0x22, 0xa9, 0x8, 0x6c, 0xd4, 0x9d, 0xfa);

#define PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW  0
#define PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW  1270000000

DEFINE_GUID(GUID_PROCESSOR_DUTY_CYCLING, 0x4e4450b3, 0x6179, 0x4e91, 0xb8, 0xf1, 0x5b, 0xb9, 0x93, 0x8f, 0x81, 0xa1);

#define PROCESSOR_DUTY_CYCLING_DISABLED  0
#define PROCESSOR_DUTY_CYCLING_ENABLED  1

DEFINE_GUID(GUID_PROCESSOR_IDLE_ALLOW_SCALING, 0x6c2993b0, 0x8f48, 0x481f, 0xbc, 0xc6, 0x0, 0xdd, 0x27, 0x42, 0xaa, 0x6);
DEFINE_GUID(GUID_PROCESSOR_IDLE_DISABLE, 0x5d76a2ca, 0xe8c0, 0x402f, 0xa1, 0x33, 0x21, 0x58, 0x49, 0x2d, 0x58, 0xad);
DEFINE_GUID(GUID_PROCESSOR_IDLE_STATE_MAXIMUM, 0x9943e905, 0x9a30, 0x4ec1, 0x9b, 0x99, 0x44, 0xdd, 0x3b, 0x76, 0xf7, 0xa2);
DEFINE_GUID(GUID_PROCESSOR_IDLE_TIME_CHECK, 0xc4581c31, 0x89ab, 0x4597, 0x8e, 0x2b, 0x9c, 0x9c, 0xab, 0x44, 0xe, 0x6b);
DEFINE_GUID(GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD, 0x4b92d758, 0x5a24, 0x4851, 0xa4, 0x70, 0x81, 0x5d, 0x78, 0xae, 0xe1, 0x19);
DEFINE_GUID(GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD, 0x7b224883, 0xb3cc, 0x4d79, 0x81, 0x9f, 0x83, 0x74, 0x15, 0x2c, 0xbe, 0x7c);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD, 0xdf142941, 0x20f3, 0x4edf, 0x9a, 0x4a, 0x9c, 0x83, 0xd3, 0xd7, 0x17, 0xd1 );
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD, 0x68dd2f27, 0xa4ce, 0x4e11, 0x84, 0x87, 0x37, 0x94, 0xe4, 0x13, 0x5d, 0xfa);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY, 0xc7be0679, 0x2817, 0x4d69, 0x9d, 0x02, 0x51, 0x9a, 0x53, 0x7e, 0xd0, 0xc6);

#define CORE_PARKING_POLICY_CHANGE_IDEAL  0
#define CORE_PARKING_POLICY_CHANGE_SINGLE  1
#define CORE_PARKING_POLICY_CHANGE_ROCKET  2
#define CORE_PARKING_POLICY_CHANGE_MULTISTEP  3
#define CORE_PARKING_POLICY_CHANGE_MAX  CORE_PARKING_POLICY_CHANGE_MULTISTEP

DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY, 0x71021b41, 0xc749, 0x4d21, 0xbe, 0x74, 0xa0, 0x0f, 0x33, 0x5d, 0x58, 0x2b);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_MAX_CORES, 0xea062031, 0x0e34, 0x4ff1, 0x9b, 0x6d, 0xeb, 0x10, 0x59, 0x33, 0x40, 0x28);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1, 0xea062031, 0x0e34, 0x4ff1, 0x9b, 0x6d, 0xeb, 0x10, 0x59, 0x33, 0x40, 0x29);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_MIN_CORES, 0x0cc5b647, 0xc1df, 0x4637, 0x89, 0x1a, 0xde, 0xc3, 0x5c, 0x31, 0x85, 0x83);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1, 0x0cc5b647, 0xc1df, 0x4637, 0x89, 0x1a, 0xde, 0xc3, 0x5c, 0x31, 0x85, 0x84);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME, 0x2ddd5a84, 0x5a71, 0x437e, 0x91, 0x2a, 0xdb, 0x0b, 0x8c, 0x78, 0x87, 0x32);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME, 0xdfd10d17, 0xd5eb, 0x45dd, 0x87, 0x7a, 0x9a, 0x34, 0xdd, 0xd1, 0x5c, 0x82);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR, 0x8f7b45e3, 0xc393, 0x480a, 0x87, 0x8c, 0xf6, 0x7a, 0xc3, 0xd0, 0x70, 0x82);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD, 0x5b33697b, 0xe89d, 0x4d38, 0xaa, 0x46, 0x9e, 0x7d, 0xfb, 0x7c, 0xd2, 0xf9);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING, 0xe70867f1, 0xfa2f, 0x4f4e, 0xae, 0xa1, 0x4d, 0x8a, 0x0b, 0xa2, 0x3b, 0x20);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR, 0x1299023c, 0xbc28, 0x4f0a, 0x81, 0xec, 0xd3, 0x29, 0x5a, 0x8d, 0x81, 0x5d);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD, 0x9ac18e92, 0xaa3c, 0x4e27, 0xb3, 0x07, 0x01, 0xae, 0x37, 0x30, 0x71, 0x29);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING, 0x8809c2d8, 0xb155, 0x42d4, 0xbc, 0xda, 0x0d, 0x34, 0x56, 0x51, 0xb1, 0xdb);
DEFINE_GUID(GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD, 0x943c8cb6, 0x6f93, 0x4227, 0xad, 0x87, 0xe9, 0xa3, 0xfe, 0xec, 0x08, 0xd1);
DEFINE_GUID(GUID_PROCESSOR_PARKING_CORE_OVERRIDE, 0xa55612aa, 0xf624, 0x42c6, 0xa4, 0x43, 0x73, 0x97, 0xd0, 0x64, 0xc0, 0x4f);
DEFINE_GUID(GUID_PROCESSOR_PARKING_PERF_STATE, 0x447235c7, 0x6a8d, 0x4cc0, 0x8e, 0x24, 0x9e, 0xaf, 0x70, 0xb9, 0x6e, 0x2b);
DEFINE_GUID(GUID_PROCESSOR_PARKING_PERF_STATE_1, 0x447235c7, 0x6a8d, 0x4cc0, 0x8e, 0x24, 0x9e, 0xaf, 0x70, 0xb9, 0x6e, 0x2c);
DEFINE_GUID(GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD, 0x2430ab6f, 0xa520, 0x44a2, 0x96, 0x01, 0xf7, 0xf2, 0x3b, 0x51, 0x34, 0xb1);
DEFINE_GUID(GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD, 0xf735a673, 0x2066, 0x4f80, 0xa0, 0xc5, 0xdd, 0xee, 0x0c, 0xf1, 0xbf, 0x5d);
DEFINE_GUID(GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD, 0x4bdaf4e9, 0xd103, 0x46d7, 0xa5, 0xf0, 0x62, 0x80, 0x12, 0x16, 0x16, 0xef);
DEFINE_GUID(GUID_PROCESSOR_PERF_HISTORY, 0x7d24baa7, 0x0b84, 0x480f, 0x84, 0x0c, 0x1b, 0x07, 0x43, 0xc0, 0x0f, 0x5f);
DEFINE_GUID(GUID_PROCESSOR_PERF_HISTORY_1, 0x7d24baa7, 0x0b84, 0x480f, 0x84, 0x0c, 0x1b, 0x07, 0x43, 0xc0, 0x0f, 0x60);
DEFINE_GUID(GUID_PROCESSOR_PERF_INCREASE_HISTORY, 0x99b3ef01, 0x752f, 0x46a1, 0x80, 0xfb, 0x77, 0x30, 0x1, 0x1f, 0x23, 0x54);
DEFINE_GUID(GUID_PROCESSOR_PERF_DECREASE_HISTORY, 0x300f6f8, 0xabd6, 0x45a9, 0xb7, 0x4f, 0x49, 0x8, 0x69, 0x1a, 0x40, 0xb5);
DEFINE_GUID(GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY, 0x77d7f282, 0x8f1a, 0x42cd, 0x85, 0x37, 0x45, 0x45, 0xa, 0x83, 0x9b, 0xe8);
DEFINE_GUID(GUID_PROCESSOR_PERF_LATENCY_HINT, 0x0822df31, 0x9c83, 0x441c, 0xa0, 0x79, 0x0d, 0xe4, 0xcf, 0x00, 0x9c, 0x7b);
DEFINE_GUID(GUID_PROCESSOR_PERF_LATENCY_HINT_PERF, 0x619b7505, 0x3b, 0x4e82, 0xb7, 0xa6, 0x4d, 0xd2, 0x9c, 0x30, 0x9, 0x71);
DEFINE_GUID(GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1, 0x619b7505, 0x3b, 0x4e82, 0xb7, 0xa6, 0x4d, 0xd2, 0x9c, 0x30, 0x9, 0x72);
DEFINE_GUID(GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK, 0x616cdaa5, 0x695e, 0x4545, 0x97, 0xad, 0x97, 0xdc, 0x2d, 0x1b, 0xdd, 0x88);
DEFINE_GUID(GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1, 0x616cdaa5, 0x695e, 0x4545, 0x97, 0xad, 0x97, 0xdc, 0x2d, 0x1b, 0xdd, 0x89);
DEFINE_GUID(GUID_PROCESSOR_DISTRIBUTE_UTILITY, 0xe0007330, 0xf589, 0x42ed, 0xa4, 0x01, 0x5d, 0xdb, 0x10, 0xe7, 0x85, 0xd3);
DEFINE_GUID(GUID_PROCESSOR_HETEROGENEOUS_POLICY, 0x7f2f5cfa, 0xf10c, 0x4823, 0xb5, 0xe1, 0xe9, 0x3a, 0xe8, 0x5f, 0x46, 0xb5);
DEFINE_GUID(GUID_PROCESSOR_HETERO_DECREASE_TIME, 0x7f2492b6, 0x60b1, 0x45e5, 0xae, 0x55, 0x77, 0x3f, 0x8c, 0xd5, 0xca, 0xec);
DEFINE_GUID(GUID_PROCESSOR_HETERO_INCREASE_TIME, 0x4009efa7, 0xe72d, 0x4cba, 0x9e, 0xdf, 0x91, 0x08, 0x4e, 0xa8, 0xcb, 0xc3);
DEFINE_GUID(GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD, 0xf8861c27, 0x95e7, 0x475c, 0x86, 0x5b, 0x13, 0xc0, 0xcb, 0x3f, 0x9d, 0x6b);
DEFINE_GUID(GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD, 0xb000397d, 0x9b0b, 0x483d, 0x98, 0xc9, 0x69, 0x2a, 0x60, 0x60, 0xcf, 0xbf);
DEFINE_GUID(GUID_PROCESSOR_CLASS0_FLOOR_PERF, 0xfddc842b, 0x8364, 0x4edc, 0x94, 0xcf, 0xc1, 0x7f, 0x60, 0xde, 0x1c, 0x80);
DEFINE_GUID(GUID_PROCESSOR_CLASS1_INITIAL_PERF, 0x1facfc65, 0xa930, 0x4bc5, 0x9f, 0x38, 0x50, 0x4e, 0xc0, 0x97, 0xbb, 0xc0);
DEFINE_GUID(GUID_SYSTEM_COOLING_POLICY, 0x94D3A615, 0xA899, 0x4AC5, 0xAE, 0x2B, 0xE4, 0xD8, 0xF6, 0x34, 0x36, 0x7F);
DEFINE_GUID(GUID_LOCK_CONSOLE_ON_WAKE, 0x0E796BDB, 0x100D, 0x47D6, 0xA2, 0xD5, 0xF7, 0xD2, 0xDA, 0xA5, 0x1F, 0x51 );
DEFINE_GUID(GUID_DEVICE_IDLE_POLICY, 0x4faab71a, 0x92e5, 0x4726, 0xb5, 0x31, 0x22, 0x45, 0x59, 0x67, 0x2d, 0x19 );

#define POWER_DEVICE_IDLE_POLICY_PERFORMANCE  0
#define POWER_DEVICE_IDLE_POLICY_CONSERVATIVE  1

DEFINE_GUID(GUID_CONNECTIVITY_IN_STANDBY, 0xF15576E8, 0x98B7, 0x4186, 0xB9, 0x44, 0xEA, 0xFA, 0x66, 0x44, 0x02, 0xD9 );

#define POWER_CONNECTIVITY_IN_STANDBY_DISABLED  0
#define POWER_CONNECTIVITY_IN_STANDBY_ENABLED  1

DEFINE_GUID(GUID_ACDC_POWER_SOURCE, 0x5D3E9A59, 0xE9D5, 0x4B00, 0xA6, 0xBD, 0xFF, 0x34, 0xFF, 0x51, 0x65, 0x48 );
DEFINE_GUID(GUID_LIDSWITCH_STATE_CHANGE,  0xBA3E0F4D, 0xB817, 0x4094, 0xA2, 0xD1, 0xD5, 0x63, 0x79, 0xE6, 0xA0, 0xF3 );
DEFINE_GUID(GUID_BATTERY_PERCENTAGE_REMAINING, 0xA7AD8041, 0xB45A, 0x4CAE, 0x87, 0xA3, 0xEE, 0xCB, 0xB4, 0x68, 0xA9, 0xE1 );
DEFINE_GUID(GUID_BATTERY_COUNT, 0x7d263f15, 0xfca4, 0x49e5, 0x85, 0x4b, 0xa9, 0xf2, 0xbf, 0xbd, 0x5c, 0x24 );
DEFINE_GUID(GUID_GLOBAL_USER_PRESENCE, 0x786e8a1d, 0xb427, 0x4344, 0x92, 0x7, 0x9, 0xe7, 0xb, 0xdc, 0xbe, 0xa9 );
DEFINE_GUID(GUID_SESSION_DISPLAY_STATUS, 0x2b84c20e, 0xad23, 0x4ddf, 0x93, 0xdb, 0x5, 0xff, 0xbd, 0x7e, 0xfc, 0xa5 );
DEFINE_GUID(GUID_SESSION_USER_PRESENCE, 0x3c0f4548, 0xc03f, 0x4c4d, 0xb9, 0xf2, 0x23, 0x7e, 0xde, 0x68, 0x63, 0x76 );
DEFINE_GUID(GUID_IDLE_BACKGROUND_TASK, 0x515C31D8, 0xF734, 0x163D, 0xA0, 0xFD, 0x11, 0xA0, 0x8C, 0x91, 0xE8, 0xF1 );
DEFINE_GUID(GUID_BACKGROUND_TASK_NOTIFICATION, 0xCF23F240, 0x2A54, 0x48D8, 0xB1, 0x14, 0xDE, 0x15, 0x18, 0xFF, 0x05, 0x2E );
DEFINE_GUID(GUID_APPLAUNCH_BUTTON, 0x1A689231, 0x7399, 0x4E9A, 0x8F, 0x99, 0xB7, 0x1F, 0x99, 0x9D, 0xB3, 0xFA );
DEFINE_GUID(GUID_PCIEXPRESS_SETTINGS_SUBGROUP, 0x501a4d13, 0x42af,0x4429, 0x9f, 0xd1, 0xa8, 0x21, 0x8c, 0x26, 0x8e, 0x20 );
DEFINE_GUID(GUID_PCIEXPRESS_ASPM_POLICY, 0xee12f906, 0xd277, 0x404b, 0xb6, 0xda, 0xe5, 0xfa, 0x1a, 0x57, 0x6d, 0xf5 );
DEFINE_GUID(GUID_ENABLE_SWITCH_FORCED_SHUTDOWN, 0x833a6b62, 0xdfa4, 0x46d1, 0x82, 0xf8, 0xe0, 0x9e, 0x34, 0xd0, 0x29, 0xd6 );
DEFINE_GUID(GUID_INTSTEER_SUBGROUP,0x48672f38, 0x7a9a, 0x4bb2, 0x8b, 0xf8, 0x3d, 0x85, 0xbe, 0x19, 0xde, 0x4e);
DEFINE_GUID(GUID_INTSTEER_MODE,0x2bfc24f9, 0x5ea2, 0x4801, 0x82, 0x13, 0x3d, 0xba, 0xe0, 0x1a, 0xa3, 0x9d);
DEFINE_GUID(GUID_INTSTEER_LOAD_PER_PROC_TRIGGER,0x73cde64d, 0xd720, 0x4bb2, 0xa8, 0x60, 0xc7, 0x55, 0xaf, 0xe7, 0x7e, 0xf2);
DEFINE_GUID(GUID_INTSTEER_TIME_UNPARK_TRIGGER,0xd6ba4903, 0x386f, 0x4c2c, 0x8a, 0xdb, 0x5c, 0x21, 0xb3, 0x32, 0x8d, 0x25);

typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

#define POWER_SYSTEM_MAXIMUM 7

typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

#define ES_SYSTEM_REQUIRED  ((DWORD)0x00000001)
#define ES_DISPLAY_REQUIRED  ((DWORD)0x00000002)
#define ES_USER_PRESENT  ((DWORD)0x00000004)
#define ES_AWAYMODE_REQUIRED ((DWORD)0x00000040)
#define ES_CONTINUOUS  ((DWORD)0x80000000)

typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

#define DIAGNOSTIC_REASON_VERSION  0

#define DIAGNOSTIC_REASON_SIMPLE_STRING  0x00000001
#define DIAGNOSTIC_REASON_DETAILED_STRING  0x00000002
#define DIAGNOSTIC_REASON_NOT_SPECIFIED  0x80000000
#define DIAGNOSTIC_REASON_INVALID_FLAGS  (~0x80000007)

#define POWER_REQUEST_CONTEXT_VERSION  DIAGNOSTIC_REASON_VERSION

#define POWER_REQUEST_CONTEXT_SIMPLE_STRING  DIAGNOSTIC_REASON_SIMPLE_STRING
#define POWER_REQUEST_CONTEXT_DETAILED_STRING  DIAGNOSTIC_REASON_DETAILED_STRING

typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

#if (NTDDI_VERSION >= NTDDI_WINXP)

#define PDCAP_D0_SUPPORTED  0x00000001
#define PDCAP_D1_SUPPORTED  0x00000002
#define PDCAP_D2_SUPPORTED  0x00000004
#define PDCAP_D3_SUPPORTED  0x00000008
#define PDCAP_WAKE_FROM_D0_SUPPORTED  0x00000010
#define PDCAP_WAKE_FROM_D1_SUPPORTED  0x00000020
#define PDCAP_WAKE_FROM_D2_SUPPORTED  0x00000040
#define PDCAP_WAKE_FROM_D3_SUPPORTED  0x00000080
#define PDCAP_WARM_EJECT_SUPPORTED  0x00000100

typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[POWER_SYSTEM_MAXIMUM];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

#endif /* NTDDI_VERSION >= NTDDI_WINXP */

typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PhysicalPowerButtonPress,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;

typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;

typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;

typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;

typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;

typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;

typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonResumePdc,
    MonitorRequestReasonResumeS4,
    MonitorRequestReasonTerminal,
    MonitorRequestReasonPdcSignal,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;

typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;

typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;

typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {
    DWORD Version;
    GUID Guid;
    SYSTEM_POWER_CONDITION PowerCondition;
    DWORD DataLength;
    BYTE Data[ANYSIZE_ARRAY];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;

#define POWER_SETTING_VALUE_VERSION  (0x1)

typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;

typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
    LARGE_INTEGER ActivationTime;
    DWORD Flags;
    DWORD ButtonInstanceID;
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;

typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE;

#define POWER_PLATFORM_ROLE_V1  (0x00000001)
#define POWER_PLATFORM_ROLE_V1_MAX  (PlatformRolePerformanceServer + 1)

#define POWER_PLATFORM_ROLE_V2  (0x00000002)
#define POWER_PLATFORM_ROLE_V2_MAX  (PlatformRoleSlate + 1)

#if (NTDDI_VERSION >= NTDDI_WIN8)
#define POWER_PLATFORM_ROLE_VERSION  POWER_PLATFORM_ROLE_V2
#define POWER_PLATFORM_ROLE_VERSION_MAX  POWER_PLATFORM_ROLE_V2_MAX
#else /* NTDDI_VERSION < NTDDI_WIN8 */
#define POWER_PLATFORM_ROLE_VERSION  POWER_PLATFORM_ROLE_V1
#define POWER_PLATFORM_ROLE_VERSION_MAX  POWER_PLATFORM_ROLE_V1_MAX
#endif /* NTDDI_VERSION < NTDDI_WIN8 */

typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;

#if (NTDDI_VERSION >= NTDDI_WINXP) || !defined(_BATCLASS_H)
typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
#endif /* NTDDI_VERSION >= NTDDI_WINXP || !_BATCLASS_ */

typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[ANYSIZE_ARRAY];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[ANYSIZE_ARRAY];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[ANYSIZE_ARRAY];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[ANYSIZE_ARRAY];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;

#define PROC_IDLE_BUCKET_COUNT  6

typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[PROC_IDLE_BUCKET_COUNT];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[ANYSIZE_ARRAY];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;

#define PROC_IDLE_BUCKET_COUNT_EX  16

typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[PROC_IDLE_BUCKET_COUNT_EX];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING_EX State[ANYSIZE_ARRAY];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;

#define ACPI_PPM_SOFTWARE_ALL  0xFC
#define ACPI_PPM_SOFTWARE_ANY  0xFD
#define ACPI_PPM_HARDWARE_ALL  0xFE

#define MS_PPM_SOFTWARE_ALL  0x1

#define PPM_FIRMWARE_ACPI1C2  0x00000001
#define PPM_FIRMWARE_ACPI1C3  0x00000002
#define PPM_FIRMWARE_ACPI1TSTATES 0x00000004
#define PPM_FIRMWARE_CST  0x00000008
#define PPM_FIRMWARE_CSD  0x00000010
#define PPM_FIRMWARE_PCT  0x00000020
#define PPM_FIRMWARE_PSS  0x00000040
#define PPM_FIRMWARE_XPSS  0x00000080
#define PPM_FIRMWARE_PPC  0x00000100
#define PPM_FIRMWARE_PSD  0x00000200
#define PPM_FIRMWARE_PTC  0x00000400
#define PPM_FIRMWARE_TSS  0x00000800
#define PPM_FIRMWARE_TPC  0x00001000
#define PPM_FIRMWARE_TSD  0x00002000
#define PPM_FIRMWARE_PCCH  0x00004000
#define PPM_FIRMWARE_PCCP  0x00008000
#define PPM_FIRMWARE_OSC  0x00010000
#define PPM_FIRMWARE_PDC  0x00020000
#define PPM_FIRMWARE_CPC  0x00040000

#define PPM_PERFORMANCE_IMPLEMENTATION_NONE  0x00000000
#define PPM_PERFORMANCE_IMPLEMENTATION_PSTATES  0x00000001
#define PPM_PERFORMANCE_IMPLEMENTATION_PCCV1  0x00000002
#define PPM_PERFORMANCE_IMPLEMENTATION_CPPC  0x00000003
#define PPM_PERFORMANCE_IMPLEMENTATION_PEP  0x00000004

#define PPM_IDLE_IMPLEMENTATION_NONE  0x00000000
#define PPM_IDLE_IMPLEMENTATION_CSTATES  0x00000001
#define PPM_IDLE_IMPLEMENTATION_PEP  0x00000002
#define PPM_IDLE_IMPLEMENTATION_MICROPEP  0x00000003

DEFINE_GUID(PPM_PERFSTATE_CHANGE_GUID, 0xa5b32ddd, 0x7f39, 0x4abc, 0xb8, 0x92, 0x90, 0xe, 0x43, 0xb5, 0x9e, 0xbb);
DEFINE_GUID(PPM_PERFSTATE_DOMAIN_CHANGE_GUID, 0x995e6b7f, 0xd653, 0x497a, 0xb9, 0x78, 0x36, 0xa3, 0xc, 0x29, 0xbf, 0x1);
DEFINE_GUID(PPM_IDLESTATE_CHANGE_GUID, 0x4838fe4f, 0xf71c, 0x4e51, 0x9e, 0xcc, 0x84, 0x30, 0xa7, 0xac, 0x4c, 0x6c);
DEFINE_GUID(PPM_PERFSTATES_DATA_GUID, 0x5708cc20, 0x7d40, 0x4bf4, 0xb4, 0xaa, 0x2b, 0x01, 0x33, 0x8d, 0x01, 0x26);
DEFINE_GUID(PPM_IDLESTATES_DATA_GUID, 0xba138e10, 0xe250, 0x4ad7, 0x86, 0x16, 0xcf, 0x1a, 0x7a, 0xd4, 0x10, 0xe7);
DEFINE_GUID(PPM_IDLE_ACCOUNTING_GUID, 0xe2a26f78, 0xae07, 0x4ee0, 0xa3, 0x0f, 0xce, 0x54, 0xf5, 0x5a, 0x94, 0xcd);
DEFINE_GUID(PPM_IDLE_ACCOUNTING_EX_GUID, 0xd67abd39, 0x81f8, 0x4a5e, 0x81, 0x52, 0x72, 0xe3, 0x1e, 0xc9, 0x12, 0xee);
DEFINE_GUID(PPM_THERMALCONSTRAINT_GUID, 0xa852c2c8, 0x1a4c, 0x423b, 0x8c, 0x2c, 0xf3, 0x0d, 0x82, 0x93, 0x1a, 0x88);
DEFINE_GUID(PPM_PERFMON_PERFSTATE_GUID, 0x7fd18652, 0xcfe, 0x40d2, 0xb0, 0xa1, 0xb, 0x6, 0x6a, 0x87, 0x75, 0x9e);
DEFINE_GUID(PPM_THERMAL_POLICY_CHANGE_GUID, 0x48f377b8, 0x6880, 0x4c7b, 0x8b, 0xdc, 0x38, 0x1, 0x76, 0xc6, 0x65, 0x4d);

typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;

#define POWER_ACTION_QUERY_ALLOWED  0x00000001
#define POWER_ACTION_UI_ALLOWED  0x00000002
#define POWER_ACTION_OVERRIDE_APPS  0x00000004
#define POWER_ACTION_HIBERBOOT  0x00000008
#define POWER_ACTION_USER_NOTIFY  0x00000010
#define POWER_ACTION_PSEUDO_TRANSITION  0x08000000
#define POWER_ACTION_LIGHTEST_FIRST  0x10000000
#define POWER_ACTION_LOCK_CONSOLE  0x20000000
#define POWER_ACTION_DISABLE_WAKES  0x40000000
#define POWER_ACTION_CRITICAL  0x80000000

#define POWER_LEVEL_USER_NOTIFY_TEXT  0x00000001
#define POWER_LEVEL_USER_NOTIFY_SOUND  0x00000002
#define POWER_LEVEL_USER_NOTIFY_EXEC  0x00000004
#define POWER_USER_NOTIFY_BUTTON  0x00000008
#define POWER_USER_NOTIFY_SHUTDOWN  0x00000010
#define POWER_USER_NOTIFY_FORCED_SHUTDOWN 0x00000020
#define POWER_FORCE_TRIGGER_RESET  0x80000000

#define BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK  0x00000007
#define BATTERY_DISCHARGE_FLAGS_ENABLE  0x80000000

typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;

#define NUM_DISCHARGE_POLICIES  4
#define DISCHARGE_POLICY_CRITICAL  0
#define DISCHARGE_POLICY_LOW  1

typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;
    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;
    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;
    BYTE DynamicThrottle;
    BYTE Spare2[2];
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;
    DWORD Spare3;
    DWORD DozeS4Timeout;
    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[NUM_DISCHARGE_POLICIES];
    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];
    DWORD SpindownTimeout;
    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;

#define PROCESSOR_IDLESTATE_POLICY_COUNT  0x3

typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD;
        struct {
            WORD AllowScaling:1;
            WORD Disabled:1;
            WORD Reserved:14;
        } DUMMYSTRUCTNAME;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[PROCESSOR_IDLESTATE_POLICY_COUNT];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;

#define PO_THROTTLE_NONE  0
#define PO_THROTTLE_CONSTANT  1
#define PO_THROTTLE_DEGRADE  2
#define PO_THROTTLE_ADAPTIVE  3
#define PO_THROTTLE_MAXIMUM  4  

typedef struct _PROCESSOR_POWER_POLICY_INFO {
    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;

typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;
    BYTE DynamicThrottle;
    BYTE Spare[3];
    DWORD DisableCStates:1;
    DWORD Reserved:31;
    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;

typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE;
            struct {
                BYTE NoDomainAccounting:1;
                BYTE IncreasePolicy:2;
                BYTE DecreasePolicy:2;
                BYTE Reserved:3;
            } DUMMYSTRUCTNAME;
        } Flags;
    } DUMMYUNIONNAME;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;

typedef struct _ADMINISTRATOR_POWER_POLICY {
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;
    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;

typedef enum _HIBERFILE_BUCKET_SIZE {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB,
    HiberFileBucket4GB,
    HiberFileBucket8GB,
    HiberFileBucket16GB,
    HiberFileBucket32GB,
    HiberFileBucketUnlimited,
    HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE, *PHIBERFILE_BUCKET_SIZE;

#define HIBERFILE_TYPE_NONE  0x00
#define HIBERFILE_TYPE_REDUCED  0x01
#define HIBERFILE_TYPE_FULL  0x02
#define HIBERFILE_TYPE_MAX  0x03

typedef struct _HIBERFILE_BUCKET {
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[HIBERFILE_TYPE_MAX];
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET;

typedef struct {
    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;
    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;
#if (NTDDI_VERSION < NTDDI_WINXP)
    BYTE ProcessorThrottleScale;
    BYTE spare2[4];
#else /* NTDDI_VERSION >= NTDDI_WINXP */
    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;
#endif /* NTDDI_VERSION >= NTDDI_WINXP */
    BOOLEAN DiskSpinDown;
#if (NTDDI_VERSION < NTDDI_WINTHRESHOLD)
    BYTE spare3[8];
#else /* NTDDI_VERSION >= NTDDI_WINTHRESHOLD */
    BYTE HiberFileType;
    BOOLEAN AoAcConnectivitySupported;
    BYTE spare3[6];
#endif /* NTDDI_VERSION >= NTDDI_WINTHRESHOLD */
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];
    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];
    BYTE Tag;
    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;
    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;

#include "pshpack4.h"

#define IMAGE_DOS_SIGNATURE  0x5A4D
#define IMAGE_OS2_SIGNATURE  0x454E
#define IMAGE_OS2_SIGNATURE_LE  0x454C
#define IMAGE_VXD_SIGNATURE  0x454C
#define IMAGE_NT_SIGNATURE  0x00004550

#include "pshpack2.h"

typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;

#include "poppack.h"

typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

#define IMAGE_SIZEOF_FILE_HEADER  20

#define IMAGE_FILE_RELOCS_STRIPPED  0x0001  
#define IMAGE_FILE_EXECUTABLE_IMAGE  0x0002  
#define IMAGE_FILE_LINE_NUMS_STRIPPED  0x0004  
#define IMAGE_FILE_LOCAL_SYMS_STRIPPED  0x0008  
#define IMAGE_FILE_AGGRESIVE_WS_TRIM  0x0010  
#define IMAGE_FILE_LARGE_ADDRESS_AWARE  0x0020  
#define IMAGE_FILE_BYTES_REVERSED_LO  0x0080  
#define IMAGE_FILE_32BIT_MACHINE  0x0100  
#define IMAGE_FILE_DEBUG_STRIPPED  0x0200  
#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP  0x0400  
#define IMAGE_FILE_NET_RUN_FROM_SWAP  0x0800  
#define IMAGE_FILE_SYSTEM  0x1000  
#define IMAGE_FILE_DLL  0x2000  
#define IMAGE_FILE_UP_SYSTEM_ONLY  0x4000  
#define IMAGE_FILE_BYTES_REVERSED_HI  0x8000  

#define IMAGE_FILE_MACHINE_UNKNOWN  0
#define IMAGE_FILE_MACHINE_TARGET_HOST  0x0001
#define IMAGE_FILE_MACHINE_I386  0x014c
#define IMAGE_FILE_MACHINE_R3000  0x0162
#define IMAGE_FILE_MACHINE_R4000  0x0166
#define IMAGE_FILE_MACHINE_R10000  0x0168
#define IMAGE_FILE_MACHINE_WCEMIPSV2  0x0169
#define IMAGE_FILE_MACHINE_ALPHA  0x0184
#define IMAGE_FILE_MACHINE_SH3  0x01a2
#define IMAGE_FILE_MACHINE_SH3DSP  0x01a3
#define IMAGE_FILE_MACHINE_SH3E  0x01a4
#define IMAGE_FILE_MACHINE_SH4  0x01a6
#define IMAGE_FILE_MACHINE_SH5  0x01a8
#define IMAGE_FILE_MACHINE_ARM  0x01c0
#define IMAGE_FILE_MACHINE_THUMB  0x01c2
#define IMAGE_FILE_MACHINE_ARMNT  0x01c4
#define IMAGE_FILE_MACHINE_AM33  0x01d3
#define IMAGE_FILE_MACHINE_POWERPC  0x01F0
#define IMAGE_FILE_MACHINE_POWERPCFP  0x01f1
#define IMAGE_FILE_MACHINE_IA64  0x0200
#define IMAGE_FILE_MACHINE_MIPS16  0x0266
#define IMAGE_FILE_MACHINE_ALPHA64  0x0284
#define IMAGE_FILE_MACHINE_MIPSFPU  0x0366
#define IMAGE_FILE_MACHINE_MIPSFPU16  0x0466
#define IMAGE_FILE_MACHINE_AXP64  IMAGE_FILE_MACHINE_ALPHA64
#define IMAGE_FILE_MACHINE_TRICORE  0x0520
#define IMAGE_FILE_MACHINE_CEF  0x0CEF
#define IMAGE_FILE_MACHINE_EBC  0x0EBC
#define IMAGE_FILE_MACHINE_AMD64  0x8664
#define IMAGE_FILE_MACHINE_M32R  0x9041
#define IMAGE_FILE_MACHINE_ARM64  0xAA64
#define IMAGE_FILE_MACHINE_CEE  0xC0EE

typedef struct _IMAGE_DATA_DIRECTORY {
  DWORD  VirtualAddress;
  DWORD  Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES  16

typedef struct _IMAGE_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;

#define IMAGE_NT_OPTIONAL_HDR32_MAGIC  0x10b
#define IMAGE_NT_OPTIONAL_HDR64_MAGIC  0x20b
#define IMAGE_ROM_OPTIONAL_HDR_MAGIC  0x107

#ifdef _WIN64
typedef IMAGE_OPTIONAL_HEADER64  IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64  PIMAGE_OPTIONAL_HEADER;
#define IMAGE_NT_OPTIONAL_HDR_MAGIC  IMAGE_NT_OPTIONAL_HDR64_MAGIC
#else /* !_WIN64 */
typedef IMAGE_OPTIONAL_HEADER32  IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32  PIMAGE_OPTIONAL_HEADER;
#define IMAGE_NT_OPTIONAL_HDR_MAGIC  IMAGE_NT_OPTIONAL_HDR32_MAGIC
#endif /* !_WIN64 */

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;

#ifdef _WIN64
typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
#else /* !_WIN64 */
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
#endif /* !_WIN64 */

#define IMAGE_FIRST_SECTION(ntheader)  ((PIMAGE_SECTION_HEADER)((ULONG_PTR)(ntheader) + FIELD_OFFSET(IMAGE_NT_HEADERS, OptionalHeader) + ((ntheader))->FileHeader.SizeOfOptionalHeader))

#define IMAGE_SUBSYSTEM_UNKNOWN  0  
#define IMAGE_SUBSYSTEM_NATIVE  1  
#define IMAGE_SUBSYSTEM_WINDOWS_GUI  2  
#define IMAGE_SUBSYSTEM_WINDOWS_CUI  3  
#define IMAGE_SUBSYSTEM_OS2_CUI  5  
#define IMAGE_SUBSYSTEM_POSIX_CUI  7  
#define IMAGE_SUBSYSTEM_NATIVE_WINDOWS  8  
#define IMAGE_SUBSYSTEM_WINDOWS_CE_GUI  9  
#define IMAGE_SUBSYSTEM_EFI_APPLICATION  10  
#define IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER  11  
#define IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER  12  
#define IMAGE_SUBSYSTEM_EFI_ROM  13
#define IMAGE_SUBSYSTEM_XBOX  14
#define IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION  16
#define IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG  17

#define IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA  0x0020
#define IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE 0x0040
#define IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY  0x0080
#define IMAGE_DLLCHARACTERISTICS_NX_COMPAT  0x0100
#define IMAGE_DLLCHARACTERISTICS_NO_ISOLATION 0x0200
#define IMAGE_DLLCHARACTERISTICS_NO_SEH  0x0400
#define IMAGE_DLLCHARACTERISTICS_NO_BIND  0x0800
#define IMAGE_DLLCHARACTERISTICS_APPCONTAINER  0x1000
#define IMAGE_DLLCHARACTERISTICS_WDM_DRIVER  0x2000
#define IMAGE_DLLCHARACTERISTICS_GUARD_CF  0x4000
#define IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE  0x8000

#define IMAGE_DIRECTORY_ENTRY_EXPORT  0  
#define IMAGE_DIRECTORY_ENTRY_IMPORT  1  
#define IMAGE_DIRECTORY_ENTRY_RESOURCE  2  
#define IMAGE_DIRECTORY_ENTRY_EXCEPTION  3  
#define IMAGE_DIRECTORY_ENTRY_SECURITY  4  
#define IMAGE_DIRECTORY_ENTRY_BASERELOC  5  
#define IMAGE_DIRECTORY_ENTRY_DEBUG  6  

#define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE  7  
#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR  8  
#define IMAGE_DIRECTORY_ENTRY_TLS  9  
#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG  10  
#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT  11  
#define IMAGE_DIRECTORY_ENTRY_IAT  12  
#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT  13  
#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14  

typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;

#define IMAGE_SIZEOF_SHORT_NAME  8

typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[IMAGE_SIZEOF_SHORT_NAME];
    union {
        DWORD PhysicalAddress;
        DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

#define IMAGE_SIZEOF_SECTION_HEADER  40

#define IMAGE_SCN_TYPE_NO_PAD  0x00000008  

#define IMAGE_SCN_CNT_CODE  0x00000020  
#define IMAGE_SCN_CNT_INITIALIZED_DATA  0x00000040  
#define IMAGE_SCN_CNT_UNINITIALIZED_DATA  0x00000080  

#define IMAGE_SCN_LNK_OTHER  0x00000100  
#define IMAGE_SCN_LNK_INFO  0x00000200  
#define IMAGE_SCN_LNK_REMOVE  0x00000800  
#define IMAGE_SCN_LNK_COMDAT  0x00001000  
#define IMAGE_SCN_NO_DEFER_SPEC_EXC  0x00004000  
#define IMAGE_SCN_GPREL  0x00008000  
#define IMAGE_SCN_MEM_FARDATA  0x00008000
#define IMAGE_SCN_MEM_PURGEABLE  0x00020000
#define IMAGE_SCN_MEM_16BIT  0x00020000
#define IMAGE_SCN_MEM_LOCKED  0x00040000
#define IMAGE_SCN_MEM_PRELOAD  0x00080000

#define IMAGE_SCN_ALIGN_1BYTES  0x00100000  
#define IMAGE_SCN_ALIGN_2BYTES  0x00200000  
#define IMAGE_SCN_ALIGN_4BYTES  0x00300000  
#define IMAGE_SCN_ALIGN_8BYTES  0x00400000  
#define IMAGE_SCN_ALIGN_16BYTES  0x00500000  
#define IMAGE_SCN_ALIGN_32BYTES  0x00600000  
#define IMAGE_SCN_ALIGN_64BYTES  0x00700000  
#define IMAGE_SCN_ALIGN_128BYTES  0x00800000  
#define IMAGE_SCN_ALIGN_256BYTES  0x00900000  
#define IMAGE_SCN_ALIGN_512BYTES  0x00A00000  
#define IMAGE_SCN_ALIGN_1024BYTES  0x00B00000  
#define IMAGE_SCN_ALIGN_2048BYTES  0x00C00000  
#define IMAGE_SCN_ALIGN_4096BYTES  0x00D00000  
#define IMAGE_SCN_ALIGN_8192BYTES  0x00E00000  
#define IMAGE_SCN_ALIGN_MASK  0x00F00000

#define IMAGE_SCN_LNK_NRELOC_OVFL  0x01000000  
#define IMAGE_SCN_MEM_DISCARDABLE  0x02000000  
#define IMAGE_SCN_MEM_NOT_CACHED  0x04000000  
#define IMAGE_SCN_MEM_NOT_PAGED  0x08000000  
#define IMAGE_SCN_MEM_SHARED  0x10000000  
#define IMAGE_SCN_MEM_EXECUTE  0x20000000  
#define IMAGE_SCN_MEM_READ  0x40000000  
#define IMAGE_SCN_MEM_WRITE  0x80000000  

#define IMAGE_SCN_SCALE_INDEX  0x00000001  

#include "pshpack2.h"

typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL UNALIGNED *PIMAGE_SYMBOL;

#define IMAGE_SIZEOF_SYMBOL  18

typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];  
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX UNALIGNED *PIMAGE_SYMBOL_EX;

#define IMAGE_SYM_UNDEFINED  (SHORT)0
#define IMAGE_SYM_ABSOLUTE  (SHORT)-1
#define IMAGE_SYM_DEBUG  (SHORT)-2
#define IMAGE_SYM_SECTION_MAX  0xFEFF
#define IMAGE_SYM_SECTION_MAX_EX  MAXLONG

#define IMAGE_SYM_TYPE_NULL  0x0000  
#define IMAGE_SYM_TYPE_VOID  0x0001  
#define IMAGE_SYM_TYPE_CHAR  0x0002  
#define IMAGE_SYM_TYPE_SHORT  0x0003  
#define IMAGE_SYM_TYPE_INT  0x0004  
#define IMAGE_SYM_TYPE_LONG  0x0005  
#define IMAGE_SYM_TYPE_FLOAT  0x0006  
#define IMAGE_SYM_TYPE_DOUBLE  0x0007  
#define IMAGE_SYM_TYPE_STRUCT  0x0008  
#define IMAGE_SYM_TYPE_UNION  0x0009  
#define IMAGE_SYM_TYPE_ENUM  0x000A  
#define IMAGE_SYM_TYPE_MOE  0x000B  
#define IMAGE_SYM_TYPE_BYTE  0x000C  
#define IMAGE_SYM_TYPE_WORD  0x000D  
#define IMAGE_SYM_TYPE_UINT  0x000E  
#define IMAGE_SYM_TYPE_DWORD  0x000F  
#define IMAGE_SYM_TYPE_PCODE  0x8000  

#define IMAGE_SYM_DTYPE_NULL  0  
#define IMAGE_SYM_DTYPE_POINTER  1  
#define IMAGE_SYM_DTYPE_FUNCTION  2  
#define IMAGE_SYM_DTYPE_ARRAY  3  

#define IMAGE_SYM_CLASS_END_OF_FUNCTION  (BYTE )-1
#define IMAGE_SYM_CLASS_NULL  0x0000
#define IMAGE_SYM_CLASS_AUTOMATIC  0x0001
#define IMAGE_SYM_CLASS_EXTERNAL  0x0002
#define IMAGE_SYM_CLASS_STATIC  0x0003
#define IMAGE_SYM_CLASS_REGISTER  0x0004
#define IMAGE_SYM_CLASS_EXTERNAL_DEF  0x0005
#define IMAGE_SYM_CLASS_LABEL  0x0006
#define IMAGE_SYM_CLASS_UNDEFINED_LABEL  0x0007
#define IMAGE_SYM_CLASS_MEMBER_OF_STRUCT  0x0008
#define IMAGE_SYM_CLASS_ARGUMENT  0x0009
#define IMAGE_SYM_CLASS_STRUCT_TAG  0x000A
#define IMAGE_SYM_CLASS_MEMBER_OF_UNION  0x000B
#define IMAGE_SYM_CLASS_UNION_TAG  0x000C
#define IMAGE_SYM_CLASS_TYPE_DEFINITION  0x000D
#define IMAGE_SYM_CLASS_UNDEFINED_STATIC  0x000E
#define IMAGE_SYM_CLASS_ENUM_TAG  0x000F
#define IMAGE_SYM_CLASS_MEMBER_OF_ENUM  0x0010
#define IMAGE_SYM_CLASS_REGISTER_PARAM  0x0011
#define IMAGE_SYM_CLASS_BIT_FIELD  0x0012

#define IMAGE_SYM_CLASS_FAR_EXTERNAL  0x0044  

#define IMAGE_SYM_CLASS_BLOCK  0x0064
#define IMAGE_SYM_CLASS_FUNCTION  0x0065
#define IMAGE_SYM_CLASS_END_OF_STRUCT  0x0066
#define IMAGE_SYM_CLASS_FILE  0x0067
#define IMAGE_SYM_CLASS_SECTION  0x0068
#define IMAGE_SYM_CLASS_WEAK_EXTERNAL  0x0069

#define IMAGE_SYM_CLASS_CLR_TOKEN  0x006B

#define N_BTMASK  0x000F
#define N_TMASK  0x0030
#define N_TMASK1  0x00C0
#define N_TMASK2  0x00F0
#define N_BTSHFT  4
#define N_TSHIFT  2

#define BTYPE(x)  ((x) & N_BTMASK)

#ifndef ISPTR
#define ISPTR(x)  (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_POINTER << N_BTSHFT))
#endif

#ifndef ISFCN
#define ISFCN(x)  (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_FUNCTION << N_BTSHFT))
#endif

#ifndef ISARY
#define ISARY(x)  (((x) & N_TMASK) == (IMAGE_SYM_DTYPE_ARRAY << N_BTSHFT))
#endif

#ifndef ISTAG
#define ISTAG(x)  ((x)==IMAGE_SYM_CLASS_STRUCT_TAG || (x)==IMAGE_SYM_CLASS_UNION_TAG || (x)==IMAGE_SYM_CLASS_ENUM_TAG)
#endif

#ifndef INCREF
#define INCREF(x)  ((((x)&~N_BTMASK)<<N_TSHIFT)|(IMAGE_SYM_DTYPE_POINTER<<N_BTSHFT)|((x)&N_BTMASK))
#endif
#ifndef DECREF
#define DECREF(x)  ((((x)>>N_TSHIFT)&~N_BTMASK)|((x)&N_BTMASK))
#endif

#include <pshpack2.h>
typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF UNALIGNED *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
#include <poppack.h>

typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD  TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
            DWORD  TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD  TvIndex;
    } Sym;
    struct {
        BYTE Name[IMAGE_SIZEOF_SYMBOL];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL UNALIGNED *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{ 
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;  
        BYTE rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX UNALIGNED *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;

#define IMAGE_COMDAT_SELECT_NODUPLICATES  1
#define IMAGE_COMDAT_SELECT_ANY  2
#define IMAGE_COMDAT_SELECT_SAME_SIZE  3
#define IMAGE_COMDAT_SELECT_EXACT_MATCH  4
#define IMAGE_COMDAT_SELECT_ASSOCIATIVE  5
#define IMAGE_COMDAT_SELECT_LARGEST  6
#define IMAGE_COMDAT_SELECT_NEWEST  7

#define IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY  1
#define IMAGE_WEAK_EXTERN_SEARCH_LIBRARY  2
#define IMAGE_WEAK_EXTERN_SEARCH_ALIAS  3

typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } DUMMYUNIONNAME;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION UNALIGNED *PIMAGE_RELOCATION;

#define IMAGE_REL_I386_ABSOLUTE  0x0000  
#define IMAGE_REL_I386_DIR16  0x0001  
#define IMAGE_REL_I386_REL16  0x0002  
#define IMAGE_REL_I386_DIR32  0x0006  
#define IMAGE_REL_I386_DIR32NB  0x0007  
#define IMAGE_REL_I386_SEG12  0x0009  
#define IMAGE_REL_I386_SECTION  0x000A
#define IMAGE_REL_I386_SECREL  0x000B
#define IMAGE_REL_I386_TOKEN  0x000C  
#define IMAGE_REL_I386_SECREL7  0x000D  
#define IMAGE_REL_I386_REL32  0x0014  

#define IMAGE_REL_MIPS_ABSOLUTE  0x0000  
#define IMAGE_REL_MIPS_REFHALF  0x0001
#define IMAGE_REL_MIPS_REFWORD  0x0002
#define IMAGE_REL_MIPS_JMPADDR  0x0003
#define IMAGE_REL_MIPS_REFHI  0x0004
#define IMAGE_REL_MIPS_REFLO  0x0005
#define IMAGE_REL_MIPS_GPREL  0x0006
#define IMAGE_REL_MIPS_LITERAL  0x0007
#define IMAGE_REL_MIPS_SECTION  0x000A
#define IMAGE_REL_MIPS_SECREL  0x000B
#define IMAGE_REL_MIPS_SECRELLO  0x000C  
#define IMAGE_REL_MIPS_SECRELHI  0x000D  
#define IMAGE_REL_MIPS_TOKEN  0x000E  
#define IMAGE_REL_MIPS_JMPADDR16  0x0010
#define IMAGE_REL_MIPS_REFWORDNB  0x0022
#define IMAGE_REL_MIPS_PAIR  0x0025

#define IMAGE_REL_ALPHA_ABSOLUTE  0x0000
#define IMAGE_REL_ALPHA_REFLONG  0x0001
#define IMAGE_REL_ALPHA_REFQUAD  0x0002
#define IMAGE_REL_ALPHA_GPREL32  0x0003
#define IMAGE_REL_ALPHA_LITERAL  0x0004
#define IMAGE_REL_ALPHA_LITUSE  0x0005
#define IMAGE_REL_ALPHA_GPDISP  0x0006
#define IMAGE_REL_ALPHA_BRADDR  0x0007
#define IMAGE_REL_ALPHA_HINT  0x0008
#define IMAGE_REL_ALPHA_INLINE_REFLONG  0x0009
#define IMAGE_REL_ALPHA_REFHI  0x000A
#define IMAGE_REL_ALPHA_REFLO  0x000B
#define IMAGE_REL_ALPHA_PAIR  0x000C
#define IMAGE_REL_ALPHA_MATCH  0x000D
#define IMAGE_REL_ALPHA_SECTION  0x000E
#define IMAGE_REL_ALPHA_SECREL  0x000F
#define IMAGE_REL_ALPHA_REFLONGNB  0x0010
#define IMAGE_REL_ALPHA_SECRELLO  0x0011  
#define IMAGE_REL_ALPHA_SECRELHI  0x0012  
#define IMAGE_REL_ALPHA_REFQ3  0x0013  
#define IMAGE_REL_ALPHA_REFQ2  0x0014  
#define IMAGE_REL_ALPHA_REFQ1  0x0015  
#define IMAGE_REL_ALPHA_GPRELLO  0x0016  
#define IMAGE_REL_ALPHA_GPRELHI  0x0017  

#define IMAGE_REL_PPC_ABSOLUTE  0x0000  
#define IMAGE_REL_PPC_ADDR64  0x0001  
#define IMAGE_REL_PPC_ADDR32  0x0002  
#define IMAGE_REL_PPC_ADDR24  0x0003  
#define IMAGE_REL_PPC_ADDR16  0x0004  
#define IMAGE_REL_PPC_ADDR14  0x0005  
#define IMAGE_REL_PPC_REL24  0x0006  
#define IMAGE_REL_PPC_REL14  0x0007  
#define IMAGE_REL_PPC_TOCREL16  0x0008  
#define IMAGE_REL_PPC_TOCREL14  0x0009  

#define IMAGE_REL_PPC_ADDR32NB  0x000A  
#define IMAGE_REL_PPC_SECREL  0x000B  
#define IMAGE_REL_PPC_SECTION  0x000C  
#define IMAGE_REL_PPC_IFGLUE  0x000D  
#define IMAGE_REL_PPC_IMGLUE  0x000E  
#define IMAGE_REL_PPC_SECREL16  0x000F  
#define IMAGE_REL_PPC_REFHI  0x0010
#define IMAGE_REL_PPC_REFLO  0x0011
#define IMAGE_REL_PPC_PAIR  0x0012
#define IMAGE_REL_PPC_SECRELLO  0x0013  
#define IMAGE_REL_PPC_SECRELHI  0x0014  
#define IMAGE_REL_PPC_GPREL  0x0015
#define IMAGE_REL_PPC_TOKEN  0x0016  

#define IMAGE_REL_PPC_TYPEMASK  0x00FF  

#define IMAGE_REL_PPC_NEG  0x0100  
#define IMAGE_REL_PPC_BRTAKEN  0x0200  
#define IMAGE_REL_PPC_BRNTAKEN  0x0400  
#define IMAGE_REL_PPC_TOCDEFN  0x0800  

#define IMAGE_REL_SH3_ABSOLUTE  0x0000  
#define IMAGE_REL_SH3_DIRECT16  0x0001  
#define IMAGE_REL_SH3_DIRECT32  0x0002  
#define IMAGE_REL_SH3_DIRECT8  0x0003  
#define IMAGE_REL_SH3_DIRECT8_WORD  0x0004  
#define IMAGE_REL_SH3_DIRECT8_LONG  0x0005  
#define IMAGE_REL_SH3_DIRECT4  0x0006  
#define IMAGE_REL_SH3_DIRECT4_WORD  0x0007  
#define IMAGE_REL_SH3_DIRECT4_LONG  0x0008  
#define IMAGE_REL_SH3_PCREL8_WORD  0x0009  
#define IMAGE_REL_SH3_PCREL8_LONG  0x000A  
#define IMAGE_REL_SH3_PCREL12_WORD  0x000B  
#define IMAGE_REL_SH3_STARTOF_SECTION  0x000C  
#define IMAGE_REL_SH3_SIZEOF_SECTION  0x000D  
#define IMAGE_REL_SH3_SECTION  0x000E  
#define IMAGE_REL_SH3_SECREL  0x000F  
#define IMAGE_REL_SH3_DIRECT32_NB  0x0010  
#define IMAGE_REL_SH3_GPREL4_LONG  0x0011  
#define IMAGE_REL_SH3_TOKEN  0x0012  
#define IMAGE_REL_SHM_PCRELPT  0x0013  

#define IMAGE_REL_SHM_REFLO  0x0014
#define IMAGE_REL_SHM_REFHALF  0x0015
#define IMAGE_REL_SHM_RELLO  0x0016
#define IMAGE_REL_SHM_RELHALF  0x0017
#define IMAGE_REL_SHM_PAIR  0x0018

#define IMAGE_REL_SH_NOMODE  0x8000

#define IMAGE_REL_ARM_ABSOLUTE  0x0000
#define IMAGE_REL_ARM_ADDR32  0x0001
#define IMAGE_REL_ARM_ADDR32NB  0x0002
#define IMAGE_REL_ARM_BRANCH24  0x0003
#define IMAGE_REL_ARM_BRANCH11  0x0004
#define IMAGE_REL_ARM_TOKEN  0x0005
#define IMAGE_REL_ARM_GPREL12  0x0006
#define IMAGE_REL_ARM_GPREL7  0x0007
#define IMAGE_REL_ARM_BLX24  0x0008
#define IMAGE_REL_ARM_BLX11  0x0009
#define IMAGE_REL_ARM_SECTION  0x000E
#define IMAGE_REL_ARM_SECREL  0x000F
#define IMAGE_REL_ARM_MOV32A  0x0010
#define IMAGE_REL_ARM_MOV32  0x0010
#define IMAGE_REL_ARM_MOV32T  0x0011
#define IMAGE_REL_THUMB_MOV32  0x0011
#define IMAGE_REL_ARM_BRANCH20T  0x0012
#define IMAGE_REL_THUMB_BRANCH20  0x0012
#define IMAGE_REL_ARM_BRANCH24T  0x0014
#define IMAGE_REL_THUMB_BRANCH24  0x0014
#define IMAGE_REL_ARM_BLX23T  0x0015
#define IMAGE_REL_THUMB_BLX23  0x0015

#define IMAGE_REL_AM_ABSOLUTE  0x0000
#define IMAGE_REL_AM_ADDR32  0x0001
#define IMAGE_REL_AM_ADDR32NB  0x0002
#define IMAGE_REL_AM_CALL32  0x0003
#define IMAGE_REL_AM_FUNCINFO  0x0004
#define IMAGE_REL_AM_REL32_1  0x0005
#define IMAGE_REL_AM_REL32_2  0x0006
#define IMAGE_REL_AM_SECREL  0x0007
#define IMAGE_REL_AM_SECTION  0x0008
#define IMAGE_REL_AM_TOKEN  0x0009

#define IMAGE_REL_ARM64_ABSOLUTE  0x0000
#define IMAGE_REL_ARM64_ADDR32  0x0001
#define IMAGE_REL_ARM64_ADDR32NB  0x0002
#define IMAGE_REL_ARM64_BRANCH26  0x0003
#define IMAGE_REL_ARM64_PAGEBASE_REL21  0x0004
#define IMAGE_REL_ARM64_REL21  0x0005
#define IMAGE_REL_ARM64_PAGEOFFSET_12A  0x0006
#define IMAGE_REL_ARM64_PAGEOFFSET_12L  0x0007
#define IMAGE_REL_ARM64_SECREL  0x0008
#define IMAGE_REL_ARM64_SECREL_LOW12A   0x0009
#define IMAGE_REL_ARM64_SECREL_HIGH12A  0x000A
#define IMAGE_REL_ARM64_SECREL_LOW12L   0x000B
#define IMAGE_REL_ARM64_TOKEN  0x000C
#define IMAGE_REL_ARM64_SECTION  0x000D
#define IMAGE_REL_ARM64_ADDR64  0x000E

#define IMAGE_REL_AMD64_ABSOLUTE  0x0000  
#define IMAGE_REL_AMD64_ADDR64  0x0001  
#define IMAGE_REL_AMD64_ADDR32  0x0002  
#define IMAGE_REL_AMD64_ADDR32NB  0x0003  
#define IMAGE_REL_AMD64_REL32  0x0004  
#define IMAGE_REL_AMD64_REL32_1  0x0005  
#define IMAGE_REL_AMD64_REL32_2  0x0006  
#define IMAGE_REL_AMD64_REL32_3  0x0007  
#define IMAGE_REL_AMD64_REL32_4  0x0008  
#define IMAGE_REL_AMD64_REL32_5  0x0009  
#define IMAGE_REL_AMD64_SECTION  0x000A  
#define IMAGE_REL_AMD64_SECREL  0x000B  
#define IMAGE_REL_AMD64_SECREL7  0x000C  
#define IMAGE_REL_AMD64_TOKEN  0x000D  
#define IMAGE_REL_AMD64_SREL32  0x000E  
#define IMAGE_REL_AMD64_PAIR  0x000F
#define IMAGE_REL_AMD64_SSPAN32  0x0010  

#define IMAGE_REL_IA64_ABSOLUTE  0x0000
#define IMAGE_REL_IA64_IMM14  0x0001
#define IMAGE_REL_IA64_IMM22  0x0002
#define IMAGE_REL_IA64_IMM64  0x0003
#define IMAGE_REL_IA64_DIR32  0x0004
#define IMAGE_REL_IA64_DIR64  0x0005
#define IMAGE_REL_IA64_PCREL21B  0x0006
#define IMAGE_REL_IA64_PCREL21M  0x0007
#define IMAGE_REL_IA64_PCREL21F  0x0008
#define IMAGE_REL_IA64_GPREL22  0x0009
#define IMAGE_REL_IA64_LTOFF22  0x000A
#define IMAGE_REL_IA64_SECTION  0x000B
#define IMAGE_REL_IA64_SECREL22  0x000C
#define IMAGE_REL_IA64_SECREL64I  0x000D
#define IMAGE_REL_IA64_SECREL32  0x000E

#define IMAGE_REL_IA64_DIR32NB  0x0010
#define IMAGE_REL_IA64_SREL14  0x0011
#define IMAGE_REL_IA64_SREL22  0x0012
#define IMAGE_REL_IA64_SREL32  0x0013
#define IMAGE_REL_IA64_UREL32  0x0014
#define IMAGE_REL_IA64_PCREL60X  0x0015  
#define IMAGE_REL_IA64_PCREL60B  0x0016  
#define IMAGE_REL_IA64_PCREL60F  0x0017  
#define IMAGE_REL_IA64_PCREL60I  0x0018  
#define IMAGE_REL_IA64_PCREL60M  0x0019  
#define IMAGE_REL_IA64_IMMGPREL64  0x001A
#define IMAGE_REL_IA64_TOKEN  0x001B  
#define IMAGE_REL_IA64_GPREL32  0x001C
#define IMAGE_REL_IA64_ADDEND  0x001F

#define IMAGE_REL_CEF_ABSOLUTE  0x0000  
#define IMAGE_REL_CEF_ADDR32  0x0001  
#define IMAGE_REL_CEF_ADDR64  0x0002  
#define IMAGE_REL_CEF_ADDR32NB  0x0003  
#define IMAGE_REL_CEF_SECTION  0x0004  
#define IMAGE_REL_CEF_SECREL  0x0005  
#define IMAGE_REL_CEF_TOKEN  0x0006  

#define IMAGE_REL_CEE_ABSOLUTE  0x0000  
#define IMAGE_REL_CEE_ADDR32  0x0001  
#define IMAGE_REL_CEE_ADDR64  0x0002  
#define IMAGE_REL_CEE_ADDR32NB  0x0003  
#define IMAGE_REL_CEE_SECTION  0x0004  
#define IMAGE_REL_CEE_SECREL  0x0005  
#define IMAGE_REL_CEE_TOKEN  0x0006  

#define IMAGE_REL_M32R_ABSOLUTE  0x0000  
#define IMAGE_REL_M32R_ADDR32  0x0001  
#define IMAGE_REL_M32R_ADDR32NB  0x0002  
#define IMAGE_REL_M32R_ADDR24  0x0003  
#define IMAGE_REL_M32R_GPREL16  0x0004  
#define IMAGE_REL_M32R_PCREL24  0x0005  
#define IMAGE_REL_M32R_PCREL16  0x0006  
#define IMAGE_REL_M32R_PCREL8  0x0007  
#define IMAGE_REL_M32R_REFHALF  0x0008  
#define IMAGE_REL_M32R_REFHI  0x0009  
#define IMAGE_REL_M32R_REFLO  0x000A  
#define IMAGE_REL_M32R_PAIR  0x000B  
#define IMAGE_REL_M32R_SECTION  0x000C  
#define IMAGE_REL_M32R_SECREL32  0x000D  
#define IMAGE_REL_M32R_TOKEN  0x000E  

#define IMAGE_REL_EBC_ABSOLUTE  0x0000  
#define IMAGE_REL_EBC_ADDR32NB  0x0001  
#define IMAGE_REL_EBC_REL32  0x0002  
#define IMAGE_REL_EBC_SECTION  0x0003  
#define IMAGE_REL_EBC_SECREL  0x0004  

#define EXT_IMM64(Value, Address, Size, InstPos, ValPos)  \
  Value |= (((ULONGLONG)((*(Address) >> InstPos) & (((ULONGLONG)1 << Size) - 1))) << ValPos)  

#define INS_IMM64(Value, Address, Size, InstPos, ValPos)  \
  *(PDWORD)Address = (*(PDWORD)Address & ~(((1 << Size) - 1) << InstPos)) | \
  ((DWORD)((((ULONGLONG)Value >> ValPos) & (((ULONGLONG)1 << Size) - 1))) << InstPos)  

#define EMARCH_ENC_I17_IMM7B_INST_WORD_X  3  
#define EMARCH_ENC_I17_IMM7B_SIZE_X  7  
#define EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X  4  
#define EMARCH_ENC_I17_IMM7B_VAL_POS_X  0  

#define EMARCH_ENC_I17_IMM9D_INST_WORD_X  3  
#define EMARCH_ENC_I17_IMM9D_SIZE_X  9  
#define EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X  18 
#define EMARCH_ENC_I17_IMM9D_VAL_POS_X  7  

#define EMARCH_ENC_I17_IMM5C_INST_WORD_X  3  
#define EMARCH_ENC_I17_IMM5C_SIZE_X  5  
#define EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X  13 
#define EMARCH_ENC_I17_IMM5C_VAL_POS_X  16 

#define EMARCH_ENC_I17_IC_INST_WORD_X  3  
#define EMARCH_ENC_I17_IC_SIZE_X  1  
#define EMARCH_ENC_I17_IC_INST_WORD_POS_X  12 
#define EMARCH_ENC_I17_IC_VAL_POS_X  21 

#define EMARCH_ENC_I17_IMM41a_INST_WORD_X  1  
#define EMARCH_ENC_I17_IMM41a_SIZE_X  10 
#define EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X  14 
#define EMARCH_ENC_I17_IMM41a_VAL_POS_X  22 

#define EMARCH_ENC_I17_IMM41b_INST_WORD_X  1  
#define EMARCH_ENC_I17_IMM41b_SIZE_X  8  
#define EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X  24 
#define EMARCH_ENC_I17_IMM41b_VAL_POS_X  32 

#define EMARCH_ENC_I17_IMM41c_INST_WORD_X  2  
#define EMARCH_ENC_I17_IMM41c_SIZE_X  23 
#define EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X  0  
#define EMARCH_ENC_I17_IMM41c_VAL_POS_X  40 

#define EMARCH_ENC_I17_SIGN_INST_WORD_X  3  
#define EMARCH_ENC_I17_SIGN_SIZE_X  1  
#define EMARCH_ENC_I17_SIGN_INST_WORD_POS_X  27 
#define EMARCH_ENC_I17_SIGN_VAL_POS_X  63 

#define X3_OPCODE_INST_WORD_X  3  
#define X3_OPCODE_SIZE_X  4  
#define X3_OPCODE_INST_WORD_POS_X  28 
#define X3_OPCODE_SIGN_VAL_POS_X  0  

#define X3_I_INST_WORD_X  3  
#define X3_I_SIZE_X  1  
#define X3_I_INST_WORD_POS_X  27 
#define X3_I_SIGN_VAL_POS_X  59 

#define X3_D_WH_INST_WORD_X  3  
#define X3_D_WH_SIZE_X  3  
#define X3_D_WH_INST_WORD_POS_X  24 
#define X3_D_WH_SIGN_VAL_POS_X  0  

#define X3_IMM20_INST_WORD_X  3  
#define X3_IMM20_SIZE_X  20 
#define X3_IMM20_INST_WORD_POS_X  4  
#define X3_IMM20_SIGN_VAL_POS_X  0  

#define X3_IMM39_1_INST_WORD_X  2  
#define X3_IMM39_1_SIZE_X  23 
#define X3_IMM39_1_INST_WORD_POS_X  0  
#define X3_IMM39_1_SIGN_VAL_POS_X  36 

#define X3_IMM39_2_INST_WORD_X  1  
#define X3_IMM39_2_SIZE_X  16 
#define X3_IMM39_2_INST_WORD_POS_X  16 
#define X3_IMM39_2_SIGN_VAL_POS_X  20 

#define X3_P_INST_WORD_X  3  
#define X3_P_SIZE_X  4  
#define X3_P_INST_WORD_POS_X  0  
#define X3_P_SIGN_VAL_POS_X  0  

#define X3_TMPLT_INST_WORD_X  0  
#define X3_TMPLT_SIZE_X  4  
#define X3_TMPLT_INST_WORD_POS_X  0  
#define X3_TMPLT_SIGN_VAL_POS_X  0  

#define X3_BTYPE_QP_INST_WORD_X  2  
#define X3_BTYPE_QP_SIZE_X  9  
#define X3_BTYPE_QP_INST_WORD_POS_X  23 
#define X3_BTYPE_QP_INST_VAL_POS_X  0  

#define X3_EMPTY_INST_WORD_X  1  
#define X3_EMPTY_SIZE_X  2  
#define X3_EMPTY_INST_WORD_POS_X  14 
#define X3_EMPTY_INST_VAL_POS_X  0  

typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER UNALIGNED *PIMAGE_LINENUMBER;

#include "poppack.h"

typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;
} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;

#define IMAGE_REL_BASED_ABSOLUTE  0
#define IMAGE_REL_BASED_HIGH  1
#define IMAGE_REL_BASED_LOW  2
#define IMAGE_REL_BASED_HIGHLOW  3
#define IMAGE_REL_BASED_HIGHADJ  4
#define IMAGE_REL_BASED_MACHINE_SPECIFIC_5   5
#define IMAGE_REL_BASED_RESERVED  6
#define IMAGE_REL_BASED_MACHINE_SPECIFIC_7  7
#define IMAGE_REL_BASED_MACHINE_SPECIFIC_8  8
#define IMAGE_REL_BASED_MACHINE_SPECIFIC_9  9
#define IMAGE_REL_BASED_DIR64  10

#define IMAGE_REL_BASED_ARM_MOV32  5
#define IMAGE_REL_BASED_THUMB_MOV32  7

#define IMAGE_ARCHIVE_START_SIZE  8
#define IMAGE_ARCHIVE_START  "!<arch>\n"
#define IMAGE_ARCHIVE_END  "`\n"
#define IMAGE_ARCHIVE_PAD  "\n"
#define IMAGE_ARCHIVE_LINKER_MEMBER     "/               "
#define IMAGE_ARCHIVE_LONGNAMES_MEMBER  "//              "

typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;

#define IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR  60

typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;

typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    BYTE Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#include "pshpack8.h"  
typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;
#include "poppack.h"  

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
  } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;

#define IMAGE_ORDINAL_FLAG64  0x8000000000000000
#define IMAGE_ORDINAL_FLAG32  0x80000000
#define IMAGE_ORDINAL64(Ordinal)  (Ordinal & 0xffff)
#define IMAGE_ORDINAL32(Ordinal)  (Ordinal & 0xffff)
#define IMAGE_SNAP_BY_ORDINAL64(Ordinal)  ((Ordinal & IMAGE_ORDINAL_FLAG64) != 0)
#define IMAGE_SNAP_BY_ORDINAL32(Ordinal)  ((Ordinal & IMAGE_ORDINAL_FLAG32) != 0)

typedef VOID (NTAPI *PIMAGE_TLS_CALLBACK)(PVOID, DWORD, PVOID);

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;

#ifdef _WIN64
#define IMAGE_ORDINAL_FLAG  IMAGE_ORDINAL_FLAG64
#define IMAGE_ORDINAL(Ordinal)  IMAGE_ORDINAL64(Ordinal)
typedef IMAGE_THUNK_DATA64  IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64  PIMAGE_THUNK_DATA;
#define IMAGE_SNAP_BY_ORDINAL(Ordinal)  IMAGE_SNAP_BY_ORDINAL64(Ordinal)
typedef IMAGE_TLS_DIRECTORY64  IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64  PIMAGE_TLS_DIRECTORY;
#else /* !_WIN64 */
#define IMAGE_ORDINAL_FLAG  IMAGE_ORDINAL_FLAG32
#define IMAGE_ORDINAL(Ordinal)  IMAGE_ORDINAL32(Ordinal)
typedef IMAGE_THUNK_DATA32  IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32  PIMAGE_THUNK_DATA;
#define IMAGE_SNAP_BY_ORDINAL(Ordinal)  IMAGE_SNAP_BY_ORDINAL32(Ordinal)
typedef IMAGE_TLS_DIRECTORY32  IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32  PIMAGE_TLS_DIRECTORY;
#endif /* !_WIN64 */

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } DUMMYUNIONNAME;
    DWORD TimeDateStamp;
    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
      DWORD RvaBased:1;
            DWORD ReservedAttributes:31;
        } DUMMYSTRUCTNAME;
    } Attributes;
    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;
} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

#define IMAGE_RESOURCE_NAME_IS_STRING  0x80000000
#define IMAGE_RESOURCE_DATA_IS_DIRECTORY  0x80000000

typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } DUMMYSTRUCTNAME;
        DWORD Name;
        WORD Id;
    } DUMMYUNIONNAME;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } DUMMYSTRUCTNAME2;
    } DUMMYUNIONNAME2;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[1];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;

typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;

typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    WORD    Flags;
    WORD    Catalog;
    DWORD   CatalogOffset;
    DWORD   Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;

typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    DWORD Version;
    DWORD Size;
} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;

typedef struct _IMAGE_DYNAMIC_RELOCATION {
    PVOID Symbol;
    DWORD BaseRelocSize;
} IMAGE_DYNAMIC_RELOCATION, *PIMAGE_DYNAMIC_RELOCATION;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;  /*VA*/
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    DWORD EditList;  /*VA*/
    DWORD SecurityCookie;  /*VA*/
    DWORD SEHandlerTable;  /*VA*/
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;  /*VA*/
    DWORD GuardCFDispatchFunctionPointer;  /*VA*/
    DWORD GuardCFFunctionTable;  /*VA*/
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    DWORD GuardAddressTakenIatEntryTable;  /*VA*/
    DWORD GuardAddressTakenIatEntryCount;
    DWORD GuardLongJumpTargetTable;  /*VA*/
    DWORD GuardLongJumpTargetCount;
    DWORD DynamicValueRelocTable;  /*VA*/
    DWORD CHPEMetadataPointer;
    DWORD GuardRFFailureRoutine;  /*VA*/
    DWORD GuardRFFailureRoutineFunctionPointer;  /*VA*/
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    DWORD GuardRFVerifyStackPointerFunctionPointer;  /*VA*/
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    DWORD EnclaveConfigurationPointer;  /*VA*/
    DWORD VolatileMetadataPointer;  /*VA*/
    DWORD GuardEHContinuationTable;  /*VA*/
    DWORD GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;  /*VA*/
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    ULONGLONG EditList;  /*VA*/
    ULONGLONG SecurityCookie;  /*VA*/
    ULONGLONG SEHandlerTable;  /*VA*/
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;  /*VA*/
    ULONGLONG GuardCFDispatchFunctionPointer;  /*VA*/
    ULONGLONG GuardCFFunctionTable;  /*VA*/
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG GuardAddressTakenIatEntryTable;  /*VA*/
    ULONGLONG GuardAddressTakenIatEntryCount;
    ULONGLONG GuardLongJumpTargetTable;  /*VA*/
    ULONGLONG GuardLongJumpTargetCount;
    ULONGLONG DynamicValueRelocTable;  /*VA*/
    ULONGLONG CHPEMetadataPointer;  /*VA*/
    ULONGLONG GuardRFFailureRoutine;  /*VA*/
    ULONGLONG GuardRFFailureRoutineFunctionPointer;  /*VA*/
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    ULONGLONG GuardRFVerifyStackPointerFunctionPointer;  /*VA*/
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    ULONGLONG EnclaveConfigurationPointer;  /*VA*/
    ULONGLONG VolatileMetadataPointer;  /*VA*/
    ULONGLONG GuardEHContinuationTable;  /*VA*/
    ULONGLONG GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;

#ifdef _WIN64
typedef IMAGE_LOAD_CONFIG_DIRECTORY64  IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64  PIMAGE_LOAD_CONFIG_DIRECTORY;
#else /* !_WIN64 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32  IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32  PIMAGE_LOAD_CONFIG_DIRECTORY;
#endif /* !_WIN64 */

typedef struct _IMAGE_HOT_PATCH_INFO {
    DWORD Version;
    DWORD Size;
    DWORD SequenceNumber;
    DWORD BaseImageList;
    DWORD BaseImageCount;
    DWORD BufferOffset;
    DWORD ExtraPatchSize;
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO;

typedef struct _IMAGE_HOT_PATCH_BASE {
    DWORD SequenceNumber;
    DWORD Flags;
    DWORD OriginalTimeDateStamp;
    DWORD OriginalCheckSum;
    DWORD CodeIntegrityInfo;
    DWORD CodeIntegritySize;
    DWORD PatchTable;
    DWORD BufferOffset;
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE;

typedef struct _IMAGE_HOT_PATCH_HASHES {
    BYTE SHA256[32];
    BYTE SHA1[20];
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES;

#define IMAGE_HOT_PATCH_BASE_OBLIGATORY  0x00000001
#define IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK  0x00000002

#define IMAGE_HOT_PATCH_CHUNK_INVERSE  0x80000000
#define IMAGE_HOT_PATCH_CHUNK_OBLIGATORY  0x40000000
#define IMAGE_HOT_PATCH_CHUNK_RESERVED  0x3FF03000
#define IMAGE_HOT_PATCH_CHUNK_TYPE  0x000FC000
#define IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA  0x00008000
#define IMAGE_HOT_PATCH_CHUNK_TARGET_RVA  0x00004000
#define IMAGE_HOT_PATCH_CHUNK_SIZE  0x00000FFF

#define IMAGE_HOT_PATCH_NONE  0x00000000
#define IMAGE_HOT_PATCH_FUNCTION  0x0001C000
#define IMAGE_HOT_PATCH_ABSOLUTE  0x0002C000
#define IMAGE_HOT_PATCH_REL32  0x0003C000
#define IMAGE_HOT_PATCH_CALL_TARGET  0x00044000
#define IMAGE_HOT_PATCH_INDIRECT  0x0005C000
#define IMAGE_HOT_PATCH_NO_CALL_TARGET  0x00064000
#define IMAGE_HOT_PATCH_DYNAMIC_VALUE  0x00078000

#define IMAGE_GUARD_CF_INSTRUMENTED  0x00000100
#define IMAGE_GUARD_CFW_INSTRUMENTED  0x00000200
#define IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT  0x00000400
#define IMAGE_GUARD_SECURITY_COOKIE_UNUSED  0x00000800
#define IMAGE_GUARD_PROTECT_DELAYLOAD_IAT  0x00001000
#define IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION  0x00002000
#define IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT  0x00004000
#define IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION  0x00008000
#define IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT  0x00010000
#define IMAGE_GUARD_RF_INSTRUMENTED  0x00020000
#define IMAGE_GUARD_RF_ENABLE  0x00040000
#define IMAGE_GUARD_RF_STRICT  0x00080000
#define IMAGE_GUARD_RETPOLINE_PRESENT  0x00100000
#define IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT  0x00400000
#define IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK  0xF0000000
#define IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT  28

#define IMAGE_GUARD_FLAG_FID_SUPPRESSED  0x01
#define IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED  0x02

typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen:8;
    DWORD FuncLen:22;
    DWORD ThirtyTwoBit:1;
    DWORD ExceptionFlag:1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag:2;
            DWORD FunctionLength:11;
            DWORD Ret:2;
            DWORD H:1;
            DWORD Reg:3;
            DWORD R:1;
            DWORD L:1;
            DWORD C:1;
            DWORD StackAdjust:10;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag:2;
            DWORD FunctionLength:11;
            DWORD RegF:3;
            DWORD RegI:4;
            DWORD H:1;
            DWORD CR:2;
            DWORD FrameSize:9;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } DUMMYUNIONNAME;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;

#if defined(_AXP64_)
typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
#elif defined(_ALPHA_)
typedef IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
#elif defined(_ARM64_)
typedef  IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
#elif defined(_ARM_)
typedef  IMAGE_ARM_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
#else
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
#endif

#define IMAGE_ENCLAVE_LONG_ID_LENGTH  ENCLAVE_LONG_ID_LENGTH
#define IMAGE_ENCLAVE_SHORT_ID_LENGTH  ENCLAVE_SHORT_ID_LENGTH

typedef struct _IMAGE_ENCLAVE_CONFIG32 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    BYTE ImageID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    DWORD EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG32, *PIMAGE_ENCLAVE_CONFIG32;

typedef struct _IMAGE_ENCLAVE_CONFIG64 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    BYTE ImageID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    ULONGLONG EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG64, *PIMAGE_ENCLAVE_CONFIG64;

#ifdef _WIN64
typedef IMAGE_ENCLAVE_CONFIG64  IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG64  PIMAGE_ENCLAVE_CONFIG;
#else
typedef IMAGE_ENCLAVE_CONFIG32  IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG32  PIMAGE_ENCLAVE_CONFIG;
#endif

#define IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE  FIELD_OFFSET(IMAGE_ENCLAVE_CONFIG, EnclaveFlags)

#define IMAGE_ENCLAVE_POLICY_DEBUGGABLE  0x00000001

#define IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE  0x00000001

typedef struct _IMAGE_ENCLAVE_IMPORT {
    DWORD MatchType;
    DWORD MinimumSecurityVersion;
    BYTE UniqueOrAuthorID[IMAGE_ENCLAVE_LONG_ID_LENGTH];
    BYTE FamilyID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    BYTE ImageID[IMAGE_ENCLAVE_SHORT_ID_LENGTH];
    DWORD ImportName;
    DWORD Reserved;
} IMAGE_ENCLAVE_IMPORT, *PIMAGE_ENCLAVE_IMPORT;

#define IMAGE_ENCLAVE_IMPORT_MATCH_NONE  0x00000000
#define IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID  0x00000001
#define IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID  0x00000002
#define IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID  0x00000003
#define IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID  0x00000004

typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

#define IMAGE_DEBUG_TYPE_UNKNOWN  0
#define IMAGE_DEBUG_TYPE_COFF  1
#define IMAGE_DEBUG_TYPE_CODEVIEW  2
#define IMAGE_DEBUG_TYPE_FPO  3
#define IMAGE_DEBUG_TYPE_MISC  4
#define IMAGE_DEBUG_TYPE_EXCEPTION  5
#define IMAGE_DEBUG_TYPE_FIXUP  6
#define IMAGE_DEBUG_TYPE_OMAP_TO_SRC  7
#define IMAGE_DEBUG_TYPE_OMAP_FROM_SRC  8
#define IMAGE_DEBUG_TYPE_BORLAND  9
#define IMAGE_DEBUG_TYPE_RESERVED10  10
#define IMAGE_DEBUG_TYPE_CLSID  11
#define IMAGE_DEBUG_TYPE_VC_FEATURE  12
#define IMAGE_DEBUG_TYPE_POGO  13
#define IMAGE_DEBUG_TYPE_ILTCG  14
#define IMAGE_DEBUG_TYPE_MPX  15

typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;

#define FRAME_FPO  0
#define FRAME_TRAP  1
#define FRAME_TSS  2
#define FRAME_NONFPO  3

typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog:8;
    WORD cbRegs:3;
    WORD fHasSEH:1;
    WORD fUseBP:1;
    WORD reserved:1;
    WORD cbFrame:2;
} FPO_DATA, *PFPO_DATA;
#define SIZEOF_RFPO_DATA 16

#define IMAGE_DEBUG_MISC_EXENAME  1

typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;
    BOOLEAN Unicode;
    BYTE Reserved[3];
    BYTE Data[1];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;

typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } DUMMYUNIONNAME;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;

typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;

#define IMAGE_SEPARATE_DEBUG_SIGNATURE 0x4944
#define NON_PAGED_DEBUG_SIGNATURE  0x494E

#define IMAGE_SEPARATE_DEBUG_FLAGS_MASK 0x8000
#define IMAGE_SEPARATE_DEBUG_MISMATCH  0x8000

typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue:1;
    int:7;
    unsigned int AmaskShift:8;
    int:16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#include "poppack.h"

#define IMPORT_OBJECT_HDR_SIG2  0xffff

typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;
    union {
        WORD Ordinal;
        WORD Hint;
    } DUMMYUNIONNAME;
    WORD Type:2;
    WORD NameType:3;
    WORD Reserved:11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE {
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE {
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,
} IMPORT_OBJECT_NAME_TYPE;

#ifndef __IMAGE_COR20_HEADER_DEFINED__
#define __IMAGE_COR20_HEADER_DEFINED__

typedef enum ReplacesCorHdrNumericDefines {
    COMIMAGE_FLAGS_ILONLY = 0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED = 0x00020000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR = 0,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
    IMAGE_COR_MIH_METHODRVA = 0x01,
    IMAGE_COR_MIH_EHRVA = 0x02,
    IMAGE_COR_MIH_BASICBLOCK = 0x08,
    COR_VTABLE_32BIT = 0x01,
    COR_VTABLE_64BIT = 0x02,
    COR_VTABLE_FROM_UNMANAGED = 0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x08,
    COR_VTABLE_CALL_MOST_DERIVED = 0x10,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
} ReplacesCorHdrNumericDefines;

typedef struct IMAGE_COR20_HEADER {
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } DUMMYUNIONNAME;
    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#endif /* __IMAGE_COR20_HEADER_DEFINED__ */

#if (NTDDI_VERSION > NTDDI_WINXP)
NTSYSAPI WORD NTAPI RtlCaptureStackBackTrace(DWORD, DWORD, PVOID *, PDWORD);
#endif /* NTDDI_VERSION > NTDDI_WINXP */
#if (NTDDI_VERSION > NTDDI_WIN2K)
NTSYSAPI VOID NTAPI RtlCaptureContext(PCONTEXT);
#endif /* NTDDI_VERSION > NTDDI_WIN2K */
NTSYSAPI VOID NTAPI RtlUnwind(PVOID, PVOID, PEXCEPTION_RECORD, PVOID);

#if defined(_AMD64_)
NTSYSAPI BOOLEAN __cdecl RtlAddFunctionTable(PRUNTIME_FUNCTION, DWORD, DWORD64);
NTSYSAPI BOOLEAN __cdecl RtlDeleteFunctionTable(PRUNTIME_FUNCTION);
NTSYSAPI BOOLEAN __cdecl RtlInstallFunctionTableCallback(DWORD64, DWORD64, DWORD, PGET_RUNTIME_FUNCTION_CALLBACK, PVOID, PCWSTR);
#if (NTDDI_VERSION >= NTDDI_WIN8)
NTSYSAPI DWORD NTAPI RtlAddGrowableFunctionTable(PVOID *, PRUNTIME_FUNCTION, DWORD, DWORD, ULONG_PTR, ULONG_PTR);
NTSYSAPI VOID NTAPI RtlGrowFunctionTable(PVOID, DWORD);
NTSYSAPI VOID NTAPI RtlDeleteGrowableFunctionTable(PVOID);
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */
NTSYSAPI PRUNTIME_FUNCTION NTAPI RtlLookupFunctionEntry(DWORD64, PDWORD64, PUNWIND_HISTORY_TABLE);
NTSYSAPI VOID __cdecl RtlRestoreContext(PCONTEXT, struct _EXCEPTION_RECORD *);
NTSYSAPI VOID NTAPI RtlUnwindEx(PVOID, PVOID, PEXCEPTION_RECORD, PVOID, PCONTEXT, PUNWIND_HISTORY_TABLE);
NTSYSAPI PEXCEPTION_ROUTINE NTAPI RtlVirtualUnwind(DWORD, DWORD64, DWORD64, PRUNTIME_FUNCTION, PCONTEXT, PVOID *, PDWORD64, PKNONVOLATILE_CONTEXT_POINTERS);
#endif /* _AMD64_ */

#if defined(_ARM_)
NTSYSAPI BOOLEAN __cdecl RtlAddFunctionTable(PRUNTIME_FUNCTION, DWORD, DWORD);
NTSYSAPI BOOLEAN __cdecl RtlDeleteFunctionTable(PRUNTIME_FUNCTION);
NTSYSAPI BOOLEAN __cdecl RtlInstallFunctionTableCallback(DWORD, DWORD, DWORD, PGET_RUNTIME_FUNCTION_CALLBACK, PVOID, PCWSTR);
#if (NTDDI_VERSION >= NTDDI_WIN8)
NTSYSAPI DWORD NTAPI RtlAddGrowableFunctionTable(PVOID *, PRUNTIME_FUNCTION, DWORD, DWORD, ULONG_PTR, ULONG_PTR);
NTSYSAPI VOID NTAPI RtlGrowFunctionTable(PVOID, DWORD);
NTSYSAPI VOID NTAPI RtlDeleteGrowableFunctionTable(PVOID);
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */
NTSYSAPI PRUNTIME_FUNCTION NTAPI RtlLookupFunctionEntry(ULONG_PTR, PDWORD, PUNWIND_HISTORY_TABLE);
NTSYSAPI VOID __cdecl RtlRestoreContext(PCONTEXT, struct _EXCEPTION_RECORD *);
NTSYSAPI VOID NTAPI RtlUnwindEx(PVOID, PVOID, PEXCEPTION_RECORD, PVOID, PCONTEXT, PUNWIND_HISTORY_TABLE);
NTSYSAPI PEXCEPTION_ROUTINE NTAPI RtlVirtualUnwind(DWORD, DWORD, DWORD, PRUNTIME_FUNCTION, PCONTEXT, PVOID *, PDWORD, PKNONVOLATILE_CONTEXT_POINTERS);
#endif /* _ARM_ */

#if defined(_ARM64_)
NTSYSAPI BOOLEAN __cdecl RtlAddFunctionTable(PRUNTIME_FUNCTION, DWORD, ULONG_PTR);
NTSYSAPI BOOLEAN __cdecl RtlDeleteFunctionTable(PRUNTIME_FUNCTION);
NTSYSAPI BOOLEAN __cdecl RtlInstallFunctionTableCallback(ULONG_PTR, ULONG_PTR, DWORD, PGET_RUNTIME_FUNCTION_CALLBACK, PVOID, PCWSTR);
#if (NTDDI_VERSION >= NTDDI_WIN8)
NTSYSAPI DWORD NTAPI RtlAddGrowableFunctionTable(PVOID *, PRUNTIME_FUNCTION, DWORD, DWORD, ULONG_PTR, ULONG_PTR);
NTSYSAPI VOID NTAPI RtlGrowFunctionTable(PVOID, DWORD);
NTSYSAPI VOID NTAPI RtlDeleteGrowableFunctionTable(PVOID);
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */
NTSYSAPI PRUNTIME_FUNCTION NTAPI RtlLookupFunctionEntry(ULONG_PTR, PULONG_PTR, PUNWIND_HISTORY_TABLE);
NTSYSAPI VOID __cdecl RtlRestoreContext(PCONTEXT, struct _EXCEPTION_RECORD *);
NTSYSAPI VOID NTAPI RtlUnwindEx(PVOID, PVOID, PEXCEPTION_RECORD, PVOID, PCONTEXT, PUNWIND_HISTORY_TABLE);
NTSYSAPI PEXCEPTION_ROUTINE NTAPI RtlVirtualUnwind(DWORD, ULONG_PTR, ULONG_PTR, PRUNTIME_FUNCTION, PCONTEXT, PVOID *, PULONG_PTR, PKNONVOLATILE_CONTEXT_POINTERS);
#endif /* _ARM64_ */

/* NTSYSAPI PVOID NTAPI RtlPcToFileHeader(PVOID, PVOID *); */
#if (NTDDI_VERSION >= NTDDI_WIN2K)
NTSYSAPI SIZE_T NTAPI RtlCompareMemory(const VOID *, const VOID *, SIZE_T);
#endif /* NTDDI_VERSION >= NTDDI_WIN2K */

#include <string.h>

#ifndef _SLIST_HEADER_
#define _SLIST_HEADER_

#if defined(_WIN64)

typedef struct DECLSPEC_ALIGN (16) _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;

#else /* !_WIN64 */

typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;

#endif /* !_WIN64 */

#if defined(_AMD64_)

typedef union DECLSPEC_ALIGN (16) _SLIST_HEADER {
    struct {
        ULONGLONG Alignment;
        ULONGLONG Region;
    } DUMMYSTRUCTNAME;
    struct {
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60;
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;

#elif defined(_ARM64_)

typedef union DECLSPEC_ALIGN (16) _SLIST_HEADER {
    struct {
        ULONGLONG Alignment;
        ULONGLONG Region;
    } DUMMYSTRUCTNAME;
    struct {
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60;
    } HeaderArm64;
} SLIST_HEADER, *PSLIST_HEADER;

#elif defined(_X86_)

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD CpuId;
    } DUMMYSTRUCTNAME;
} SLIST_HEADER, *PSLIST_HEADER;

#elif defined(_ARM_)

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD Reserved;
    } DUMMYSTRUCTNAME;
} SLIST_HEADER, *PSLIST_HEADER;

#endif /* dick */

#endif /* _SLIST_HEADER_ */

NTSYSAPI VOID NTAPI RtlInitializeSListHead(PSLIST_HEADER);
NTSYSAPI PSLIST_ENTRY NTAPI RtlFirstEntrySList(const SLIST_HEADER *);
NTSYSAPI PSLIST_ENTRY NTAPI RtlInterlockedPopEntrySList(PSLIST_HEADER);
NTSYSAPI PSLIST_ENTRY NTAPI RtlInterlockedPushEntrySList(PSLIST_HEADER, PSLIST_ENTRY);
NTSYSAPI PSLIST_ENTRY NTAPI RtlInterlockedPushListSListEx(PSLIST_HEADER, PSLIST_ENTRY, PSLIST_ENTRY, DWORD);
NTSYSAPI PSLIST_ENTRY NTAPI RtlInterlockedFlushSList(PSLIST_HEADER);
NTSYSAPI WORD NTAPI RtlQueryDepthSList(PSLIST_HEADER);

#ifndef _RTL_RUN_ONCE_DEF
#define _RTL_RUN_ONCE_DEF

#define RTL_RUN_ONCE_INIT {0}  

#define RTL_RUN_ONCE_CHECK_ONLY  0x00000001UL
#define RTL_RUN_ONCE_ASYNC  0x00000002UL
#define RTL_RUN_ONCE_INIT_FAILED  0x00000004UL

#define RTL_RUN_ONCE_CTX_RESERVED_BITS  2

typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;

#endif /* _RTL_RUN_ONCE_DEF */

typedef struct _RTL_BARRIER {
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;

#define FAST_FAIL_LEGACY_GS_VIOLATION  0
#define FAST_FAIL_VTGUARD_CHECK_FAILURE  1
#define FAST_FAIL_STACK_COOKIE_CHECK_FAILURE  2
#define FAST_FAIL_CORRUPT_LIST_ENTRY  3
#define FAST_FAIL_INCORRECT_STACK  4
#define FAST_FAIL_INVALID_ARG  5
#define FAST_FAIL_GS_COOKIE_INIT  6
#define FAST_FAIL_FATAL_APP_EXIT  7
#define FAST_FAIL_RANGE_CHECK_FAILURE  8
#define FAST_FAIL_UNSAFE_REGISTRY_ACCESS  9
#define FAST_FAIL_GUARD_ICALL_CHECK_FAILURE  10
#define FAST_FAIL_GUARD_WRITE_CHECK_FAILURE  11
#define FAST_FAIL_INVALID_FIBER_SWITCH  12
#define FAST_FAIL_INVALID_SET_OF_CONTEXT  13
#define FAST_FAIL_INVALID_REFERENCE_COUNT  14
#define FAST_FAIL_INVALID_JUMP_BUFFER  18
#define FAST_FAIL_MRDATA_MODIFIED  19
#define FAST_FAIL_CERTIFICATION_FAILURE  20
#define FAST_FAIL_INVALID_EXCEPTION_CHAIN  21
#define FAST_FAIL_CRYPTO_LIBRARY  22
#define FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT  23
#define FAST_FAIL_INVALID_IMAGE_BASE  24
#define FAST_FAIL_DLOAD_PROTECTION_FAILURE  25
#define FAST_FAIL_UNSAFE_EXTENSION_CALL  26
#define FAST_FAIL_DEPRECATED_SERVICE_INVOKED  27
#define FAST_FAIL_INVALID_BUFFER_ACCESS  28
#define FAST_FAIL_INVALID_BALANCED_TREE  29
#define FAST_FAIL_INVALID_NEXT_THREAD  30
#define FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED  31
#define FAST_FAIL_APCS_DISABLED  32
#define FAST_FAIL_INVALID_IDLE_STATE  33
#define FAST_FAIL_MRDATA_PROTECTION_FAILURE  34
#define FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION  35
#define FAST_FAIL_INVALID_LOCK_STATE  36
#define FAST_FAIL_GUARD_JUMPTABLE  37
#define FAST_FAIL_INVALID_LONGJUMP_TARGET  38
#define FAST_FAIL_INVALID_DISPATCH_CONTEXT  39
#define FAST_FAIL_INVALID_THREAD  40
#define FAST_FAIL_INVALID_FAST_FAIL_CODE  0xFFFFFFFF

#ifndef __ORANGEC__
DECLSPEC_NORETURN VOID __fastfail(unsigned int Code);
#pragma intrinsic(__fastfail)
#endif

#define HEAP_NO_SERIALIZE  0x00000001
#define HEAP_GROWABLE  0x00000002
#define HEAP_GENERATE_EXCEPTIONS  0x00000004
#define HEAP_ZERO_MEMORY  0x00000008
#define HEAP_REALLOC_IN_PLACE_ONLY  0x00000010
#define HEAP_TAIL_CHECKING_ENABLED  0x00000020
#define HEAP_FREE_CHECKING_ENABLED  0x00000040
#define HEAP_DISABLE_COALESCE_ON_FREE  0x00000080
#define HEAP_CREATE_ALIGN_16  0x00010000
#define HEAP_CREATE_ENABLE_TRACING  0x00020000
#define HEAP_CREATE_ENABLE_EXECUTE  0x00040000
#define HEAP_MAXIMUM_TAG  0x0FFF
#define HEAP_PSEUDO_TAG_FLAG  0x8000
#define HEAP_TAG_SHIFT  18

FORCEINLINE DWORD HEAP_MAKE_TAG_FLAGS(DWORD TagBase, DWORD Tag) {
    return ((DWORD) ((TagBase) + ((Tag) << HEAP_TAG_SHIFT)));
}

#define IS_TEXT_UNICODE_ASCII16  0x0001
#define IS_TEXT_UNICODE_REVERSE_ASCII16  0x0010

#define IS_TEXT_UNICODE_STATISTICS  0x0002
#define IS_TEXT_UNICODE_REVERSE_STATISTICS  0x0020

#define IS_TEXT_UNICODE_CONTROLS  0x0004
#define IS_TEXT_UNICODE_REVERSE_CONTROLS  0x0040

#define IS_TEXT_UNICODE_SIGNATURE  0x0008
#define IS_TEXT_UNICODE_REVERSE_SIGNATURE  0x0080

#define IS_TEXT_UNICODE_ILLEGAL_CHARS  0x0100
#define IS_TEXT_UNICODE_ODD_LENGTH  0x0200
#define IS_TEXT_UNICODE_DBCS_LEADBYTE  0x0400
#define IS_TEXT_UNICODE_NULL_BYTES  0x1000

#define IS_TEXT_UNICODE_UNICODE_MASK  0x000F
#define IS_TEXT_UNICODE_REVERSE_MASK  0x00F0
#define IS_TEXT_UNICODE_NOT_UNICODE_MASK  0x0F00
#define IS_TEXT_UNICODE_NOT_ASCII_MASK  0xF000

#define COMPRESSION_FORMAT_NONE  (0x0000)
#define COMPRESSION_FORMAT_DEFAULT  (0x0001)
#define COMPRESSION_FORMAT_LZNT1  (0x0002)
#define COMPRESSION_FORMAT_XPRESS  (0x0003)
#define COMPRESSION_FORMAT_XPRESS_HUFF  (0x0004)
#define COMPRESSION_ENGINE_STANDARD  (0x0000)
#define COMPRESSION_ENGINE_MAXIMUM  (0x0100)
#define COMPRESSION_ENGINE_HIBER  (0x0200)

#if _DBG_MEMCPY_INLINE_ && !defined(_MEMCPY_INLINE_) && !defined(_CRTBLD)
#define _MEMCPY_INLINE_
FORCEINLINE PVOID __cdecl memcpy_inline(void *dst, const void *src, size_t size) {
    if (((char *)dst > (char *)src) && ((char *)dst < ((char *)src + size))) {
        __debugbreak();
    }
    return memcpy(dst, src, size);
}
#define memcpy memcpy_inline
#endif /* _DBG_MEMCPY_INLINE_ && !defined(_MEMCPY_INLINE_) && !defined(_CRTBLD) */

#define RtlEqualMemory(Destination,Source,Length) (memcmp((Destination),(Source),(Length)) == 0)
#define RtlMoveMemory(Destination,Source,Length) (void)memmove((Destination),(Source),(Length))
#define RtlCopyMemory(Destination,Source,Length) (void)memcpy((Destination),(Source),(Length))
#define RtlFillMemory(Destination,Length,Fill) (void)memset((Destination),(Fill),(Length))
#define RtlZeroMemory(Destination,Length) (void)memset((Destination),0,(Length))

FORCEINLINE PVOID RtlSecureZeroMemory(PVOID ptr, SIZE_T cnt) {
    volatile char *vptr = (volatile char *)ptr;
#if defined(_M_AMD64)
    __stosb((PBYTE) ((DWORD64)vptr), 0, cnt);
#else /* !_M_AMD64 */
    while (cnt) {
        *vptr = 0;
        vptr++;
        cnt--;
    }
#endif /* !_M_AMD64 */
    return ptr;
}

#define SEF_DACL_AUTO_INHERIT  0x01
#define SEF_SACL_AUTO_INHERIT  0x02
#define SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT 0x04
#define SEF_AVOID_PRIVILEGE_CHECK  0x08
#define SEF_AVOID_OWNER_CHECK  0x10
#define SEF_DEFAULT_OWNER_FROM_PARENT  0x20
#define SEF_DEFAULT_GROUP_FROM_PARENT  0x40
#define SEF_MACL_NO_WRITE_UP  0x100
#define SEF_MACL_NO_READ_UP  0x200
#define SEF_MACL_NO_EXECUTE_UP  0x400
#define SEF_AI_USE_EXTRA_PARAMS  0x800
#define SEF_AVOID_OWNER_RESTRICTION  0x1000

#define SEF_MACL_VALID_FLAGS  (SEF_MACL_NO_WRITE_UP|SEF_MACL_NO_READ_UP|SEF_MACL_NO_EXECUTE_UP)

typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[1];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;

#define MESSAGE_RESOURCE_UNICODE  0x0001

typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
#ifdef UNICODE
typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;
#else /* !UNICODE */
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#endif /* !UNICODE */

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;

typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
#ifdef UNICODE
typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
#else /* !UNICODE */
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#endif /* !UNICODE */

#define VER_EQUAL  1
#define VER_GREATER  2
#define VER_GREATER_EQUAL  3
#define VER_LESS  4
#define VER_LESS_EQUAL  5
#define VER_AND  6
#define VER_OR  7

#define VER_CONDITION_MASK  7
#define VER_NUM_BITS_PER_CONDITION_MASK 3

#define VER_MINORVERSION  0x0000001
#define VER_MAJORVERSION  0x0000002
#define VER_BUILDNUMBER  0x0000004
#define VER_PLATFORMID  0x0000008
#define VER_SERVICEPACKMINOR  0x0000010
#define VER_SERVICEPACKMAJOR  0x0000020
#define VER_SUITENAME  0x0000040
#define VER_PRODUCT_TYPE  0x0000080

#define VER_NT_WORKSTATION  0x0000001
#define VER_NT_DOMAIN_CONTROLLER  0x0000002
#define VER_NT_SERVER  0x0000003

#define VER_PLATFORM_WIN32s  0
#define VER_PLATFORM_WIN32_WINDOWS  1
#define VER_PLATFORM_WIN32_NT  2

#define VER_SET_CONDITION(_m_,_t_,_c_)  \
  ((_m_)=VerSetConditionMask((_m_),(_t_),(_c_)))

#if (NTDDI_VERSION >= NTDDI_WIN2K)
NTSYSAPI ULONGLONG NTAPI VerSetConditionMask(ULONGLONG, DWORD, BYTE);
#endif /* NTDDI_VERSION >= NTDDI_WIN2K */

#if (NTDDI_VERSION >= NTDDI_VISTA)
NTSYSAPI BOOLEAN NTAPI RtlGetProductInfo(DWORD, DWORD, DWORD, DWORD, PDWORD);
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#define RTL_UMS_VERSION  (0x0100)  

typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef VOID NTAPI RTL_UMS_SCHEDULER_ENTRY_POINT(RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID);
typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;

#if !defined(IS_VALIDATION_ENABLED)

#if (NTDDI_VERSION >= NTDDI_WIN8)

#define IS_VALIDATION_ENABLED(C,L) ((L) & (C))

#define VRL_PREDEFINED_CLASS_BEGIN  (1 << 0)
#define VRL_CUSTOM_CLASS_BEGIN      (1 << 8)
#define VRL_CLASS_CONSISTENCY       (VRL_PREDEFINED_CLASS_BEGIN << 0)
#define VRL_ENABLE_KERNEL_BREAKS    (1 << 31)

#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

#endif /* !defined(IS_VALIDATION_ENABLED) */

#if (NTDDI_VERSION >= NTDDI_WIN8)
#define CTMF_INCLUDE_APPCONTAINER  0x00000001UL
#define CTMF_VALID_FLAGS  (CTMF_INCLUDE_APPCONTAINER)
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

#if (NTDDI_VERSION >= NTDDI_WIN8)
NTSYSAPI DWORD NTAPI RtlCrc32(const void *, size_t, DWORD);
NTSYSAPI ULONGLONG NTAPI RtlCrc64(const void *, size_t, ULONGLONG);
#endif /* NTDDI_VERSION >= NTDDI_WIN8 */

#if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)

typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT
} OS_DEPLOYEMENT_STATE_VALUES;

NTSYSAPI OS_DEPLOYEMENT_STATE_VALUES NTAPI RtlOsDeploymentState(DWORD Flags);

#endif /* NTDDI_VERSION >= NTDDI_WINTHRESHOLD */

typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

#define RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO  0x01000000
#define RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN  0x02000000
#define RTL_CRITICAL_SECTION_FLAG_STATIC_INIT  0x04000000
#define RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE  0x08000000
#define RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO  0x10000000
#define RTL_CRITICAL_SECTION_ALL_FLAG_BITS  0xFF000000
#define RTL_CRITICAL_SECTION_FLAG_RESERVED  (RTL_CRITICAL_SECTION_ALL_FLAG_BITS & (~(RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO | RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN | RTL_CRITICAL_SECTION_FLAG_STATIC_INIT | RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE | RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO)))

#define RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT  0x00000001

#include "pshpack8.h"
typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
#include "poppack.h"

typedef struct _RTL_SRWLOCK {
    PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

#define RTL_SRWLOCK_INIT {0}

typedef struct _RTL_CONDITION_VARIABLE {
    PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;

#define RTL_CONDITION_VARIABLE_INIT  {0}
#define RTL_CONDITION_VARIABLE_LOCKMODE_SHARED  0x1

typedef VOID (NTAPI *PAPCFUNC)(ULONG_PTR);
typedef LONG (NTAPI *PVECTORED_EXCEPTION_HANDLER)(struct _EXCEPTION_POINTERS *);

typedef enum _HEAP_INFORMATION_CLASS {
    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption,
#if (NTDDI_VERSION > NTDDI_WINBLUE)
    HeapOptimizeResources = 3,
#endif
} HEAP_INFORMATION_CLASS;

#if (NTDDI_VERSION > NTDDI_WINBLUE)

#define HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION  1

typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
    DWORD Version;
    DWORD Flags;
} HEAP_OPTIMIZE_RESOURCES_INFORMATION, *PHEAP_OPTIMIZE_RESOURCES_INFORMATION;

#endif /* NTDDI_VERSION > NTDDI_WINBLUE */

#define WT_EXECUTEDEFAULT  0x00000000  
#define WT_EXECUTEINIOTHREAD  0x00000001  
#define WT_EXECUTEINUITHREAD  0x00000002  
#define WT_EXECUTEINWAITTHREAD  0x00000004  
#define WT_EXECUTEONLYONCE  0x00000008  
#define WT_EXECUTEINTIMERTHREAD 0x00000020  
#define WT_EXECUTELONGFUNCTION  0x00000010  
#define WT_EXECUTEINPERSISTENTIOTHREAD  0x00000040  
#define WT_EXECUTEINPERSISTENTTHREAD 0x00000080  
#define WT_TRANSFER_IMPERSONATION 0x00000100  
#define WT_SET_MAX_THREADPOOL_THREADS(Flags,Limit)  ((Flags) |= (Limit)<<16)

typedef VOID (NTAPI *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
typedef VOID (NTAPI *WORKERCALLBACKFUNC)(PVOID);
typedef VOID (NTAPI *APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
typedef VOID (NTAPI *PFLS_CALLBACK_FUNCTION)(PVOID lpFlsData);
typedef BOOLEAN (NTAPI *PSECURE_MEMORY_CACHE_CALLBACK) (PVOID, SIZE_T);

#define WT_EXECUTEINLONGTHREAD  0x00000010  
#define WT_EXECUTEDELETEWAIT  0x00000008  

typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;

#define ACTIVATIONCONTEXTINFOCLASS  ACTIVATION_CONTEXT_INFO_CLASS

typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

#define ACTIVATION_CONTEXT_PATH_TYPE_NONE  (1)
#define ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE  (2)
#define ACTIVATION_CONTEXT_PATH_TYPE_URL  (3)
#define ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF  (4)

typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

#define  _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION   _ASSEMBLY_FILE_DETAILED_INFORMATION
#define   ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION    ASSEMBLY_FILE_DETAILED_INFORMATION
#define  PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION   PASSEMBLY_FILE_DETAILED_INFORMATION
#define PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION  PCASSEMBLY_FILE_DETAILED_INFORMATION

typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef enum {
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef enum {
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#ifdef _MSC_EXTENSIONS

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#endif

typedef struct _SUPPORTED_OS_INFO {
    WORD MajorVersion;
    WORD MinorVersion;
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;

#define PERFORMANCE_DATA_VERSION  1

typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[MAX_HW_COUNTERS];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;

#define READ_THREAD_PROFILING_FLAG_DISPATCHING  0x00000001
#define READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS  0x00000002

#if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)

#define UNIFIEDBUILDREVISION_KEY  L"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion"
#define UNIFIEDBUILDREVISION_VALUE  L"UBR"
#define UNIFIEDBUILDREVISION_MIN  0x00000000

#define DEVICEFAMILYDEVICEFORM_KEY  L"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM"
#define DEVICEFAMILYDEVICEFORM_VALUE  L"DeviceForm"

#define DEVICEFAMILYINFOENUM_UAP                        0x00000000
#define DEVICEFAMILYINFOENUM_WINDOWS_8X                 0x00000001
#define DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X           0x00000002
#define DEVICEFAMILYINFOENUM_DESKTOP                    0x00000003
#define DEVICEFAMILYINFOENUM_MOBILE                     0x00000004
#define DEVICEFAMILYINFOENUM_XBOX                       0x00000005
#define DEVICEFAMILYINFOENUM_TEAM                       0x00000006
#define DEVICEFAMILYINFOENUM_IOT                        0x00000007
#define DEVICEFAMILYINFOENUM_IOT_HEADLESS               0x00000008
#define DEVICEFAMILYINFOENUM_SERVER                     0x00000009
#define DEVICEFAMILYINFOENUM_HOLOGRAPHIC                0x0000000A
#define DEVICEFAMILYINFOENUM_XBOXSRA                    0x0000000B
#define DEVICEFAMILYINFOENUM_XBOXERA                    0x0000000C
#define DEVICEFAMILYINFOENUM_SERVER_NANO                0x0000000D

#define DEVICEFAMILYINFOENUM_MAX                        0x0000000D

#define DEVICEFAMILYDEVICEFORM_UNKNOWN                  0x00000000
#define DEVICEFAMILYDEVICEFORM_PHONE                    0x00000001
#define DEVICEFAMILYDEVICEFORM_TABLET                   0x00000002
#define DEVICEFAMILYDEVICEFORM_DESKTOP                  0x00000003
#define DEVICEFAMILYDEVICEFORM_NOTEBOOK                 0x00000004
#define DEVICEFAMILYDEVICEFORM_CONVERTIBLE              0x00000005
#define DEVICEFAMILYDEVICEFORM_DETACHABLE               0x00000006
#define DEVICEFAMILYDEVICEFORM_ALLINONE                 0x00000007
#define DEVICEFAMILYDEVICEFORM_STICKPC                  0x00000008
#define DEVICEFAMILYDEVICEFORM_PUCK                     0x00000009
#define DEVICEFAMILYDEVICEFORM_LARGESCREEN              0x0000000A
#define DEVICEFAMILYDEVICEFORM_HMD                      0x0000000B
#define DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD        0x0000000C
#define DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET          0x0000000D
#define DEVICEFAMILYDEVICEFORM_BANKING                  0x0000000E
#define DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION      0x0000000F
#define DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE          0x00000010
#define DEVICEFAMILYDEVICEFORM_GAMING                   0x00000011
#define DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION          0x00000012
#define DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION    0x00000013
#define DEVICEFAMILYDEVICEFORM_KIOSK                    0x00000014
#define DEVICEFAMILYDEVICEFORM_MAKER_BOARD              0x00000015
#define DEVICEFAMILYDEVICEFORM_MEDICAL                  0x00000016
#define DEVICEFAMILYDEVICEFORM_NETWORKING               0x00000017
#define DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE         0x00000018
#define DEVICEFAMILYDEVICEFORM_PRINTING                 0x00000019
#define DEVICEFAMILYDEVICEFORM_THIN_CLIENT              0x0000001A
#define DEVICEFAMILYDEVICEFORM_TOY                      0x0000001B
#define DEVICEFAMILYDEVICEFORM_VENDING                  0x0000001C
#define DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER           0x0000001D

#define DEVICEFAMILYDEVICEFORM_MAX                      0x0000001D

VOID NTAPI RtlGetDeviceFamilyInfoEnum(ULONGLONG *, DWORD *, DWORD *);
DWORD NTAPI RtlConvertDeviceFamilyInfoToString(PDWORD, PDWORD, PWSTR, PWSTR);
DWORD NTAPI RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW, DWORD, ULONGLONG);

#endif /* NTDDI_VERSION >= NTDDI_WINTHRESHOLD */

#define DLL_PROCESS_ATTACH  1
#define DLL_THREAD_ATTACH  2
#define DLL_THREAD_DETACH  3
#define DLL_PROCESS_DETACH  0

#define EVENTLOG_SEQUENTIAL_READ  0x0001
#define EVENTLOG_SEEK_READ  0x0002
#define EVENTLOG_FORWARDS_READ  0x0004
#define EVENTLOG_BACKWARDS_READ  0x0008

#define EVENTLOG_SUCCESS  0x0000
#define EVENTLOG_ERROR_TYPE  0x0001
#define EVENTLOG_WARNING_TYPE  0x0002
#define EVENTLOG_INFORMATION_TYPE  0x0004
#define EVENTLOG_AUDIT_SUCCESS  0x0008
#define EVENTLOG_AUDIT_FAILURE  0x0010

#define EVENTLOG_START_PAIRED_EVENT  0x0001
#define EVENTLOG_END_PAIRED_EVENT  0x0002
#define EVENTLOG_END_ALL_PAIRED_EVENTS 0x0004
#define EVENTLOG_PAIRED_EVENT_ACTIVE  0x0008
#define EVENTLOG_PAIRED_EVENT_INACTIVE 0x0010

typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD;

#define MAXLOGICALLOGNAMESIZE  256

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;

#if defined(_MSC_EXTENSIONS)
struct _EVENTSFORLOGFILE {
    DWORD ulSize;
    WCHAR szLogicalLogFile[MAXLOGICALLOGNAMESIZE];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[];
};

struct _PACKEDEVENTINFO {
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
};
#endif /* _MSC_EXTENSIONS */

#define KEY_QUERY_VALUE  (0x0001)
#define KEY_SET_VALUE  (0x0002)
#define KEY_CREATE_SUB_KEY  (0x0004)
#define KEY_ENUMERATE_SUB_KEYS  (0x0008)
#define KEY_NOTIFY  (0x0010)
#define KEY_CREATE_LINK  (0x0020)
#define KEY_WOW64_32KEY  (0x0200)
#define KEY_WOW64_64KEY  (0x0100)
#define KEY_WOW64_RES  (0x0300)

#define KEY_READ  ((STANDARD_RIGHTS_READ|KEY_QUERY_VALUE|KEY_ENUMERATE_SUB_KEYS|KEY_NOTIFY) & (~SYNCHRONIZE))
#define KEY_WRITE  ((STANDARD_RIGHTS_WRITE|KEY_SET_VALUE|KEY_CREATE_SUB_KEY) & (~SYNCHRONIZE))
#define KEY_EXECUTE  ((KEY_READ) & (~SYNCHRONIZE))
#define KEY_ALL_ACCESS  ((STANDARD_RIGHTS_ALL|KEY_QUERY_VALUE|KEY_SET_VALUE|KEY_CREATE_SUB_KEY|KEY_ENUMERATE_SUB_KEYS|KEY_NOTIFY|KEY_CREATE_LINK) & (~SYNCHRONIZE))

#define REG_OPTION_RESERVED  (0x00000000L)
#define REG_OPTION_NON_VOLATILE  (0x00000000L)
#define REG_OPTION_VOLATILE  (0x00000001L)
#define REG_OPTION_CREATE_LINK  (0x00000002L)
#define REG_OPTION_BACKUP_RESTORE  (0x00000004L)
#define REG_OPTION_OPEN_LINK  (0x00000008L)

#define REG_LEGAL_OPTION  \
  (REG_OPTION_RESERVED  |\
  REG_OPTION_NON_VOLATILE  |\
  REG_OPTION_VOLATILE  |\
  REG_OPTION_CREATE_LINK  |\
  REG_OPTION_BACKUP_RESTORE  |\
  REG_OPTION_OPEN_LINK)

#define REG_OPEN_LEGAL_OPTION  \
  (REG_OPTION_RESERVED  |\
  REG_OPTION_BACKUP_RESTORE  |\
  REG_OPTION_OPEN_LINK)

#define REG_CREATED_NEW_KEY  (0x00000001L)  
#define REG_OPENED_EXISTING_KEY  (0x00000002L)  

#define REG_STANDARD_FORMAT  1
#define REG_LATEST_FORMAT  2
#define REG_NO_COMPRESSION  4

#define REG_WHOLE_HIVE_VOLATILE  (0x00000001L)  
#define REG_REFRESH_HIVE  (0x00000002L)  
#define REG_NO_LAZY_FLUSH  (0x00000004L)  
#define REG_FORCE_RESTORE  (0x00000008L)  
#define REG_APP_HIVE  (0x00000010L)  
#define REG_PROCESS_PRIVATE  (0x00000020L)  
#define REG_START_JOURNAL  (0x00000040L)  
#define REG_HIVE_EXACT_FILE_GROWTH  (0x00000080L)  
#define REG_HIVE_NO_RM  (0x00000100L)  
#define REG_HIVE_SINGLE_LOG  (0x00000200L)  
#define REG_BOOT_HIVE  (0x00000400L)  
#define REG_LOAD_HIVE_OPEN_HANDLE  (0x00000800L)
#define REG_FLUSH_HIVE_FILE_GROWTH  (0x00001000L)
#define REG_OPEN_READ_ONLY  (0x00002000L)
#define REG_IMMUTABLE  (0x00004000L)
#define REG_APP_HIVE_OPEN_READ_ONLY  (REG_OPEN_READ_ONLY)

#define REG_FORCE_UNLOAD  1

#define REG_NOTIFY_CHANGE_NAME  (0x00000001L) 
#define REG_NOTIFY_CHANGE_ATTRIBUTES  (0x00000002L)
#define REG_NOTIFY_CHANGE_LAST_SET  (0x00000004L) 
#define REG_NOTIFY_CHANGE_SECURITY  (0x00000008L)
#define REG_NOTIFY_THREAD_AGNOSTIC  (0x10000000L)

#define REG_LEGAL_CHANGE_FILTER \
  (REG_NOTIFY_CHANGE_NAME | \
  REG_NOTIFY_CHANGE_ATTRIBUTES | \
  REG_NOTIFY_CHANGE_LAST_SET | \
  REG_NOTIFY_CHANGE_SECURITY | \
  REG_NOTIFY_THREAD_AGNOSTIC)

#define REG_NONE  (0)
#define REG_SZ  (1)
#define REG_EXPAND_SZ  (2)
  
#define REG_BINARY  (3)
#define REG_DWORD  (4)
#define REG_DWORD_LITTLE_ENDIAN  (4)
#define REG_DWORD_BIG_ENDIAN  (5)
#define REG_LINK  (6)
#define REG_MULTI_SZ  (7)
#define REG_RESOURCE_LIST  (8)
#define REG_FULL_RESOURCE_DESCRIPTOR  (9)
#define REG_RESOURCE_REQUIREMENTS_LIST  (10)
#define REG_QWORD  (11)
#define REG_QWORD_LITTLE_ENDIAN  (11)

#define SERVICE_KERNEL_DRIVER  0x00000001
#define SERVICE_FILE_SYSTEM_DRIVER  0x00000002
#define SERVICE_ADAPTER  0x00000004
#define SERVICE_RECOGNIZER_DRIVER  0x00000008

#define SERVICE_DRIVER  (SERVICE_KERNEL_DRIVER|SERVICE_FILE_SYSTEM_DRIVER|SERVICE_RECOGNIZER_DRIVER)

#define SERVICE_WIN32_OWN_PROCESS  0x00000010
#define SERVICE_WIN32_SHARE_PROCESS  0x00000020
#define SERVICE_WIN32  (SERVICE_WIN32_OWN_PROCESS|SERVICE_WIN32_SHARE_PROCESS)

#define SERVICE_USER_SERVICE  0x00000040
#define SERVICE_USERSERVICE_INSTANCE  0x00000080

#define SERVICE_USER_SHARE_PROCESS  (SERVICE_USER_SERVICE|SERVICE_WIN32_SHARE_PROCESS)
#define SERVICE_USER_OWN_PROCESS  (SERVICE_USER_SERVICE|SERVICE_WIN32_OWN_PROCESS)

#define SERVICE_INTERACTIVE_PROCESS  0x00000100
#define SERVICE_PKG_SERVICE  0x00000200

#define SERVICE_TYPE_ALL  (SERVICE_WIN32|SERVICE_ADAPTER|SERVICE_DRIVER|SERVICE_INTERACTIVE_PROCESS|SERVICE_USER_SERVICE|SERVICE_USERSERVICE_INSTANCE|SERVICE_PKG_SERVICE)

#define SERVICE_BOOT_START  0x00000000
#define SERVICE_SYSTEM_START  0x00000001
#define SERVICE_AUTO_START  0x00000002
#define SERVICE_DEMAND_START  0x00000003
#define SERVICE_DISABLED  0x00000004

#define SERVICE_ERROR_IGNORE  0x00000000
#define SERVICE_ERROR_NORMAL  0x00000001
#define SERVICE_ERROR_SEVERE  0x00000002
#define SERVICE_ERROR_CRITICAL  0x00000003

typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = SERVICE_KERNEL_DRIVER,
    FileSystemType = SERVICE_FILE_SYSTEM_DRIVER,
    Win32ServiceOwnProcess = SERVICE_WIN32_OWN_PROCESS,
    Win32ServiceShareProcess = SERVICE_WIN32_SHARE_PROCESS,
    AdapterType = SERVICE_ADAPTER,
    RecognizerType = SERVICE_RECOGNIZER_DRIVER
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = SERVICE_BOOT_START,
    SystemLoad = SERVICE_SYSTEM_START,
    AutoLoad = SERVICE_AUTO_START,
    DemandLoad = SERVICE_DEMAND_START,
    DisableLoad = SERVICE_DISABLED
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = SERVICE_ERROR_IGNORE,
    NormalError = SERVICE_ERROR_NORMAL,
    SevereError = SERVICE_ERROR_SEVERE,
    CriticalError = SERVICE_ERROR_CRITICAL
} SERVICE_ERROR_TYPE;

#define CM_SERVICE_NETWORK_BOOT_LOAD  0x00000001
#define CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD 0x00000002
#define CM_SERVICE_USB_DISK_BOOT_LOAD  0x00000004
#define CM_SERVICE_SD_DISK_BOOT_LOAD  0x00000008
#define CM_SERVICE_USB3_DISK_BOOT_LOAD  0x00000010
#define CM_SERVICE_MEASURED_BOOT_LOAD  0x00000020
#define CM_SERVICE_VERIFIER_BOOT_LOAD  0x00000040
#define CM_SERVICE_WINPE_BOOT_LOAD  0x00000080

#define CM_SERVICE_VALID_PROMOTION_MASK  \
    (CM_SERVICE_NETWORK_BOOT_LOAD | \
     CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD | \
     CM_SERVICE_USB_DISK_BOOT_LOAD | \
     CM_SERVICE_SD_DISK_BOOT_LOAD | \
     CM_SERVICE_USB3_DISK_BOOT_LOAD | \
     CM_SERVICE_MEASURED_BOOT_LOAD | \
     CM_SERVICE_VERIFIER_BOOT_LOAD | \
     CM_SERVICE_WINPE_BOOT_LOAD)

#ifndef _NTDDTAPE_WINNT_
#define _NTDDTAPE_WINNT_

#define TAPE_ERASE_SHORT  0L
#define TAPE_ERASE_LONG  1L

typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;

#define TAPE_LOAD  0L
#define TAPE_UNLOAD  1L
#define TAPE_TENSION  2L
#define TAPE_LOCK  3L
#define TAPE_UNLOCK  4L
#define TAPE_FORMAT  5L

typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;

#define TAPE_SETMARKS  0L
#define TAPE_FILEMARKS  1L
#define TAPE_SHORT_FILEMARKS  2L
#define TAPE_LONG_FILEMARKS  3L

typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;

#define TAPE_ABSOLUTE_POSITION  0L
#define TAPE_LOGICAL_POSITION  1L
#define TAPE_PSEUDO_LOGICAL_POSITION 2L

typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;

#define TAPE_REWIND  0L
#define TAPE_ABSOLUTE_BLOCK  1L
#define TAPE_LOGICAL_BLOCK  2L
#define TAPE_PSEUDO_LOGICAL_BLOCK  3L
#define TAPE_SPACE_END_OF_DATA  4L
#define TAPE_SPACE_RELATIVE_BLOCKS  5L
#define TAPE_SPACE_FILEMARKS  6L
#define TAPE_SPACE_SEQUENTIAL_FMKS  7L
#define TAPE_SPACE_SETMARKS  8L
#define TAPE_SPACE_SEQUENTIAL_SMKS  9L

typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;

#define TAPE_DRIVE_FIXED  0x00000001
#define TAPE_DRIVE_SELECT  0x00000002
#define TAPE_DRIVE_INITIATOR  0x00000004

#define TAPE_DRIVE_ERASE_SHORT  0x00000010
#define TAPE_DRIVE_ERASE_LONG  0x00000020
#define TAPE_DRIVE_ERASE_BOP_ONLY  0x00000040
#define TAPE_DRIVE_ERASE_IMMEDIATE  0x00000080

#define TAPE_DRIVE_TAPE_CAPACITY  0x00000100
#define TAPE_DRIVE_TAPE_REMAINING  0x00000200
#define TAPE_DRIVE_FIXED_BLOCK  0x00000400
#define TAPE_DRIVE_VARIABLE_BLOCK  0x00000800

#define TAPE_DRIVE_WRITE_PROTECT  0x00001000
#define TAPE_DRIVE_EOT_WZ_SIZE  0x00002000

#define TAPE_DRIVE_ECC  0x00010000
#define TAPE_DRIVE_COMPRESSION  0x00020000
#define TAPE_DRIVE_PADDING  0x00040000
#define TAPE_DRIVE_REPORT_SMKS  0x00080000

#define TAPE_DRIVE_GET_ABSOLUTE_BLK 0x00100000
#define TAPE_DRIVE_GET_LOGICAL_BLK  0x00200000
#define TAPE_DRIVE_SET_EOT_WZ_SIZE  0x00400000

#define TAPE_DRIVE_EJECT_MEDIA  0x01000000
#define TAPE_DRIVE_CLEAN_REQUESTS  0x02000000
#define TAPE_DRIVE_SET_CMP_BOP_ONLY 0x04000000

#define TAPE_DRIVE_RESERVED_BIT  0x80000000  

#define TAPE_DRIVE_LOAD_UNLOAD  0x80000001
#define TAPE_DRIVE_TENSION  0x80000002
#define TAPE_DRIVE_LOCK_UNLOCK  0x80000004
#define TAPE_DRIVE_REWIND_IMMEDIATE 0x80000008

#define TAPE_DRIVE_SET_BLOCK_SIZE  0x80000010
#define TAPE_DRIVE_LOAD_UNLD_IMMED  0x80000020
#define TAPE_DRIVE_TENSION_IMMED  0x80000040
#define TAPE_DRIVE_LOCK_UNLK_IMMED  0x80000080

#define TAPE_DRIVE_SET_ECC  0x80000100
#define TAPE_DRIVE_SET_COMPRESSION  0x80000200
#define TAPE_DRIVE_SET_PADDING  0x80000400
#define TAPE_DRIVE_SET_REPORT_SMKS  0x80000800

#define TAPE_DRIVE_ABSOLUTE_BLK  0x80001000
#define TAPE_DRIVE_ABS_BLK_IMMED  0x80002000
#define TAPE_DRIVE_LOGICAL_BLK  0x80004000
#define TAPE_DRIVE_LOG_BLK_IMMED  0x80008000

#define TAPE_DRIVE_END_OF_DATA  0x80010000
#define TAPE_DRIVE_RELATIVE_BLKS  0x80020000
#define TAPE_DRIVE_FILEMARKS  0x80040000
#define TAPE_DRIVE_SEQUENTIAL_FMKS  0x80080000

#define TAPE_DRIVE_SETMARKS  0x80100000
#define TAPE_DRIVE_SEQUENTIAL_SMKS  0x80200000
#define TAPE_DRIVE_REVERSE_POSITION 0x80400000
#define TAPE_DRIVE_SPACE_IMMEDIATE  0x80800000

#define TAPE_DRIVE_WRITE_SETMARKS  0x81000000
#define TAPE_DRIVE_WRITE_FILEMARKS  0x82000000
#define TAPE_DRIVE_WRITE_SHORT_FMKS 0x84000000
#define TAPE_DRIVE_WRITE_LONG_FMKS  0x88000000

#define TAPE_DRIVE_WRITE_MARK_IMMED 0x90000000
#define TAPE_DRIVE_FORMAT  0xA0000000
#define TAPE_DRIVE_FORMAT_IMMEDIATE 0xC0000000
#define TAPE_DRIVE_HIGH_FEATURES  0x80000000  

typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;

typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;

typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;

typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;

#define TAPE_FIXED_PARTITIONS  0L
#define TAPE_SELECT_PARTITIONS  1L
#define TAPE_INITIATOR_PARTITIONS  2L

typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;

#define TAPE_QUERY_DRIVE_PARAMETERS  0L
#define TAPE_QUERY_MEDIA_CAPACITY  1L
#define TAPE_CHECK_FOR_DRIVE_PROBLEM  2L
#define TAPE_QUERY_IO_ERROR_DATA  3L
#define TAPE_QUERY_DEVICE_ERROR_DATA  4L

typedef struct _TAPE_WMI_OPERATIONS {
    DWORD Method;
    DWORD DataBufferSize;
    PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;

typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
    TapeDriveProblemNone, TapeDriveReadWriteWarning,
    TapeDriveReadWriteError, TapeDriveReadWarning,
    TapeDriveWriteWarning, TapeDriveReadError,
    TapeDriveWriteError, TapeDriveHardwareError,
    TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
    TapeDriveTimetoClean, TapeDriveCleanDriveNow,
    TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;

#endif /* _NTDDTAPE_WINNT_ */

#ifndef _NTTMAPI_
#define _NTTMAPI_

#include <ktmtypes.h>

#define TRANSACTIONMANAGER_QUERY_INFORMATION  (0x0001)
#define TRANSACTIONMANAGER_SET_INFORMATION  (0x0002)
#define TRANSACTIONMANAGER_RECOVER  (0x0004)
#define TRANSACTIONMANAGER_RENAME  (0x0008)
#define TRANSACTIONMANAGER_CREATE_RM  (0x0010)

#define TRANSACTIONMANAGER_BIND_TRANSACTION  (0x0020)

#define TRANSACTIONMANAGER_GENERIC_READ  (STANDARD_RIGHTS_READ|TRANSACTIONMANAGER_QUERY_INFORMATION)
#define TRANSACTIONMANAGER_GENERIC_WRITE  (STANDARD_RIGHTS_WRITE|TRANSACTIONMANAGER_SET_INFORMATION|TRANSACTIONMANAGER_RECOVER|TRANSACTIONMANAGER_RENAME|TRANSACTIONMANAGER_CREATE_RM)
#define TRANSACTIONMANAGER_GENERIC_EXECUTE  (STANDARD_RIGHTS_EXECUTE)
#define TRANSACTIONMANAGER_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|TRANSACTIONMANAGER_GENERIC_READ|TRANSACTIONMANAGER_GENERIC_WRITE|TRANSACTIONMANAGER_GENERIC_EXECUTE|TRANSACTIONMANAGER_BIND_TRANSACTION)

#define TRANSACTION_QUERY_INFORMATION  (0x0001)
#define TRANSACTION_SET_INFORMATION  (0x0002)
#define TRANSACTION_ENLIST  (0x0004)
#define TRANSACTION_COMMIT  (0x0008)
#define TRANSACTION_ROLLBACK  (0x0010)
#define TRANSACTION_PROPAGATE  (0x0020)
#define TRANSACTION_RIGHT_RESERVED1  (0x0040)

#define TRANSACTION_GENERIC_READ  (STANDARD_RIGHTS_READ|TRANSACTION_QUERY_INFORMATION|SYNCHRONIZE)
#define TRANSACTION_GENERIC_WRITE  (STANDARD_RIGHTS_WRITE|TRANSACTION_SET_INFORMATION|TRANSACTION_COMMIT|TRANSACTION_ENLIST|TRANSACTION_ROLLBACK|TRANSACTION_PROPAGATE|SYNCHRONIZE)
#define TRANSACTION_GENERIC_EXECUTE  (STANDARD_RIGHTS_EXECUTE|TRANSACTION_COMMIT|TRANSACTION_ROLLBACK|SYNCHRONIZE)
#define TRANSACTION_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|TRANSACTION_GENERIC_READ|TRANSACTION_GENERIC_WRITE|TRANSACTION_GENERIC_EXECUTE)

#define TRANSACTION_RESOURCE_MANAGER_RIGHTS (TRANSACTION_GENERIC_READ  |\
  STANDARD_RIGHTS_WRITE  |\
  TRANSACTION_SET_INFORMATION  |\
  TRANSACTION_ENLIST  |\
  TRANSACTION_ROLLBACK  |\
  TRANSACTION_PROPAGATE  |\
  SYNCHRONIZE)

#define RESOURCEMANAGER_QUERY_INFORMATION  (0x0001)
#define RESOURCEMANAGER_SET_INFORMATION  (0x0002)
#define RESOURCEMANAGER_RECOVER  (0x0004)
#define RESOURCEMANAGER_ENLIST  (0x0008)
#define RESOURCEMANAGER_GET_NOTIFICATION  (0x0010)
#define RESOURCEMANAGER_REGISTER_PROTOCOL  (0x0020)
#define RESOURCEMANAGER_COMPLETE_PROPAGATION  (0x0040)

#define RESOURCEMANAGER_GENERIC_READ  (STANDARD_RIGHTS_READ  |\
  RESOURCEMANAGER_QUERY_INFORMATION  |\
  SYNCHRONIZE)

#define RESOURCEMANAGER_GENERIC_WRITE  (STANDARD_RIGHTS_WRITE  |\
  RESOURCEMANAGER_SET_INFORMATION  |\
  RESOURCEMANAGER_RECOVER  |\
  RESOURCEMANAGER_ENLIST  |\
  RESOURCEMANAGER_GET_NOTIFICATION  |\
  RESOURCEMANAGER_REGISTER_PROTOCOL  |\
  RESOURCEMANAGER_COMPLETE_PROPAGATION |\
  SYNCHRONIZE)

#define RESOURCEMANAGER_GENERIC_EXECUTE  (STANDARD_RIGHTS_EXECUTE  |\
  RESOURCEMANAGER_RECOVER  |\
  RESOURCEMANAGER_ENLIST  |\
  RESOURCEMANAGER_GET_NOTIFICATION  |\
  RESOURCEMANAGER_COMPLETE_PROPAGATION |\
  SYNCHRONIZE)

#define RESOURCEMANAGER_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED  |\
  RESOURCEMANAGER_GENERIC_READ  |\
  RESOURCEMANAGER_GENERIC_WRITE  |\
  RESOURCEMANAGER_GENERIC_EXECUTE)

#define ENLISTMENT_QUERY_INFORMATION  (0x0001)
#define ENLISTMENT_SET_INFORMATION  (0x0002)
#define ENLISTMENT_RECOVER  (0x0004)
#define ENLISTMENT_SUBORDINATE_RIGHTS  (0x0008)
#define ENLISTMENT_SUPERIOR_RIGHTS  (0x0010)

#define ENLISTMENT_GENERIC_READ  (STANDARD_RIGHTS_READ|ENLISTMENT_QUERY_INFORMATION)
#define ENLISTMENT_GENERIC_WRITE  (STANDARD_RIGHTS_WRITE|ENLISTMENT_SET_INFORMATION|ENLISTMENT_RECOVER|ENLISTMENT_SUBORDINATE_RIGHTS|ENLISTMENT_SUPERIOR_RIGHTS)
#define ENLISTMENT_GENERIC_EXECUTE  (STANDARD_RIGHTS_EXECUTE|ENLISTMENT_RECOVER|ENLISTMENT_SUBORDINATE_RIGHTS|ENLISTMENT_SUPERIOR_RIGHTS)
#define ENLISTMENT_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|ENLISTMENT_GENERIC_READ|ENLISTMENT_GENERIC_WRITE|ENLISTMENT_GENERIC_EXECUTE)

typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;

typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;

typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
    WCHAR LogPath[1];
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;

typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;

typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;

typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation,
    TransactionBindInformation,
    TransactionDTCPrivateInformation,
} TRANSACTION_INFORMATION_CLASS;

typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5
} TRANSACTIONMANAGER_INFORMATION_CLASS;

typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;

typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;

typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;

typedef enum _KTMOBJECT_TYPE {
    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;

typedef struct _KTMOBJECT_CURSOR {
    GUID LastQuery;
    DWORD ObjectIdCount;
    GUID ObjectIds[1];
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;

#endif /* _NTTMAPI_ */

typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef VOID (NTAPI *PTP_SIMPLE_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID);

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
} TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef VOID (NTAPI *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(PVOID, PVOID);

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)

typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction:1;
            DWORD Persistent:1;
            DWORD Private:30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;

#else /* _WIN32_WINNT < _WIN32_WINNT_WIN7 */

typedef struct _TP_CALLBACK_ENVIRON_V1 {
  TP_VERSION  Version;
  PTP_POOL  Pool;
  PTP_CLEANUP_GROUP  CleanupGroup;
  PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
  PVOID  RaceDll;
  struct _ACTIVATION_CONTEXT  *ActivationContext;
  PTP_SIMPLE_CALLBACK  FinalizationCallback;
  union {
  DWORD  Flags;
  struct {
  DWORD  LongFunction :  1;
  DWORD  Persistent  :  1;
  DWORD  Private  : 30;
  } s;
  } u;  
} TP_CALLBACK_ENVIRON_V1;

typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;

#endif /* _WIN32_WINNT < _WIN32_WINNT_WIN7 */

FORCEINLINE VOID TpInitializeCallbackEnviron(PTP_CALLBACK_ENVIRON CallbackEnviron) {
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
    CallbackEnviron->Version = 3;
#else /* _WIN32_WINNT < _WIN32_WINNT_WIN7 */
    CallbackEnviron->Version = 1;
#endif /* _WIN32_WINNT < _WIN32_WINNT_WIN7 */
    CallbackEnviron->Pool = NULL;
    CallbackEnviron->CleanupGroup = NULL;
    CallbackEnviron->CleanupGroupCancelCallback = NULL;
    CallbackEnviron->RaceDll = NULL;
    CallbackEnviron->ActivationContext = NULL;
    CallbackEnviron->FinalizationCallback = NULL;
    CallbackEnviron->u.Flags = 0;
#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */
}

FORCEINLINE VOID TpSetCallbackThreadpool(PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_POOL Pool) {
    CallbackEnviron->Pool = Pool;
}

FORCEINLINE VOID TpSetCallbackCleanupGroup(PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_CLEANUP_GROUP CleanupGroup, PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback) {
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

FORCEINLINE VOID TpSetCallbackActivationContext(PTP_CALLBACK_ENVIRON CallbackEnviron, struct _ACTIVATION_CONTEXT *ActivationContext) {
    CallbackEnviron->ActivationContext = ActivationContext;
}

FORCEINLINE VOID TpSetCallbackNoActivationContext(PTP_CALLBACK_ENVIRON CallbackEnviron) {
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR)(-1);
}

FORCEINLINE VOID TpSetCallbackLongFunction(PTP_CALLBACK_ENVIRON CallbackEnviron) {
    CallbackEnviron->u.s.LongFunction = 1;
}

FORCEINLINE VOID TpSetCallbackRaceWithDll(PTP_CALLBACK_ENVIRON CallbackEnviron, PVOID DllHandle) {
    CallbackEnviron->RaceDll = DllHandle;
}

FORCEINLINE VOID TpSetCallbackFinalizationCallback(PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_SIMPLE_CALLBACK FinalizationCallback) {
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
FORCEINLINE VOID TpSetCallbackPriority(PTP_CALLBACK_ENVIRON CallbackEnviron, TP_CALLBACK_PRIORITY Priority) {
    CallbackEnviron->CallbackPriority = Priority;
}
#endif /* _WIN32_WINNT >= _WIN32_WINNT_WIN7 */

FORCEINLINE VOID TpSetCallbackPersistent(PTP_CALLBACK_ENVIRON CallbackEnviron) {
    CallbackEnviron->u.s.Persistent = 1;
}

FORCEINLINE VOID TpDestroyCallbackEnviron(PTP_CALLBACK_ENVIRON CallbackEnviron) {
    UNREFERENCED_PARAMETER(CallbackEnviron);
}

typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef VOID (NTAPI *PTP_WORK_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK);

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef VOID (NTAPI *PTP_TIMER_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER);

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef VOID (NTAPI *PTP_WAIT_CALLBACK)(PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT);

typedef struct _TP_IO TP_IO, *PTP_IO;

#if defined(_M_AMD64)
FORCEINLINE struct _TEB *NtCurrentTeb(void) { return (struct _TEB *)__readgsqword(FIELD_OFFSET(NT_TIB, Self)); }
FORCEINLINE PVOID GetCurrentFiber(void) { return (PVOID)__readgsqword(FIELD_OFFSET(NT_TIB, FiberData)); }
FORCEINLINE PVOID GetFiberData(void) { return *(PVOID *)GetCurrentFiber(); }
#endif /* _M_AMD64 */

#if defined(_M_IX86)

#define PcTeb  0x18

inline struct _TEB * NtCurrentTeb(void) { return (struct _TEB *)(ULONG_PTR)__readfsdword(PcTeb); }

#endif /* _M_IX86 */

#if (_WIN32_WINNT > 0x0500) || (_WIN32_FUSION >= 0x0100) || ISOLATION_AWARE_ENABLED 
#define ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION  (1)
#define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION  (2)
#define ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION  (3)
#define ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION  (4)
#define ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION  (5)
#define ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION (6)
#define ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION  (7)
#define ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE  (8)
#define ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES  (9)
#define ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS  (10)
#define ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO  (11)
#endif 


#endif /* _WINNT_H */
