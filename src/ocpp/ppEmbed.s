;File ppEmbed.s
;Compiler version OCC Version 6.73.1
        section code align=2        use32
        section data align=8        use32
        section bss  align=8        use32
        section const  align=8        use32
        section string  align=2        use32
        section tls  align=8 use32
        section cstartup align=2 use32
        section crundown align=2 use32
        section tstartup align=2 use32
        section trundown align=2 use32
section code
        section vsc@std@.bnot.qrx18@std@exception_ptr virtual
        [bits 32]
; std::operator !( const std::exception_ptr&)
@std@.bnot.qrx18@std@exception_ptr:
; Line 128:    inline bool operator!(const exception_ptr& e) { return !e.exc; } 
L_43:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+04h]
        and     eax,eax
        sete    al
        and     eax,byte 01h
L_44:
        ret
section code
section code
        section vsc@std@.bequ.qrx18@std@exception_ptrrxn0 virtual
        [bits 32]
; std::operator ==( const std::exception_ptr&,  const std::exception_ptr&)
@std@.bequ.qrx18@std@exception_ptrrxn0:
; Line 129:    inline bool operator==(const exception_ptr& left, const exception_ptr& right) { return left.exc == right.exc; } 
L_51:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
L_52:
        ret
section code
section code
        section vsc@std@.bneq.qrx18@std@exception_ptrrxn0 virtual
        [bits 32]
; std::operator !=( const std::exception_ptr&,  const std::exception_ptr&)
@std@.bneq.qrx18@std@exception_ptrrxn0:
; Line 130:    inline bool operator!=(const exception_ptr& left, const exception_ptr& right) { return !operator==(left, right); } 
        push    ecx
        push    ecx
L_59:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
        mov     ecx,dword [ecx+04h]
        mov     eax,dword [eax+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        sete    al
        and     eax,byte 01h
L_60:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@.bequ.qrx18@std@exception_ptr9nullptr_t virtual
        [bits 32]
; std::operator ==( const std::exception_ptr&, nullptr_t)
@std@.bequ.qrx18@std@exception_ptr9nullptr_t:
; Line 131:    inline bool operator==(const exception_ptr& left, nullptr_t right) { return left.exc == nullptr; } 
L_83:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+04h]
        and     eax,eax
        sete    al
        and     eax,byte 01h
L_84:
        ret
section code
section code
        section vsc@std@.bneq.qrx18@std@exception_ptr9nullptr_t virtual
        [bits 32]
; std::operator !=( const std::exception_ptr&, nullptr_t)
@std@.bneq.qrx18@std@exception_ptr9nullptr_t:
; Line 132:    inline bool operator!=(const exception_ptr& left, nullptr_t right) { return !operator==(left, nullptr); } 
        push    ecx
L_91:
        mov     eax,dword [esp+04h+04h]
        mov     eax,dword [eax+04h]
        and     eax,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        sete    al
        and     eax,byte 01h
L_92:
        pop     ecx
        ret
section code
section code
        section vsc@std@this_thread@get_id.qv virtual
        [bits 32]
; std::this_thread::get_id()
@std@this_thread@get_id.qv:
; Line 673: namespace this_thread 
        push    ecx
        push    ecx
L_115:
; Line 679: { 
; Line 680:     return __libcpp_thread_get_current_id(); 
        call    @std@__libcpp_thread_get_current_id.qv ; std::__libcpp_thread_get_current_id()
; Line 681: } 
L_116:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#char_traits.c~@eof.qv virtual
        [bits 32]
; std::char_traits<char>::eof()
@std@#char_traits.c~@eof.qv:
L_141:
        mov     eax,0ffffffffh
L_142:
        ret
section code
section code
        section vsc@std@#char_traits.C~@eof.qv virtual
        [bits 32]
; std::char_traits<wchar_t>::eof()
@std@#char_traits.C~@eof.qv:
L_149:
        or      eax,byte 0ffffffffh
L_150:
        ret
section code
section code
        section vsc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffeech
        push    ebx
        push    esi
        push    edi
L_157:
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     edi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-09ch],eax
        mov     dword [ebp-09ch+04h],___cppexceptionhandle
        mov     dword [ebp-09ch+08h],esp
        mov     dword [ebp-09ch+0ch],ebp
        mov     dword [ebp-09ch+010h],@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-09ch+014h],00h
        lea     eax,[ebp-09ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 34:     auto prefix_val = args.find(map_vals_string); 
        add     esp,byte 0fffffffch
        mov     ebx,esp
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&) const 
        mov     dword [ebp-0100h],eax
        add     esp,byte 08h
        lea     eax,[ebp-0100h]
        push    eax
        push    ebx
        call    @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-09ch+014h],01h
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-09ch+014h],02h
        mov     dword [ebp-09ch+014h],03h
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1840:     return const_iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-0114h],eax
        mov     dword [ebp-09ch+014h],04h
; Line 1844: } 
        lea     eax,[ebp-0114h]
        push    eax
        push    ecx
        call    @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-09ch+014h],05h
        lea     eax,[ebp-030h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-09ch+014h],06h
        mov     dword [ebp-09ch+014h],07h
; Line 476:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp-04h]
        mov     eax,dword [ebp-030h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 477:     } 
        and     al,al
        sete    al
        and     eax,byte 01h
        mov     dword [ebp-09ch+014h],08h
L_321:
L_308:
        and     al,al
        je      L_160
; Line 36:     { 
; Line 37:         for (auto&& val : prefix_val->second) 
; Line 453:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container const_iterator"); 
        mov     eax,dword [ebp-04h]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 455:     } 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [eax+04h+014h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0108h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0108h]
; Line 1517: } 
        mov     dword [ebp-0fch],eax
; Line 453:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container const_iterator"); 
        mov     eax,dword [ebp-04h]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 455:     } 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [eax+08h+014h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0110h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0110h]
; Line 1533: } 
        mov     esi,eax
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,dword [ebp-0fch]
        mov     edx,eax
        mov     ecx,esi
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
; Line 1618: } 
        and     cl,cl
        jne     L_166
L_164:
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
; Line 39:             embed_vec.push_back(val); 
        lea     ebx,[ebp-050h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?0?~]
        lea     eax,[ebp-050h+08h]
        push    eax
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?0?r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~ ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base<unsigned int=0, shared_ptr<bool>&, >(in_place_index_t<unsigned int=0>, shared_ptr<bool>&)
        add     esp,byte 0ch
        mov     dword [ebp-09ch+014h],09h
        mov     dword [ebp-09ch+014h],0ah
        push    ebx
        mov     eax,edi
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@push_back.qR#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::push_back(variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 08h
; Line 40:         } 
        mov     dword [ebp-09ch+014h],0bh
        lea     eax,[ebp-050h+08h]
        push    eax
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_assignment()
        add     esp,byte 04h
L_1040:
L_1027:
L_1055:
L_1069:
L_1014:
L_167:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     dword [ebp-0fch],byte 08h
; Line 1482:     } 
L_165:
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,dword [ebp-0fch]
        mov     edx,eax
        mov     ecx,esi
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
; Line 1618: } 
        and     cl,cl
        je      L_164
L_166:
; Line 41:     } 
L_160:
; Line 42: } 
        mov     dword [ebp-09ch+014h],0ch
L_1161:
L_1148:
L_158:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xt@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__sfinae_ctor_base.4bool?1?n0?1?~ virtual
        [bits 32]
@.xt@#__sfinae_ctor_base.4bool?1?n0?1?~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      066h
        db      069h
        db      06eh
        db      061h
        db      065h
        db      05fh
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__sfinae_assign_base.4bool?1?n0?1?~ virtual
        [bits 32]
@.xt@#__sfinae_assign_base.4bool?1?n0?1?~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      066h
        db      069h
        db      06eh
        db      061h
        db      065h
        db      05fh
        db      061h
        db      073h
        db      073h
        db      069h
        db      067h
        db      06eh
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ virtual
        [bits 32]
@.xt@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~:
        dd      @std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bdtr.qv+0
        dd      08h
        dd      00h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      075h
        db      06eh
        db      069h
        db      06fh
        db      06eh
        db      00h
section code
section code
        section vsc@.xt@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~ virtual
        [bits 32]
@.xt@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~:
        dd      @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~ virtual
        [bits 32]
@.xt@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~:
        dd      @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__constructor.#__traits.#shared_ptr.5Token~uL~~ virtual
        [bits 32]
@.xt@#__constructor.#__traits.#shared_ptr.5Token~uL~~:
        dd      @std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~ virtual
        [bits 32]
@.xt@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~:
        dd      @std@__variant_detail@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06dh
        db      06fh
        db      076h
        db      065h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__constructor.#__traits.#shared_ptr.5Token~uL~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~ virtual
        [bits 32]
@.xt@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~:
        dd      @std@__variant_detail@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__assignment.#__traits.#shared_ptr.5Token~uL~~ virtual
        [bits 32]
@.xt@#__assignment.#__traits.#shared_ptr.5Token~uL~~:
        dd      @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      073h
        db      073h
        db      069h
        db      067h
        db      06eh
        db      06dh
        db      065h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~ virtual
        [bits 32]
@.xt@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~:
        dd      @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06dh
        db      06fh
        db      076h
        db      065h
        db      05fh
        db      061h
        db      073h
        db      073h
        db      069h
        db      067h
        db      06eh
        db      06dh
        db      065h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#__assignment.#__traits.#shared_ptr.5Token~uL~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~ virtual
        [bits 32]
@.xt@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~:
        dd      @std@__variant_detail@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      061h
        db      073h
        db      073h
        db      069h
        db      067h
        db      06eh
        db      06dh
        db      065h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__impl.#shared_ptr.5Token~uL~ virtual
        [bits 32]
@.xt@#__impl.#shared_ptr.5Token~uL~:
        dd      @std@__variant_detail@#__impl.#shared_ptr.5Token~uL~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      064h
        db      065h
        db      074h
        db      061h
        db      069h
        db      06ch
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#variant.#shared_ptr.5Token~uL~ virtual
        [bits 32]
@.xt@#variant.#shared_ptr.5Token~uL~:
        dd      @std@#variant.#shared_ptr.5Token~uL~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#__sfinae_ctor_base.4bool?1?n0?1?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__sfinae_assign_base.4bool?1?n0?1?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff64h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffffch
        dd      03h
        dd      0ch
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0ffffffd0h
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#variant.#shared_ptr.5Token~uL~+0
        dd      0ffffffb0h
        dd      0ah
        dd      0bh
        dd      00h
section code
section code
        section vsc@std@#.bequ.p#shared_ptr.5Token~p#shared_ptr.n0~~.qrx#__wrap_iter.p#shared_ptr.n0~~rx#__wrap_iter.p#shared_ptr.n0~~ virtual
        [bits 32]
; std::operator ==<shared_ptr<Token>*, shared_ptr<Token>*>( const __wrap_iter<shared_ptr<Token>*>&,  const __wrap_iter<shared_ptr<Token>*>&)
@std@#.bequ.p#shared_ptr.5Token~p#shared_ptr.n0~~.qrx#__wrap_iter.p#shared_ptr.n0~~rx#__wrap_iter.p#shared_ptr.n0~~:
; Line 1613: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_1168:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
L_1169:
        ret
section code
section code
        section vsc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~ virtual
        [bits 32]
; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const vector<unsigned long long, allocator<unsigned long long>>&)
@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff68h
        push    ebx
        push    esi
        push    edi
L_1208:
        mov     eax,dword [ebp+0ch]
        mov     edi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-064h],eax
        mov     dword [ebp-064h+04h],___cppexceptionhandle
        mov     dword [ebp-064h+08h],esp
        mov     dword [ebp-064h+0ch],ebp
        mov     dword [ebp-064h+010h],@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~
        mov     dword [ebp-064h+014h],00h
        lea     eax,[ebp-064h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 45:     for (auto&& val : embed_val_vector) 
        mov     ecx,eax
; Line 1524:     return __make_iter(this->__begin_); 
        mov     ecx,dword [ecx+04h]
; Line 1505:     return const_iterator(this, __p); 
        mov     dword [ebp-090h],ecx
; Line 1509: } 
        mov     ecx,dword [ebp-090h]
; Line 1525: } 
        mov     dword [ebp-088h],ecx
; Line 1540:     return __make_iter(this->__end_); 
        mov     eax,dword [eax+08h]
; Line 1505:     return const_iterator(this, __p); 
        mov     dword [ebp-098h],eax
; Line 1509: } 
        mov     eax,dword [ebp-098h]
; Line 1541: } 
        mov     esi,eax
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,dword [ebp-088h]
        mov     edx,eax
        mov     ecx,esi
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
; Line 1618: } 
        and     cl,cl
        jne     L_1213
L_1211:
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
; Line 47:         embed_vec.push_back(val); 
        lea     ebx,[ebp-040h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?1?~]
        lea     eax,[ebp-040h+08h]
        push    eax
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base<unsigned int=1, unsigned long long&, >(in_place_index_t<unsigned int=1>, unsigned long long&)
        add     esp,byte 0ch
        mov     dword [ebp-064h+014h],01h
        mov     dword [ebp-064h+014h],02h
        push    ebx
        mov     eax,edi
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@push_back.qR#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::push_back(variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 08h
; Line 48:     } 
        mov     dword [ebp-064h+014h],03h
        lea     eax,[ebp-040h+08h]
        push    eax
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_assignment()
        add     esp,byte 04h
L_1524:
L_1511:
L_1539:
L_1553:
L_1498:
L_1214:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     dword [ebp-088h],byte 08h
; Line 1482:     } 
L_1212:
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,dword [ebp-088h]
        mov     edx,eax
        mov     ecx,esi
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
; Line 1618: } 
        and     cl,cl
        je      L_1211
L_1213:
; Line 49: } 
L_1209:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~ virtual
        [bits 32]
@.xc@push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~:
        dd      00h
        dd      0ffffff9ch
        dd      0400h
        dd      @.xt@#variant.#shared_ptr.5Token~uL~+0
        dd      0ffffffc0h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#.bequ.pxuLpxuL~.qrx#__wrap_iter.pxuL~rx#__wrap_iter.pxuL~ virtual
        [bits 32]
; std::operator ==<unsigned long long const *, unsigned long long const *>( const __wrap_iter<unsigned long long const *>&,  const __wrap_iter<unsigned long long const *>&)
@std@#.bequ.pxuLpxuL~.qrx#__wrap_iter.pxuL~rx#__wrap_iter.pxuL~:
; Line 1613: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_1624:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
L_1625:
        ret
section code
section code
        section vsc@reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
; reconstruct_string( const vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
@reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffed8h
        push    ebx
        push    esi
        push    edi
L_1664:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0118h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0114h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-088h],eax
        mov     dword [ebp-088h+04h],___cppexceptionhandle
        mov     dword [ebp-088h+08h],esp
        mov     dword [ebp-088h+0ch],ebp
        mov     dword [ebp-088h+010h],@.xc@reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~
        mov     dword [ebp-088h+014h],00h
        lea     eax,[ebp-088h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 52:     std::string start = ""; 
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     eax,[ebp-014h]
        mov     dword [ebp-0110h],eax
        mov     ebx,L_32
        mov     eax,dword [ebp-0110h]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,dword [ebp-0110h]
        add     esi,byte 04h
        mov     dword [ebp-0108h],00h
        lea     eax,[ebp-0108h]
        mov     dword [ebp-010ch],00h
        lea     edi,[ebp-010ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_1791:
L_1805:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        mov     eax,dword [ebp-0110h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-088h+014h],01h
; Line 54:     for (auto&& val : embed_vec) 
        mov     ecx,dword [ebp-0114h]
        mov     eax,ecx
; Line 1524:     return __make_iter(this->__begin_); 
        mov     eax,dword [eax+04h]
; Line 1505:     return const_iterator(this, __p); 
        mov     dword [ebp-0120h],eax
; Line 1509: } 
        mov     eax,dword [ebp-0120h]
; Line 1525: } 
        mov     ebx,eax
; Line 1540:     return __make_iter(this->__end_); 
        mov     eax,dword [ecx+08h]
; Line 1505:     return const_iterator(this, __p); 
        mov     dword [ebp-0128h],eax
; Line 1509: } 
        mov     eax,dword [ebp-0128h]
; Line 1541: } 
        mov     esi,eax
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,ebx
        mov     edx,ebx
        mov     eax,esi
        cmp     edx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        jne     L_1669
L_1667:
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
; Line 56:         start += val->GetChars() + " "; 
        lea     edi,[ebp-014h]
        mov     eax,dword [ecx]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-050h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-088h+014h],02h
        mov     dword [ebp-088h+014h],03h
        lea     eax,[ebp-050h]
        mov     ecx,L_33
; Line 4157:     return _VSTD::move(__lhs.append(__rhs)); 
        push    ecx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *)
        add     esp,byte 08h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        lea     eax,[ebp-064h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qR#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string(basic_string<char, char_traits<char>, allocator<char>>&&)
        add     esp,byte 08h
        mov     dword [ebp-088h+014h],04h
; Line 4158: } 
        mov     dword [ebp-088h+014h],05h
        lea     edx,[ebp-064h]
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     eax,edx
        mov     ecx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_2130
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+04h+04h]
        jmp     L_2131
L_2130:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
L_2131:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_2322
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_2323
L_2322:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_2323:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *, unsigned int)
        add     esp,byte 0ch
; Line 2554: } 
        mov     dword [ebp-088h+014h],06h
        lea     eax,[ebp-050h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
; Line 57:     } 
        mov     dword [ebp-088h+014h],07h
        lea     eax,[ebp-064h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_1670:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     ebx,byte 08h
; Line 1482:     } 
L_1668:
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,ebx
        mov     edx,ebx
        mov     eax,esi
        cmp     edx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        je      L_1667
L_1669:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     esi,dword [ebp-0118h]
        lea     ebx,[ebp-014h]
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-088h+014h],08h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-088h+014h],09h
        mov     eax,dword [ebp+08h]
; Line 59: } 
L_1665:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__basic_string_common.4bool?1?~ virtual
        [bits 32]
@.xt@#__basic_string_common.4bool?1?~:
        dd      @std@#__basic_string_common.4bool?1?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@56@std@#basic_string.c#char_traits.c~#allocator.c~~@__long virtual
        [bits 32]
@.xt@56@std@#basic_string.c#char_traits.c~#allocator.c~~@__long:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      06ch
        db      06fh
        db      06eh
        db      067h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@57@std@#basic_string.c#char_traits.c~#allocator.c~~@__short virtual
        [bits 32]
@.xt@57@std@#basic_string.c#char_traits.c~#allocator.c~~@__short:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      06fh
        db      072h
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@55@std@#basic_string.c#char_traits.c~#allocator.c~~@__raw virtual
        [bits 32]
@.xt@55@std@#basic_string.c#char_traits.c~#allocator.c~~@__raw:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      072h
        db      061h
        db      077h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep virtual
        [bits 32]
@.xt@55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      072h
        db      065h
        db      070h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.c~ virtual
        [bits 32]
@.xt@#allocator.c~:
        dd      @std@#allocator.c~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep#allocator.c~~ virtual
        [bits 32]
@.xt@#__compressed_pair.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep#allocator.c~~:
        dd      @std@#__compressed_pair.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep#allocator.c~~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~+0
        dd      0ch
        dd      00h
section code
section code
        section vsc@.xt@#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xt@#basic_string.c#char_traits.c~#allocator.c~~:
        dd      @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      00h
        dd      0800h
        dd      @.xt@#__basic_string_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xc@reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~:
        dd      00h
        dd      0ffffff78h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffb0h
        dd      03h
        dd      06h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffff9ch
        dd      05h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#.bequ.px#shared_ptr.5Token~px#shared_ptr.n0~~.qrx#__wrap_iter.px#shared_ptr.n0~~rx#__wrap_iter.px#shared_ptr.n0~~ virtual
        [bits 32]
; std::operator ==<shared_ptr<Token> const *, shared_ptr<Token> const *>( const __wrap_iter<shared_ptr<Token> const *>&,  const __wrap_iter<shared_ptr<Token> const *>&)
@std@#.bequ.px#shared_ptr.5Token~px#shared_ptr.n0~~.qrx#__wrap_iter.px#shared_ptr.n0~~rx#__wrap_iter.px#shared_ptr.n0~~:
; Line 1613: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_2654:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
L_2655:
        ret
section code
section code
        section vsc@embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info virtual
        [bits 32]
; embeder::EmbedFile(basic_string<char, char_traits<char>, allocator<char>>&, embeder_info)
@embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info:
        push    ebp
        mov     ebp,esp
        add     esp,0fffff6d8h
        push    ebx
        push    esi
        push    edi
L_2694:
        mov     ebx,dword [ebp+08h]
        mov     esi,dword [ebp+08h]
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08d8h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08d4h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08d0h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08cch],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08c8h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-08c4h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-03d0h],eax
        mov     dword [ebp-03d0h+04h],___cppexceptionhandle
        mov     dword [ebp-03d0h+08h],esp
        mov     dword [ebp-03d0h+0ch],ebp
        mov     dword [ebp-03d0h+010h],@.xc@embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info
        mov     dword [ebp-03d0h+014h],00h
        lea     eax,[ebp-03d0h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 71:     std::vector<uintmax_t> next_thing = {}; 
        lea     eax,[ebp+00h]
        mov     dword [ebp-01ch],eax
        mov     dword [ebp-01ch+04h],00h
        push    dword [ebp-01ch+04h]
        push    dword [ebp-01ch]
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#vector.uL#allocator.uL~~@.bctr.q#initializer_list.uL~ ; std::vector<unsigned long long, allocator<unsigned long long>>::vector(initializer_list<unsigned long long>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],01h
; Line 215: template <class _Tp, class _Alloc = allocator<_Tp> > 
        lea     eax,[ebp+00h]
        mov     dword [ebp-038h],eax
        mov     dword [ebp-038h+04h],00h
        push    dword [ebp-038h+04h]
        push    dword [ebp-038h]
        lea     eax,[ebp-030h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],02h
        mov     eax,01h
        push    eax
        add     esp,byte 0ffffff80h
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @embeder_info@.bctr.qrx12embeder_info ; embeder_info::embeder_info( const embeder_info&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03h
        mov     eax,dword [ebp-08c4h]
        push    eax
        mov     dword [ebp-03d0h+014h],04h
        call    @embeder@has_embed.q12embeder_info4bool ; embeder::has_embed(embeder_info, bool)
        add     esp,088h
        mov     dword [ebp-03ch],eax
; Line 74:     if (ret_val == EmbedReturnValue::EMBED_NOT_FOUND) 
        cmp     dword [ebp-03ch],byte 00h
        jne     L_2697
; Line 75:     { 
; Line 76:         return std::tuple<std::vector<embeder_type>, EmbedReturnValue>{builder, EmbedReturnValue::EMBED_NOT_FOUND}; 
; Line 222:     template <class _Tp, 
        lea     esi,[ebp-0264h]
        lea     eax,[ebp-030h]
        xor     ecx,ecx
        mov     dword [ebp-0268h],ecx
        lea     ecx,[ebp-0268h]
        push    ecx
        push    eax
        mov     dword [ebp-0804h],00h
        lea     eax,[ebp-0804h]
        push    dword [eax]
        mov     dword [ebp-0808h],00h
        lea     eax,[ebp-0808h]
        push    dword [eax]
        mov     dword [ebp-080ch],00h
        lea     eax,[ebp-080ch]
        push    dword [eax]
        mov     dword [ebp-0810h],00h
        lea     eax,[ebp-0810h]
        push    dword [eax]
        push    esi
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_2878:
L_2892:
L_2906:
L_2920:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],05h
        push    esi
        push    ebx
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],06h
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],07h
        lea     eax,[ebp-0264h]
L_2961:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_3020:
; Line 879:     } 
L_3005:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_2990:
L_2975:
L_2948:
L_2935:
        mov     dword [ebp-03d0h+014h],08h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_3375:
; Line 879:     } 
L_3360:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_3345:
        mov     dword [ebp-03d0h+014h],09h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_3727:
; Line 879:     } 
L_3712:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_3697:
        mov     dword [ebp-03d0h+014h],0ah
        lea     ebx,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_4062:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_4108:
; Line 879:     } 
L_4093:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_4078:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_4460:
; Line 879:     } 
L_4445:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_4430:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_4047:
        mov     eax,esi
        jmp     L_2695
; Line 77:     } 
L_4807:
L_4866:
L_4851:
L_4836:
L_4821:
L_4794:
L_4781:
L_2697:
; Line 78:     bool found_system = false; 
        mov     byte [ebp-03dh],00h
; Line 79:     int discard = 0; 
        xor     eax,eax
        mov     dword [ebp-044h],eax
; Line 80:     bool found = false; 
        mov     byte [ebp-045h],00h
; Line 81:     std::string fil = includer.FindFile(info.is_system, info.filename, false, discard, found_system, found); 
        lea     eax,[ebp-045h]
        push    eax
        lea     eax,[ebp-03dh]
        push    eax
        lea     eax,[ebp-044h]
        push    eax
        push    byte 00h
        lea     eax,[ebp+014h]
        push    eax
        mov     al,byte [ebp+014h+040h]
        and     eax,byte 01h
        push    eax
        mov     eax,dword [ebp-08c4h]
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-05ch]
        push    eax
        call    @ppInclude@FindFile.q4boolrx#basic_string.c#char_traits.c~#allocator.c~~n0rirn0rn0 ; ppInclude::FindFile(bool,  const basic_string<char, char_traits<char>, allocator<char>>&, bool, int&, bool&, bool&)
        add     esp,byte 020h
        mov     dword [ebp-03d0h+014h],0ch
; Line 82:     if (!Utils::FileExists(fil)) 
        lea     ecx,[ebp-05ch]
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_5253
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_5254
L_5253:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_5254:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    @Utils@FileExists.qpxc ; Utils::FileExists(char const *)
        add     esp,byte 04h
        and     al,al
        jne     L_2704
; Line 83:     { 
; Line 84:         return {builder, EmbedReturnValue::EMBED_NOT_FOUND}; 
; Line 691:     template <bool _Dummy = true, 
        lea     eax,[ebp-030h]
        xor     ecx,ecx
        mov     dword [ebp-024ch],ecx
        lea     ecx,[ebp-024ch]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    ecx
        push    eax
        mov     dword [ebp-0814h],00h
        lea     eax,[ebp-0814h]
        push    dword [eax]
        mov     dword [ebp-0818h],00h
        lea     eax,[ebp-0818h]
        push    dword [eax]
        mov     dword [ebp-081ch],00h
        lea     eax,[ebp-081ch]
        push    dword [eax]
        mov     dword [ebp-0820h],00h
        lea     eax,[ebp-0820h]
        push    dword [eax]
        push    esi
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_5528:
L_5542:
L_5556:
L_5570:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],0dh
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],0eh
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],0fh
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_5617:
; Line 879:     } 
L_5602:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_5587:
        mov     dword [ebp-03d0h+014h],010h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_5969:
; Line 879:     } 
L_5954:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_5939:
        mov     dword [ebp-03d0h+014h],011h
        lea     ebx,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_6304:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_6350:
; Line 879:     } 
L_6335:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_6320:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_6702:
; Line 879:     } 
L_6687:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_6672:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_6289:
        mov     eax,esi
        jmp     L_2695
; Line 85:     } 
L_2704:
; Line 86:     size_t size = Utils::file_size(fil); 
        lea     ecx,[ebp-05ch]
; Line 84:         struct stat stats; 
; Line 85:         stat(file.c_str(), &stats); 
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_7102
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_7103
L_7102:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_7103:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        lea     ecx,[ebp-0380h]
; Line 320:             return _stat64i32(_FileName, (struct _stat64i32*)_Stat); 
        push    ecx
        push    eax
        call    __stat64i32 ; _stat64i32
        add     esp,byte 08h
; Line 321:         } 
        mov     eax,dword [ebp-0380h+014h]
; Line 87:     } 
        mov     dword [ebp-08c0h],eax
; Line 87:     ppExpr evaluator(false, Dialect::c2x); 
        lea     ecx,[ebp-088h]
        xor     al,al
        mov     dword [ebp-039ch],06h
        mov     byte [ebp-088h],00h
        mov     byte [ebp+01h-088h],al
        mov     eax,dword [ebp-039ch]
        mov     dword [ebp+04h-088h],eax
        mov     dword [ebp+08h-088h],00h
        mov     eax,ecx
        add     eax,byte 0ch
        mov     esi,eax
        xor     eax,eax
        mov     dword [ebp-0824h],eax
        lea     eax,[ebp-0824h]
        mov     dword [ebp-0828h],00h
        lea     ebx,[ebp-0828h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bctr.pn0v~.qRpn0 ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::__compressed_pair_elem<bool*, void, >(bool*&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_7397:
        mov     dword [ebp-03d0h+014h],012h
        mov     dword [ebp+014h-088h],00h
; Line 47:     } 
        mov     dword [ebp-03d0h+014h],013h
        push    dword L_29
        lea     eax,[ebp-0204h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.9nullptr_t~.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string<nullptr_t, >(char const *)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],014h
        push    eax
        lea     eax,[ebp+014h+058h]
        push    eax
        lea     eax,[ebp-0208h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     ebx,eax
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],015h
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1816:     return iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-0924h],eax
        mov     dword [ebp-03d0h+014h],016h
; Line 1820: } 
        lea     eax,[ebp-0924h]
        push    eax
        push    ecx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],017h
        lea     eax,[ebp-020ch]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],018h
        mov     dword [ebp-03d0h+014h],019h
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebx]
        mov     eax,dword [ebp-020ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        and     al,al
        sete    bl
        and     ebx,byte 01h
        mov     dword [ebp-03d0h+014h],01ah
L_7526:
L_7513:
        mov     dword [ebp-03d0h+014h],01bh
L_7554:
L_7541:
        mov     dword [ebp-03d0h+014h],01ch
        lea     eax,[ebp-0204h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        and     bl,bl
        je      L_2711
; Line 90:     { 
; Line 91:         auto& vals = info.mapped_values["limit"]; 
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     ebx,[ebp-0220h]
        mov     dword [ebp-08b4h],L_29
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-082ch],00h
        lea     eax,[ebp-082ch]
        mov     dword [ebp-0830h],00h
        lea     esi,[ebp-0830h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_7668:
L_7682:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-08b4h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-08b4h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],01dh
        push    ebx
        lea     eax,[ebp+014h+058h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator [](basic_string<char, char_traits<char>, allocator<char>>&&)
        mov     ebx,eax
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],01eh
        lea     eax,[ebp-0220h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
; Line 92:         std::string line = reconstruct_string(vals); 
        push    ebx
        lea     eax,[ebp-0234h]
        push    eax
        call    @reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ ; reconstruct_string( const vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],01fh
; Line 93:         info.limit = evaluator.Eval(line); 
        push    byte 00h
        lea     eax,[ebp-0234h]
        push    eax
        lea     eax,[ebp-088h]
        push    eax
        call    @ppExpr@Eval.qr#basic_string.c#char_traits.c~#allocator.c~~4bool ; ppExpr::Eval(basic_string<char, char_traits<char>, allocator<char>>&, bool)
        add     esp,byte 0ch
        mov     dword [ebp+014h+014h],eax
; Line 94:     } 
        mov     dword [ebp-03d0h+014h],020h
        lea     eax,[ebp-0234h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_2711:
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        push    dword L_31
        lea     eax,[ebp-01ach]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.9nullptr_t~.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string<nullptr_t, >(char const *)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],021h
        push    eax
        lea     eax,[ebp+014h+058h]
        push    eax
        lea     eax,[ebp-01b0h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     ebx,eax
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],022h
        lea     eax,[ebp+014h+058h]
        add     esp,byte 0fffffffch
        mov     esi,esp
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end()
        mov     dword [ebp-0928h],eax
        add     esp,byte 04h
        lea     eax,[ebp-0928h]
        push    eax
        push    esi
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],023h
        lea     eax,[ebp-01b4h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],024h
        mov     dword [ebp-03d0h+014h],025h
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebx]
        mov     eax,dword [ebp-01b4h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        and     al,al
        sete    bl
        and     ebx,byte 01h
        mov     dword [ebp-03d0h+014h],026h
L_7790:
L_7777:
        mov     dword [ebp-03d0h+014h],027h
L_7818:
L_7805:
        mov     dword [ebp-03d0h+014h],028h
        lea     eax,[ebp-01ach]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        and     bl,bl
        je      L_2718
; Line 96:     { 
; Line 97:         auto& vals = info.mapped_values["offset"]; 
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     edi,[ebp-01c8h]
        mov     ebx,L_31
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-0834h],00h
        lea     eax,[ebp-0834h]
        mov     dword [ebp-0838h],00h
        lea     ecx,[ebp-0838h]
        mov     dword [ebp-08b8h],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,dword [ebp-08b8h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_7932:
L_7946:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],029h
        push    edi
        lea     eax,[ebp+014h+058h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator [](basic_string<char, char_traits<char>, allocator<char>>&&)
        mov     ebx,eax
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],02ah
        lea     eax,[ebp-01c8h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
; Line 98:         std::string line = reconstruct_string(vals); 
        push    ebx
        lea     eax,[ebp-01dch]
        push    eax
        call    @reconstruct_string.qrx#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ ; reconstruct_string( const vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],02bh
; Line 99:         info.offset = evaluator.Eval(line); 
        push    byte 00h
        lea     eax,[ebp-01dch]
        push    eax
        lea     eax,[ebp-088h]
        push    eax
        call    @ppExpr@Eval.qr#basic_string.c#char_traits.c~#allocator.c~~4bool ; ppExpr::Eval(basic_string<char, char_traits<char>, allocator<char>>&, bool)
        add     esp,byte 0ch
        mov     dword [ebp+014h+048h],eax
        mov     dword [ebp+014h+048h+04h],edx
; Line 100:     } 
        mov     dword [ebp-03d0h+014h],02ch
        lea     eax,[ebp-01dch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_2718:
        lea     eax,[ebp-05ch]
        mov     ecx,L_32
; Line 3928:     return !(__lhs == __rhs); 
        push    ecx
        push    eax
        call    @std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc ; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
        add     esp,byte 08h
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 3929: } 
        and     al,al
        je      L_2725
        cmp     dword [ebp+014h+014h],byte 00h
        je      L_2725
        cmp     dword [ebp-08c0h],byte 00h
        je      L_2725
; Line 102:     { 
; Line 103:         push_back_values(info.prefix, info.mapped_values, "prefix"); 
        lea     ebx,[ebp-0128h]
        mov     dword [ebp-08b0h],L_27
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-083ch],00h
        lea     eax,[ebp-083ch]
        mov     dword [ebp-0840h],00h
        lea     esi,[ebp-0840h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_8092:
L_8106:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-08b0h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-08b0h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],02dh
        push    ebx
        lea     eax,[ebp+014h+058h]
        push    eax
        lea     eax,[ebp+014h+018h]
        push    eax
        call    @push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
; Line 104:         push_back_values(info.suffix, info.mapped_values, "suffix"); 
        lea     eax,[ebp-013ch]
        mov     dword [ebp-08ach],eax
        mov     ebx,L_28
        mov     eax,dword [ebp-08ach]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,dword [ebp-08ach]
        add     esi,byte 04h
        mov     dword [ebp-0844h],00h
        lea     eax,[ebp-0844h]
        mov     dword [ebp-0848h],00h
        lea     edi,[ebp-0848h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_8236:
L_8250:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        mov     eax,dword [ebp-08ach]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],02eh
        mov     eax,dword [ebp-08ach]
        push    eax
        lea     eax,[ebp+014h+058h]
        push    eax
        lea     eax,[ebp+014h+02ch]
        push    eax
        call    @push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
; Line 105:         builder.insert(builder.end(), info.prefix.begin(), info.prefix.end()); 
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h+014h+018h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-08e0h],eax
; Line 1497: } 
        mov     eax,dword [ebp-08e0h]
        mov     dword [ebp-08dch],eax
; Line 1533: } 
        lea     eax,[ebp-08dch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [ebp+04h+014h+018h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-08e8h],eax
; Line 1497: } 
        mov     eax,dword [ebp-08e8h]
        mov     dword [ebp-08e4h],eax
; Line 1517: } 
        lea     eax,[ebp-08e4h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        push    byte 00h
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h-030h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-08f0h],eax
; Line 1497: } 
        mov     eax,dword [ebp-08f0h]
        mov     dword [ebp-08ech],eax
; Line 1533: } 
        lea     eax,[ebp-08ech]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.px#variant.#shared_ptr.5Token~uL~~@.bctr.p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~pv ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*, >( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, void*)
        add     esp,byte 0ch
        lea     eax,[ebp-030h]
        push    eax
        mov     dword [ebp-03d0h+014h],02fh
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::insert<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        add     esp,byte 010h
; Line 2449:   template <bool _Dummy, class _Deleter = typename __dependent_type< 
        lea     ebx,[ebp-0144h]
        push    dword L_34
        lea     ecx,[ebp-05ch]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp-05ch+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_8545
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp+08h+04h-05ch]
        jmp     L_8546
L_8545:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_8546:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    _fopen ; fopen
        add     esp,byte 08h
        mov     dword [ebp-0470h],eax
        mov     ecx,ebx
        lea     edx,[ebp-0470h]
        mov     dword [ebp-084ch],00h
        lea     eax,[ebp-084ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [ebp-0144h],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_8838:
        mov     dword [ebp-03d0h+014h],030h
; Line 109:         size_t resval = info.limit < 0 ? size : info.limit; 
        cmp     dword [ebp+014h+014h],byte 00h
        jge     L_8842
        mov     eax,dword [ebp-08c0h]
        jmp     L_8843
L_8842:
        mov     eax,dword [ebp+014h+014h]
L_8843:
        mov     ebx,eax
; Line 110:         next_thing.resize(resval); 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#vector.uL#allocator.uL~~@resize.qui ; std::vector<unsigned long long, allocator<unsigned long long>>::resize(unsigned int)
        add     esp,byte 08h
; Line 111:         if (fseek(file.get(), info.offset, SEEK_SET) < 0) 
        push    byte 00h
        mov     eax,dword [ebp+014h+048h]
        push    eax
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0144h]
; Line 2592:   } 
        push    eax
        call    _fseek ; fseek
        add     esp,byte 0ch
        and     eax,eax
        jge     L_2729
; Line 112:         { 
; Line 113:             return std::tuple<std::vector<embeder_type>, EmbedReturnValue>{builder, EmbedReturnValue::EMBED_IO_ERROR}; 
; Line 222:     template <class _Tp, 
        lea     ebx,[ebp-0194h]
        lea     eax,[ebp-030h]
        mov     dword [ebp-0198h],03h
        lea     ecx,[ebp-0198h]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    ecx
        push    eax
        mov     dword [ebp-0850h],00h
        lea     eax,[ebp-0850h]
        push    dword [eax]
        mov     dword [ebp-0854h],00h
        lea     eax,[ebp-0854h]
        push    dword [eax]
        mov     dword [ebp-0858h],00h
        lea     eax,[ebp-0858h]
        push    dword [eax]
        mov     dword [ebp-085ch],00h
        lea     eax,[ebp-085ch]
        push    dword [eax]
        push    ebx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_8984:
L_8998:
L_9012:
L_9026:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],031h
        push    ebx
        mov     eax,dword [ebp-08d8h]
        push    eax
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],032h
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],033h
        lea     eax,[ebp-0194h]
L_9067:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_9126:
; Line 879:     } 
L_9111:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_9096:
L_9081:
L_9054:
L_9041:
        mov     dword [ebp-03d0h+014h],034h
        lea     ebx,[ebp-0144h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-0144h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-0144h],ecx
        and     eax,eax
        je      L_9454
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0860h],eax
        and     eax,eax
        je      L_9552
        mov     eax,dword [ebp-0860h]
        add     eax,byte 04h
        jmp     L_9553
L_9552:
        mov     eax,dword [ebp-0860h]
L_9553:
        push    eax
        call    @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @FileDeleter@.bcall.xqp8__file__ ; FileDeleter::operator ()(__file__*) const 
        add     esp,byte 08h
L_9454:
; Line 2619:   } 
L_9471:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @FileDeleter@.bdtr.qv ; FileDeleter::~FileDeleter()
        add     esp,byte 04h
L_9580:
L_9594:
L_9567:
L_9451:
        mov     dword [ebp-03d0h+014h],035h
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],036h
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],037h
        lea     eax,[ebp-088h]
        mov     ebx,eax
        add     ebx,byte 0ch
        push    byte 00h
        push    ebx
        call    @std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 ; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    ebx
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_9640:
L_9627:
L_9612:
        mov     dword [ebp-03d0h+014h],038h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],039h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_9688:
; Line 879:     } 
L_9673:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_9658:
        mov     dword [ebp-03d0h+014h],03ah
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_10040:
; Line 879:     } 
L_10025:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_10010:
        mov     dword [ebp-03d0h+014h],03bh
        lea     ebx,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_10375:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_10421:
; Line 879:     } 
L_10406:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_10391:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_10773:
; Line 879:     } 
L_10758:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_10743:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_10360:
        mov     eax,esi
        jmp     L_2695
; Line 114:         } 
L_11120:
L_11179:
L_11164:
L_11149:
L_11134:
L_11107:
L_11094:
L_2729:
; Line 116:         auto data_loc = next_thing.data(); 
        mov     eax,dword [ebp+04h-014h]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     esi,eax
; Line 117:         for (int i = 0; i < resval; i++) 
        xor     ecx,ecx
        mov     edx,ebx
        mov     edi,ecx
        cmp     ecx,edx
        jnc     L_2738
L_2736:
; Line 118:         { 
; Line 119:             size_t numread = fread(&data_loc[i], info.bytes, 1, file.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0144h]
; Line 2592:   } 
        push    eax
        mov     eax,01h
        push    eax
        mov     eax,dword [ebp+014h+050h]
        push    eax
        mov     eax,esi
        mov     ecx,edi
        shl     ecx,03h
        add     eax,ecx
        push    eax
        call    _fread ; fread
        add     esp,byte 010h
; Line 120:             if (numread != info.bytes) 
        cmp     eax,dword [ebp+014h+050h]
        je      L_2744
; Line 121:             { 
; Line 122:                 return std::tuple<std::vector<embeder_type>, EmbedReturnValue>{builder, EmbedReturnValue::EMBED_IO_ERROR}; 
; Line 222:     template <class _Tp, 
        lea     ebx,[ebp-0178h]
        lea     eax,[ebp-030h]
        mov     dword [ebp-017ch],03h
        lea     ecx,[ebp-017ch]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    ecx
        push    eax
        mov     dword [ebp-0864h],00h
        lea     eax,[ebp-0864h]
        push    dword [eax]
        mov     dword [ebp-0868h],00h
        lea     eax,[ebp-0868h]
        push    dword [eax]
        mov     dword [ebp-086ch],00h
        lea     eax,[ebp-086ch]
        push    dword [eax]
        mov     dword [ebp-0870h],00h
        lea     eax,[ebp-0870h]
        push    dword [eax]
        push    ebx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_11663:
L_11677:
L_11691:
L_11705:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],03dh
        push    ebx
        mov     eax,dword [ebp-08d4h]
        push    eax
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03eh
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],03fh
        lea     eax,[ebp-0178h]
L_11746:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_11805:
; Line 879:     } 
L_11790:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_11775:
L_11760:
L_11733:
L_11720:
        mov     dword [ebp-03d0h+014h],040h
        lea     ebx,[ebp-0144h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-0144h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-0144h],ecx
        and     eax,eax
        je      L_12133
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0860h],eax
        and     eax,eax
        je      L_12231
        mov     eax,dword [ebp-0860h]
        add     eax,byte 04h
        jmp     L_12232
L_12231:
        mov     eax,dword [ebp-0860h]
L_12232:
        push    eax
        call    @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @FileDeleter@.bcall.xqp8__file__ ; FileDeleter::operator ()(__file__*) const 
        add     esp,byte 08h
L_12133:
; Line 2619:   } 
L_12150:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @FileDeleter@.bdtr.qv ; FileDeleter::~FileDeleter()
        add     esp,byte 04h
L_12259:
L_12273:
L_12246:
L_12130:
        mov     dword [ebp-03d0h+014h],041h
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],042h
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],043h
        lea     eax,[ebp-088h]
        mov     ebx,eax
        add     ebx,byte 0ch
        push    byte 00h
        push    ebx
        call    @std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 ; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    ebx
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_12319:
L_12306:
L_12291:
        mov     dword [ebp-03d0h+014h],044h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],045h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_12367:
; Line 879:     } 
L_12352:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_12337:
        mov     dword [ebp-03d0h+014h],046h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_12719:
; Line 879:     } 
L_12704:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_12689:
        mov     dword [ebp-03d0h+014h],047h
        lea     ebx,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_13054:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_13100:
; Line 879:     } 
L_13085:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_13070:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_13452:
; Line 879:     } 
L_13437:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_13422:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_13039:
        mov     eax,esi
        jmp     L_2695
; Line 123:             } 
L_13799:
L_13858:
L_13843:
L_13828:
L_13813:
L_13786:
L_13773:
L_2744:
; Line 124:         } 
L_2739:
        mov     eax,edi
        inc     eax
L_2737:
        mov     ecx,ebx
        mov     edi,eax
        cmp     eax,ecx
        jc      L_2736
L_2738:
; Line 126:         push_back_values(builder, next_thing); 
        lea     eax,[ebp-014h]
        push    eax
        lea     eax,[ebp-030h]
        push    eax
        call    @push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#vector.uL#allocator.uL~~ ; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const vector<unsigned long long, allocator<unsigned long long>>&)
        add     esp,byte 08h
; Line 127:         builder.insert(builder.end(), info.suffix.begin(), info.suffix.end()); 
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h+014h+02ch]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-08f8h],eax
; Line 1497: } 
        mov     eax,dword [ebp-08f8h]
        mov     dword [ebp-08f4h],eax
; Line 1533: } 
        lea     eax,[ebp-08f4h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [ebp+04h+014h+02ch]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0900h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0900h]
        mov     dword [ebp-08fch],eax
; Line 1517: } 
        lea     eax,[ebp-08fch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        push    byte 00h
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h-030h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0908h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0908h]
        mov     dword [ebp-0904h],eax
; Line 1533: } 
        lea     eax,[ebp-0904h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.px#variant.#shared_ptr.5Token~uL~~@.bctr.p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~pv ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*, >( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, void*)
        add     esp,byte 0ch
        lea     eax,[ebp-030h]
        push    eax
        mov     dword [ebp-03d0h+014h],049h
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::insert<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        add     esp,byte 010h
; Line 128:         if (embed_elements) 
; Line 2325:       return static_cast<bool>(__f_); 
        mov     eax,dword [010h+@embeder@embed_elements+08h]
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 2326:     } 
        and     al,al
        je      L_2755
; Line 129:         { 
; Line 130:             embed_elements(builder); 
        lea     eax,[ebp-030h]
        push    eax
        push    dword @embeder@embed_elements
        call    @std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bcall.xqr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::function<(*)(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)>::operator ()(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&) const 
        add     esp,byte 08h
; Line 131:         } 
L_2755:
; Line 222:     template <class _Tp, 
        lea     esi,[ebp-015ch]
        lea     ebx,[ebp-030h]
        push    byte 00h
        add     esp,byte 0ffffff80h
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @embeder_info@.bctr.qR12embeder_info ; embeder_info::embeder_info(embeder_info&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],04ah
        mov     eax,dword [ebp-08c4h]
        push    eax
        mov     dword [ebp-03d0h+014h],04bh
        call    @embeder@has_embed.q12embeder_info4bool ; embeder::has_embed(embeder_info, bool)
        add     esp,088h
        mov     dword [ebp-0160h],eax
        lea     eax,[ebp-0160h]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    eax
        push    ebx
        mov     dword [ebp-0874h],00h
        lea     eax,[ebp-0874h]
        push    dword [eax]
        mov     dword [ebp-0878h],00h
        lea     eax,[ebp-0878h]
        push    dword [eax]
        mov     dword [ebp-087ch],00h
        lea     eax,[ebp-087ch]
        push    dword [eax]
        mov     dword [ebp-0880h],00h
        lea     eax,[ebp-0880h]
        push    dword [eax]
        push    esi
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_14508:
L_14522:
L_14536:
L_14550:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],04ch
        push    esi
        mov     eax,dword [ebp-08d0h]
        push    eax
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],04dh
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],04eh
        lea     eax,[ebp-015ch]
L_14591:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_14650:
; Line 879:     } 
L_14635:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_14620:
L_14605:
L_14578:
L_14565:
        mov     dword [ebp-03d0h+014h],04fh
        lea     ebx,[ebp-0144h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-0144h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-0144h],ecx
        and     eax,eax
        je      L_14978
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0860h],eax
        and     eax,eax
        je      L_15076
        mov     eax,dword [ebp-0860h]
        add     eax,byte 04h
        jmp     L_15077
L_15076:
        mov     eax,dword [ebp-0860h]
L_15077:
        push    eax
        call    @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @FileDeleter@.bcall.xqp8__file__ ; FileDeleter::operator ()(__file__*) const 
        add     esp,byte 08h
L_14978:
; Line 2619:   } 
L_14995:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @FileDeleter@.bdtr.qv ; FileDeleter::~FileDeleter()
        add     esp,byte 04h
L_15104:
L_15118:
L_15091:
L_14975:
        mov     dword [ebp-03d0h+014h],050h
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],051h
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],052h
        lea     eax,[ebp-088h]
        mov     ebx,eax
        add     ebx,byte 0ch
        push    byte 00h
        push    ebx
        call    @std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 ; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    ebx
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_15164:
L_15151:
L_15136:
        mov     dword [ebp-03d0h+014h],053h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],054h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_15212:
; Line 879:     } 
L_15197:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_15182:
        mov     dword [ebp-03d0h+014h],055h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_15564:
; Line 879:     } 
L_15549:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_15534:
        mov     dword [ebp-03d0h+014h],056h
        lea     ebx,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_15899:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_15945:
; Line 879:     } 
L_15930:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_15915:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_16297:
; Line 879:     } 
L_16282:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_16267:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_15884:
        mov     eax,esi
        jmp     L_2695
; Line 133:     } 
L_16644:
L_16703:
L_16688:
L_16673:
L_16658:
L_16631:
L_16618:
L_17129:
L_17130:
L_17031:
L_17048:
L_17157:
L_17171:
L_17144:
L_17028:
L_2725:
; Line 134:     else if (fil != "" && (info.limit == 0 || size == 0)) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     eax,[ebp-05ch]
        mov     ecx,L_32
; Line 3928:     return !(__lhs == __rhs); 
        push    ecx
        push    eax
        call    @std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc ; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
        add     esp,byte 08h
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 3929: } 
        and     al,al
        je      L_2766
        cmp     dword [ebp+014h+014h],byte 00h
        je      L_17192
        cmp     dword [ebp-08c0h],byte 00h
        jne     L_2766
L_17192:
; Line 135:     { 
; Line 138:         std::vector<embeder_type> builder = {}; 
; Line 215: template <class _Tp, class _Alloc = allocator<_Tp> > 
        lea     eax,[ebp+00h]
        mov     dword [ebp-0e4h],eax
        mov     dword [ebp-0e4h+04h],00h
        push    dword [ebp-0e4h+04h]
        push    dword [ebp-0e4h]
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],05bh
; Line 139:         push_back_values(builder, info.mapped_values, "if_empty"); 
        lea     ebx,[ebp-0f8h]
        mov     dword [ebp-08bch],L_30
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-0884h],00h
        lea     eax,[ebp-0884h]
        mov     dword [ebp-0888h],00h
        lea     esi,[ebp-0888h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_17303:
L_17317:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-08bch]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-08bch]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],05ch
        push    ebx
        lea     eax,[ebp+014h+058h]
        push    eax
        lea     eax,[ebp-0dch]
        push    eax
        call    @push_back_values.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; push_back_values(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&,  const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
; Line 140:         builder.insert(builder.end(), next_thing.begin(), next_thing.end()); 
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h-014h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0910h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0910h]
        mov     dword [ebp-090ch],eax
; Line 1533: } 
        lea     eax,[ebp-090ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter(__wrap_iter<unsigned long long*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [ebp+04h-014h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0918h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0918h]
        mov     dword [ebp-0914h],eax
; Line 1517: } 
        lea     eax,[ebp-0914h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter(__wrap_iter<unsigned long long*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        push    byte 00h
; Line 1532:     return __make_iter(this->__end_); 
        mov     eax,dword [ebp+08h-0dch]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0920h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0920h]
        mov     dword [ebp-091ch],eax
; Line 1533: } 
        lea     eax,[ebp-091ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.px#variant.#shared_ptr.5Token~uL~~@.bctr.p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~pv ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*, >( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, void*)
        add     esp,byte 0ch
        lea     eax,[ebp-0dch]
        push    eax
        mov     dword [ebp-03d0h+014h],05dh
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::insert<__wrap_iter<unsigned long long*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>, __wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
        add     esp,byte 010h
; Line 141:         if (embed_elements) 
; Line 2325:       return static_cast<bool>(__f_); 
        mov     eax,dword [010h+@embeder@embed_elements+08h]
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 2326:     } 
        and     al,al
        je      L_2770
; Line 142:         { 
; Line 143:             embed_elements(builder); 
        lea     eax,[ebp-0dch]
        push    eax
        push    dword @embeder@embed_elements
        call    @std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bcall.xqr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::function<(*)(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)>::operator ()(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&) const 
        add     esp,byte 08h
; Line 144:         } 
L_2770:
; Line 222:     template <class _Tp, 
        lea     esi,[ebp-0110h]
        lea     ebx,[ebp-0dch]
        push    byte 00h
        add     esp,byte 0ffffff80h
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @embeder_info@.bctr.qR12embeder_info ; embeder_info::embeder_info(embeder_info&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],05eh
        mov     eax,dword [ebp-08c4h]
        push    eax
        mov     dword [ebp-03d0h+014h],05fh
        call    @embeder@has_embed.q12embeder_info4bool ; embeder::has_embed(embeder_info, bool)
        add     esp,088h
        mov     dword [ebp-0114h],eax
        lea     eax,[ebp-0114h]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    eax
        push    ebx
        mov     dword [ebp-088ch],00h
        lea     eax,[ebp-088ch]
        push    dword [eax]
        mov     dword [ebp-0890h],00h
        lea     eax,[ebp-0890h]
        push    dword [eax]
        mov     dword [ebp-0894h],00h
        lea     eax,[ebp-0894h]
        push    dword [eax]
        mov     dword [ebp-0898h],00h
        lea     eax,[ebp-0898h]
        push    dword [eax]
        push    esi
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_17675:
L_17689:
L_17703:
L_17717:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],060h
        push    esi
        mov     eax,dword [ebp-08cch]
        push    eax
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],061h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],062h
        lea     eax,[ebp-0110h]
L_17758:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_17817:
; Line 879:     } 
L_17802:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_17787:
L_17772:
L_17745:
L_17732:
        mov     dword [ebp-03d0h+014h],063h
        lea     eax,[ebp-0f8h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],064h
        lea     eax,[ebp-0dch]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_18172:
; Line 879:     } 
L_18157:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_18142:
        mov     dword [ebp-03d0h+014h],065h
        lea     eax,[ebp-088h]
        mov     esi,eax
        add     esi,byte 0ch
        push    byte 00h
        push    esi
        call    @std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 ; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
        add     esp,byte 08h
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    esi
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_18522:
L_18509:
L_18494:
        mov     dword [ebp-03d0h+014h],066h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],067h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_18570:
; Line 879:     } 
L_18555:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_18540:
        mov     dword [ebp-03d0h+014h],068h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_18922:
; Line 879:     } 
L_18907:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_18892:
        mov     dword [ebp-03d0h+014h],069h
        lea     esi,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_19257:
        mov     eax,esi
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_19303:
; Line 879:     } 
L_19288:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_19273:
        mov     eax,esi
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_19655:
; Line 879:     } 
L_19640:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_19625:
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_19242:
        mov     eax,ebx
        jmp     L_2695
; Line 146:     } 
L_20002:
L_20061:
L_20046:
L_20031:
L_20016:
L_19989:
L_19976:
L_20416:
L_20401:
L_20386:
L_2766:
L_2763:
; Line 222:     template <class _Tp, 
        lea     esi,[ebp-0a0h]
        lea     ebx,[ebp-030h]
        push    byte 00h
        add     esp,byte 0ffffff80h
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @embeder_info@.bctr.qR12embeder_info ; embeder_info::embeder_info(embeder_info&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],06dh
        mov     eax,dword [ebp-08c4h]
        push    eax
        mov     dword [ebp-03d0h+014h],06eh
        call    @embeder@has_embed.q12embeder_info4bool ; embeder::has_embed(embeder_info, bool)
        add     esp,088h
        mov     dword [ebp-0a4h],eax
        lea     eax,[ebp-0a4h]
; Line 702:         : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(), 
        push    eax
        push    ebx
        mov     dword [ebp-089ch],00h
        lea     eax,[ebp-089ch]
        push    dword [eax]
        mov     dword [ebp-08a0h],00h
        lea     eax,[ebp-08a0h]
        push    dword [eax]
        mov     dword [ebp-08a4h],00h
        lea     eax,[ebp-08a4h]
        push    dword [eax]
        mov     dword [ebp-08a8h],00h
        lea     eax,[ebp-08a8h]
        push    dword [eax]
        push    esi
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
L_20833:
L_20847:
L_20861:
L_20875:
        add     esp,byte 01ch
        mov     dword [ebp-03d0h+014h],06fh
        push    esi
        mov     eax,dword [ebp-08c8h]
        push    eax
        call    @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ ; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],070h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],071h
        lea     eax,[ebp-0a0h]
L_20916:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_20975:
; Line 879:     } 
L_20960:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_20945:
L_20930:
L_20903:
L_20890:
        mov     dword [ebp-03d0h+014h],072h
        lea     eax,[ebp-088h]
        mov     esi,eax
        add     esi,byte 0ch
        push    byte 00h
        push    esi
        call    @std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 ; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
        add     esp,byte 08h
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    esi
        call    @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_21328:
L_21315:
L_21300:
        mov     dword [ebp-03d0h+014h],073h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],074h
        lea     eax,[ebp-030h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_21376:
; Line 879:     } 
L_21361:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_21346:
        mov     dword [ebp-03d0h+014h],075h
        lea     eax,[ebp-014h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_21728:
; Line 879:     } 
L_21713:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_21698:
        mov     dword [ebp-03d0h+014h],076h
        lea     esi,[ebp+014h]
        lea     eax,[ebp+014h+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_22063:
        mov     eax,esi
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_22109:
; Line 879:     } 
L_22094:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_22079:
        mov     eax,esi
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_22461:
; Line 879:     } 
L_22446:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_22431:
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_22048:
        mov     eax,ebx
; Line 148: } 
L_22808:
L_22867:
L_22852:
L_22837:
L_22822:
L_22795:
L_22782:
L_23220:
L_23207:
L_23192:
L_23268:
L_23253:
L_23238:
L_23620:
L_23605:
L_23590:
L_23955:
L_24001:
L_23986:
L_23971:
L_24353:
L_24338:
L_24323:
L_23940:
L_2695:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__vector_base_common.4bool?1?~ virtual
        [bits 32]
@.xt@#__vector_base_common.4bool?1?~:
        dd      @std@#__vector_base_common.4bool?1?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#variant.#shared_ptr.5Token~uL~~ virtual
        [bits 32]
@.xt@#allocator.#variant.#shared_ptr.5Token~uL~~:
        dd      @std@#allocator.#variant.#shared_ptr.5Token~uL~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      @std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xt@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.uii?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.uii?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.uii?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      @std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~:
        dd      @std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
@.xt@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~:
        dd      @std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      062h
        db      075h
        db      063h
        db      06bh
        db      065h
        db      074h
        db      05fh
        db      06ch
        db      069h
        db      073h
        db      074h
        db      05fh
        db      064h
        db      065h
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~:
        dd      @std@#__compressed_pair.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~:
        dd      @std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xt@#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      @std@#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06eh
        db      06fh
        db      064h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      @std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      @std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~ virtual
        [bits 32]
@.xt@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      061h
        db      072h
        db      079h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#hash.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#hash.#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      068h
        db      061h
        db      073h
        db      068h
        db      00h
        dd      0800h
        dd      @.xt@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~ virtual
        [bits 32]
@.xt@#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~:
        dd      @std@#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      075h
        db      06eh
        db      06fh
        db      072h
        db      064h
        db      065h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      065h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~:
        dd      @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~ virtual
        [bits 32]
@.xt@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~:
        dd      @std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.fi?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.fi?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.fi?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~ virtual
        [bits 32]
@.xt@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      069h
        db      06eh
        db      061h
        db      072h
        db      079h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      065h
        db      071h
        db      075h
        db      061h
        db      06ch
        db      05fh
        db      074h
        db      06fh
        db      00h
        dd      0800h
        dd      @.xt@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~ virtual
        [bits 32]
@.xt@#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~:
        dd      @std@#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      075h
        db      06eh
        db      06fh
        db      072h
        db      064h
        db      065h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      065h
        db      071h
        db      075h
        db      061h
        db      06ch
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~:
        dd      @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~ virtual
        [bits 32]
@.xt@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~:
        dd      @std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.fi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
@.xt@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
        dd      @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv+0
        dd      024h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      074h
        db      061h
        db      062h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
@.xt@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
        dd      @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv+0
        dd      024h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      06fh
        db      072h
        db      064h
        db      065h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@12embeder_info virtual
        [bits 32]
@.xt@12embeder_info:
        dd      @embeder_info@.bdtr.qv+0
        dd      080h
        dd      0400h
        db      065h
        db      06dh
        db      062h
        db      065h
        db      064h
        db      065h
        db      072h
        db      05fh
        db      069h
        db      06eh
        db      066h
        db      06fh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.puLi?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.puLi?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.puLi?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.uL~ virtual
        [bits 32]
@.xt@#allocator.uL~:
        dd      @std@#allocator.uL~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.puL#allocator.uL~~ virtual
        [bits 32]
@.xt@#__compressed_pair.puL#allocator.uL~~:
        dd      @std@#__compressed_pair.puL#allocator.uL~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.puLi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__vector_base.uL#allocator.uL~~ virtual
        [bits 32]
@.xt@#__vector_base.uL#allocator.uL~~:
        dd      @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#vector.uL#allocator.uL~~ virtual
        [bits 32]
@.xt@#vector.uL#allocator.uL~~:
        dd      @std@#vector.uL#allocator.uL~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base.uL#allocator.uL~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~:
        dd      @std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~+0
        dd      014h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~ virtual
        [bits 32]
@.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~:
        dd      @std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#default_delete.9Tokenizer~ virtual
        [bits 32]
@.xt@#default_delete.9Tokenizer~:
        dd      @std@#default_delete.9Tokenizer~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p9Tokenizer#default_delete.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p9Tokenizer#default_delete.n0~~:
        dd      @std@#__compressed_pair.p9Tokenizer#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.9Tokenizer#default_delete.n0~~ virtual
        [bits 32]
@.xt@#unique_ptr.9Tokenizer#default_delete.n0~~:
        dd      @std@#unique_ptr.9Tokenizer#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@6ppExpr virtual
        [bits 32]
@.xt@6ppExpr:
        dd      @ppExpr@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      070h
        db      070h
        db      045h
        db      078h
        db      070h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p8__file__i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p8__file__i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p8__file__i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@11FileDeleter virtual
        [bits 32]
@.xt@11FileDeleter:
        dd      00h
        dd      04h
        dd      0400h
        db      046h
        db      069h
        db      06ch
        db      065h
        db      044h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p8__file__11FileDeleter~ virtual
        [bits 32]
@.xt@#__compressed_pair.p8__file__11FileDeleter~:
        dd      @std@#__compressed_pair.p8__file__11FileDeleter~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p8__file__i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.8__file__11FileDeleter~ virtual
        [bits 32]
@.xt@#unique_ptr.8__file__11FileDeleter~:
        dd      @std@#unique_ptr.8__file__11FileDeleter~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info virtual
        [bits 32]
@.xc@embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info:
        dd      00h
        dd      0fffffc30h
        dd      0400h
        dd      @.xt@#vector.uL#allocator.uL~~+0
        dd      0ffffffech
        dd      01h
        dd      07bh
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ffffffd0h
        dd      02h
        dd      07ah
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffd9ch
        dd      05h
        dd      0bh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffa4h
        dd      0ch
        dd      079h
        dd      0400h
        dd      @.xt@6ppExpr+0
        dd      0ffffff78h
        dd      013h
        dd      078h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffdfch
        dd      014h
        dd      01ch
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffdf8h
        dd      015h
        dd      01ah
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffdf4h
        dd      019h
        dd      01bh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffde0h
        dd      01dh
        dd      01eh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffdcch
        dd      01fh
        dd      020h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe54h
        dd      021h
        dd      028h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffe50h
        dd      022h
        dd      026h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffe4ch
        dd      025h
        dd      027h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe38h
        dd      029h
        dd      02ah
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe24h
        dd      02bh
        dd      02ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffed8h
        dd      02dh
        dd      05ah
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffec4h
        dd      02eh
        dd      059h
        dd      0400h
        dd      @.xt@#unique_ptr.8__file__11FileDeleter~+0
        dd      0fffffebch
        dd      030h
        dd      058h
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffe6ch
        dd      031h
        dd      03ch
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffe88h
        dd      03dh
        dd      048h
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffea4h
        dd      04ch
        dd      057h
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ffffff24h
        dd      05bh
        dd      06ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffff08h
        dd      05ch
        dd      06bh
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffef0h
        dd      060h
        dd      06ah
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0ffffff60h
        dd      06fh
        dd      077h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      0ah
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      011h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      03bh
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      047h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      056h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      069h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      076h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      014h
        dd      00h
        dd      07ch
        dd      00h
section code
section code
        section vsc@embeder@has_embed.q12embeder_info4bool virtual
        [bits 32]
; embeder::has_embed(embeder_info, bool)
@embeder@has_embed.q12embeder_info4bool:
; Line 150: EmbedReturnValue embeder::has_embed(embeder_info info, bool throw_error) 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffd14h
        push    ebx
        push    esi
        push    edi
L_24666:
        mov     bl,byte [ebp+08ch]
        mov     edx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-016ch],eax
        mov     dword [ebp-016ch+04h],___cppexceptionhandle
        mov     dword [ebp-016ch+08h],esp
        mov     dword [ebp-016ch+0ch],ebp
        mov     dword [ebp-016ch+010h],@.xc@embeder@has_embed.q12embeder_info4bool
        mov     dword [ebp-016ch+014h],00h
        lea     eax,[ebp-016ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 152:     int discard; 
; Line 153:     bool is_system = info.is_system; 
        mov     al,byte [ebp+0ch+040h]
; Line 154:     auto& file = info.filename; 
        lea     ecx,[ebp+0ch]
; Line 155:     bool found_system = false; 
        mov     byte [ebp-05h],00h
; Line 156:     bool found = false; 
        mov     byte [ebp-06h],00h
; Line 157:     std::string fil = includer.FindFile(is_system, file, false, discard, found_system, found); 
        lea     esi,[ebp-06h]
        push    esi
        lea     esi,[ebp-05h]
        push    esi
        lea     esi,[ebp-04h]
        push    esi
        push    byte 00h
        push    ecx
        and     eax,byte 01h
        push    eax
        mov     eax,dword [edx]
        push    eax
        lea     eax,[ebp-01ch]
        push    eax
        call    @ppInclude@FindFile.q4boolrx#basic_string.c#char_traits.c~#allocator.c~~n0rirn0rn0 ; ppInclude::FindFile(bool,  const basic_string<char, char_traits<char>, allocator<char>>&, bool, int&, bool&, bool&)
        add     esp,byte 020h
        mov     dword [ebp-016ch+014h],01h
; Line 158:     bool FoundInvalid = false; 
        xor     al,al
        mov     byte [ebp-02e1h],al
; Line 159:     std::strstream string_stream; 
        push    byte 01h
        lea     eax,[ebp-0cch]
        push    eax
        call    @std@strstream@.bctr.qv ; std::strstream::strstream()
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],02h
; Line 160:     if (throw_error) 
        and     bl,bl
        je      L_24669
; Line 161:     { 
; Line 162:         for (auto&& value : info.mapped_values) 
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1804:     return iterator(__p1_.first().__next_, this); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+0ch+0ch+058h]
        mov     dword [ebp-02e8h],eax
        mov     dword [ebp-016ch+014h],03h
; Line 1808: } 
        lea     eax,[ebp-02e8h]
        push    eax
        push    ecx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],04h
        lea     eax,[ebp-0f8h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],05h
        lea     eax,[ebp+0ch+058h]
        add     esp,byte 0fffffffch
        mov     ebx,esp
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end()
        mov     dword [ebp-02ech],eax
        add     esp,byte 04h
        lea     eax,[ebp-02ech]
        push    eax
        push    ebx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],06h
        lea     eax,[ebp-0fch]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],07h
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp-0f8h]
        mov     eax,dword [ebp-0fch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        and     al,al
        jne     L_24675
L_24673:
; Line 337:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container iterator"); 
        mov     eax,dword [ebp-0f8h]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 339:     } 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
        mov     dword [ebp-02d8h],eax
; Line 163:         { 
; Line 164:             auto val = std::find(ourKnownValues.begin(), ourKnownValues.end(), value.first); 
        xor     edi,edi
        add     edi,dword _ourKnownValues
        xor     eax,eax
        add     eax,dword _ourKnownValues
        mov     esi,eax
        add     esi,byte 064h
        mov     ebx,dword [ebp-02d8h]
; Line 918:     for (; __first != __last; ++__first) 
        cmp     edi,esi
        je      L_25029
L_25027:
        mov     eax,ebx
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_25029
; Line 920:             break; 
L_25033:
L_25030:
        add     edi,byte 014h
L_25028:
        cmp     edi,esi
        jne     L_25027
L_25029:
; Line 922: } 
; Line 165:             if (val == ourKnownValues.end()) 
        xor     eax,eax
        add     eax,dword _ourKnownValues
        add     eax,byte 064h
        cmp     edi,eax
        jne     L_24680
; Line 166:             { 
; Line 168:                 string_stream << value.first; 
        lea     ebx,[ebp-0cch+0ch]
        mov     eax,dword [ebp-02d8h]
; Line 1052:     return _VSTD::__put_character_sequence(__os, __str.data(), __str.size()); 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_25181
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_25182
L_25181:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_25182:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_25373
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_25374
L_25373:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_25374:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    ebx
        call    @std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui ; std::__put_character_sequence<char, char_traits<char>>(basic_ostream<char, char_traits<char>>&, char const *, unsigned int)
        add     esp,byte 0ch
; Line 1053: } 
; Line 169:                 Errors::ErrorWithLine(string_stream.str(), Errors::GetFileName(), Errors::GetErrorLine()); 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-0110h]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-016ch+014h],08h
        push    eax
        lea     ebx,[ebp-0124h]
        lea     eax,[ebp-0cch+018h]
        push    eax
        call    @std@strstreambuf@str.qv ; std::strstreambuf::str()
        add     esp,byte 04h
        mov     dword [ebp-02d4h],eax
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-02cch],00h
        lea     eax,[ebp-02cch]
        mov     dword [ebp-02d0h],00h
        lea     esi,[ebp-02d0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_25681:
L_25695:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-02d4h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-02d4h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-016ch+014h],09h
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-016ch+014h],0ah
        lea     eax,[ebp-0110h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 170:                 FoundInvalid = true; 
        mov     byte [ebp-02e1h],01h
; Line 171:                 string_stream.clear(); 
        mov     ecx,dword [ebp-0cch+048h]
        xor     eax,eax
        push    eax
        push    ecx
        call    @std@ios_base@clear.qui ; std::ios_base::clear(unsigned int)
        add     esp,byte 08h
L_25728:
; Line 172:             } 
        mov     dword [ebp-016ch+014h],0bh
        lea     eax,[ebp-0124h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_24680:
; Line 173:         } 
L_24676:
; Line 344:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                         "Attempted to increment non-incrementable unordered container iterator"); 
; Line 345:         __node_ = __node_->__next_; 
        mov     eax,dword [ebp-0f8h]
        mov     eax,dword [eax]
        mov     dword [ebp-0f8h],eax
; Line 347:     } 
L_24674:
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp-0f8h]
        mov     eax,dword [ebp-0fch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        and     al,al
        je      L_24673
L_24675:
L_25819:
L_25806:
; Line 174:     } 
L_24669:
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     eax,[ebp-01ch]
        mov     ecx,L_32
; Line 3928:     return !(__lhs == __rhs); 
        push    ecx
        push    eax
        call    @std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc ; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
        add     esp,byte 08h
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 3929: } 
        and     al,al
        je      L_24693
        cmp     byte [ebp-02e1h],byte 00h
        jne     L_24693
; Line 176:     { 
; Line 177:         if (info.limit == 0) 
        cmp     dword [ebp+0ch+014h],byte 00h
        jne     L_24697
; Line 178:         { 
; Line 179:             return EmbedReturnValue::EMBED_EMPTY; 
        mov     dword [ebp-016ch+014h],0ch
        push    byte 01h
        lea     eax,[ebp-0cch]
        push    eax
        call    @std@strstream@.bdtr.qv ; std::strstream::~strstream()
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],0dh
        lea     eax,[ebp-01ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-016ch+014h],0eh
        lea     ebx,[ebp+0ch]
        lea     eax,[ebp+0ch+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_25865:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_25911:
; Line 879:     } 
L_25896:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_25881:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_26263:
; Line 879:     } 
L_26248:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_26233:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_25850:
        mov     eax,02h
        jmp     L_24667
; Line 180:         } 
L_24697:
; Line 181:         auto fil_size = Utils::file_size(fil); 
        lea     eax,[ebp-01ch]
; Line 84:         struct stat stats; 
; Line 85:         stat(file.c_str(), &stats); 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_26663
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_26664
L_26663:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_26664:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        lea     ecx,[ebp-021ch]
; Line 320:             return _stat64i32(_FileName, (struct _stat64i32*)_Stat); 
        push    ecx
        push    eax
        call    __stat64i32 ; _stat64i32
        add     esp,byte 08h
; Line 321:         } 
        mov     eax,dword [ebp-021ch+014h]
; Line 87:     } 
; Line 182:         if (info.offset > fil_size || (info.limit != -1 && (info.offset + info.limit > fil_size))) 
        mov     ecx,eax
        mov     esi,eax
        sub     ebx,ebx
        mov     eax,dword [ebp+0ch+048h]
        mov     edx,dword [ebp+0ch+048h+04h]
        cmp     edx,ebx
        ja      L_26847
        jc      L_187459
        cmp     eax,esi
        ja      L_26847
L_187459:
        cmp     dword [ebp+0ch+014h],byte 0ffffffffh
        je      L_24704
        mov     eax,ecx
        sub     edx,edx
        mov     dword [ebp-02e0h],eax
        mov     dword [ebp-02e0h+04h],edx
        mov     esi,dword [ebp+0ch+048h]
        mov     ebx,dword [ebp+0ch+048h+04h]
        mov     eax,dword [ebp+0ch+014h]
        cdq
        add     esi,eax
        adc     ebx,edx
        mov     eax,dword [ebp-02e0h]
        mov     edx,dword [ebp-02e0h+04h]
        cmp     ebx,edx
        jc      L_24704
        ja      L_187460
        cmp     esi,eax
        jbe     L_24704
L_187460:
L_26847:
; Line 183:         { 
; Line 184:             return EmbedReturnValue::EMBED_EMPTY; 
        mov     dword [ebp-016ch+014h],0fh
        push    byte 01h
        lea     eax,[ebp-0cch]
        push    eax
        call    @std@strstream@.bdtr.qv ; std::strstream::~strstream()
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],010h
        lea     eax,[ebp-01ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-016ch+014h],011h
        lea     ebx,[ebp+0ch]
        lea     eax,[ebp+0ch+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_26874:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_26920:
; Line 879:     } 
L_26905:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_26890:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_27272:
; Line 879:     } 
L_27257:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_27242:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_26859:
        mov     eax,02h
        jmp     L_24667
; Line 185:         } 
L_24704:
; Line 186:         return (Utils::file_size(fil) % info.bytes == 0) ? EmbedReturnValue::EMBED_FOUND : EmbedReturnValue::EMBED_EMPTY; 
        lea     eax,[ebp-01ch]
; Line 84:         struct stat stats; 
; Line 85:         stat(file.c_str(), &stats); 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_27674
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_27675
L_27674:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_27675:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        lea     ecx,[ebp-021ch]
; Line 320:             return _stat64i32(_FileName, (struct _stat64i32*)_Stat); 
        push    ecx
        push    eax
        call    __stat64i32 ; _stat64i32
        add     esp,byte 08h
; Line 321:         } 
        mov     eax,dword [ebp-021ch+014h]
; Line 87:     } 
        mov     ecx,dword [ebp+0ch+050h]
        sub     edx,edx
        xor     edx,edx
        div     ecx
        and     edx,edx
        jne     L_27582
        mov     esi,01h
        jmp     L_27583
L_27582:
        mov     esi,02h
L_27583:
        mov     dword [ebp-016ch+014h],012h
        push    byte 01h
        lea     eax,[ebp-0cch]
        push    eax
        call    @std@strstream@.bdtr.qv ; std::strstream::~strstream()
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],013h
        lea     eax,[ebp-01ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-016ch+014h],014h
        lea     ebx,[ebp+0ch]
        lea     eax,[ebp+0ch+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_27884:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_27930:
; Line 879:     } 
L_27915:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_27900:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_28282:
; Line 879:     } 
L_28267:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_28252:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_27869:
        mov     eax,esi
        jmp     L_24667
; Line 187:     } 
L_24693:
; Line 188:     return EmbedReturnValue::EMBED_NOT_FOUND; 
        mov     dword [ebp-016ch+014h],015h
        push    byte 01h
        lea     eax,[ebp-0cch]
        push    eax
        call    @std@strstream@.bdtr.qv ; std::strstream::~strstream()
        add     esp,byte 08h
        mov     dword [ebp-016ch+014h],016h
        lea     eax,[ebp-01ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-016ch+014h],017h
        lea     ebx,[ebp+0ch]
        lea     eax,[ebp+0ch+058h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_28618:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_28664:
; Line 879:     } 
L_28649:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_28634:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_29016:
; Line 879:     } 
L_29001:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_28986:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_28603:
        xor     eax,eax
; Line 189: } 
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
L_29352:
L_29398:
L_29383:
L_29368:
L_29750:
L_29735:
L_29720:
L_29337:
L_24667:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@13@std@ios_base virtual
        [bits 32]
@.xt@13@std@ios_base:
        dd      @std@ios_base@.bdtr.qv+0
        dd      048h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      06fh
        db      073h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#basic_ios.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#basic_ios.c#char_traits.c~~:
        dd      @std@#basic_ios.c#char_traits.c~~@.bdtr.qv+0
        dd      050h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      069h
        db      06fh
        db      073h
        db      00h
        dd      0800h
        dd      @.xt@13@std@ios_base+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#basic_istream.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#basic_istream.c#char_traits.c~~:
        dd      @std@#basic_istream.c#char_traits.c~~@.bdtr.qv+0
        dd      05ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      069h
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      00h
        dd      01000h
        dd      @.xt@#basic_ios.c#char_traits.c~~+0
        dd      0ch
        dd      00h
section code
section code
        section vsc@.xt@#basic_ostream.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#basic_ostream.c#char_traits.c~~:
        dd      @std@#basic_ostream.c#char_traits.c~~@.bdtr.qv+0
        dd      058h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      06fh
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      00h
        dd      01000h
        dd      @.xt@#basic_ios.c#char_traits.c~~+0
        dd      08h
        dd      00h
section code
section code
        section vsc@.xt@#basic_iostream.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#basic_iostream.c#char_traits.c~~:
        dd      @std@#basic_iostream.c#char_traits.c~~@.bdtr.qv+0
        dd      068h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      069h
        db      06fh
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      00h
        dd      01000h
        dd      @.xt@#basic_ios.c#char_traits.c~~+0
        dd      018h
        dd      0800h
        dd      @.xt@#basic_istream.c#char_traits.c~~+0
        dd      00h
        dd      0800h
        dd      @.xt@#basic_ostream.c#char_traits.c~~+0
        dd      0ch
        dd      00h
section code
section code
        section vsc@.xt@11@std@locale virtual
        [bits 32]
@.xt@11@std@locale:
        dd      @std@locale@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#basic_streambuf.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#basic_streambuf.c#char_traits.c~~:
        dd      @std@#basic_streambuf.c#char_traits.c~~@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      062h
        db      075h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@17@std@strstreambuf virtual
        [bits 32]
@.xt@17@std@strstreambuf:
        dd      @std@strstreambuf@.bdtr.qv+0
        dd      030h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      074h
        db      072h
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      062h
        db      075h
        db      066h
        db      00h
        dd      0800h
        dd      @.xt@#basic_streambuf.c#char_traits.c~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@14@std@strstream virtual
        [bits 32]
@.xt@14@std@strstream:
        dd      @std@strstream@.bdtr.qv+0
        dd      09ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      074h
        db      072h
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      00h
        dd      01000h
        dd      @.xt@#basic_ios.c#char_traits.c~~+0
        dd      04ch
        dd      0800h
        dd      @.xt@#basic_iostream.c#char_traits.c~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@embeder@has_embed.q12embeder_info4bool virtual
        [bits 32]
@.xc@embeder@has_embed.q12embeder_info4bool:
        dd      00h
        dd      0fffffe94h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffe4h
        dd      01h
        dd      019h
        dd      0400h
        dd      @.xt@14@std@strstream+0
        dd      0ffffff34h
        dd      02h
        dd      018h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffef0h
        dd      08h
        dd      0ah
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffedch
        dd      09h
        dd      0bh
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ch
        dd      00h
        dd      0eh
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ch
        dd      00h
        dd      011h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ch
        dd      00h
        dd      014h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ch
        dd      00h
        dd      017h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ch
        dd      00h
        dd      01ah
        dd      00h
section code
section code
        section vsc@tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
; tokens_to_inject(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>)
@tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffeech
        push    ebx
        push    esi
        push    edi
L_30063:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0114h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-078h],eax
        mov     dword [ebp-078h+04h],___cppexceptionhandle
        mov     dword [ebp-078h+08h],esp
        mov     dword [ebp-078h+0ch],ebp
        mov     dword [ebp-078h+010h],@.xc@tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~
        mov     dword [ebp-078h+014h],00h
        lea     eax,[ebp-078h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 193:     std::string total = ""; 
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     eax,[ebp-014h]
        mov     dword [ebp-0104h],eax
        mov     ebx,L_32
        mov     eax,dword [ebp-0104h]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,dword [ebp-0104h]
        add     esi,byte 04h
        mov     dword [ebp-0fch],00h
        lea     eax,[ebp-0fch]
        mov     dword [ebp-0100h],00h
        lea     edi,[ebp-0100h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_30199:
L_30213:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        mov     eax,dword [ebp-0104h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-078h+014h],01h
; Line 194:     size_t type_size = type.size(); 
        mov     eax,dword [ebp+04h+0ch]
        sub     eax,dword [ebp+08h+0ch]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        mov     ecx,eax
        sar     ecx,03h
; Line 195:     size_t minus_one = type_size - 1; 
        mov     edx,ecx
        dec     edx
; Line 196:     auto visitor = visitor_struct{}; 
        mov     dword [ebp-01ch],00h
        mov     eax,dword [ebp-01ch]
        mov     dword [ebp-018h],eax
; Line 197:     for (size_t i = 0; i < type_size; i++) 
        xor     eax,eax
        imul    eax,byte 018h
        mov     dword [ebp-0110h],eax
        xor     eax,eax
        mov     dword [ebp-010ch],eax
        imul    edx,byte 018h
        mov     dword [ebp-0108h],edx
        imul    esi,ecx,byte 018h
        cmp     eax,ecx
        jnc     L_30068
L_30066:
; Line 198:     { 
; Line 201:         auto&& val = type[i]; 
; Line 1548:     _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds"); 
        mov     ecx,dword [ebp+04h+0ch]
        mov     eax,dword [ebp-0110h]
        add     eax,ecx
; Line 1550: } 
        mov     ebx,eax
; Line 202:         total += std::visit(visitor, val); 
        lea     edi,[ebp-014h]
        mov     eax,ebx
        push    eax
        lea     eax,[ebp-018h]
        push    eax
        lea     eax,[ebp-054h]
        push    eax
        call    @std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ ; std::visit<visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&>(visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
        mov     dword [ebp-078h+014h],02h
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_30310
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_30311
L_30310:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_30311:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_30502
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_30503
L_30502:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_30503:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *, unsigned int)
        add     esp,byte 0ch
; Line 2554: } 
; Line 203:         if (std::holds_alternative<embed_value_type>(val) && i < minus_one && std::holds_alternative<embed_value_type>(type[i + 1])) 
; Line 1372:   return __holds_alternative<__find_exactly_one_t<_Tp, _Types...>::value>(__v); 
; Line 1366:   return __v.index() == _Ip; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [ebx+08h+08h],byte 0ffffffffh
        jne     L_30745
        mov     eax,0ffffffffh
        jmp     L_30746
L_30745:
        mov     eax,dword [ebx+08h+08h]
L_30746:
; Line 697:   } 
        cmp     eax,byte 01h
        sete    al
        and     eax,byte 01h
; Line 1367: } 
; Line 1373: } 
        mov     ebx,dword [ebp-010ch]
        and     al,al
        je      L_30074
        mov     eax,dword [ebp-0110h]
        mov     ebx,dword [ebp-010ch]
        cmp     eax,dword [ebp-0108h]
        jnc     L_30074
        mov     ebx,dword [ebp-010ch]
        mov     eax,01h
        add     eax,ebx
; Line 1548:     _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds"); 
        mov     ecx,dword [ebp+04h+0ch]
        imul    eax,byte 018h
        add     ecx,eax
; Line 1550: } 
; Line 1372:   return __holds_alternative<__find_exactly_one_t<_Tp, _Types...>::value>(__v); 
; Line 1366:   return __v.index() == _Ip; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [ecx+08h+08h],byte 0ffffffffh
        jne     L_30827
        mov     eax,0ffffffffh
        jmp     L_30828
L_30827:
        mov     eax,dword [ecx+08h+08h]
L_30828:
; Line 697:   } 
        cmp     eax,byte 01h
        sete    al
        and     eax,byte 01h
; Line 1367: } 
; Line 1373: } 
        and     al,al
        je      L_30074
; Line 204:         { 
; Line 205:             total += ','; 
        lea     ecx,[ebp-014h]
        mov     al,02ch
        cbw
        cwde
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@push_back.qc ; std::basic_string<char, char_traits<char>, allocator<char>>::push_back(char)
        add     esp,byte 08h
; Line 206:         } 
L_30074:
; Line 207:     } 
        mov     dword [ebp-078h+014h],03h
        lea     eax,[ebp-054h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_30069:
        add     dword [ebp-0110h],byte 018h
        mov     eax,ebx
        inc     eax
        mov     dword [ebp-010ch],eax
L_30067:
        mov     eax,dword [ebp-0110h]
        cmp     eax,esi
        jc      L_30066
L_30068:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     esi,dword [ebp-0114h]
        lea     ebx,[ebp-014h]
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-078h+014h],04h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-078h+014h],05h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-078h+014h],06h
        lea     eax,[ebp+0ch]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_30974:
; Line 879:     } 
L_30959:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_30944:
        mov     eax,ebx
; Line 209: } 
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_31326:
L_31311:
L_31296:
L_30064:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xc@tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      00h
        dd      0ffffff88h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffach
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ch
        dd      00h
        dd      06h
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ch
        dd      00h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__variant@#__make_value_visitor.r14visitor_struct~.qrn0 virtual
        [bits 32]
; std::__variant_detail::__visitation::__variant::__make_value_visitor<visitor_struct&>(visitor_struct&)
@std@__variant_detail@__visitation@__variant@#__make_value_visitor.r14visitor_struct~.qrn0:
; Line 605:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
        push    ecx
L_31638:
        mov     ecx,dword [esp+04h+0ch]
        mov     eax,dword [esp+08h+0ch]
; Line 607:     return __value_visitor<_Visitor>{_VSTD::forward<_Visitor>(__visitor)}; 
        mov     edx,ecx
        mov     dword [edx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ecx],eax
        mov     eax,dword [esp+04h+0ch]
; Line 608:   } 
L_31639:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@__size.qv virtual
        [bits 32]
; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__size()
@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@__size.qv:
L_31662:
        mov     eax,02h
L_31663:
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ virtual
        [bits 32]
; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, in_place_index_t<unsigned int=0>)
@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~:
; Line 399: struct __union { 
        push    ecx
L_31670:
        mov     eax,dword [esp+04h+04h]
; Line 403:     return _VSTD::forward<_Vp>(__v).__head; 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_31702:
; Line 404:   } 
L_31716:
L_31671:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__base@#__get_alt.ui?0?r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qr#__base.n0?1?#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::__variant_detail::__access::__base::__get_alt<unsigned int=0, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__base<Token=1, shared_ptr<Token>, unsigned long long>&)
@std@__variant_detail@__access@__base@#__get_alt.ui?0?r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qr#__base.n0?1?#shared_ptr.n1~uL~:
; Line 413: struct __base { 
        push    ecx
L_31722:
        mov     eax,dword [esp+04h+04h]
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
L_31723:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_31746:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 490:         return __invoke_constexpr( 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
        push    eax
        push    esi
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~ ; std::__invoke_constexpr<__value_visitor<visitor_struct&>, __alt<unsigned int=0, shared_ptr<Token>>&>(__value_visitor<Token&>&&, __alt<unsigned int=0, shared_ptr<std::__variant_detail::_Trait>>&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 493:     } 
L_31747:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_31870:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_31886:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
; Line 500:   } 
L_31900:
L_31871:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_31906:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_31922:
; Line 527:   } 
L_31936:
L_31907:
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~~.qr#__union.n0?1?ui?1?uLe????~#in_place_index_t.ui?0?~ virtual
        [bits 32]
; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >&>(__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >&, in_place_index_t<unsigned int=0>)
@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~~.qr#__union.n0?1?ui?1?uLe????~#in_place_index_t.ui?0?~:
; Line 399: struct __union { 
        push    ecx
L_31942:
        mov     eax,dword [esp+04h+04h]
; Line 403:     return _VSTD::forward<_Vp>(__v).__head; 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_31974:
; Line 404:   } 
L_31988:
L_31943:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ virtual
        [bits 32]
; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
@std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~:
; Line 407:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
L_31994:
        mov     eax,dword [esp+04h+04h]
; Line 409:     return __get_alt(_VSTD::forward<_Vp>(__v).__tail, in_place_index<_Ip - 1>); 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~~.qr#__union.n0?1?ui?1?uLe????~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >&>(__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
L_32026:
; Line 410:   } 
L_32040:
L_31995:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qr#__base.n0?1?#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::__variant_detail::__access::__base::__get_alt<unsigned int=1, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__base<Token=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qr#__base.n0?1?#shared_ptr.n1~uL~:
; Line 413: struct __base { 
        push    ecx
L_32046:
        mov     eax,dword [esp+04h+04h]
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
L_32047:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_32070:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 490:         return __invoke_constexpr( 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
        push    eax
        push    esi
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~ ; std::__invoke_constexpr<__value_visitor<visitor_struct&>, __alt<unsigned int=1, unsigned long long>&>(__value_visitor<visitor_struct&>&&, __alt<unsigned int=1, unsigned long long>&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 493:     } 
L_32071:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_32194:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_32210:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
; Line 500:   } 
L_32224:
L_32195:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_32230:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_32246:
; Line 527:   } 
L_32260:
L_32231:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~~.qRpqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~RpqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)>((*)(*)(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&&, (*)(*)(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~~.qRpqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~RpqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_32266:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_32284:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_32267:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_32322:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_32355:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_32402:
L_32416:
; Line 536:   } 
L_32430:
L_32444:
L_32323:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_32450:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_32451:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~~.qrxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~.rxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(__value_visitor<Token&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~~.qrxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~.rxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_32458:
        mov     eax,dword [esp+04h]
L_32459:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~ui?2?e8_Indices~.qrx#array.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~ui?2?~uiV.rxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(__value_visitor<_Indices&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qR#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.#basic_string.c#char_traits.c~#allocator.c~~ui?2?e8_Indices~.qrx#array.qR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~.#basic_string.c#char_traits.c~#allocator.c~~ui?2?~uiV.rxqR#__value_visitor.rn0~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_32466:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_32467:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<__value_visitor<visitor_struct&>, __impl<shared_ptr<Token>, unsigned long long>&>(__value_visitor<visitor_struct&>&&, __impl<shared_ptr<Token>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff54h
        push    ebx
        push    esi
        push    edi
L_32506:
        mov     edi,dword [ebp+08h]
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [ebp-09ch],00h
        push    dword [ebp-09ch]
        mov     dword [ebp-0a0h],00h
        push    dword [ebp-0a0h]
        lea     eax,[ebp-0a8h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.R#__value_visitor.r14visitor_struct~r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<__value_visitor<visitor_struct&>&&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
; Line 543:   } 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     dword [ebp-0ach],edi
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     eax,[ebp-024h]
        push    eax
        lea     ecx,[ebp-08h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_32624
        mov     eax,0ffffffffh
        jmp     L_32625
L_32624:
        mov     eax,dword [esi+08h]
L_32625:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        mov     ebx,eax
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],01h
        mov     eax,dword [ebp-0ach]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,dword [ebp-0ach]
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-06ch+014h],03h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 456:   } 
L_32507:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffdch
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__variant::__visit_alt<__value_visitor<visitor_struct&>, variant<shared_ptr<Token>, unsigned long long>&>(__value_visitor<visitor_struct&>&&, variant<shared_ptr<Token>, unsigned long long>&)
@std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~:
; Line 557:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_32728:
        mov     ebx,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 560:     return __base::__visit_alt(_VSTD::forward<_Visitor>(__visitor), 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        add     ecx,byte 08h
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__visit_alt.#__value_visitor.r14visitor_struct~r#__impl.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#__impl.#shared_ptr.n1~uL~ ; std::__variant_detail::__visitation::__base::__visit_alt<__value_visitor<visitor_struct&>, __impl<shared_ptr<Token>, unsigned long long>&>(__value_visitor<visitor_struct&>&&, __impl<shared_ptr<Token>, unsigned long long>&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 562:   } 
L_32729:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__variant::__visit_value<visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&>(visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&)
@std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~:
; Line 575:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff74h
        push    ebx
        push    esi
        push    edi
L_32852:
        mov     ebx,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 578:     return __visit_alt( 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 607:     return __value_visitor<_Visitor>{_VSTD::forward<_Visitor>(__visitor)}; 
        lea     ecx,[ebp-04h]
        mov     dword [ebp-08ch],ecx
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ebp-08ch]
        mov     dword [ecx],eax
; Line 608:   } 
        lea     eax,[ebp-04h]
        push    eax
        lea     eax,[ebp-018h]
        push    eax
        call    @std@__variant_detail@__visitation@__variant@#__visit_alt.#__value_visitor.r14visitor_struct~r#variant.#shared_ptr.5Token~uL~~.qR#__value_visitor.rn0~r#variant.#shared_ptr.n1~uL~ ; std::__variant_detail::__visitation::__variant::__visit_alt<__value_visitor<visitor_struct&>, variant<shared_ptr<Token>, unsigned long long>&>(__value_visitor<visitor_struct&>&&, variant<shared_ptr<Token>, unsigned long long>&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-060h+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-060h+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-060h+014h],03h
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-060h+014h],04h
        mov     eax,dword [ebp+08h]
; Line 581:   } 
L_32853:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~:
        dd      00h
        dd      0ffffffa0h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffe8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@embeder@Check.q2kwr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; embeder::Check(kw, basic_string<char, char_traits<char>, allocator<char>>&)
@embeder@Check.q2kwr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 211: bool embeder::Check(kw token, std::string& args) 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffbf8h
        push    ebx
        push    esi
        push    edi
L_33008:
        mov     ebx,dword [ebp+010h]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-0388h],eax
        mov     dword [ebp-0388h+04h],___cppexceptionhandle
        mov     dword [ebp-0388h+08h],esp
        mov     dword [ebp-0388h+0ch],ebp
        mov     dword [ebp-0388h+010h],@.xc@embeder@Check.q2kwr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-0388h+014h],00h
        lea     eax,[ebp-0388h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 213:     if (token == kw::EMBED) 
        cmp     dword [ebp+0ch],0fdh
        jne     L_33011
; Line 214:     { 
; Line 216:         embeder_info info = GetEmbedFromLine(args); 
        push    edi
        push    ecx
        push    eax
        lea     edi,[ebp-0a8h]
        xor     eax,eax
        mov     ecx,020h
        cld
        rep stosd
        pop     eax
        pop     ecx
        pop     edi
        push    ebx
        push    esi
        lea     eax,[ebp-0a8h]
        push    eax
        call    @embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; embeder::GetEmbedFromLine( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
        mov     dword [ebp-0388h+014h],01h
; Line 217:         auto return_val = EmbedFile(args, std::move(info)); 
        add     esp,byte 0ffffff80h
        mov     ecx,esp
        lea     eax,[ebp-0a8h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @embeder_info@.bctr.qR12embeder_info ; embeder_info::embeder_info(embeder_info&&)
        add     esp,byte 08h
        mov     dword [ebp-0388h+014h],02h
        push    ebx
        push    esi
        lea     eax,[ebp-0140h]
        push    eax
        mov     dword [ebp-0388h+014h],03h
        call    @embeder@EmbedFile.qr#basic_string.c#char_traits.c~#allocator.c~~12embeder_info ; embeder::EmbedFile(basic_string<char, char_traits<char>, allocator<char>>&, embeder_info)
        add     esp,08ch
        mov     dword [ebp-0388h+014h],04h
; Line 218:         auto& vec = std::get<0>(return_val); 
        lea     eax,[ebp-0140h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     ebx,eax
; Line 1012: } 
; Line 219:         auto ret = std::get<1>(return_val); 
        lea     eax,[ebp-0140h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     dword [ebp-03ech],eax
        and     eax,eax
        je      L_33099
        mov     eax,dword [ebp-03ech]
        add     eax,byte 014h
        jmp     L_33100
L_33099:
        mov     eax,dword [ebp-03ech]
L_33100:
        push    eax
        call    @std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, EmbedReturnValue, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
        mov     eax,dword [eax]
        mov     dword [ebp-015ch],eax
; Line 220:         if (ret == EmbedReturnValue::EMBED_NOT_FOUND) 
        cmp     dword [ebp-015ch],byte 00h
        jne     L_33015
; Line 221:         { 
; Line 222:             Errors::ErrorWithLine("The embedded file was not found", Errors::GetFileName(), Errors::GetErrorLine()); 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-01c0h]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-0388h+014h],05h
        push    eax
        lea     ebx,[ebp-01d4h]
        mov     dword [ebp-0404h],L_35
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-03f0h],00h
        lea     eax,[ebp-03f0h]
        mov     dword [ebp-03f4h],00h
        lea     esi,[ebp-03f4h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_33212:
L_33226:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-0404h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-0404h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-0388h+014h],06h
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-0388h+014h],07h
        lea     eax,[ebp-01c0h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 223:             return true; 
        mov     dword [ebp-0388h+014h],08h
        lea     eax,[ebp-01d4h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-0388h+014h],09h
        lea     eax,[ebp-0140h]
L_33283:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_33342:
; Line 879:     } 
L_33327:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_33312:
L_33297:
L_33270:
L_33257:
        mov     dword [ebp-0388h+014h],0ah
        lea     ebx,[ebp-0a8h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_33680:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_33726:
; Line 879:     } 
L_33711:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_33696:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_34078:
; Line 879:     } 
L_34063:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_34048:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_33665:
        mov     al,01h
        jmp     L_33009
; Line 224:         } 
L_33015:
; Line 225:         if (ret == EmbedReturnValue::EMBED_IO_ERROR) 
        cmp     dword [ebp-015ch],byte 03h
        jne     L_33022
; Line 226:         { 
; Line 227:             Errors::ErrorWithLine("File I/O error while reading the embedded file", Errors::GetFileName(), Errors::GetErrorLine()); 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-0198h]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-0388h+014h],0ch
        push    eax
        lea     esi,[ebp-01ach]
        mov     ebx,L_36
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     eax,esi
        add     eax,byte 04h
        mov     dword [ebp-0408h],eax
        mov     dword [ebp-03f8h],00h
        lea     eax,[ebp-03f8h]
        mov     dword [ebp-03fch],00h
        lea     edi,[ebp-03fch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,dword [ebp-0408h]
        push    eax
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,dword [ebp-0408h]
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_34498:
L_34512:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-0388h+014h],0dh
        push    esi
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-0388h+014h],0eh
        lea     eax,[ebp-0198h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 228:             return true; 
        mov     dword [ebp-0388h+014h],0fh
        lea     eax,[ebp-01ach]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-0388h+014h],010h
        lea     eax,[ebp-0140h]
L_34569:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_34628:
; Line 879:     } 
L_34613:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_34598:
L_34583:
L_34556:
L_34543:
        mov     dword [ebp-0388h+014h],011h
        lea     ebx,[ebp-0a8h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_34966:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_35012:
; Line 879:     } 
L_34997:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_34982:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_35364:
; Line 879:     } 
L_35349:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_35334:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_34951:
        mov     al,01h
        jmp     L_33009
; Line 229:         } 
L_33022:
; Line 230:         std::string thing = tokens_to_inject(std::move(vec)); 
        add     esp,byte 0ffffffech
        mov     eax,esp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qR#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&&)
        add     esp,byte 08h
        mov     dword [ebp-0388h+014h],013h
        lea     eax,[ebp-0170h]
        push    eax
        mov     dword [ebp-0388h+014h],014h
        call    @tokens_to_inject.q#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; tokens_to_inject(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>)
        add     esp,byte 018h
        mov     dword [ebp-0388h+014h],015h
; Line 231:         this->nextLine = std::move(thing); 
        mov     edx,esi
        add     edx,byte 08h
        lea     eax,[ebp-0170h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2320:     __move_assign(__str, integral_constant<bool, 
        mov     dword [ebp-0400h],00h
        lea     ecx,[ebp-0400h]
        mov     dword [ebp-0388h+014h],016h
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ ; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-0388h+014h],017h
L_35750:
        add     esp,byte 0ch
; Line 2323: } 
; Line 232:         return true; 
        mov     dword [ebp-0388h+014h],018h
        lea     eax,[ebp-0170h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-0388h+014h],019h
        lea     eax,[ebp-0140h]
L_35791:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_35850:
; Line 879:     } 
L_35835:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_35820:
L_35805:
L_35778:
L_35765:
        mov     dword [ebp-0388h+014h],01ah
        lea     ebx,[ebp-0a8h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_36188:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_36234:
; Line 879:     } 
L_36219:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_36204:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_36586:
; Line 879:     } 
L_36571:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_36556:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_36173:
        mov     al,01h
        jmp     L_33009
; Line 233:     } 
L_36933:
L_36992:
L_36977:
L_36962:
L_36947:
L_36920:
L_36907:
L_37330:
L_37376:
L_37361:
L_37346:
L_37728:
L_37713:
L_37698:
L_37315:
L_33011:
; Line 234:     return false; 
        xor     al,al
; Line 235: } 
L_33009:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#integral_constant.4booln0?1?~ virtual
        [bits 32]
@.xt@#integral_constant.4booln0?1?~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      06eh
        db      074h
        db      065h
        db      067h
        db      072h
        db      061h
        db      06ch
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      061h
        db      06eh
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@embeder@Check.q2kwr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@embeder@Check.q2kwr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0fffffc78h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ffffff58h
        dd      01h
        dd      01dh
        dd      0400h
        dd      @.xt@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~+0
        dd      0fffffec0h
        dd      04h
        dd      01ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe40h
        dd      05h
        dd      07h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe2ch
        dd      06h
        dd      0bh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe68h
        dd      0ch
        dd      0eh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe54h
        dd      0dh
        dd      012h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe90h
        dd      015h
        dd      01bh
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffffc00h
        dd      016h
        dd      017h
        dd      00h
section code
section code
        section vsc@std@#get.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~.qr#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ virtual
        [bits 32]
; std::get<unsigned int=0, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&)
@std@#get.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~.qr#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_38041:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
L_38042:
        ret
section code
section code
        section vsc@std@#get.ui?1?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~.qr#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ virtual
        [bits 32]
; std::get<unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&)
@std@#get.ui?1?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~.qr#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ecx
L_38065:
        mov     eax,dword [esp+04h+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        and     eax,eax
        je      L_38070
        add     eax,byte 014h
        jmp     L_38071
L_38070:
L_38071:
        push    eax
        call    @std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, EmbedReturnValue, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
L_38066:
        pop     ecx
        ret
section code
section code
        section vsc@embeder@GetLine.qr#basic_string.c#char_traits.c~#allocator.c~~ri virtual
        [bits 32]
; embeder::GetLine(basic_string<char, char_traits<char>, allocator<char>>&, int&)
@embeder@GetLine.qr#basic_string.c#char_traits.c~#allocator.c~~ri:
; Line 236: bool embeder::GetLine(std::string& line, int& lineno) 
        add     esp,byte 0ffffffe4h
        push    ebx
        push    esi
L_38075:
        mov     esi,dword [esp+08h+024h]
        mov     ebx,dword [esp+04h+024h]
; Line 238:     if (embed_elements == nullptr) 
        mov     eax,@embeder@embed_elements
; Line 2325:       return static_cast<bool>(__f_); 
        mov     eax,dword [eax+010h+08h]
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 2326:     } 
        and     al,al
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_38078
; Line 239:     { 
; Line 240:         if (nextLine != "") 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,ebx
        add     eax,byte 08h
        mov     ecx,L_32
; Line 3928:     return !(__lhs == __rhs); 
        push    ecx
        push    eax
        call    @std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc ; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
        add     esp,byte 08h
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 3929: } 
        and     al,al
        je      L_38082
; Line 241:         { 
; Line 245:             line = this->nextLine; 
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.basn.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::operator =( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
; Line 246:             this->nextLine = ""; 
        mov     ecx,ebx
        add     ecx,byte 08h
        mov     eax,L_32
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::assign(char const *)
        add     esp,byte 08h
; Line 247:             return true; 
        mov     al,01h
        jmp     L_38076
; Line 248:         } 
L_38082:
; Line 249:     } 
L_38078:
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,ebx
        add     eax,byte 08h
        mov     ecx,L_32
; Line 3928:     return !(__lhs == __rhs); 
        push    ecx
        push    eax
        call    @std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc ; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
        add     esp,byte 08h
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 3929: } 
        and     al,al
        je      L_38092
; Line 251:     { 
; Line 252:         this->nextLine = ""; 
        mov     ecx,ebx
        add     ecx,byte 08h
        mov     eax,L_32
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::assign(char const *)
        add     esp,byte 08h
; Line 253:         return true; 
        mov     al,01h
        jmp     L_38076
; Line 254:     } 
L_38092:
; Line 255:     return false; 
        xor     al,al
; Line 256: } 
L_38076:
        pop     esi
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@ends_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; ends_with( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
@ends_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 261: bool ends_with(const std::string& str, const std::string& ending) 
        add     esp,byte 0ffffffe4h
        push    ebx
        push    esi
        push    edi
L_38216:
        mov     edx,dword [esp+08h+028h]
        mov     eax,dword [esp+04h+028h]
; Line 263:     return str.size() >= ending.size() && str.compare(str.size() - ending.size(), std::string::npos, ending) == 0; 
        mov     ecx,edx
        mov     ebx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_38239
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebx+04h+04h]
        jmp     L_38240
L_38239:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [ebx+04h]
        shr     edx,01h
        mov     esi,edx
L_38240:
        mov     edx,eax
        mov     ebx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_38401
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebx+04h+04h]
        jmp     L_38402
L_38401:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [ebx+04h]
        shr     edx,01h
L_38402:
        cmp     edx,esi
        jc      L_38223
        mov     esi,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [esi+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_38578
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [eax+04h+04h]
        jmp     L_38579
L_38578:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        shr     eax,01h
        mov     ebx,eax
L_38579:
        mov     eax,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_38740
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edx+04h+04h]
        jmp     L_38741
L_38740:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edx+04h]
        shr     eax,01h
L_38741:
        mov     edx,ebx
        sub     edx,eax
        or      ebx,byte 0ffffffffh
; Line 3762:     return compare(__pos1, __n1, __str.data(), __str.size()); 
        mov     eax,ecx
        mov     edi,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        mov     byte [esp-019h+028h],al
        cmp     byte [esp-019h+028h],byte 00h
        je      L_38902
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edi+04h+04h]
        jmp     L_38903
L_38902:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h]
        shr     eax,01h
L_38903:
        push    eax
        mov     edi,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ecx+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_39094
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edi+08h+04h]
        jmp     L_39095
L_39094:
        mov     eax,edi
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_39095:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    ebx
        push    edx
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@compare.xquiuipxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::compare(unsigned int, unsigned int, char const *, unsigned int) const 
        add     esp,byte 014h
; Line 3763: } 
        and     eax,eax
        je      L_38221
L_38223:
        xor     eax,eax
        jmp     L_38222
L_38221:
        mov     eax,01h
L_38222:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 264: } 
L_38217:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@starts_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; starts_with( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
@starts_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 265: bool starts_with(const std::string& str, const std::string& ending) 
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_39279:
        mov     edx,dword [esp+08h+024h]
        mov     eax,dword [esp+04h+024h]
; Line 267:     return str.size() >= ending.size() && str.compare(0, ending.size(), ending) == 0; 
        mov     ecx,edx
        mov     ebx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_39302
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebx+04h+04h]
        jmp     L_39303
L_39302:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [ebx+04h]
        shr     edx,01h
        mov     esi,edx
L_39303:
        mov     edx,eax
        mov     ebx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_39464
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebx+04h+04h]
        jmp     L_39465
L_39464:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [ebx+04h]
        shr     edx,01h
L_39465:
        cmp     edx,esi
        jc      L_39286
        mov     ebx,eax
        xor     eax,eax
        mov     esi,eax
        mov     edx,ecx
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_39641
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [eax+04h+04h]
        jmp     L_39642
L_39641:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        shr     eax,01h
        mov     edi,eax
L_39642:
; Line 3762:     return compare(__pos1, __n1, __str.data(), __str.size()); 
        mov     eax,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_39803
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+04h+04h]
        jmp     L_39804
L_39803:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
L_39804:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_39995
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_39996
L_39995:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_39996:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@compare.xquiuipxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::compare(unsigned int, unsigned int, char const *, unsigned int) const 
        add     esp,byte 014h
; Line 3763: } 
        and     eax,eax
        je      L_39284
L_39286:
        xor     eax,eax
        jmp     L_39285
L_39284:
        mov     eax,01h
L_39285:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 268: } 
L_39280:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; strip_underscores( const basic_string<char, char_traits<char>, allocator<char>>&)
@strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 269: std::string strip_underscores(const std::string& str) 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffef4h
        push    ebx
        push    esi
        push    edi
L_40180:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0f8h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0f4h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0f0h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-084h],eax
        mov     dword [ebp-084h+04h],___cppexceptionhandle
        mov     dword [ebp-084h+08h],esp
        mov     dword [ebp-084h+0ch],ebp
        mov     dword [ebp-084h+010h],@.xc@strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-084h+014h],00h
        lea     eax,[ebp-084h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 271:     if (starts_with(str, "__") && ends_with(str, "__")) 
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        xor     eax,eax
        mov     byte [ebp-0fdh],al
        lea     esi,[ebp-038h]
        mov     ebx,L_37
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     eax,esi
        add     eax,byte 04h
        mov     dword [ebp-0e0h],eax
        mov     dword [ebp-0d0h],00h
        lea     eax,[ebp-0d0h]
        mov     dword [ebp-0d4h],00h
        lea     ecx,[ebp-0d4h]
        mov     dword [ebp-0e4h],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,dword [ebp-0e0h]
        push    eax
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,dword [ebp-0e4h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,dword [ebp-0e0h]
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_40307:
L_40321:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     dword [ebp-0101h],ebx
        mov     eax,ebx
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-084h+014h],01h
        push    esi
        mov     eax,dword [ebp-0f0h]
        push    eax
        call    @starts_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; starts_with( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_40194
        or      byte [ebp-0fdh],byte 02h
        lea     esi,[ebp-04ch]
        mov     ebx,L_37
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     eax,esi
        add     eax,byte 04h
        mov     dword [ebp-0e8h],eax
        mov     dword [ebp-0d8h],00h
        lea     eax,[ebp-0d8h]
        mov     dword [ebp-0dch],00h
        lea     ecx,[ebp-0dch]
        mov     dword [ebp-0ech],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,dword [ebp-0e8h]
        push    eax
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,dword [ebp-0ech]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,dword [ebp-0e8h]
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_40451:
L_40465:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     dword [ebp-0109h],ebx
        mov     eax,ebx
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-084h+014h],02h
        push    esi
        mov     eax,dword [ebp-0f0h]
        push    eax
        call    @ends_with.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; ends_with( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_40194
        or      byte [ebp-0fdh],byte 01h
L_40194:
        mov     dword [ebp-084h+014h],03h
        lea     eax,[ebp-038h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        test    byte [ebp-0fdh],02h
        je      L_40196
        mov     dword [ebp-084h+014h],04h
        lea     eax,[ebp-04ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40196:
        test    byte [ebp-0fdh],01h
        je      L_40183
; Line 272:     { 
; Line 273:         return str.substr(2, str.size() - 4); 
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp-0f8h]
        mov     dword [ebp-0fch],eax
        mov     eax,dword [ebp-0f0h]
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_40517
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+04h+04h]
        jmp     L_40518
L_40517:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ecx+04h]
        shr     eax,01h
L_40518:
        sub     eax,byte 04h
        push    eax
        mov     eax,02h
        push    eax
        mov     eax,dword [ebp-0f0h]
        push    eax
        lea     eax,[ebp-060h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui ; std::basic_string<char, char_traits<char>, allocator<char>>::substr(unsigned int, unsigned int) const 
        mov     ebx,eax
        add     esp,byte 010h
        mov     dword [ebp-084h+014h],05h
        mov     eax,dword [ebp-0fch]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,dword [ebp-0fch]
        add     esi,byte 04h
        mov     dword [ebp-0105h],ebx
        mov     edi,ebx
        add     edi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,edi
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,esi
        add     ecx,byte 0ch
        mov     eax,edi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-084h+014h],06h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-084h+014h],07h
        lea     eax,[ebp-060h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-084h+014h],08h
        mov     eax,dword [ebp+08h]
        jmp     L_40181
; Line 274:     } 
L_40183:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp-0f0h]
        push    eax
        mov     eax,dword [ebp-0f4h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-084h+014h],09h
        mov     eax,dword [ebp+08h]
; Line 276: } 
L_40181:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff7ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffc8h
        dd      01h
        dd      03h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffb4h
        dd      02h
        dd      04h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffa0h
        dd      05h
        dd      07h
        dd      00h
section code
section code
        section vsc@embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; embeder::GetEmbedFromLine( const basic_string<char, char_traits<char>, allocator<char>>&)
@embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 278: embeder_info embeder::GetEmbedFromLine(const std::string& line) 
        push    ebp
        mov     ebp,esp
        add     esp,0fffff890h
        push    ebx
        push    esi
        push    edi
L_40732:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0764h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0768h],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-0760h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-075ch],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-03d0h],eax
        mov     dword [ebp-03d0h+04h],___cppexceptionhandle
        mov     dword [ebp-03d0h+08h],esp
        mov     dword [ebp-03d0h+0ch],ebp
        mov     dword [ebp-03d0h+010h],@.xc@embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-03d0h+014h],00h
        lea     eax,[ebp-03d0h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 280:     embeder_info info; 
; Line 855:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        push    edi
        push    ecx
        push    eax
        lea     edi,[ebp-080h]
        xor     eax,eax
        mov     ecx,020h
        cld
        rep stosd
        pop     eax
        pop     ecx
        pop     edi
        lea     ebx,[ebp-080h]
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-06b0h],00h
        lea     eax,[ebp-06b0h]
        mov     dword [ebp-06b4h],00h
        lea     esi,[ebp-06b4h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_41013:
L_41027:
; Line 1727:     __get_db()->__insert_c(this); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-03d0h+014h],01h
        mov     dword [ebp+014h-080h],0ffffffffh
        lea     eax,[ebp+00h]
        mov     dword [ebp-06a4h],eax
        mov     dword [ebp-06a4h+04h],00h
        push    dword [ebp-06a4h+04h]
        push    dword [ebp-06a4h]
        mov     eax,ebx
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],02h
        lea     eax,[ebp+00h]
        mov     dword [ebp-06ach],eax
        mov     dword [ebp-06ach+04h],00h
        push    dword [ebp-06ach+04h]
        push    dword [ebp-06ach]
        mov     eax,ebx
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],03h
        mov     dword [ebp+048h-080h],00h
        mov     dword [ebp+048h-080h+04h],00h
        mov     dword [ebp+050h-080h],01h
        mov     dword [ebp+054h-080h],02h
        add     ebx,byte 058h
        push    ebx
        call    @std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.qv ; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::unique_ptr<bool=1, void, >()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],04h
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.4bool?1?#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~.qv ; std::__compressed_pair<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__compressed_pair<bool=1, __hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, >()
        add     esp,byte 04h
        mov     dword [ebp-06b8h],00h
        lea     eax,[ebp-06b8h]
        push    eax
        call    @std@__default_init_tag@.bctr.qv ; std::__default_init_tag::__default_init_tag()
        add     esp,byte 04h
        push    eax
        xor     eax,eax
        mov     dword [ebp-06bch],eax
        lea     eax,[ebp-06bch]
        push    eax
        mov     eax,ebx
        add     eax,byte 014h
        push    eax
        call    @std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.i23@std@__default_init_tag~.qRiRn2 ; std::__compressed_pair<unsigned int, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<int, std::__default_init_tag, >(int&&, &&)
        lea     eax,[ebp-06b8h]
        push    eax
        call    @std@__default_init_tag@.bdtr.qv ; std::__default_init_tag::~__default_init_tag()
        add     esp,dword 04h+0ch
        mov     dword [ebp-06c0h],00h
        lea     eax,[ebp-06c0h]
        push    eax
        call    @std@__default_init_tag@.bctr.qv ; std::__default_init_tag::__default_init_tag()
        add     esp,byte 04h
        push    eax
        movss   xmm0,[L_187484]
        movss   [ebp-06c4h],xmm0
        lea     eax,[ebp-06c4h]
        push    eax
        mov     eax,ebx
        add     eax,byte 01ch
        push    eax
        call    @std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.f23@std@__default_init_tag~.qRfRn2 ; std::__compressed_pair<float, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<float, std::__default_init_tag, >(float&&, &&)
        lea     eax,[ebp-06c0h]
        push    eax
        call    @std@__default_init_tag@.bdtr.qv ; std::__default_init_tag::~__default_init_tag()
        add     esp,dword 04h+0ch
; Line 1424: } 
        mov     dword [ebp-03d0h+014h],05h
; Line 908:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],06h
        mov     dword [ebp-03d0h+014h],07h
; Line 281:     embeder_info blank_info; 
        push    edi
        push    ecx
        push    eax
        lea     edi,[ebp-0100h]
        xor     eax,eax
        mov     ecx,020h
        cld
        rep stosd
        pop     eax
        pop     ecx
        pop     edi
        lea     ebx,[ebp-0100h]
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-06b0h],00h
        lea     eax,[ebp-06b0h]
        mov     dword [ebp-06b4h],00h
        lea     esi,[ebp-06b4h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_41193:
L_41207:
; Line 1727:     __get_db()->__insert_c(this); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-03d0h+014h],08h
        mov     dword [ebp+014h-0100h],0ffffffffh
        lea     eax,[ebp+00h]
        mov     dword [ebp-06a4h],eax
        mov     dword [ebp-06a4h+04h],00h
        push    dword [ebp-06a4h+04h]
        push    dword [ebp-06a4h]
        mov     eax,ebx
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],09h
        lea     eax,[ebp+00h]
        mov     dword [ebp-06ach],eax
        mov     dword [ebp-06ach+04h],00h
        push    dword [ebp-06ach+04h]
        push    dword [ebp-06ach]
        mov     eax,ebx
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],0ah
        mov     dword [ebp+048h-0100h],00h
        mov     dword [ebp+048h-0100h+04h],00h
        mov     dword [ebp+050h-0100h],01h
        mov     dword [ebp+054h-0100h],02h
        add     ebx,byte 058h
        push    ebx
        call    @std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.qv ; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::unique_ptr<bool=1, void, >()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],0bh
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.4bool?1?#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~.qv ; std::__compressed_pair<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__compressed_pair<bool=1, __hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, >()
        add     esp,byte 04h
        mov     dword [ebp-06b8h],00h
        lea     eax,[ebp-06b8h]
        push    eax
        call    @std@__default_init_tag@.bctr.qv ; std::__default_init_tag::__default_init_tag()
        add     esp,byte 04h
        push    eax
        xor     eax,eax
        mov     dword [ebp-06bch],eax
        lea     eax,[ebp-06bch]
        push    eax
        mov     eax,ebx
        add     eax,byte 014h
        push    eax
        call    @std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.i23@std@__default_init_tag~.qRiRn2 ; std::__compressed_pair<unsigned int, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<int, std::__default_init_tag, >(int&&, &&)
        lea     eax,[ebp-06b8h]
        push    eax
        call    @std@__default_init_tag@.bdtr.qv ; std::__default_init_tag::~__default_init_tag()
        add     esp,dword 04h+0ch
        mov     dword [ebp-06c0h],00h
        lea     eax,[ebp-06c0h]
        push    eax
        call    @std@__default_init_tag@.bctr.qv ; std::__default_init_tag::__default_init_tag()
        add     esp,byte 04h
        push    eax
        movss   xmm0,[L_187484]
        movss   [ebp-06c4h],xmm0
        lea     eax,[ebp-06c4h]
        push    eax
        mov     eax,ebx
        add     eax,byte 01ch
        push    eax
        call    @std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.f23@std@__default_init_tag~.qRfRn2 ; std::__compressed_pair<float, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<float, std::__default_init_tag, >(float&&, &&)
        lea     eax,[ebp-06c0h]
        push    eax
        call    @std@__default_init_tag@.bdtr.qv ; std::__default_init_tag::~__default_init_tag()
        add     esp,dword 04h+0ch
; Line 1424: } 
        mov     dword [ebp-03d0h+014h],0ch
; Line 908:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],0dh
        mov     dword [ebp-03d0h+014h],0eh
; Line 284:     info.bytes = 1; 
        mov     dword [ebp-080h+050h],01h
; Line 285:     info.is_system = false; 
        mov     byte [ebp-080h+040h],00h
; Line 286:     bool system_file = false; 
; Line 287:     info.suffix = std::vector<embeder_type>(); 
        lea     eax,[ebp-080h+02ch]
        mov     dword [ebp-0754h],eax
        mov     dword [ebp-0114h+010h],00h
        mov     dword [ebp-0114h+0ch],00h
        mov     dword [ebp-0114h+08h],00h
        mov     dword [ebp-0114h+04h],00h
        mov     dword [ebp-0114h],00h
        lea     ebx,[ebp-0114h]
        mov     dword [ebp+04h-0114h],00h
        mov     dword [ebx+08h],00h
        mov     esi,ebx
        add     esi,byte 0ch
        xor     eax,eax
        mov     dword [ebp-06c8h],eax
        lea     eax,[ebp-06c8h]
        mov     dword [ebp-06cch],00h
        lea     edi,[ebp-06cch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<variant<shared_ptr<Token>, unsigned long long>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_41394:
; Line 438: } 
        mov     dword [ebp-03d0h+014h],0fh
; Line 498:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],010h
; Line 1359:     __move_assign(__x, integral_constant<bool, 
        mov     dword [ebp-06d0h],00h
        lea     eax,[ebp-06d0h]
        mov     dword [ebp-03d0h+014h],011h
        push    dword [eax]
        push    ebx
        mov     eax,dword [ebp-0754h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign.qr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_assign(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],012h
L_41426:
        add     esp,byte 0ch
; Line 1362: } 
        mov     dword [ebp-03d0h+014h],013h
        lea     eax,[ebp-0114h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_41473:
; Line 879:     } 
L_41458:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_41443:
; Line 288:     info.prefix = std::vector<embeder_type>(); 
        lea     eax,[ebp-080h+018h]
        mov     dword [ebp-0750h],eax
        mov     dword [ebp-0128h+010h],00h
        mov     dword [ebp-0128h+0ch],00h
        mov     dword [ebp-0128h+08h],00h
        mov     dword [ebp-0128h+04h],00h
        mov     dword [ebp-0128h],00h
        lea     ebx,[ebp-0128h]
        mov     dword [ebp+04h-0128h],00h
        mov     dword [ebx+08h],00h
        mov     esi,ebx
        add     esi,byte 0ch
        xor     eax,eax
        mov     dword [ebp-06d4h],eax
        lea     eax,[ebp-06d4h]
        mov     dword [ebp-06d8h],00h
        lea     edi,[ebp-06d8h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<variant<shared_ptr<Token>, unsigned long long>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_41928:
; Line 438: } 
        mov     dword [ebp-03d0h+014h],014h
; Line 498:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],015h
; Line 1359:     __move_assign(__x, integral_constant<bool, 
        mov     dword [ebp-06d0h],00h
        lea     eax,[ebp-06d0h]
        mov     dword [ebp-03d0h+014h],016h
        push    dword [eax]
        push    ebx
        mov     eax,dword [ebp-0750h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign.qr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_assign(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],017h
L_41960:
        add     esp,byte 0ch
; Line 1362: } 
        mov     dword [ebp-03d0h+014h],018h
        lea     eax,[ebp-0128h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_42007:
; Line 879:     } 
L_41992:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_41977:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp-0760h]
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],019h
; Line 290:     definer.Process(int_line); 
        push    byte 00h
        lea     eax,[ebp-013ch]
        push    eax
        mov     eax,dword [ebp-075ch]
        mov     eax,dword [eax+04h]
        push    eax
        call    @ppDefine@Process.qr#basic_string.c#char_traits.c~#allocator.c~~4bool ; ppDefine::Process(basic_string<char, char_traits<char>, allocator<char>>&, bool)
        add     esp,byte 0ch
; Line 291:     info.filename = this->includer.ParseName(int_line, info.is_system); 
        lea     ebx,[ebp-080h]
        lea     eax,[ebp-080h+040h]
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        mov     eax,dword [ebp-075ch]
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-0150h]
        push    eax
        call    @ppInclude@ParseName.qrx#basic_string.c#char_traits.c~#allocator.c~~r4bool ; ppInclude::ParseName( const basic_string<char, char_traits<char>, allocator<char>>&, bool&)
        add     esp,byte 010h
        mov     dword [ebp-03d0h+014h],01ah
; Line 2320:     __move_assign(__str, integral_constant<bool, 
        mov     dword [ebp-06dch],00h
        lea     ecx,[ebp-06dch]
        mov     dword [ebp-03d0h+014h],01bh
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ ; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],01ch
L_42360:
        add     esp,byte 0ch
; Line 2323: } 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     esi,[ebp-080h]
        mov     ebx,L_32
; Line 3897:     typedef basic_string<_CharT, _Traits, _Allocator> _String; 
; Line 3898:     _LIBCPP_ASSERT(__rhs != nullptr, "operator==(basic_string, char*): received nullptr"); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        mov     edx,esi
        mov     ecx,esi
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_42415
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+04h+04h]
        jmp     L_42416
L_42415:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
L_42416:
        cmp     eax,ecx
        je      L_42365
        xor     al,al
        jmp     L_42382
L_42365:
        push    eax
        push    ebx
        push    dword 0ffffffffh
        push    byte 00h
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@compare.xquiuipxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::compare(unsigned int, unsigned int, char const *, unsigned int) const 
        add     esp,byte 014h
        and     eax,eax
        sete    al
        and     eax,byte 01h
; Line 3902: } 
L_42382:
        and     al,al
        je      L_40735
; Line 293:     { 
; Line 294:         return info; 
        mov     ebx,dword [ebp-0764h]
        mov     esi,ebx
        lea     edi,[ebp-080h]
        mov     eax,edi
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qR#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string(basic_string<char, char_traits<char>, allocator<char>>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],01dh
        mov     eax,dword [ebp+014h-080h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp+00h]
        mov     dword [ebp-06a4h],eax
        mov     dword [ebp-06a4h+04h],00h
        push    dword [ebp-06a4h+04h]
        push    dword [ebp-06a4h]
        mov     eax,esi
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],01eh
        lea     eax,[ebp+00h]
        mov     dword [ebp-06ach],eax
        mov     dword [ebp-06ach+04h],00h
        push    dword [ebp-06ach+04h]
        push    dword [ebp-06ach]
        mov     eax,esi
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],01fh
        mov     al,byte [ebp+040h-080h]
        mov     byte [ebx+040h],al
        mov     eax,dword [ebp+048h-080h]
        mov     edx,dword [ebp+048h-080h+04h]
        mov     dword [ebx+048h],eax
        mov     dword [ebx+048h+04h],edx
        mov     eax,dword [ebp+050h-080h]
        mov     dword [ebx+050h],eax
        mov     eax,dword [ebp+054h-080h]
        mov     dword [ebx+054h],eax
        mov     ecx,esi
        add     ecx,byte 058h
        mov     eax,edi
        add     eax,byte 058h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qR#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table(__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],020h
; Line 1531:     __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],021h
        mov     dword [ebp-03d0h+014h],022h
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],023h
        lea     eax,[ebp-0150h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],024h
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],025h
        lea     ebx,[ebp-0100h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_42639:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_42685:
; Line 879:     } 
L_42670:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_42655:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_43037:
; Line 879:     } 
L_43022:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_43007:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_42624:
        mov     eax,esi
        jmp     L_40733
; Line 295:     } 
L_40735:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        lea     ebx,[ebp-0164h]
        lea     esi,[ebp-013ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],026h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],027h
; Line 297:     auto loc = temp_string_for_tokenizer.find(info.filename); 
        lea     ebx,[ebp-0164h]
        lea     eax,[ebp-080h]
        xor     esi,esi
; Line 3353:     return __str_find<value_type, size_type, traits_type, npos> 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_43475
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_43476
L_43475:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_43476:
        push    ecx
        push    esi
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_43667
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_43668
L_43667:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_43668:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp+04h-0164h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_43863
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h+04h]
        jmp     L_43864
L_43863:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebx+04h]
        shr     eax,01h
L_43864:
        push    eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebx+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_44055
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+08h+04h]
        jmp     L_44056
L_44055:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_44056:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    @std@#__str_find.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui ; std::__str_find<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
        mov     edi,eax
        add     esp,byte 014h
; Line 3355: } 
; Line 299:     char to_find = info.is_system ? '<' : '"'; 
        cmp     byte [ebp-080h+040h],byte 00h
        je      L_44237
        mov     eax,03ch
        jmp     L_44238
L_44237:
        mov     eax,022h
L_44238:
        mov     ecx,eax
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,edi
        push    eax
        movsx   ecx,cl
        push    ecx
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@rfind.xqcui ; std::basic_string<char, char_traits<char>, allocator<char>>::rfind(char, unsigned int) const 
        add     esp,byte 0ch
        mov     dword [ebp-0758h],eax
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     esi,[ebp-0164h]
        mov     ebx,L_38
; Line 3494:     _LIBCPP_ASSERT(__s != nullptr, "string::find_first_of(): received nullptr"); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    edi
        push    ebx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp+04h-0164h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_44285
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esi+04h+04h]
        jmp     L_44286
L_44285:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [esi+04h]
        shr     eax,01h
L_44286:
        push    eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [esi+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_44477
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esi+08h+04h]
        jmp     L_44478
L_44477:
        mov     eax,esi
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_44478:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    @std@#__str_find_first_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui ; std::__str_find_first_of<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
        add     esp,byte 014h
; Line 3497: } 
; Line 302:     temp_string_for_tokenizer.erase(first_char, last_char); 
        push    eax
        mov     eax,dword [ebp-0758h]
        push    eax
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui ; std::basic_string<char, char_traits<char>, allocator<char>>::erase(unsigned int, unsigned int)
        add     esp,byte 0ch
; Line 842:           class _Alloc = allocator<pair<const _Key, _Tp> > > 
        lea     ebx,[ebp-0188h]
        lea     eax,[ebp-0164h]
        mov     ecx,_hasher
        mov     dword [ebp-0188h],ecx
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],028h
        mov     eax,ebx
        add     eax,byte 018h
        mov     dword [ebp-06e0h],eax
        mov     dword [eax],00h
        mov     eax,dword [ebp-06e0h]
        mov     dword [eax+04h],00h
        mov     byte [ebp+020h-0188h],00h
; Line 90:     } 
        mov     dword [ebp-03d0h+014h],029h
; Line 306:     enum ParsingState 
        xor     eax,eax
        mov     dword [ebp-018ch],eax
        lea     eax,[ebp-01b4h]
        push    edi
        push    ecx
        push    eax
        mov     edi,eax
        xor     eax,eax
        mov     ecx,0ah
        cld
        rep stosd
        pop     eax
        pop     ecx
        pop     edi
        mov     ebx,eax
        push    ebx
        call    @std@#__deque_base_common.4bool?1?~@.bctr.qv ; std::__deque_base_common<bool=1>::__deque_base_common()
        add     esp,byte 04h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@.bctr.qv ; std::__split_buffer<char*, allocator<char*>>::__split_buffer()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],02ah
        mov     dword [ebp+01ch-01b4h],00h
        mov     dword [ebp-06e4h],00h
        lea     eax,[ebp-06e4h]
        push    eax
        call    @std@__default_init_tag@.bctr.qv ; std::__default_init_tag::__default_init_tag()
        add     esp,byte 04h
        push    eax
        xor     eax,eax
        mov     dword [ebp-06e8h],eax
        lea     eax,[ebp-06e8h]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@#__compressed_pair.ui#allocator.c~~@.bctr.i23@std@__default_init_tag~.qRiRn0 ; std::__compressed_pair<unsigned int, allocator<char>>::__compressed_pair<int, std::__default_init_tag, >(int&&, std::__default_init_tag&&)
        lea     eax,[ebp-06e4h]
        push    eax
        call    @std@__default_init_tag@.bdtr.qv ; std::__default_init_tag::~__default_init_tag()
        add     esp,dword 04h+0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-03d0h+014h],02bh
        mov     dword [ebp-03d0h+014h],02ch
; Line 855:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     edi,[ebp-01c8h]
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-06ech],00h
        lea     eax,[ebp-06ech]
        mov     dword [ebp-06f0h],00h
        lea     ebx,[ebp-06f0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_44841:
L_44855:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-03d0h+014h],02dh
; Line 314:     bool join_next_identifier = false; 
        lea     eax,[ebp-01dch]
        mov     dword [ebp+04h-01dch],00h
        mov     dword [ebp+08h-01dch],00h
        mov     ebx,eax
        add     ebx,byte 0ch
        xor     eax,eax
        mov     dword [ebp-06f4h],eax
        lea     eax,[ebp-06f4h]
        mov     dword [ebp-06f8h],00h
        lea     esi,[ebp-06f8h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ebx
        call    @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_44988:
; Line 438: } 
        mov     dword [ebp-03d0h+014h],02eh
; Line 498:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],02fh
; Line 316:     for (embed_token_type tk = tokenizer.NextShared(); tk && !tk->IsEnd(); tk = tokenizer.NextShared()) 
        lea     eax,[ebp-0188h]
        push    eax
        lea     eax,[ebp-0208h]
        push    eax
        call    @#TemplatedTokenizer.2kw~@NextShared.qv ; TemplatedTokenizer<kw>::NextShared()
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],030h
        mov     eax,dword [ebp-0208h]
        and     eax,eax
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_40744
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+018h]
        add     esp,byte 04h
        and     al,al
        jne     L_40744
L_40742:
; Line 317:     { 
; Line 326:         if (state == IdentifierParsing) 
        cmp     dword [ebp-018ch],byte 00h
        jne     L_40750
; Line 327:         { 
; Line 331:             if (!identifierString.empty() && tk->IsKeyword()) 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp-01c8h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_45087
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp+04h+04h-01c8h]
        jmp     L_45088
L_45087:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp+04h-01c8h]
        shr     eax,01h
L_45088:
        and     eax,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        jne     L_40754
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        add     esp,byte 04h
        and     al,al
        je      L_40754
; Line 332:             { 
; Line 333:                 switch (tk->GetKeyword()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        add     esp,byte 04h
        and     eax,eax
        je      L_40763
        cmp     eax,byte 019h
        je      L_40761
        jmp     L_40765
; Line 334:                 { 
; Line 335:                     case kw::coloncolon: 
L_40761:
; Line 336:                         identifierString += tk->GetChars(); 
        lea     ebx,[ebp-01c8h]
        mov     eax,dword [ebp-0208h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-0328h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],031h
        mov     dword [ebp-03d0h+014h],032h
        lea     eax,[ebp-0328h]
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_45376
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_45377
L_45376:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_45377:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_45568
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_45569
L_45568:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_45569:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *, unsigned int)
        add     esp,byte 0ch
; Line 2554: } 
; Line 337:                         state = AdditionalIdentifierParsing; 
        mov     dword [ebp-018ch],01h
; Line 338:                         break; 
        mov     dword [ebp-03d0h+014h],033h
        lea     eax,[ebp-0328h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        jmp     L_40769
L_40763:
; Line 339:                     case kw::openpa: 
        lea     ecx,[ebp-01b4h]
        mov     byte [ebp-0329h],028h
        lea     eax,[ebp-0329h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#deque.c#allocator.c~~@push_back.qRc ; std::deque<char, allocator<char>>::push_back(char&&)
        add     esp,byte 08h
L_45764:
; Line 341:                         state = BalancedParsing; 
        mov     dword [ebp-018ch],02h
; Line 342:                         break; 
        jmp     L_40769
L_40765:
; Line 343:                     default: 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-0340h]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],035h
        push    eax
        lea     ebx,[ebp-0354h]
        mov     dword [ebp-0744h],L_39
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-06fch],00h
        lea     eax,[ebp-06fch]
        mov     dword [ebp-0700h],00h
        lea     esi,[ebp-0700h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_45893:
L_45907:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-0744h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-0744h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],036h
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-03d0h+014h],037h
        lea     eax,[ebp-0340h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 348:                         break; 
        mov     dword [ebp-03d0h+014h],038h
        lea     eax,[ebp-0354h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
; Line 349:                 } 
L_40758:
; Line 350:             } 
        jmp     L_40801
L_40754:
; Line 351:             else if (tk->IsIdentifier()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        add     esp,byte 04h
        and     al,al
        je      L_40772
; Line 352:             { 
; Line 353:                 if (!identifierString.empty()) 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp-01c8h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_45989
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp+04h+04h-01c8h]
        jmp     L_45990
L_45989:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp+04h-01c8h]
        shr     eax,01h
L_45990:
        and     eax,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        jne     L_40776
; Line 354:                 { 
; Line 357:                     auto val = info.mapped_values.find(identifierString); 
        lea     ecx,[ebp-080h+058h]
        lea     eax,[ebp-01c8h]
        add     esp,byte 0fffffffch
        mov     ebx,esp
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-076ch],eax
        add     esp,byte 08h
        lea     eax,[ebp-076ch]
        push    eax
        push    ebx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03ah
        lea     eax,[ebp-02d0h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03bh
        mov     dword [ebp-03d0h+014h],03ch
; Line 358:                     if (val == info.mapped_values.end()) 
        lea     eax,[ebp-080h+058h]
        add     esp,byte 0fffffffch
        mov     ebx,esp
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end()
        mov     dword [ebp-0770h],eax
        add     esp,byte 04h
        lea     eax,[ebp-0770h]
        push    eax
        push    ebx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03dh
        lea     eax,[ebp-02d8h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],03eh
        mov     dword [ebp-03d0h+014h],03fh
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp-02d0h]
        mov     eax,dword [ebp-02d8h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        mov     dword [ebp-03d0h+014h],040h
L_46225:
L_46212:
        and     al,al
        je      L_40780
; Line 359:                     { 
; Line 360:                         info.mapped_values[identifierString] = std::vector<embed_token_type>(); 
        lea     eax,[ebp-01c8h]
        push    eax
        lea     eax,[ebp-080h+058h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator []( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-074ch],eax
        add     esp,byte 08h
        mov     dword [ebp-0314h+010h],00h
        mov     dword [ebp-0314h+0ch],00h
        mov     dword [ebp-0314h+08h],00h
        mov     dword [ebp-0314h+04h],00h
        mov     dword [ebp-0314h],00h
        lea     ebx,[ebp-0314h]
        mov     dword [ebp+04h-0314h],00h
        mov     dword [ebx+08h],00h
        mov     esi,ebx
        add     esi,byte 0ch
        xor     eax,eax
        mov     dword [ebp-0704h],eax
        lea     eax,[ebp-0704h]
        mov     dword [ebp-0708h],00h
        lea     edi,[ebp-0708h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_46375:
; Line 438: } 
        mov     dword [ebp-03d0h+014h],041h
; Line 498:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],042h
; Line 1359:     __move_assign(__x, integral_constant<bool, 
        mov     dword [ebp-070ch],00h
        lea     eax,[ebp-070ch]
        mov     dword [ebp-03d0h+014h],043h
        push    dword [eax]
        push    ebx
        mov     eax,dword [ebp-074ch]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign.qr#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__move_assign(vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],044h
L_46407:
        add     esp,byte 0ch
; Line 1362: } 
        mov     dword [ebp-03d0h+014h],045h
        lea     eax,[ebp-0314h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_46454:
; Line 879:     } 
L_46439:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
        add     esp,byte 04h
L_46424:
; Line 361:                         identifierString = ""; 
        lea     ecx,[ebp-01c8h]
        mov     eax,L_32
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::assign(char const *)
        add     esp,byte 08h
; Line 362:                     } 
        jmp     L_40785
L_40780:
; Line 363:                     else 
; Line 364:                     { 
; Line 365:                         Errors::ErrorWithLine("Attempted to set the same identifier twice", Errors::GetFileName(), 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-02ech]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],046h
        push    eax
        lea     ebx,[ebp-0300h]
        mov     dword [ebp-073ch],L_40
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-0710h],00h
        lea     eax,[ebp-0710h]
        mov     dword [ebp-0714h],00h
        lea     esi,[ebp-0714h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_46889:
L_46903:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-073ch]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-073ch]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],047h
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-03d0h+014h],048h
        lea     eax,[ebp-02ech]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 367:                     } 
        mov     dword [ebp-03d0h+014h],049h
        lea     eax,[ebp-0300h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40785:
; Line 368:                 } 
        mov     dword [ebp-03d0h+014h],04ah
L_46947:
L_46934:
L_40776:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+03ch]
        add     esp,byte 04h
        push    eax
        lea     eax,[ebp-02b8h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],04bh
; Line 370:                 identifierString = strip_underscores(my_copy); 
        lea     ebx,[ebp-01c8h]
        lea     eax,[ebp-02b8h]
        push    eax
        lea     eax,[ebp-02cch]
        push    eax
        call    @strip_underscores.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; strip_underscores( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],04ch
; Line 2320:     __move_assign(__str, integral_constant<bool, 
        mov     dword [ebp-06dch],00h
        lea     ecx,[ebp-06dch]
        mov     dword [ebp-03d0h+014h],04dh
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ ; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],04eh
L_47027:
        add     esp,byte 0ch
; Line 2323: } 
; Line 373:             } 
        mov     dword [ebp-03d0h+014h],04fh
        lea     eax,[ebp-02cch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],050h
        lea     eax,[ebp-02b8h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40772:
L_40769:
; Line 374:         } 
        jmp     L_40801
L_40750:
; Line 375:         else if (state == BalancedParsing) 
        cmp     dword [ebp-018ch],byte 02h
        jne     L_40804
; Line 376:         { 
; Line 377:             if (tk->IsKeyword()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        add     esp,byte 04h
        and     al,al
        je      L_40808
; Line 378:             { 
; Line 379:                 if (tk->GetKeyword() == kw::closepa) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        add     esp,byte 04h
        cmp     eax,byte 01h
        jne     L_40812
; Line 380:                 { 
; Line 381:                     info.mapped_values[identifierString] = items; 
        lea     eax,[ebp-01c8h]
        push    eax
        lea     eax,[ebp-080h+058h]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator []( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     ebx,eax
        add     esp,byte 08h
        lea     eax,[ebp-01dch]
; Line 1401:     if (this != &__x) 
        cmp     ebx,eax
        je      L_47096
; Line 1402:     { 
; Line 1403:         __base::__copy_assign_alloc(__x); 
        push    eax
        push    ebx
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__copy_assign_alloc( const __vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
        add     esp,byte 08h
; Line 1404:         assign(__x.__begin_, __x.__end_); 
        mov     eax,dword [ebp+08h-01dch]
        push    eax
        mov     eax,dword [ebp+04h-01dch]
        push    eax
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#assign.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::assign<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*)
        add     esp,byte 0ch
; Line 1405:     } 
L_47096:
; Line 1407: } 
; Line 382:                     identifierString = ""; 
        lea     ecx,[ebp-01c8h]
        mov     eax,L_32
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::assign(char const *)
        add     esp,byte 08h
; Line 383:                     items = std::vector<embed_token_type>(); 
        lea     eax,[ebp-01dch]
        mov     dword [ebp-0748h],eax
        mov     dword [ebp-02a4h+010h],00h
        mov     dword [ebp-02a4h+0ch],00h
        mov     dword [ebp-02a4h+08h],00h
        mov     dword [ebp-02a4h+04h],00h
        mov     dword [ebp-02a4h],00h
        lea     ebx,[ebp-02a4h]
        mov     dword [ebp+04h-02a4h],00h
        mov     dword [ebx+08h],00h
        mov     esi,ebx
        add     esi,byte 0ch
        xor     eax,eax
        mov     dword [ebp-0718h],eax
        lea     eax,[ebp-0718h]
        mov     dword [ebp-071ch],00h
        lea     edi,[ebp-071ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_47280:
; Line 438: } 
        mov     dword [ebp-03d0h+014h],051h
; Line 498:             __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],052h
; Line 1359:     __move_assign(__x, integral_constant<bool, 
        mov     dword [ebp-070ch],00h
        lea     eax,[ebp-070ch]
        mov     dword [ebp-03d0h+014h],053h
        push    dword [eax]
        push    ebx
        mov     eax,dword [ebp-0748h]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign.qr#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__move_assign(vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=1>)
        mov     dword [ebp-03d0h+014h],054h
L_47312:
        add     esp,byte 0ch
; Line 1362: } 
        mov     dword [ebp-03d0h+014h],055h
        lea     eax,[ebp-02a4h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_47359:
; Line 879:     } 
L_47344:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
        add     esp,byte 04h
L_47329:
; Line 384:                     state = IdentifierParsing; 
        xor     eax,eax
        mov     dword [ebp-018ch],eax
; Line 385:                 } 
        jmp     L_40825
L_40812:
; Line 386:                 else 
; Line 387:                 { 
; Line 389:                     items.push_back(tk); 
        lea     ebx,[ebp-01dch]
        lea     eax,[ebp-0208h]
; Line 1635:     if (this->__end_ != this->__end_cap()) 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edx,dword [ebp-01dch+0ch]
        cmp     dword [ebp+08h-01dch],edx
        je      L_47669
; Line 1636:     { 
; Line 1637:         __construct_one_at_end(__x); 
        push    eax
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_one_at_end< const shared_ptr<Token>&>( const shared_ptr<Token>&)
        add     esp,byte 08h
; Line 1638:     } 
        jmp     L_47674
L_47669:
; Line 1639:     else 
; Line 1640:         __push_back_slow_path(__x); 
        push    eax
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__push_back_slow_path< const shared_ptr<Token>&>( const shared_ptr<Token>&)
        add     esp,byte 08h
L_47674:
; Line 1641: } 
L_47691:
; Line 390:                 } 
L_40817:
; Line 391:             } 
        jmp     L_40833
L_40808:
; Line 392:             else 
; Line 393:             { 
; Line 395:                 items.push_back(tk); 
        lea     ebx,[ebp-01dch]
        lea     eax,[ebp-0208h]
; Line 1635:     if (this->__end_ != this->__end_cap()) 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edx,dword [ebp-01dch+0ch]
        cmp     dword [ebp+08h-01dch],edx
        je      L_47743
; Line 1636:     { 
; Line 1637:         __construct_one_at_end(__x); 
        push    eax
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_one_at_end< const shared_ptr<Token>&>( const shared_ptr<Token>&)
        add     esp,byte 08h
; Line 1638:     } 
        jmp     L_47748
L_47743:
; Line 1639:     else 
; Line 1640:         __push_back_slow_path(__x); 
        push    eax
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__push_back_slow_path< const shared_ptr<Token>&>( const shared_ptr<Token>&)
        add     esp,byte 08h
L_47748:
; Line 1641: } 
L_47765:
; Line 396:             } 
L_40825:
; Line 397:         } 
        jmp     L_40833
L_40804:
; Line 398:         else if (state == AdditionalIdentifierParsing) 
        cmp     dword [ebp-018ch],byte 01h
        jne     L_40836
; Line 399:         { 
; Line 400:             state = IdentifierParsing; 
        xor     eax,eax
        mov     dword [ebp-018ch],eax
; Line 401:             if (!tk->IsIdentifier() && !tk->IsKeyword()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        add     esp,byte 04h
        and     al,al
        jne     L_40840
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        add     esp,byte 04h
        and     al,al
        jne     L_40840
; Line 402:             { 
; Line 403:                 Errors::ErrorWithLine("Expected a new identifier or more :: extensions", Errors::GetFileName(), 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-027ch]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],056h
        push    eax
        lea     ebx,[ebp-0290h]
        mov     dword [ebp-0738h],L_41
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-0720h],00h
        lea     eax,[ebp-0720h]
        mov     dword [ebp-0724h],00h
        lea     esi,[ebp-0724h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_47990:
L_48004:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-0738h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-0738h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],057h
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-03d0h+014h],058h
        lea     eax,[ebp-027ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 405:             } 
        mov     dword [ebp-03d0h+014h],059h
        lea     eax,[ebp-0290h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40840:
; Line 406:             if (tk->IsKeyword()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        add     esp,byte 04h
        and     al,al
        je      L_40847
; Line 407:             { 
; Line 408:                 if (tk->GetKeyword() == kw::coloncolon) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        add     esp,byte 04h
        cmp     eax,byte 019h
        jne     L_40851
; Line 409:                 { 
; Line 410:                     identifierString += tk->GetChars(); 
        lea     ebx,[ebp-01c8h]
        mov     eax,dword [ebp-0208h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-0268h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],05ah
        mov     dword [ebp-03d0h+014h],05bh
        lea     eax,[ebp-0268h]
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_48165
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_48166
L_48165:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_48166:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_48357
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_48358
L_48357:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_48358:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *, unsigned int)
        add     esp,byte 0ch
; Line 2554: } 
; Line 411:                     state = AdditionalIdentifierParsing; 
        mov     dword [ebp-018ch],01h
; Line 412:                 } 
        mov     dword [ebp-03d0h+014h],05ch
        lea     eax,[ebp-0268h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        jmp     L_40856
L_40851:
; Line 413:                 else 
; Line 414:                 { 
; Line 415:                     Errors::ErrorWithLine("Unexpected Keyword after identifier extension", Errors::GetFileName(), 
        call    @Errors@GetErrorLine.qv ; Errors::GetErrorLine()
        push    eax
        lea     eax,[ebp-0240h]
        push    eax
        call    @Errors@GetFileName.qv ; Errors::GetFileName()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],05dh
        push    eax
        lea     ebx,[ebp-0254h]
        mov     dword [ebp-0740h],L_42
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-0728h],00h
        lea     eax,[ebp-0728h]
        mov     dword [ebp-072ch],00h
        lea     esi,[ebp-072ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_48650:
L_48664:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-0740h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-0740h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],05eh
        push    ebx
        call    @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i ; Errors::ErrorWithLine( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&, int)
        mov     dword [ebp-03d0h+014h],05fh
        lea     eax,[ebp-0240h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
; Line 417:                 } 
        mov     dword [ebp-03d0h+014h],060h
        lea     eax,[ebp-0254h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40856:
; Line 418:             } 
L_40847:
; Line 419:             if (tk->IsIdentifier()) 
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        add     esp,byte 04h
        and     al,al
        je      L_40866
; Line 420:             { 
; Line 421:                 identifierString += tk->GetChars(); 
        lea     ebx,[ebp-01c8h]
        mov     eax,dword [ebp-0208h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-022ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],061h
        mov     dword [ebp-03d0h+014h],062h
        lea     eax,[ebp-022ch]
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_48793
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_48794
L_48793:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_48794:
        push    ecx
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_48985
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_48986
L_48985:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_48986:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::append(char const *, unsigned int)
        add     esp,byte 0ch
; Line 2554: } 
; Line 422:             } 
        mov     dword [ebp-03d0h+014h],063h
        lea     eax,[ebp-022ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_40866:
; Line 423:         } 
L_40836:
L_40833:
L_40801:
; Line 424:     } 
L_40745:
        lea     ebx,[ebp-0208h]
        lea     eax,[ebp-0188h]
        push    eax
        lea     eax,[ebp-0218h]
        push    eax
        call    @#TemplatedTokenizer.2kw~@NextShared.qv ; TemplatedTokenizer<kw>::NextShared()
        mov     ecx,eax
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],064h
; Line 4243:     shared_ptr(_VSTD::move(__r)).swap(*this); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ecx]
        mov     dword [ebp-0734h],eax
        mov     eax,dword [ecx+04h]
        mov     dword [ebp-0734h+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ecx],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ecx+04h],00h
; Line 4089: } 
        mov     dword [ebp-03d0h+014h],065h
        lea     esi,[ebp-0734h]
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        push    ebx
        push    esi
        call    @std@#swap.p5Token~.qrpn0rpn0 ; std::swap<Token*>(Token*&, Token*&)
        add     esp,byte 08h
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0 ; std::swap<std::__shared_weak_count*>(std::__shared_weak_count*&, std::__shared_weak_count*&)
        add     esp,byte 08h
; Line 4338: } 
L_49198:
        mov     dword [ebp-03d0h+014h],066h
        lea     eax,[ebp-0734h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
; Line 4245: } 
L_49183:
        mov     dword [ebp-03d0h+014h],068h
        lea     eax,[ebp-0218h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_40743:
        mov     eax,dword [ebp-0208h]
        and     eax,eax
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_49236
        mov     eax,dword [ebp-0208h]
        push    eax
        mov     eax,dword [ebp-0208h]
        mov     eax,dword [eax]
        call    dword [eax+018h]
        add     esp,byte 04h
        and     al,al
        je      L_40742
L_49236:
L_40744:
        mov     dword [ebp-03d0h+014h],069h
        lea     eax,[ebp-0208h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
; Line 425:     return info; 
        mov     ebx,dword [ebp-0768h]
        mov     esi,ebx
        lea     edi,[ebp-080h]
        mov     eax,edi
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qR#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string(basic_string<char, char_traits<char>, allocator<char>>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],06ah
        mov     eax,dword [ebp+014h-080h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp+00h]
        mov     dword [ebp-06a4h],eax
        mov     dword [ebp-06a4h+04h],00h
        push    dword [ebp-06a4h+04h]
        push    dword [ebp-06a4h]
        mov     eax,esi
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],06bh
        lea     eax,[ebp+00h]
        mov     dword [ebp-06ach],eax
        mov     dword [ebp-06ach+04h],00h
        push    dword [ebp-06ach+04h]
        push    dword [ebp-06ach]
        mov     eax,esi
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     dword [ebp-03d0h+014h],06ch
        mov     al,byte [ebp+040h-080h]
        mov     byte [ebx+040h],al
        mov     eax,dword [ebp+048h-080h]
        mov     edx,dword [ebp+048h-080h+04h]
        mov     dword [ebx+048h],eax
        mov     dword [ebx+048h+04h],edx
        mov     eax,dword [ebp+050h-080h]
        mov     dword [ebx+050h],eax
        mov     eax,dword [ebp+054h-080h]
        mov     dword [ebx+054h],eax
        mov     ecx,esi
        add     ecx,byte 058h
        mov     eax,edi
        add     eax,byte 058h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qR#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table(__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&&)
        add     esp,byte 08h
        mov     dword [ebp-03d0h+014h],06dh
; Line 1531:     __get_db()->__insert_c(this); 
        mov     dword [ebp-03d0h+014h],06eh
        mov     dword [ebp-03d0h+014h],06fh
        mov     esi,dword [ebp+08h]
        mov     dword [ebp-03d0h+014h],070h
        lea     eax,[ebp-01dch]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_49394:
; Line 879:     } 
L_49379:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
        add     esp,byte 04h
L_49364:
        mov     dword [ebp-03d0h+014h],071h
        lea     eax,[ebp-01c8h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        lea     eax,[ebp-01b4h]
        push    eax
        call    @std@#__deque_base.c#allocator.c~~@.bdtr.qv ; std::__deque_base<char, allocator<char>>::~__deque_base()
        add     esp,byte 04h
L_49727:
L_49714:
        mov     dword [ebp-03d0h+014h],072h
        lea     ebx,[ebp-0188h]
        mov     eax,ebx
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_49742:
        mov     dword [ebp-03d0h+014h],073h
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],074h
        lea     eax,[ebp-0150h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],075h
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-03d0h+014h],076h
        lea     ebx,[ebp-0100h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_49771:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_49817:
; Line 879:     } 
L_49802:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_49787:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_50169:
; Line 879:     } 
L_50154:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_50139:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_49756:
        mov     eax,esi
; Line 426: } 
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_50522:
L_50507:
L_50492:
L_50855:
L_50842:
L_50870:
L_50899:
L_50945:
L_50930:
L_50915:
L_51297:
L_51282:
L_51267:
L_50884:
L_40733:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#shared_ptr.5Token~ virtual
        [bits 32]
@.xt@#shared_ptr.5Token~:
        dd      @std@#shared_ptr.5Token~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#TemplatedTokenizer.2kw~ virtual
        [bits 32]
@.xt@#TemplatedTokenizer.2kw~:
        dd      @#TemplatedTokenizer.2kw~@.bdtr.qv+0
        dd      024h
        dd      0400h
        db      054h
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      074h
        db      065h
        db      064h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      069h
        db      07ah
        db      065h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer_common.4bool?1?~ virtual
        [bits 32]
@.xt@#__split_buffer_common.4bool?1?~:
        dd      @std@#__split_buffer_common.4bool?1?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.ppci?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.ppci?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.ppci?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.pc~ virtual
        [bits 32]
@.xt@#allocator.pc~:
        dd      @std@#allocator.pc~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.ppc#allocator.pc~~ virtual
        [bits 32]
@.xt@#__compressed_pair.ppc#allocator.pc~~:
        dd      @std@#__compressed_pair.ppc#allocator.pc~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.ppci?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer.pc#allocator.pc~~ virtual
        [bits 32]
@.xt@#__split_buffer.pc#allocator.pc~~:
        dd      @std@#__split_buffer.pc#allocator.pc~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__split_buffer_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__deque_base_common.4bool?1?~ virtual
        [bits 32]
@.xt@#__deque_base_common.4bool?1?~:
        dd      @std@#__deque_base_common.4bool?1?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.ui#allocator.c~~ virtual
        [bits 32]
@.xt@#__compressed_pair.ui#allocator.c~~:
        dd      @std@#__compressed_pair.ui#allocator.c~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__deque_base.c#allocator.c~~ virtual
        [bits 32]
@.xt@#__deque_base.c#allocator.c~~:
        dd      @std@#__deque_base.c#allocator.c~~@.bdtr.qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@#__deque_base_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#shared_ptr.5Token~~ virtual
        [bits 32]
@.xt@#allocator.#shared_ptr.5Token~~:
        dd      @std@#allocator.#shared_ptr.5Token~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~:
        dd      @std@#__compressed_pair.p#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xt@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~:
        dd      @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xt@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~:
        dd      @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@embeder@GetEmbedFromLine.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0fffffc30h
        dd      0400h
        dd      @.xt@12embeder_info+0
        dd      0ffffff00h
        dd      0eh
        dd      07dh
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0fffffeech
        dd      010h
        dd      013h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff930h
        dd      016h
        dd      017h
        dd      0400h
        dd      @.xt@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0fffffed8h
        dd      015h
        dd      018h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff930h
        dd      016h
        dd      017h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffec4h
        dd      019h
        dd      07ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffeb0h
        dd      01ah
        dd      07bh
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff924h
        dd      04dh
        dd      04eh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe9ch
        dd      027h
        dd      07ah
        dd      0400h
        dd      @.xt@#TemplatedTokenizer.2kw~+0
        dd      0fffffe78h
        dd      029h
        dd      079h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe38h
        dd      02dh
        dd      078h
        dd      0400h
        dd      @.xt@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~+0
        dd      0fffffe24h
        dd      02fh
        dd      077h
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffdf8h
        dd      030h
        dd      069h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffcd8h
        dd      032h
        dd      034h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffcc0h
        dd      035h
        dd      037h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffcach
        dd      036h
        dd      039h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffd30h
        dd      03ch
        dd      04ah
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffd28h
        dd      03fh
        dd      040h
        dd      0400h
        dd      @.xt@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~+0
        dd      0fffffcech
        dd      042h
        dd      045h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff8f4h
        dd      053h
        dd      054h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd14h
        dd      046h
        dd      048h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd00h
        dd      047h
        dd      049h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd48h
        dd      04bh
        dd      050h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd34h
        dd      04ch
        dd      04fh
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff924h
        dd      04dh
        dd      04eh
        dd      0400h
        dd      @.xt@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~+0
        dd      0fffffd5ch
        dd      052h
        dd      055h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0fffff8f4h
        dd      053h
        dd      054h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd84h
        dd      056h
        dd      058h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd70h
        dd      057h
        dd      059h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffd98h
        dd      05bh
        dd      05ch
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffdc0h
        dd      05dh
        dd      05fh
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffdach
        dd      05eh
        dd      060h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffdd4h
        dd      062h
        dd      063h
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffde8h
        dd      064h
        dd      068h
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffff8cch
        dd      065h
        dd      067h
        dd      00h
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffdch
L_51610:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        mov     dword [eax],ecx
L_51646:
L_51611:
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
L_51652:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_51653:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&) const 
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff14h
        push    ebx
        push    esi
        push    edi
L_51660:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d0h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2489:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 014h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0d8h],eax
        and     eax,eax
        je      L_51743
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        jmp     L_51744
L_51743:
        mov     eax,dword [ebp-0d8h]
L_51744:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        mov     ecx,dword [ebp-0d4h]
        mov     eax,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_51822
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_51823
L_51822:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,ecx
L_51823:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_52048
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [edx+08h+04h]
        jmp     L_52049
L_52048:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     edx,ecx
L_52049:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_52244
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+04h+04h]
        jmp     L_52245
L_52244:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ecx+04h]
        shr     eax,01h
L_52245:
        add     eax,edx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ebx
        push    eax
        push    ebx
        mov     dword [ebp-0dch],00h
        lea     eax,[ebp-0dch]
        mov     dword [ebp-0e0h],eax
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_51775:
        mov     dword [ebp-0c0h],ebx
        mov     eax,dword [ebp-0d0h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0e4h],eax
        and     eax,eax
        je      L_52454
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 04h
        jmp     L_52455
L_52454:
        mov     eax,dword [ebp-0e4h]
L_52455:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
        and     ecx,ecx
        je      L_51663
; Line 2492:     { 
; Line 2493:         size_t __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0c0h]
        mov     dword [ebp-0cch],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_52507
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_52508
L_52507:
        cmp     eax,ecx
        jc      L_52510
L_52509:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_52510:
L_52508:
; Line 119: } 
        mov     dword [ebp-0c4h],eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0d0h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_51667
; Line 2496:         { 
; Line 2497:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     edi,dword [eax]
        and     edi,edi
        je      L_51673
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     ecx,dword [edi+04h]
; Line 88:     } 
        cmp     dword [ebp-0c0h],ecx
        je      L_52560
        mov     ebx,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,esi
        mov     dword [ebp-0c8h],ecx
        and     ecx,ecx
        jne     L_52608
        mov     ecx,esi
        dec     ecx
        and     eax,ecx
        jmp     L_52609
L_52608:
        cmp     eax,edx
        jc      L_52611
L_52610:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_52611:
L_52609:
; Line 119: } 
        cmp     eax,ebx
        jne     L_51673
L_52560:
L_51671:
; Line 2501:             { 
; Line 2502:                 if ((__nd->__hash() == __hash) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        jne     L_51679
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 01ch
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0e8h],eax
        and     eax,eax
        je      L_52674
        mov     eax,dword [ebp-0e8h]
        add     eax,byte 04h
        jmp     L_52675
L_52674:
        mov     eax,dword [ebp-0e8h]
L_52675:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        mov     eax,edi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-0d4h]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_51679
        mov     eax,edi
        mov     dword [ebp-04ch+014h],01h
        jmp     L_51661
L_51679:
; Line 2509:             } 
L_51674:
        mov     edi,dword [edi]
L_51672:
        and     edi,edi
        je      L_52825
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     ecx,dword [edi+04h]
; Line 88:     } 
        cmp     dword [ebp-0c0h],ecx
        je      L_51671
        mov     esi,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,ebx
        jne     L_52873
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_52874
L_52873:
        cmp     eax,edx
        jc      L_52876
L_52875:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_52876:
L_52874:
; Line 119: } 
        cmp     eax,esi
        je      L_51671
L_52825:
L_51673:
; Line 2510:         } 
L_51667:
; Line 2512:     } 
L_51663:
        mov     eax,dword [ebp-0d0h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end() const 
        mov     dword [ebp-0ech],eax
        add     esp,byte 04h
        mov     eax,dword [ebp-0ech]
        mov     dword [ebp-04ch+014h],02h
; Line 2514: } 
L_51661:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.xqrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@push_back.qR#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::push_back(variant<shared_ptr<Token>, unsigned long long>&&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@push_back.qR#variant.#shared_ptr.n0~uL~:
        add     esp,byte 0ffffffdch
        push    ebx
L_52897:
        mov     ecx,dword [esp+08h+028h]
        mov     eax,dword [esp+04h+028h]
; Line 1650:     if (this->__end_ < this->__end_cap()) 
        mov     edx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx+0ch]
        cmp     dword [eax+08h],ebx
        jge     L_52900
; Line 1651:     { 
; Line 1652:         __construct_one_at_end(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_one_at_end<variant<shared_ptr<Token>, unsigned long long>>(variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 08h
; Line 1653:     } 
        jmp     L_52905
L_52900:
; Line 1654:     else 
; Line 1655:         __push_back_slow_path(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__push_back_slow_path<variant<shared_ptr<Token>, unsigned long long>>(variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 08h
L_52905:
; Line 1656: } 
L_52898:
        pop     ebx
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?0?r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~ virtual
        [bits 32]
; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base<unsigned int=0, shared_ptr<bool>&, >(in_place_index_t<unsigned int=0>, shared_ptr<bool>&)
@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?0?r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~:
; Line 682:   template <size_t _Ip, class... _Args> 
        push    ecx
        push    ebx
L_52995:
        mov     eax,dword [esp+0ch+08h]
        mov     ebx,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?0?~]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~ ; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union<shared_ptr<bool>&, >(in_place_index_t<unsigned int=0>, shared_ptr<bool>&)
        add     esp,byte 0ch
        mov     dword [ebx+08h],00h
L_53029:
        mov     eax,ebx
L_52996:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_assignment()
@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv:
L_53035:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv ; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::~__constructor()
        add     esp,byte 04h
L_53075:
L_53062:
L_53049:
L_53036:
        ret
section code
section code
        section vsc@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::~__hash_const_iterator()
@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv:
L_53083:
L_53084:
        ret
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::~__hash_map_const_iterator()
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv:
L_53089:
L_53103:
L_53090:
        ret
section code
section code
        section vsc@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::~__union()
@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bdtr.qv:
L_53109:
L_53110:
        ret
section code
section code
        section vsc@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::~__base()
@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bdtr.qv:
L_53117:
L_53133:
L_53118:
        ret
section code
section code
        section vsc@std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__destructor()
@std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv:
L_53139:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
L_53171:
L_53156:
L_53140:
        ret
section code
section code
        section vsc@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::~__constructor()
@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv:
L_53178:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
L_53222:
L_53207:
L_53194:
L_53179:
        ret
section code
section code
        section vsc@std@__variant_detail@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_constructor()
@std@__variant_detail@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv:
L_53230:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
L_53287:
L_53272:
L_53259:
L_53244:
L_53231:
        ret
section code
section code
        section vsc@std@__variant_detail@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__copy_constructor()
@std@__variant_detail@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv:
        push    ebx
L_53296:
        mov     ebx,dword [esp+04h+04h]
        push    ebx
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        push    ebx
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bdtr.qv ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::~__base()
        add     esp,byte 04h
L_53338:
L_53323:
L_53310:
L_53297:
        pop     ebx
        ret
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::~__assignment()
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv:
        push    ebx
L_53346:
        mov     ebx,dword [esp+04h+04h]
        push    ebx
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        push    ebx
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bdtr.qv ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::~__base()
        add     esp,byte 04h
L_53401:
L_53386:
L_53373:
L_53360:
L_53347:
        pop     ebx
        ret
section code
section code
        section vsc@std@__variant_detail@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__copy_assignment()
@std@__variant_detail@#__copy_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv:
L_53410:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__move_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv ; std::__variant_detail::__move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_constructor()
        add     esp,byte 04h
L_53450:
L_53437:
L_53424:
L_53411:
        ret
section code
section code
        section vsc@std@__variant_detail@#__impl.#shared_ptr.5Token~uL~@.bdtr.qv virtual
        [bits 32]
; std::__variant_detail::__impl<shared_ptr<Token>, unsigned long long>::~__impl()
@std@__variant_detail@#__impl.#shared_ptr.5Token~uL~@.bdtr.qv:
L_53458:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__variant_detail@#__copy_constructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv ; std::__variant_detail::__copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__copy_constructor()
        add     esp,byte 04h
L_53498:
L_53485:
L_53472:
L_53459:
        ret
section code
section code
        section vsc@std@#variant.#shared_ptr.5Token~uL~@.bdtr.qv virtual
        [bits 32]
; std::variant<shared_ptr<Token>, unsigned long long>::~variant()
@std@#variant.#shared_ptr.5Token~uL~@.bdtr.qv:
L_53506:
        mov     eax,dword [esp+04h]
        add     eax,byte 08h
        push    eax
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@.bdtr.qv ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::~__assignment()
        add     esp,byte 04h
L_53546:
L_53533:
L_53520:
L_53562:
L_53576:
L_53507:
        ret
section code
section code
        section vsc@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL virtual
        [bits 32]
; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base<unsigned int=1, unsigned long long&, >(in_place_index_t<unsigned int=1>, unsigned long long&)
@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL:
; Line 682:   template <size_t _Ip, class... _Args> 
        push    ecx
        push    ebx
L_53582:
        mov     eax,dword [esp+0ch+08h]
        mov     ebx,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?1?~]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL ; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union<unsigned int=1, unsigned long long&, >(in_place_index_t<unsigned int=1>, unsigned long long&)
        add     esp,byte 0ch
        mov     dword [ebx+08h],01h
L_53616:
        mov     eax,ebx
L_53583:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#char_traits.c~@length.qpxc virtual
        [bits 32]
; std::char_traits<char>::length(char const *)
@std@#char_traits.c~@length.qpxc:
L_53622:
        mov     eax,dword [esp+04h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
L_53623:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag:
        push    ebx
L_53630:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep()
        add     esp,byte 04h
L_53648:
        mov     eax,ebx
L_53631:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_53654:
        mov     eax,dword [esp+04h]
L_53690:
L_53655:
        ret
section code
section code
        section vsc@std@#char_traits.c~@assign.qrcrxc virtual
        [bits 32]
; std::char_traits<char>::assign(char&,  const char&)
@std@#char_traits.c~@assign.qrcrxc:
L_53696:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     cl,byte [ecx]
        mov     byte [eax],cl
L_53697:
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qR#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string(basic_string<char, char_traits<char>, allocator<char>>&&)
@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qR#basic_string.c#char_traits.c~#allocator.c~~:
; Line 1871: { 
        add     esp,byte 0ffffffech
        push    ebx
        push    esi
L_53704:
        mov     esi,dword [esp+08h+01ch]
        mov     ebx,dword [esp+04h+01ch]
        mov     eax,ebx
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,esi
        add     ecx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     eax,ebx
L_53705:
        pop     esi
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#allocator.c~@.bctr.qR#allocator.c~ virtual
        [bits 32]
; std::allocator<char>::allocator(allocator<char>&&)
@std@#allocator.c~@.bctr.qR#allocator.c~:
L_53794:
        mov     eax,dword [esp+04h]
L_53795:
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
@std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv:
L_53802:
        mov     eax,dword [esp+04h]
; Line 1519:             size_type (&__a)[__n_words] = __r_.first().__r.__words; 
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edx,eax
; Line 1520:             for (unsigned __i = 0; __i < __n_words; ++__i) 
        xor     eax,eax
        cmp     eax,byte 03h
        jnc     L_53807
L_53805:
; Line 1521:                 __a[__i] = 0; 
        mov     ecx,eax
        mov     dword [edx+eax*4],00h
L_53808:
        mov     eax,ecx
        inc     eax
L_53806:
        cmp     eax,byte 03h
        jc      L_53805
L_53807:
; Line 1522:         } 
L_53803:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bdtr.qv:
L_53852:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::~__rep()
        add     esp,byte 04h
L_53853:
        ret
section code
section code
        section vsc@std@#allocator.c~@.bdtr.qv virtual
        [bits 32]
; std::allocator<char>::~allocator()
@std@#allocator.c~@.bdtr.qv:
L_53858:
L_53859:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bdtr.qv:
L_53864:
L_53878:
L_53865:
        ret
section code
section code
        section vsc@std@#__compressed_pair.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep#allocator.c~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, allocator<char>>::~__compressed_pair()
@std@#__compressed_pair.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep#allocator.c~~@.bdtr.qv:
L_53884:
        mov     eax,dword [esp+04h]
L_53911:
L_53898:
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::~__rep()
        add     esp,byte 04h
L_53926:
L_53885:
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@.bctr.q#initializer_list.uL~ virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::vector(initializer_list<unsigned long long>)
@std@#vector.uL#allocator.uL~~@.bctr.q#initializer_list.uL~:
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_53932:
        mov     ebx,dword [esp+04h+028h]
        mov     esi,ebx
        mov     eax,ebx
        mov     dword [esi+04h],00h
        mov     dword [esi+08h],00h
        mov     ecx,eax
        add     ecx,byte 0ch
        xor     eax,eax
        mov     dword [esp-01ch+028h],eax
        lea     edx,[esp-01ch+028h]
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [esi+0ch],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_54092:
; Line 438: } 
; Line 1329:     __get_db()->__insert_c(this); 
        mov     eax,dword [esp+08h+04h+028h]
        cmp     eax,byte 00h
        jbe     L_53937
; Line 1332:     { 
; Line 1333:         __vallocate(__il.size()); 
        mov     eax,dword [esp+08h+04h+028h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.uL#allocator.uL~~@__vallocate.qui ; std::vector<unsigned long long, allocator<unsigned long long>>::__vallocate(unsigned int)
        add     esp,byte 08h
; Line 1334:         __construct_at_end(__il.begin(), __il.end(), __il.size()); 
        mov     eax,dword [esp+08h+04h+028h]
        push    eax
        mov     ecx,dword [esp+08h+02ch]
        mov     eax,dword [esp+08h+04h+02ch]
        shl     eax,03h
        add     eax,ecx
        push    eax
        mov     eax,dword [esp+08h+030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui ; std::vector<unsigned long long, allocator<unsigned long long>>::__construct_at_end<unsigned long long const *>(unsigned long long const *, unsigned long long const *, unsigned int)
        add     esp,byte 010h
; Line 1335:     } 
L_53937:
; Line 1336: } 
L_54187:
        mov     eax,ebx
L_53933:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~:
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_54193:
        mov     ebx,dword [esp+04h+028h]
        mov     esi,ebx
        mov     eax,ebx
        mov     dword [esi+04h],00h
        mov     dword [esi+08h],00h
        mov     ecx,eax
        add     ecx,byte 0ch
        xor     eax,eax
        mov     dword [esp-01ch+028h],eax
        lea     edx,[esp-01ch+028h]
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [esi+0ch],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_54353:
; Line 438: } 
; Line 1329:     __get_db()->__insert_c(this); 
        mov     eax,dword [esp+08h+04h+028h]
        cmp     eax,byte 00h
        jbe     L_54198
; Line 1332:     { 
; Line 1333:         __vallocate(__il.size()); 
        mov     eax,dword [esp+08h+04h+028h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vallocate.qui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__vallocate(unsigned int)
        add     esp,byte 08h
; Line 1334:         __construct_at_end(__il.begin(), __il.end(), __il.size()); 
        mov     eax,dword [esp+08h+04h+028h]
        push    eax
        mov     ecx,dword [esp+08h+02ch]
        mov     eax,dword [esp+08h+04h+02ch]
        imul    eax,byte 018h
        add     eax,ecx
        push    eax
        mov     eax,dword [esp+08h+030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<variant<shared_ptr<Token>, unsigned long long> const *>(variant<shared_ptr<Token>, unsigned long long> const *, variant<shared_ptr<Token>, unsigned long long> const *, unsigned int)
        add     esp,byte 010h
; Line 1335:     } 
L_54198:
; Line 1336: } 
L_54448:
        mov     eax,ebx
L_54194:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@embeder_info@.bctr.qrx12embeder_info virtual
        [bits 32]
; embeder_info::embeder_info( const embeder_info&)
@embeder_info@.bctr.qrx12embeder_info:
        add     esp,byte 0fffffff0h
        push    ebx
        push    esi
        push    edi
L_54454:
        mov     esi,dword [esp+04h+01ch]
        mov     edi,dword [esp+08h+01ch]
        mov     ebx,dword [esp+04h+01ch]
        mov     eax,edi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     eax,dword [edi+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[esp+00h+01ch]
        mov     dword [esp-08h+01ch],eax
        mov     dword [esp-08h+04h+01ch],00h
        push    dword [esp-08h+04h+01ch]
        push    dword [esp-08h+020h]
        mov     eax,esi
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        lea     eax,[esp+00h+01ch]
        mov     dword [esp-010h+01ch],eax
        mov     dword [esp-010h+04h+01ch],00h
        push    dword [esp-010h+04h+01ch]
        push    dword [esp-010h+020h]
        mov     eax,esi
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     ecx,edi
        mov     al,byte [edi+040h]
        mov     byte [ebx+040h],al
        mov     eax,dword [edi+048h]
        mov     edx,dword [edi+048h+04h]
        mov     dword [ebx+048h],eax
        mov     dword [ebx+048h+04h],edx
        mov     eax,dword [edi+050h]
        mov     dword [ebx+050h],eax
        mov     eax,dword [edi+054h]
        mov     dword [ebx+054h],eax
        mov     eax,ecx
        add     eax,byte 058h
        push    eax
        mov     eax,ebx
        add     eax,byte 058h
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::unordered_map( const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&)
        add     esp,byte 08h
        mov     eax,ebx
L_54455:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~ virtual
        [bits 32]
; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::tuple(tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>&&)
@std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.qR#tuple.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~:
        push    ebx
        push    esi
        push    edi
L_54462:
        mov     edi,dword [esp+08h+0ch]
        mov     ebx,dword [esp+04h+0ch]
        mov     esi,ebx
        mov     eax,ebx
        mov     ecx,edi
        push    ecx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qR#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&&)
        add     esp,byte 08h
        mov     eax,dword [edi+014h]
        mov     dword [esi+014h],eax
        mov     eax,ebx
L_54463:
        pop     edi
        pop     esi
        pop     ebx
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1 virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::__tuple_impl<..., unsigned int=0, unsigned int=1, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue, ..., ..., _Tl,  const vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>&,  const EmbedReturnValue&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<vector<variant<shared_ptr<_Tl>, unsigned long long>, allocator<variant<shared_ptr<_Tl>, unsigned long long>>>, EmbedReturnValue>, __tuple_indices<...>, __tuple_types<..._Tp>,  const vector<variant<shared_ptr<_Tp>, unsigned long long>, allocator<variant<shared_ptr<_Tp>, unsigned long long>>>&,  const EmbedReturnValue&)
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bctr.eui?0?ui?1?#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1ee3_Tlrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~n1~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~rxn1:
; Line 390:             {} 
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
L_54518:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        mov     esi,dword [esp+01ch+020h]
        mov     eax,dword [esp+018h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ecx
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector( const vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 232:             : __value_(_VSTD::forward<_Tp>(__t)) 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [esi]
        mov     dword [ebx+014h],eax
L_54636:
L_54650:
L_54664:
L_54678:
        mov     eax,ebx
L_54519:
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv virtual
        [bits 32]
; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_54684:
        mov     eax,dword [esp+04h+060h]
        mov     dword [esp-048h+060h],eax
; Line 461:     if (__begin_ != nullptr) 
        mov     eax,dword [esp-048h+060h]
        cmp     dword [eax+04h],byte 00h
        je      L_54687
; Line 462:     { 
; Line 463:         clear(); 
        mov     eax,dword [esp-048h+060h]
        mov     ebp,eax
        mov     esi,dword [eax+04h]
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     edi,dword [ebp+08h]
        mov     ecx,edi
        mov     eax,esi
        mov     ebx,ebp
        add     ebx,byte 0ch
        cmp     eax,ecx
        je      L_54713
L_54712:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     edi,byte 018h
        mov     eax,edi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-04ch+064h],ebx
        and     ebx,ebx
        je      L_54779
        mov     eax,dword [esp-04ch+064h]
        add     eax,byte 04h
        jmp     L_54780
L_54779:
        mov     eax,dword [esp-04ch+064h]
L_54780:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::destroy<variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 08h
L_54714:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     esi,edi
        jne     L_54712
L_54713:
; Line 427:     __end_ = __new_last; 
        mov     dword [ebp+08h],esi
; Line 428: } 
L_54731:
L_54709:
; Line 464:         __alloc_traits::deallocate(__alloc(), __begin_, capacity()); 
        mov     eax,dword [esp-048h+060h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-050h+060h],eax
        and     eax,eax
        je      L_54830
        mov     eax,dword [esp-050h+060h]
        add     eax,byte 04h
        jmp     L_54831
L_54830:
        mov     eax,dword [esp-050h+060h]
L_54831:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [esp-048h+060h]
        mov     eax,dword [eax+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_54926:
L_54911:
L_54798:
; Line 465:     } 
L_54687:
; Line 466: } 
L_55016:
L_55003:
L_55031:
L_54990:
        mov     eax,dword [esp-048h+060h]
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@.bdtr.qv ; std::__vector_base_common<bool=1>::~__vector_base_common()
        add     esp,byte 04h
L_54685:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#__vector_base.uL#allocator.uL~~@.bdtr.qv virtual
        [bits 32]
; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
@std@#__vector_base.uL#allocator.uL~~@.bdtr.qv:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_55038:
        mov     eax,dword [esp+04h+060h]
        mov     dword [esp-048h+060h],eax
; Line 461:     if (__begin_ != nullptr) 
        mov     eax,dword [esp-048h+060h]
        cmp     dword [eax+04h],byte 00h
        je      L_55041
; Line 462:     { 
; Line 463:         clear(); 
        mov     eax,dword [esp-048h+060h]
        mov     ebp,eax
        mov     esi,dword [eax+04h]
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     edi,dword [ebp+08h]
        mov     ecx,edi
        mov     eax,esi
        mov     ebx,ebp
        add     ebx,byte 0ch
        cmp     eax,ecx
        je      L_55067
L_55066:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     edi,byte 08h
        mov     eax,edi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-04ch+064h],ebx
        and     ebx,ebx
        je      L_55133
        mov     eax,dword [esp-04ch+064h]
        add     eax,byte 04h
        jmp     L_55134
L_55133:
        mov     eax,dword [esp-04ch+064h]
L_55134:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL ; std::allocator_traits<allocator<unsigned long long>>::destroy<unsigned long long>(allocator<unsigned long long>&, unsigned long long*)
        add     esp,byte 08h
L_55068:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     esi,edi
        jne     L_55066
L_55067:
; Line 427:     __end_ = __new_last; 
        mov     dword [ebp+08h],esi
; Line 428: } 
L_55085:
L_55063:
; Line 464:         __alloc_traits::deallocate(__alloc(), __begin_, capacity()); 
        mov     eax,dword [esp-048h+060h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-050h+060h],eax
        and     eax,eax
        je      L_55184
        mov     eax,dword [esp-050h+060h]
        add     eax,byte 04h
        jmp     L_55185
L_55184:
        mov     eax,dword [esp-050h+060h]
L_55185:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [esp-048h+060h]
        mov     eax,dword [eax+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_55280:
L_55265:
L_55152:
; Line 465:     } 
L_55041:
; Line 466: } 
L_55370:
L_55357:
L_55385:
L_55344:
        mov     eax,dword [esp-048h+060h]
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@.bdtr.qv ; std::__vector_base_common<bool=1>::~__vector_base_common()
        add     esp,byte 04h
L_55039:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_55392:
        mov     ebx,dword [esp+04h+050h]
; Line 1535:     static_assert((is_copy_constructible<key_equal>::value), 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+0ch]
        push    ecx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__deallocate_node(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*)
        add     esp,byte 08h
; Line 1543:     __get_db()->__erase_c(this); 
        mov     eax,ebx
        add     eax,dword 01ch+04h
        push    eax
        call    @std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv ; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::~equal_to()
        add     esp,byte 04h
L_55466:
L_55453:
L_55481:
L_55440:
        mov     eax,ebx
        add     eax,dword 014h+04h
        push    eax
        call    @std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv ; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::~hash()
        add     esp,byte 04h
L_55522:
L_55509:
L_55537:
L_55496:
L_55578:
L_55565:
L_55606:
L_55593:
L_55552:
        mov     ecx,ebx
; Line 2848:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     esi,dword [ebx]
; Line 2849:     __ptr_.first() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
        and     esi,esi
        je      L_55627
; Line 2851:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+050h],eax
        and     eax,eax
        je      L_55740
        mov     eax,dword [esp-044h+050h]
        add     eax,byte 04h
        jmp     L_55741
L_55740:
        mov     eax,dword [esp-044h+050h]
L_55741:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 809:         __alloc_traits::deallocate(__alloc(), __p, size()); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+050h],eax
        and     eax,eax
        je      L_55788
        mov     eax,dword [esp-048h+050h]
        add     eax,byte 04h
        jmp     L_55789
L_55788:
        mov     eax,dword [esp-048h+050h]
L_55789:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_55868:
L_55853:
L_55756:
; Line 810:     } 
L_55723:
        mov     ecx,ebx
L_55627:
; Line 2852:   } 
L_55644:
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv ; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::~__bucket_list_deallocator()
        add     esp,byte 04h
L_55947:
L_55961:
L_55934:
L_55624:
L_55393:
        pop     esi
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bctr.pn0v~.qRpn0 virtual
        [bits 32]
; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::__compressed_pair_elem<bool*, void, >(bool*&&)
@std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bctr.pn0v~.qRpn0:
        push    ecx
L_55969:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2206:     } 
L_55970:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_55995:
        mov     eax,dword [esp+04h]
L_56029:
L_55996:
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ecx
        push    ebx
        push    esi
L_56035:
        mov     ebx,dword [esp+04h+0ch]
        mov     ecx,dword [esp+0ch+0ch]
        mov     eax,dword [esp+08h+0ch]
        add     esp,byte 0fffffffch
        mov     esi,esp
        push    ecx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [esp-04h+018h],eax
        add     esp,byte 08h
        lea     eax,[esp-04h+010h]
        push    eax
        push    esi
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        push    ebx
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     eax,dword [esp+04h+0ch]
L_56036:
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.9nullptr_t~.qpxc virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string<nullptr_t, >(char const *)
@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.9nullptr_t~.qpxc:
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_56043:
        mov     esi,dword [esp+08h+02ch]
        mov     ebx,dword [esp+04h+02ch]
        mov     eax,ebx
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [esp-04h+02ch],00h
        lea     eax,[esp-04h+02ch]
        mov     dword [esp-08h+02ch],00h
        lea     ebp,[esp-08h+02ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_56143:
L_56157:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,esi
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    esi
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     eax,ebx
L_56044:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        add     esp,byte 0ffffffdch
L_56179:
        mov     ecx,dword [esp+08h+024h]
        mov     eax,dword [esp+04h+024h]
        mov     dword [eax],ecx
L_56215:
L_56180:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
L_56221:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_56222:
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator [](basic_string<char, char_traits<char>, allocator<char>>&&)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff34h
        push    ebx
        push    esi
L_56229:
        mov     esi,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-098h],eax
        mov     dword [ebp-098h+04h],___cppexceptionhandle
        mov     dword [ebp-098h+08h],esp
        mov     dword [ebp-098h+0ch],ebp
        mov     dword [ebp-098h+010h],@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-098h+014h],00h
        lea     eax,[ebp-098h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1642:     return __table_.__emplace_unique_key_args(__k, 
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        mov     dword [ebp-0bch],eax
; Line 1149: } 
        lea     eax,[ebp-08h]
        push    eax
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
        lea     ecx,[ebp-04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-0c0h],00h
        lea     eax,[ebp-0c0h]
        push    dword [eax]
        mov     dword [ebp-0c4h],00h
        lea     eax,[ebp-0c4h]
        push    dword [eax]
        mov     dword [ebp-0c8h],00h
        lea     eax,[ebp-0c8h]
        push    dword [eax]
        mov     dword [ebp-0cch],00h
        lea     eax,[ebp-0cch]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?R#basic_string.c#char_traits.c~#allocator.c~~ee3_Tl#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.R#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#basic_string.c#char_traits.c~#allocator.c~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&&>::__tuple_impl<..., unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>, >(__tuple_indices<...unsigned int=0>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&&)
L_56439:
L_56453:
L_56467:
L_56481:
        add     esp,byte 018h
        mov     dword [ebp-098h+014h],01h
; Line 1149: } 
        lea     eax,[ebp-04h]
        mov     dword [ebp-098h+014h],02h
        push    eax
        push    dword @std@piecewise_construct
        push    esi
        push    ebx
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const &, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
        mov     dword [ebp-098h+014h],03h
L_56523:
L_56510:
L_56497:
L_56539:
        add     esp,byte 018h
; Line 337:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container iterator"); 
        mov     eax,dword [eax]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 339:     } 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
        add     eax,byte 014h
L_56696:
L_56683:
; Line 1645: } 
L_56724:
L_56711:
L_56230:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qR#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff68h
        dd      0400h
        dd      @.xt@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end()
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_56731:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1816:     return iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-04ch+014h],01h
; Line 1820: } 
L_56732:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc virtual
        [bits 32]
; std::operator ==<char, char_traits<char>, allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&, char const *)
@std@#.bequ.c#char_traits.c~#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~pxc:
; Line 3892: inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ebx
        push    esi
L_56759:
        mov     ebx,dword [esp+08h+0ch]
        mov     esi,dword [esp+04h+0ch]
; Line 3897:     typedef basic_string<_CharT, _Traits, _Allocator> _String; 
; Line 3898:     _LIBCPP_ASSERT(__rhs != nullptr, "operator==(basic_string, char*): received nullptr"); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        mov     edx,esi
        mov     ecx,esi
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_56800
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ecx+04h+04h]
        jmp     L_56801
L_56800:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
        mov     edx,ecx
L_56801:
        cmp     eax,edx
        je      L_56762
        xor     al,al
        jmp     L_56760
L_56762:
        push    eax
        push    ebx
        push    dword 0ffffffffh
        push    byte 00h
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@compare.xquiuipxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::compare(unsigned int, unsigned int, char const *, unsigned int) const 
        add     esp,byte 014h
        and     eax,eax
        sete    al
        and     eax,byte 01h
; Line 3902: } 
L_56760:
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::insert<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff30h
        push    ebx
        push    esi
        push    edi
L_56950:
        mov     edx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0b4h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-064h],eax
        mov     dword [ebp-064h+04h],___cppexceptionhandle
        mov     dword [ebp-064h+08h],esp
        mov     dword [ebp-064h+0ch],ebp
        mov     dword [ebp-064h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~
        mov     dword [ebp-064h+014h],00h
        lea     eax,[ebp-064h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1977:     _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this, 
        mov     eax,dword [ebp-0b4h]
        mov     ecx,dword [ebp-0b4h]
        mov     ecx,dword [ecx+04h]
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [eax+04h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0cch],eax
; Line 1497: } 
        mov     eax,dword [ebp-0cch]
        mov     dword [ebp-0c8h],eax
; Line 1517: } 
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        mov     eax,dword [ebp-0c8h]
        sub     eax,edx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
; Line 1708: } 
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp-0b0h],eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        mov     dword [ebp-064h+014h],01h
        call    @std@#distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::distance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        mov     esi,eax
        add     esp,byte 08h
        and     esi,esi
        jle     L_56953
; Line 1984:     { 
; Line 1985:         if (__n <= this->__end_cap() - this->__end_) 
        mov     eax,dword [ebp-0b4h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-0b4h]
        mov     ecx,dword [ecx+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        imul    eax,dword 0aaaaaaabh
        mov     ecx,eax
        sar     ecx,03h
        cmp     esi,ecx
        jg      L_56957
; Line 1986:         { 
; Line 1987:             size_type __old_n = __n; 
        mov     ecx,esi
        mov     eax,esi
        mov     dword [ebp-0ach],ecx
        mov     dword [ebp-0a8h],eax
        mov     eax,dword [ebp-0b4h]
        mov     eax,dword [eax+08h]
        mov     dword [ebp-0a4h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-040h],eax
        mov     eax,dword [ebp-0b0h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     dword [ebp-0a0h],eax
        cmp     esi,dword [ebp-0a0h]
        jle     L_56961
; Line 1992:             { 
; Line 1993:                 __m = __first; 
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-040h],eax
        mov     eax,dword [ebp-0b0h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        mov     ebx,eax
        sar     ebx,03h
; Line 1995:                 _VSTD::advance(__m, __diff); 
        mov     esi,ebx
; Line 672:     _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,                         "Attempt to advance(it, -n) on a non-bidi iterator"); 
; Line 673:     __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [ebp-0b8h],00h
        lea     edi,[ebp-0b8h]
        push    edi
        call    @std@forward_iterator_tag@.bctr.qv ; std::forward_iterator_tag::forward_iterator_tag()
        add     esp,byte 04h
        push    dword [edi]
        push    esi
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__advance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.qr#__wrap_iter.p#variant.#shared_ptr.n0~uL~~i31@std@random_access_iterator_tag ; std::__advance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, int, std::random_access_iterator_tag)
        lea     eax,[ebp-0b8h]
        push    eax
        call    @std@forward_iterator_tag@.bdtr.qv ; std::forward_iterator_tag::~forward_iterator_tag()
        add     esp,byte 04h
L_57253:
L_57240:
        add     esp,byte 0ch
; Line 674: } 
L_57195:
; Line 1996:                 __construct_at_end(__m, __last, __n - __diff); 
        mov     eax,dword [ebp-0ach]
        sub     eax,ebx
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-040h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        mov     eax,dword [ebp-0b4h]
        push    eax
        mov     dword [ebp-064h+014h],02h
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, unsigned int)
        add     esp,byte 010h
; Line 1997:                 __n = __dx; 
        mov     esi,dword [ebp-0a0h]
; Line 1998:             } 
L_56961:
        and     esi,esi
        jle     L_56968
; Line 2000:             { 
; Line 2001:                 __move_range(__p, __old_last, __p + __old_n); 
        mov     ecx,dword [ebp-0b0h]
        mov     eax,dword [ebp-0a8h]
        imul    eax,byte 018h
        add     eax,ecx
        push    eax
        mov     eax,dword [ebp-0a4h]
        push    eax
        push    ecx
        mov     eax,dword [ebp-0b4h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_range(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 010h
; Line 2002:                 _VSTD::copy(__first, __m, __p); 
        mov     eax,dword [ebp-0b0h]
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-040h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        mov     dword [ebp-064h+014h],03h
        call    @std@#copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::copy<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
; Line 2003:             } 
L_56968:
; Line 2004:         } 
L_57269:
        jmp     L_56976
L_56957:
; Line 2005:         else 
; Line 2006:         { 
; Line 2007:             allocator_type& __a = this->__alloc(); 
        mov     eax,dword [ebp-0b4h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0bch],eax
        and     eax,eax
        je      L_57302
        mov     eax,dword [ebp-0bch]
        add     eax,byte 04h
        jmp     L_57303
L_57302:
        mov     eax,dword [ebp-0bch]
L_57303:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,dword [ebp-0b0h]
        mov     ebx,dword [ebp-0b4h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+04h]
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        push    eax
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        add     eax,esi
        mov     dword [ebp-07ch],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    ebx
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::max_size() const 
        mov     esi,eax
        add     esp,byte 04h
        mov     eax,esi
        cmp     dword [ebp-07ch],eax
        jbe     L_57307
; Line 1027:         this->__throw_length_error(); 
        push    ebx
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_57307:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+0ch]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     ecx,esi
        shr     ecx,01h
        cmp     eax,ecx
        jnc     L_57329
L_57312:
        shl     eax,01h
        mov     dword [ebp-0c0h],eax
        lea     eax,[ebp-0c0h]
        lea     ecx,[ebp-07ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0c4h],00h
        lea     edx,[ebp-0c4h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_57469:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
; Line 1032: } 
L_57329:
        push    esi
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.quiuir#allocator.#variant.#shared_ptr.n0~uL~~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__split_buffer(unsigned int, unsigned int, allocator<variant<shared_ptr<Token>, unsigned long long>>&)
        add     esp,byte 010h
        mov     dword [ebp-064h+014h],04h
; Line 2009:             __v.__construct_at_end(__first, __last); 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        lea     eax,[ebp-03ch]
        push    eax
        mov     dword [ebp-064h+014h],05h
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__construct_at_end<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        add     esp,byte 0ch
; Line 2010:             __p = __swap_out_circular_buffer(__v, __p); 
        mov     eax,dword [ebp-0b0h]
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        mov     eax,dword [ebp-0b4h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~p#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__swap_out_circular_buffer(__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>&, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
        mov     dword [ebp-0b0h],eax
; Line 2011:         } 
        mov     dword [ebp-064h+014h],06h
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::~__split_buffer()
        add     esp,byte 04h
L_56976:
; Line 2012:     } 
L_56953:
        mov     eax,dword [ebp-0b0h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0d0h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0d0h]
L_57535:
L_57549:
L_57563:
; Line 2014: } 
L_57577:
L_57591:
L_57605:
L_56951:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      @std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xt@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__split_buffer_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      0ffffff9ch
        dd      0400h
        dd      @.xt@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ffffffc4h
        dd      04h
        dd      06h
        dd      00h
section code
section code
        section vsc@std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
@std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
L_57611:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_57612:
        ret
section code
section code
        section vsc@std@#__wrap_iter.px#variant.#shared_ptr.5Token~uL~~@.bctr.p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~pv virtual
        [bits 32]
; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*, >( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, void*)
@std@#__wrap_iter.px#variant.#shared_ptr.5Token~uL~~@.bctr.p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~pv:
; Line 1429:             : __i(__u.base()) 
L_57619:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 1432:         __get_db()->__iterator_copy(this, &__u); 
L_57620:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_57645:
        mov     eax,dword [esp+04h]
L_57679:
L_57646:
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@resize.qui virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::resize(unsigned int)
@std@#vector.uL#allocator.uL~~@resize.qui:
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_57685:
        mov     ecx,dword [esp+08h+040h]
        mov     eax,dword [esp+04h+040h]
; Line 2020:     size_type __cs = size(); 
        mov     edx,eax
        mov     ebx,dword [edx+04h]
        mov     edx,dword [edx+08h]
        sub     edx,ebx
        sar     edx,03h
        cmp     edx,ecx
        jnc     L_57688
; Line 2022:         this->__append(__sz - __cs); 
        sub     ecx,edx
        push    ecx
        push    eax
        call    @std@#vector.uL#allocator.uL~~@__append.qui ; std::vector<unsigned long long, allocator<unsigned long long>>::__append(unsigned int)
        add     esp,byte 08h
        jmp     L_57691
L_57688:
; Line 2023:     else if (__cs > __sz) 
        cmp     edx,ecx
        jbe     L_57694
; Line 2024:         this->__destruct_at_end(this->__begin_ + __sz); 
        mov     ebp,eax
        mov     edx,dword [eax+04h]
        mov     eax,ecx
        shl     eax,03h
        add     eax,edx
; Line 831:         __invalidate_iterators_past(__new_last); 
; Line 2133:   __c_node* __c = __get_db()->__find_c_and_lock(this); 
; Line 2147: } 
L_57747:
; Line 833:         __base::__destruct_at_end(__new_last); 
        mov     edi,eax
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     eax,dword [ebp+08h]
        mov     ecx,ebp
        mov     esi,eax
        mov     edx,esi
        mov     eax,edi
        mov     ebx,ecx
        add     ebx,byte 0ch
        cmp     eax,edx
        je      L_57768
L_57767:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     esi,byte 08h
        mov     eax,esi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-030h+044h],ebx
        and     ebx,ebx
        je      L_57834
        mov     eax,dword [esp-030h+044h]
        add     eax,byte 04h
        jmp     L_57835
L_57834:
        mov     eax,dword [esp-030h+044h]
L_57835:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL ; std::allocator_traits<allocator<unsigned long long>>::destroy<unsigned long long>(allocator<unsigned long long>&, unsigned long long*)
        add     esp,byte 08h
L_57769:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     edi,esi
        jne     L_57767
L_57768:
; Line 427:     __end_ = __new_last; 
        mov     dword [ebp+08h],edi
; Line 428: } 
L_57786:
; Line 834:         __annotate_shrink(__old_size); 
; Line 891:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_57867:
; Line 893:     } 
L_57852:
; Line 835:     } 
L_57732:
L_57694:
L_57691:
; Line 2025: } 
L_57686:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@FileDeleter@.bcall.xqp8__file__ virtual
        [bits 32]
; FileDeleter::operator ()(__file__*) const 
@FileDeleter@.bcall.xqp8__file__:
; Line 60: struct FileDeleter { 
L_58099:
        mov     eax,dword [esp+08h]
; Line 62:         if (file) { 
        and     eax,eax
        je      L_58102
; Line 63:             if (fclose(file) != 0) { 
        push    eax
        call    _fclose ; fclose
        add     esp,byte 04h
; Line 65:             } 
L_58106:
; Line 66:         } 
L_58102:
; Line 67:     } 
L_58100:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv:
L_58121:
        mov     eax,dword [esp+04h]
L_58122:
        ret
section code
section code
        section vsc@FileDeleter@.bdtr.qv virtual
        [bits 32]
; FileDeleter::~FileDeleter()
@FileDeleter@.bdtr.qv:
L_58129:
L_58130:
        ret
section code
section code
        section vsc@std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0 virtual
        [bits 32]
; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::reset(Tokenizer*)
@std@#unique_ptr.9Tokenizer#default_delete.n0~~@reset.qpn0:
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_58135:
        mov     ecx,dword [esp+08h+010h]
        mov     eax,dword [esp+04h+010h]
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [eax]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax],ecx
        and     ebx,ebx
        je      L_58138
; Line 2618:       __ptr_.second()(__tmp); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08h+010h],eax
        and     eax,eax
        je      L_58239
        mov     eax,dword [esp-08h+010h]
        add     eax,byte 04h
        jmp     L_58240
L_58239:
        mov     eax,dword [esp-08h+010h]
L_58240:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-0ch+010h],ebx
        and     ebx,ebx
        je      L_58242
        mov     eax,dword [esp-0ch+010h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        add     esp,byte 04h
        mov     eax,dword [esp-0ch+010h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_58242:
; Line 2364:   } 
L_58222:
L_58138:
; Line 2619:   } 
L_58136:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@.bdtr.qv:
L_58247:
L_58261:
L_58248:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<Tokenizer*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p9Tokenizeri?0?4bool?0?~@.bdtr.qv:
L_58267:
L_58268:
        ret
section code
section code
        section vsc@std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bcall.xqr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
; std::function<(*)(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)>::operator ()(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&) const 
@std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bcall.xqr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        push    ecx
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_58273:
        mov     ebx,dword [esp+08h+014h]
        mov     esi,dword [esp+04h+014h]
; Line 2473:     return __f_(_VSTD::forward<_ArgTypes>(__arg)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1865:         if (__f_ == 0) 
        cmp     dword [esi+010h+08h],byte 00h
        jne     L_58279
; Line 1866:             __throw_bad_function_call(); 
        call    @std@__throw_bad_function_call.qv ; std::__throw_bad_function_call()
L_58279:
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        mov     eax,dword [esi+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+014h]
        add     esp,byte 08h
; Line 1868:     } 
; Line 2474: } 
L_58274:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@embeder_info@.bctr.qR12embeder_info virtual
        [bits 32]
; embeder_info::embeder_info(embeder_info&&)
@embeder_info@.bctr.qR12embeder_info:
        add     esp,byte 0ffffffa4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_58334:
        mov     eax,dword [esp+04h+06ch]
        mov     dword [esp-05ch+06ch],eax
        mov     ebp,dword [esp+08h+06ch]
        mov     ebx,dword [esp+04h+06ch]
        mov     esi,ebx
        mov     eax,ebp
        mov     dword [esp-058h+06ch],eax
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,dword [esp-058h+06ch]
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
; Line 1872:     __str.__zero(); 
        mov     eax,dword [esp-058h+06ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     eax,dword [ebp+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[esp+00h+06ch]
        mov     dword [esp-04ch+06ch],eax
        mov     dword [esp-04ch+04h+06ch],00h
        push    dword [esp-04ch+04h+06ch]
        push    dword [esp-04ch+070h]
        mov     eax,dword [esp-05ch+074h]
        add     eax,byte 018h
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        lea     eax,[esp+00h+06ch]
        mov     dword [esp-054h+06ch],eax
        mov     dword [esp-054h+04h+06ch],00h
        push    dword [esp-054h+04h+06ch]
        push    dword [esp-054h+070h]
        mov     eax,dword [esp-05ch+074h]
        add     eax,byte 02ch
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.q#initializer_list.#variant.#shared_ptr.n0~uL~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(initializer_list<variant<shared_ptr<Token>, unsigned long long>>)
        add     esp,byte 0ch
        mov     ecx,ebp
        mov     al,byte [ebp+040h]
        mov     byte [ebx+040h],al
        mov     eax,dword [ebp+048h]
        mov     edx,dword [ebp+048h+04h]
        mov     dword [ebx+048h],eax
        mov     dword [ebx+048h+04h],edx
        mov     eax,dword [ebp+050h]
        mov     dword [ebx+050h],eax
        mov     eax,dword [ebp+054h]
        mov     dword [ebx+054h],eax
        mov     edx,ebx
        add     edx,byte 058h
        mov     eax,ecx
        add     eax,byte 058h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    edx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qR#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table(__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&&)
        add     esp,byte 08h
; Line 1531:     __get_db()->__insert_c(this); 
        mov     eax,ebx
L_58335:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::insert<__wrap_iter<unsigned long long*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>, __wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff30h
        push    ebx
        push    esi
        push    edi
L_58458:
        mov     edx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0b4h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-064h],eax
        mov     dword [ebp-064h+04h],___cppexceptionhandle
        mov     dword [ebp-064h+08h],esp
        mov     dword [ebp-064h+0ch],ebp
        mov     dword [ebp-064h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~
        mov     dword [ebp-064h+014h],00h
        lea     eax,[ebp-064h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1977:     _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this, 
        mov     eax,dword [ebp-0b4h]
        mov     ecx,dword [ebp-0b4h]
        mov     ecx,dword [ecx+04h]
; Line 1516:     return __make_iter(this->__begin_); 
        mov     eax,dword [eax+04h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0cch],eax
; Line 1497: } 
        mov     eax,dword [ebp-0cch]
        mov     dword [ebp-0c8h],eax
; Line 1517: } 
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        mov     eax,dword [ebp-0c8h]
        sub     eax,edx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
; Line 1708: } 
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp-0b0h],eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        mov     dword [ebp-064h+014h],01h
        call    @std@#distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ ; std::distance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
        mov     esi,eax
        add     esp,byte 08h
        and     esi,esi
        jle     L_58461
; Line 1984:     { 
; Line 1985:         if (__n <= this->__end_cap() - this->__end_) 
        mov     eax,dword [ebp-0b4h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-0b4h]
        mov     ecx,dword [ecx+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        imul    eax,dword 0aaaaaaabh
        mov     ecx,eax
        sar     ecx,03h
        cmp     esi,ecx
        jg      L_58465
; Line 1986:         { 
; Line 1987:             size_type __old_n = __n; 
        mov     ecx,esi
        mov     eax,esi
        mov     dword [ebp-0ach],ecx
        mov     dword [ebp-0a8h],eax
        mov     eax,dword [ebp-0b4h]
        mov     eax,dword [eax+08h]
        mov     dword [ebp-0a4h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-040h],eax
        mov     eax,dword [ebp-0b0h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     dword [ebp-0a0h],eax
        cmp     esi,dword [ebp-0a0h]
        jle     L_58469
; Line 1992:             { 
; Line 1993:                 __m = __first; 
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-040h],eax
        mov     eax,dword [ebp-0b0h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        mov     ebx,eax
        sar     ebx,03h
; Line 1995:                 _VSTD::advance(__m, __diff); 
        mov     esi,ebx
; Line 672:     _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,                         "Attempt to advance(it, -n) on a non-bidi iterator"); 
; Line 673:     __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [ebp-0b8h],00h
        lea     edi,[ebp-0b8h]
        push    edi
        call    @std@forward_iterator_tag@.bctr.qv ; std::forward_iterator_tag::forward_iterator_tag()
        add     esp,byte 04h
        push    dword [edi]
        push    esi
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__advance.#__wrap_iter.puL~~.qr#__wrap_iter.puL~i31@std@random_access_iterator_tag ; std::__advance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>&, int, std::random_access_iterator_tag)
        lea     eax,[ebp-0b8h]
        push    eax
        call    @std@forward_iterator_tag@.bdtr.qv ; std::forward_iterator_tag::~forward_iterator_tag()
        add     esp,byte 04h
L_58761:
L_58748:
        add     esp,byte 0ch
; Line 674: } 
L_58703:
; Line 1996:                 __construct_at_end(__m, __last, __n - __diff); 
        mov     eax,dword [ebp-0ach]
        sub     eax,ebx
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-040h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        mov     eax,dword [ebp-0b4h]
        push    eax
        mov     dword [ebp-064h+014h],02h
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, unsigned int)
        add     esp,byte 010h
; Line 1997:                 __n = __dx; 
        mov     esi,dword [ebp-0a0h]
; Line 1998:             } 
L_58469:
        and     esi,esi
        jle     L_58476
; Line 2000:             { 
; Line 2001:                 __move_range(__p, __old_last, __p + __old_n); 
        mov     ecx,dword [ebp-0b0h]
        mov     eax,dword [ebp-0a8h]
        imul    eax,byte 018h
        add     eax,ecx
        push    eax
        mov     eax,dword [ebp-0a4h]
        push    eax
        push    ecx
        mov     eax,dword [ebp-0b4h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_range(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 010h
; Line 2002:                 _VSTD::copy(__first, __m, __p); 
        mov     eax,dword [ebp-0b0h]
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-040h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        mov     dword [ebp-064h+014h],03h
        call    @std@#copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ ; std::copy<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
; Line 2003:             } 
L_58476:
; Line 2004:         } 
L_58777:
        jmp     L_58484
L_58465:
; Line 2005:         else 
; Line 2006:         { 
; Line 2007:             allocator_type& __a = this->__alloc(); 
        mov     eax,dword [ebp-0b4h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0bch],eax
        and     eax,eax
        je      L_58810
        mov     eax,dword [ebp-0bch]
        add     eax,byte 04h
        jmp     L_58811
L_58810:
        mov     eax,dword [ebp-0bch]
L_58811:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,dword [ebp-0b0h]
        mov     ebx,dword [ebp-0b4h]
        mov     ecx,dword [ebp-0b4h]
        sub     eax,dword [ecx+04h]
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        push    eax
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        add     eax,esi
        mov     dword [ebp-07ch],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    ebx
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::max_size() const 
        mov     esi,eax
        add     esp,byte 04h
        mov     eax,esi
        cmp     dword [ebp-07ch],eax
        jbe     L_58815
; Line 1027:         this->__throw_length_error(); 
        push    ebx
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_58815:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+0ch]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     ecx,esi
        shr     ecx,01h
        cmp     eax,ecx
        jnc     L_58837
L_58820:
        shl     eax,01h
        mov     dword [ebp-0c0h],eax
        lea     eax,[ebp-0c0h]
        lea     ecx,[ebp-07ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0c4h],00h
        lea     edx,[ebp-0c4h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_58977:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
; Line 1032: } 
L_58837:
        push    esi
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.quiuir#allocator.#variant.#shared_ptr.n0~uL~~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__split_buffer(unsigned int, unsigned int, allocator<variant<shared_ptr<Token>, unsigned long long>>&)
        add     esp,byte 010h
        mov     dword [ebp-064h+014h],04h
; Line 2009:             __v.__construct_at_end(__first, __last); 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        lea     eax,[ebp-03ch]
        push    eax
        mov     dword [ebp-064h+014h],05h
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__construct_at_end<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
        add     esp,byte 0ch
; Line 2010:             __p = __swap_out_circular_buffer(__v, __p); 
        mov     eax,dword [ebp-0b0h]
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        mov     eax,dword [ebp-0b4h]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~p#variant.#shared_ptr.n0~uL~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__swap_out_circular_buffer(__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>&, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
        mov     dword [ebp-0b0h],eax
; Line 2011:         } 
        mov     dword [ebp-064h+014h],06h
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::~__split_buffer()
        add     esp,byte 04h
L_58484:
; Line 2012:     } 
L_58461:
        mov     eax,dword [ebp-0b0h]
; Line 1493:     return iterator(this, __p); 
        mov     dword [ebp-0d0h],eax
; Line 1497: } 
        mov     eax,dword [ebp-0d0h]
L_59043:
L_59057:
L_59071:
; Line 2014: } 
L_59085:
L_59099:
L_59113:
L_58459:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#insert.#__wrap_iter.puL~~.q#__wrap_iter.px#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~:
        dd      00h
        dd      0ffffff9ch
        dd      0400h
        dd      @.xt@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ffffffc4h
        dd      04h
        dd      06h
        dd      00h
section code
section code
        section vsc@std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~ virtual
        [bits 32]
; std::__wrap_iter<unsigned long long*>::__wrap_iter(__wrap_iter<unsigned long long*>&&)
@std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~:
L_59119:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_59120:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<variant<shared_ptr<Token>, unsigned long long>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bdtr.qv:
L_59127:
L_59128:
        ret
section code
section code
        section vsc@std@#allocator.#variant.#shared_ptr.5Token~uL~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<variant<shared_ptr<Token>, unsigned long long>>::~allocator()
@std@#allocator.#variant.#shared_ptr.5Token~uL~~@.bdtr.qv:
L_59133:
L_59134:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv:
L_59139:
L_59153:
L_59140:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<variant<shared_ptr<Token>, unsigned long long>*, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__compressed_pair()
@std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv:
L_59159:
L_59186:
L_59173:
L_59201:
L_59160:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~vector()
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv:
        add     esp,byte 0fffffff0h
L_59207:
        mov     eax,dword [esp+04h+010h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_59240:
; Line 879:     } 
L_59225:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_59208:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>**, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv:
L_59551:
L_59552:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.uii?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<unsigned int, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.uii?0?4bool?0?~@.bdtr.qv:
L_59557:
L_59558:
        ret
section code
section code
        section vsc@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>::~allocator()
@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv:
L_59563:
L_59564:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv:
L_59569:
L_59583:
L_59570:
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::~__compressed_pair()
@std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv:
L_59589:
L_59616:
L_59603:
L_59631:
L_59590:
        ret
section code
section code
        section vsc@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::~__bucket_list_deallocator()
@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv:
L_59637:
L_59677:
L_59664:
L_59692:
L_59651:
L_59638:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bdtr.qv:
L_59699:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv ; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>::~allocator()
        add     esp,byte 04h
L_59739:
L_59753:
L_59726:
L_59713:
L_59700:
        ret
section code
section code
        section vsc@std@#__compressed_pair.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>**, __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::~__compressed_pair()
@std@#__compressed_pair.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv:
        push    ebx
L_59761:
        mov     ebx,dword [esp+04h+04h]
        add     ebx,byte 04h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    ebx
        call    @std@#__compressed_pair_elem.uii?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<unsigned int, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_59801:
L_59788:
L_59775:
L_59817:
L_59762:
        pop     ebx
        ret
section code
section code
        section vsc@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::~unique_ptr()
@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bdtr.qv:
; Line 2793: public: 
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_59823:
        mov     ebx,dword [esp+04h+050h]
        mov     eax,ebx
        mov     ecx,ebx
; Line 2848:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     esi,dword [eax]
; Line 2849:     __ptr_.first() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
        and     esi,esi
        je      L_59829
; Line 2851:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+050h],eax
        and     eax,eax
        je      L_59942
        mov     eax,dword [esp-044h+050h]
        add     eax,byte 04h
        jmp     L_59943
L_59942:
        mov     eax,dword [esp-044h+050h]
L_59943:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 809:         __alloc_traits::deallocate(__alloc(), __p, size()); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+050h],eax
        and     eax,eax
        je      L_59990
        mov     eax,dword [esp-048h+050h]
        add     eax,byte 04h
        jmp     L_59991
L_59990:
        mov     eax,dword [esp-048h+050h]
L_59991:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_60070:
L_60055:
L_59958:
; Line 810:     } 
L_59925:
L_59829:
; Line 2852:   } 
L_59846:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv ; std::__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::~__compressed_pair()
        add     esp,byte 04h
L_60162:
L_60149:
L_60177:
L_60136:
L_59824:
        pop     esi
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::~__hash_node_base()
@std@#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv:
L_60184:
L_60185:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bdtr.qv:
L_60190:
L_60204:
L_60191:
        ret
section code
section code
        section vsc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>::~allocator()
@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv:
L_60210:
L_60211:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bdtr.qv:
L_60216:
L_60230:
L_60217:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::~__compressed_pair()
@std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv:
L_60236:
L_60263:
L_60250:
L_60291:
L_60278:
L_60237:
        ret
section code
section code
        section vsc@std@#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>::~__unordered_map_hasher()
@std@#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv:
L_60298:
L_60325:
L_60312:
L_60299:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv:
L_60332:
L_60372:
L_60359:
L_60346:
L_60333:
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<unsigned int, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::~__compressed_pair()
@std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv:
L_60380:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @std@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~@.bdtr.qv ; std::unary_function<basic_string<char, char_traits<char>, allocator<char>>, unsigned int>::~unary_function()
        add     esp,byte 04h
L_60420:
L_60407:
L_60394:
L_60436:
L_60381:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.fi?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<float, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.fi?0?4bool?0?~@.bdtr.qv:
L_60442:
L_60443:
        ret
section code
section code
        section vsc@std@#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>::~__unordered_map_equal()
@std@#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~@.bdtr.qv:
L_60448:
L_60475:
L_60462:
L_60449:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bdtr.qv:
L_60482:
L_60522:
L_60509:
L_60496:
L_60483:
        ret
section code
section code
        section vsc@std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<float, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::~__compressed_pair()
@std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bdtr.qv:
L_60530:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @std@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~@.bdtr.qv ; std::binary_function<basic_string<char, char_traits<char>, allocator<char>>, basic_string<char, char_traits<char>, allocator<char>>, bool>::~binary_function()
        add     esp,byte 04h
L_60570:
L_60557:
L_60544:
L_60586:
L_60531:
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~unordered_map()
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv:
L_60592:
        mov     eax,dword [esp+04h]
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_60593:
        ret
section code
section code
        section vsc@embeder_info@.bdtr.qv virtual
        [bits 32]
; embeder_info::~embeder_info()
@embeder_info@.bdtr.qv:
        add     esp,byte 0ffffffe0h
        push    ebx
L_60600:
        mov     ebx,dword [esp+04h+024h]
        mov     eax,ebx
        add     eax,byte 058h
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::~__hash_table()
        add     esp,byte 04h
L_60616:
        mov     eax,ebx
        add     eax,byte 02ch
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_60662:
; Line 879:     } 
L_60647:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_60632:
        mov     eax,ebx
        add     eax,byte 018h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_61014:
; Line 879:     } 
L_60999:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_60984:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_60601:
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.puLi?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<unsigned long long*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.puLi?0?4bool?0?~@.bdtr.qv:
L_61326:
L_61327:
        ret
section code
section code
        section vsc@std@#allocator.uL~@.bdtr.qv virtual
        [bits 32]
; std::allocator<unsigned long long>::~allocator()
@std@#allocator.uL~@.bdtr.qv:
L_61332:
L_61333:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bdtr.qv:
L_61338:
L_61352:
L_61339:
        ret
section code
section code
        section vsc@std@#__compressed_pair.puL#allocator.uL~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<unsigned long long*, allocator<unsigned long long>>::~__compressed_pair()
@std@#__compressed_pair.puL#allocator.uL~~@.bdtr.qv:
L_61358:
L_61385:
L_61372:
L_61400:
L_61359:
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@.bdtr.qv virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::~vector()
@std@#vector.uL#allocator.uL~~@.bdtr.qv:
; Line 548:     _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0fffffff0h
L_61406:
        mov     eax,dword [esp+04h+010h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_61439:
; Line 879:     } 
L_61424:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.uL#allocator.uL~~@.bdtr.qv ; std::__vector_base<unsigned long long, allocator<unsigned long long>>::~__vector_base()
        add     esp,byte 04h
L_61407:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~4bool?0?~@.bdtr.qv:
        add     esp,byte 0fffffff0h
L_61750:
        mov     eax,dword [esp+04h+010h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_61796:
; Line 879:     } 
L_61781:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_61766:
L_61751:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=1, EmbedReturnValue, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@.bdtr.qv:
L_62108:
L_62109:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv:
        add     esp,byte 0fffffff0h
L_62114:
        mov     eax,dword [esp+04h+010h]
L_62128:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_62187:
; Line 879:     } 
L_62172:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_62157:
L_62142:
L_62115:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv virtual
        [bits 32]
; std::tuple<vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>, EmbedReturnValue>::~tuple()
@std@#tuple.#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~16EmbedReturnValue~@.bdtr.qv:
        add     esp,byte 0fffffff0h
L_62500:
        mov     eax,dword [esp+04h+010h]
L_62527:
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_62586:
; Line 879:     } 
L_62571:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::~__vector_base()
        add     esp,byte 04h
L_62556:
L_62541:
L_62514:
L_62501:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#default_delete.9Tokenizer~@.bdtr.qv virtual
        [bits 32]
; std::default_delete<Tokenizer>::~default_delete()
@std@#default_delete.9Tokenizer~@.bdtr.qv:
L_62900:
L_62901:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p9Tokenizer#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<Tokenizer*, default_delete<Tokenizer>>::~__compressed_pair()
@std@#__compressed_pair.p9Tokenizer#default_delete.n0~~@.bdtr.qv:
L_62906:
L_62933:
L_62920:
L_62948:
L_62907:
        ret
section code
section code
        section vsc@std@#unique_ptr.9Tokenizer#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<Tokenizer, default_delete<Tokenizer>>::~unique_ptr()
@std@#unique_ptr.9Tokenizer#default_delete.n0~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_62954:
        mov     edx,dword [esp+04h+018h]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_62960
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+018h],eax
        and     eax,eax
        je      L_63073
        mov     eax,dword [esp-010h+018h]
        add     eax,byte 04h
        jmp     L_63074
L_63073:
        mov     eax,dword [esp-010h+018h]
L_63074:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-014h+018h],ebx
        and     ebx,ebx
        je      L_63076
        mov     eax,dword [esp-014h+018h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        add     esp,byte 04h
        mov     eax,dword [esp-014h+018h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_63076:
; Line 2364:   } 
L_63056:
L_62960:
; Line 2619:   } 
L_62977:
L_63116:
L_63103:
L_63131:
L_63090:
L_62955:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@ppExpr@.bdtr.qv virtual
        [bits 32]
; ppExpr::~ppExpr()
@ppExpr@.bdtr.qv:
; Line 48:     ~ppExpr() {} 
        add     esp,byte 0ffffffech
        push    ebx
        push    esi
L_63138:
        mov     ecx,dword [esp+04h+01ch]
        mov     esi,ecx
        add     esi,byte 0ch
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ecx+0ch]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx+0ch],eax
        and     ebx,ebx
        je      L_63159
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+01ch],eax
        and     eax,eax
        je      L_63272
        mov     eax,dword [esp-010h+01ch]
        add     eax,byte 04h
        jmp     L_63273
L_63272:
        mov     eax,dword [esp-010h+01ch]
L_63273:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-014h+01ch],ebx
        and     ebx,ebx
        je      L_63275
        mov     eax,dword [esp-014h+01ch]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        add     esp,byte 04h
        mov     eax,dword [esp-014h+01ch]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_63275:
; Line 2364:   } 
L_63255:
L_63159:
; Line 2619:   } 
L_63176:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#default_delete.9Tokenizer~@.bdtr.qv ; std::default_delete<Tokenizer>::~default_delete()
        add     esp,byte 04h
L_63302:
L_63316:
L_63289:
L_63156:
L_63139:
        pop     esi
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::~__hash_iterator()
@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bdtr.qv:
L_63324:
L_63325:
        ret
section code
section code
        section vsc@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::~__hash_map_iterator()
@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv:
L_63330:
L_63344:
L_63331:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p8__file__i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__file__*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p8__file__i?0?4bool?0?~@.bdtr.qv:
L_63350:
L_63351:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@.bdtr.qv:
L_63356:
L_63370:
L_63357:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p8__file__11FileDeleter~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__file__*, FileDeleter>::~__compressed_pair()
@std@#__compressed_pair.p8__file__11FileDeleter~@.bdtr.qv:
L_63376:
L_63403:
L_63390:
L_63418:
L_63377:
        ret
section code
section code
        section vsc@std@#unique_ptr.8__file__11FileDeleter~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__file__, FileDeleter>::~unique_ptr()
@std@#unique_ptr.8__file__11FileDeleter~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
        push    ecx
L_63424:
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [edx],ecx
        and     eax,eax
        je      L_63430
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,edx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0ch+010h],eax
        and     eax,eax
        je      L_63528
        mov     eax,dword [esp-0ch+010h]
        add     eax,byte 04h
        jmp     L_63529
L_63528:
        mov     eax,dword [esp-0ch+010h]
L_63529:
        push    eax
        call    @std@#__compressed_pair_elem.11FileDeleteri?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<FileDeleter, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @FileDeleter@.bcall.xqp8__file__ ; FileDeleter::operator ()(__file__*) const 
        add     esp,byte 08h
L_63430:
; Line 2619:   } 
L_63447:
L_63569:
L_63556:
L_63584:
L_63543:
L_63425:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@strstream@.bctr.qv virtual
        [bits 32]
; std::strstream::strstream()
@std@strstream@.bctr.qv:
; Line 347:     _LIBCPP_INLINE_VISIBILITY 
        push    ebx
L_63591:
        mov     eax,dword [esp+08h+04h]
        mov     ebx,dword [esp+04h+04h]
        and     eax,eax
        je      L_63594
        mov     eax,ebx
        add     eax,byte 04ch
        mov     dword [ebx+08h],eax
        mov     eax,ebx
        add     eax,byte 04ch
        mov     dword [ebx+048h],eax
        mov     eax,ebx
        add     eax,byte 04ch
        mov     dword [ebx+014h],eax
        mov     eax,ebx
        add     eax,byte 04ch
        mov     dword [ebx+010h],eax
        mov     dword [ebx+04ch],@std@ios_base@_.vt+0ch
; Line 345:                } 
        mov     dword [ebx+04ch],@std@#basic_ios.c#char_traits.c~~@_.vt+0ch
; Line 675:                 } 
L_63594:
        push    byte 00h
        mov     eax,ebx
        mov     ecx,ebx
        add     ecx,dword 018h
        push    ecx
        push    eax
        call    @std@#basic_iostream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~ ; std::basic_iostream<char, char_traits<char>>::basic_iostream(basic_streambuf<char, char_traits<char>>*)
        add     esp,byte 0ch
        mov     ecx,@std@strstream@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     dword [ebx+0ch],@std@strstream@_.vt+018h
        mov     ecx,ebx
        add     ecx,byte 018h
        push    byte 00h
        push    ecx
        call    @std@strstreambuf@.bctr.qi ; std::strstreambuf::strstreambuf(int)
        add     esp,byte 08h
        mov     eax,ebx
L_63592:
        pop     ebx
        ret
section code
section code
        section vsc@std@#char_traits.c~@lt.qcc virtual
        [bits 32]
; std::char_traits<char>::lt(char, char)
@std@#char_traits.c~@lt.qcc:
L_63652:
        mov     al,byte [esp+08h]
        mov     cl,byte [esp+04h]
        movzx   ecx,cl
        movzx   eax,al
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
L_63653:
        ret
section code
section code
        section vsc@std@#char_traits.c~@compare.qpxcpxcui virtual
        [bits 32]
; std::char_traits<char>::compare(char const *, char const *, unsigned int)
@std@#char_traits.c~@compare.qpxcpxcui:
; Line 294: { 
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_63660:
        mov     esi,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     edx,dword [esp+04h+014h]
; Line 295:     if (__n == 0) 
        and     esi,esi
        jne     L_63663
        xor     eax,eax
        jmp     L_63661
L_63663:
; Line 298:     return __builtin_memcmp(__s1, __s2, __n); 
        and     esi,esi
        je      L_63670
L_63668:
; Line 303:     { 
; Line 304:         if (lt(*__s1, *__s2)) 
        mov     al,byte [edx]
        mov     ebp,edx
        mov     bl,al
        mov     dl,al
        mov     al,byte [ecx]
        mov     edi,ecx
        mov     cl,al
        movzx   edx,dl
        movzx   eax,al
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        and     al,al
        je      L_63675
        mov     eax,0ffffffffh
        jmp     L_63661
L_63675:
        mov     al,cl
        mov     cl,bl
        movzx   edx,al
        movzx   eax,cl
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        and     al,al
        je      L_63680
        mov     eax,01h
        jmp     L_63661
L_63680:
; Line 308:     } 
L_63671:
        dec     esi
        mov     edx,ebp
        inc     edx
        mov     ecx,edi
        inc     ecx
L_63669:
        and     esi,esi
        jne     L_63668
L_63670:
        xor     eax,eax
; Line 311: } 
L_63661:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 3860: inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
L_63725:
        mov     eax,dword [esp+08h+020h]
        mov     ecx,dword [esp+04h+020h]
; Line 3865:     size_t __lhs_sz = __lhs.size(); 
        mov     esi,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_63768
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [edx+04h+04h]
        jmp     L_63769
L_63768:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [edx+04h]
        shr     ecx,01h
L_63769:
        mov     edx,ecx
        mov     ebx,eax
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_63930
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [ecx+04h+04h]
        jmp     L_63931
L_63930:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
        mov     ebx,ecx
L_63931:
        cmp     edx,ebx
        je      L_63728
        xor     al,al
        jmp     L_63726
L_63728:
        mov     ebx,esi
        mov     ecx,esi
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_64122
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [ecx+08h+04h]
        jmp     L_64123
L_64122:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,ecx
L_64123:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_64348
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax+08h+04h]
        jmp     L_64349
L_64348:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ecx,eax
L_64349:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     eax,esi
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_63733
        mov     eax,edx
        push    eax
        push    ecx
        mov     eax,ebx
        push    eax
        call    @std@#char_traits.c~@compare.qpxcpxcui ; std::char_traits<char>::compare(char const *, char const *, unsigned int)
        add     esp,byte 0ch
        and     eax,eax
        sete    al
        and     eax,byte 01h
        jmp     L_63726
L_63733:
; Line 3872:     for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp) 
        and     edx,edx
        je      L_63740
L_63738:
        mov     al,byte [ecx]
        cbw
        cwde
        movsx   esi,byte [ebx]
        cmp     esi,eax
        je      L_63744
        xor     al,al
        jmp     L_63726
L_63744:
L_63741:
        dec     edx
        inc     ebx
        inc     ecx
L_63739:
        and     edx,edx
        jne     L_63738
L_63740:
        mov     al,01h
; Line 3876: } 
L_63726:
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui virtual
        [bits 32]
; std::__put_character_sequence<char, char_traits<char>>(basic_ostream<char, char_traits<char>>&, char const *, unsigned int)
@std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui:
; Line 718: basic_ostream<_CharT, _Traits>& 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
        push    esi
        push    edi
L_64580:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 723:     try 
L_64600:
        mov     dword [ebp-060h+014h],01h
; Line 724:     { 
; Line 726:         typename basic_ostream<_CharT, _Traits>::sentry __s(__os); 
        mov     eax,dword [ebp+08h]
        push    eax
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@#basic_ostream.c#char_traits.c~~@sentry@.bctr.qr#basic_ostream.c#char_traits.c~~ ; std::basic_ostream<char, char_traits<char>>::sentry::sentry(basic_ostream<char, char_traits<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-060h+014h],02h
        mov     al,byte [ebp-02ch]
        and     al,al
        je      L_64586
; Line 728:         { 
; Line 729:             typedef ostreambuf_iterator<_CharT, _Traits> _Ip; 
        mov     eax,dword [ebp+08h]
        mov     ebx,dword [eax+04h]
; Line 785:     if (traits_type::eq_int_type(traits_type::eof(), __fill_)) 
        mov     dword [ebp-064h],0ffffffffh
        mov     eax,ebx
        add     eax,byte 04ch
        mov     ecx,dword [ebx+04ch]
        mov     dword [ebp-068h],ecx
        mov     edx,dword [ebp-064h]
        mov     ecx,dword [ebp-068h]
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_64643
; Line 786:         __fill_ = widen(' '); 
        mov     eax,020h
        push    eax
        push    ebx
        call    @std@#basic_ios.c#char_traits.c~~@widen.xqc ; std::basic_ios<char, char_traits<char>>::widen(char) const 
        add     esp,byte 08h
        movsx   ecx,al
        mov     eax,ebx
        add     eax,byte 04ch
        mov     dword [ebx+04ch],ecx
L_64643:
        mov     al,byte [eax]
; Line 788: } 
        cbw
        cwde
        push    eax
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+04h]
        push    eax
        mov     edx,dword [ebp+0ch]
        mov     ecx,dword [ebp+010h]
        add     ecx,edx
        push    ecx
; Line 459: { 
; Line 460:     return __fmtflags_; 
        mov     eax,dword [eax+04h]
; Line 461: } 
        and     eax,dword 0b0h
        cmp     eax,byte 020h
        jne     L_64695
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+010h]
        add     eax,ecx
        jmp     L_64696
L_64695:
        mov     eax,dword [ebp+0ch]
L_64696:
        push    eax
        mov     eax,dword [ebp+0ch]
        push    eax
        add     esp,byte 0fffffff8h
        mov     ecx,esp
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-06ch],eax
        mov     eax,dword [ebp-06ch]
        mov     eax,dword [eax+04h]
; Line 739:     return static_cast<basic_streambuf<char_type, traits_type>*>(ios_base::rdbuf()); 
        mov     eax,dword [eax+018h]
; Line 740: } 
        mov     dword [ebp-034h+04h],eax
        lea     eax,[ebp-034h]
        mov     dword [ebp-060h+014h],03h
        push    eax
        push    ecx
        call    @std@#ostreambuf_iterator.c#char_traits.c~~@.bctr.qR#ostreambuf_iterator.c#char_traits.c~~ ; std::ostreambuf_iterator<char, char_traits<char>>::ostreambuf_iterator(ostreambuf_iterator<char, char_traits<char>>&&)
        add     esp,byte 08h
        mov     dword [ebp-060h+014h],04h
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec ; std::__pad_and_output<char, char_traits<char>>(ostreambuf_iterator<char, char_traits<char>>, char const *, char const *, char const *, std::ios_base&, char)
        mov     dword [ebp-060h+014h],05h
L_64803:
L_64790:
        add     esp,byte 020h
        mov     dword [ebp-060h+014h],06h
        mov     eax,dword [eax+04h]
        and     eax,eax
        sete    al
        and     eax,byte 01h
        mov     dword [ebp-060h+014h],07h
L_64832:
L_64819:
        and     al,al
        je      L_64590
; Line 738:                 __os.setstate(ios_base::badbit | ios_base::failbit); 
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+04h]
        mov     ecx,eax
        mov     dword [ebp-070h],05h
        mov     edx,dword [ebp-070h]
        mov     dword [ebp-074h],edx
; Line 546: { 
; Line 547:     clear(__rdstate_ | __state); 
        mov     edx,dword [ebp-074h]
        mov     eax,dword [eax+010h]
        or      eax,edx
        push    eax
        push    ecx
        call    @std@ios_base@clear.qui ; std::ios_base::clear(unsigned int)
        add     esp,byte 08h
; Line 548: } 
L_64864:
L_64849:
L_64590:
; Line 739:         } 
L_64586:
; Line 741:     } 
        mov     dword [ebp-060h+014h],08h
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@#basic_ostream.c#char_traits.c~~@sentry@.bdtr.qv ; std::basic_ostream<char, char_traits<char>>::sentry::~sentry()
        add     esp,byte 04h
        mov     dword [ebp-060h+014h],09h
L_64601:
        jmp     L_64583
L_64606:
; Line 743:     { 
; Line 744:         __os.__set_badbit_and_consider_rethrow(); 
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+04h]
        push    eax
        call    @std@ios_base@__set_badbit_and_consider_rethrow.qv ; std::ios_base::__set_badbit_and_consider_rethrow()
        add     esp,byte 04h
; Line 745:     } 
        lea     eax,[ebp-060h]
        push    eax
        call    @_CatchCleanup.qpv ; _CatchCleanup(void*)
        add     esp,byte 04h
L_64583:
        mov     eax,dword [ebp+08h]
; Line 748: } 
L_64581:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@44@std@#basic_ostream.c#char_traits.c~~@sentry virtual
        [bits 32]
@.xt@44@std@#basic_ostream.c#char_traits.c~~@sentry:
        dd      @std@#basic_ostream.c#char_traits.c~~@sentry@.bdtr.qv+0
        dd      05h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      06fh
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      073h
        db      065h
        db      06eh
        db      074h
        db      072h
        db      079h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#iterator.24@std@output_iterator_tagvvvv~ virtual
        [bits 32]
@.xt@#iterator.24@std@output_iterator_tagvvvv~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#ostreambuf_iterator.c#char_traits.c~~ virtual
        [bits 32]
@.xt@#ostreambuf_iterator.c#char_traits.c~~:
        dd      @std@#ostreambuf_iterator.c#char_traits.c~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      06fh
        db      073h
        db      074h
        db      072h
        db      065h
        db      061h
        db      06dh
        db      062h
        db      075h
        db      066h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#iterator.24@std@output_iterator_tagvvvv~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui virtual
        [bits 32]
@.xc@std@#__put_character_sequence.c#char_traits.c~~.qr#basic_ostream.c#char_traits.c~~pxcui:
        dd      00h
        dd      0ffffffa0h
        dd      010000h
        dd      00h
        dd      L_64606
        dd      01h
        dd      09h
        dd      0400h
        dd      @.xt@44@std@#basic_ostream.c#char_traits.c~~@sentry+0
        dd      0ffffffd4h
        dd      02h
        dd      08h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ffffffcch
        dd      03h
        dd      05h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ffffffc4h
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
; std::visit<visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&>(visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&)
@std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~:
; Line 1585: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff6ch
        push    ebx
        push    esi
        push    edi
L_64871:
        mov     esi,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-090h],eax
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1588:   using __variant_detail::__visitation::__variant; 
        mov     byte [ebp-01h],00h
        mov     eax,dword [ebp-090h]
; Line 1336:     return __impl.valueless_by_exception(); 
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h+08h],byte 0ffffffffh
        jne     L_64940
        mov     eax,0ffffffffh
        jmp     L_64941
L_64940:
        mov     eax,dword [eax+08h+08h]
L_64941:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
; Line 1337:   } 
        mov     byte [ebp-01h],al
; Line 1590:   for (bool __result : __results) { 
        lea     edi,[ebp-01h]
        lea     eax,[ebp-01h+01h]
        mov     dword [ebp-094h],eax
        cmp     edi,eax
        je      L_64876
L_64874:
        mov     al,byte [edi]
; Line 1591:     if (__result) { 
        and     al,al
        je      L_64881
; Line 1592:       __throw_bad_variant_access(); 
        call    @std@__throw_bad_variant_access.qv ; std::__throw_bad_variant_access()
; Line 1593:     } 
L_64881:
; Line 1594:   } 
L_64877:
        inc     edi
L_64875:
        cmp     edi,dword [ebp-094h]
        jne     L_64874
L_64876:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp-090h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     eax,[ebp-018h]
        push    eax
        call    @std@__variant_detail@__visitation@__variant@#__visit_value.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ ; std::__variant_detail::__visitation::__variant::__visit_value<visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&>(visitor_struct&, variant<shared_ptr<Token>, unsigned long long>&)
        mov     ebx,eax
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],01h
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-06ch+014h],03h
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 1597: } 
L_64872:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~ virtual
        [bits 32]
@.xc@std@#visit.r14visitor_structr#variant.#shared_ptr.5Token~uL~~.qrn0r#variant.#shared_ptr.n1~uL~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffe8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~ virtual
        [bits 32]
; std::__invoke_constexpr<__value_visitor<visitor_struct&>, __alt<unsigned int=0, shared_ptr<Token>>&>(__value_visitor<Token&>&&, __alt<unsigned int=0, shared_ptr<Token>>&)
@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_65062:
        mov     ebx,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~ ; std::__variant_detail::__visitation::__variant::__value_visitor<visitor_struct&>::operator ()<__alt<unsigned int=0, shared_ptr<Token>>&>(__alt<unsigned int=0, shared_ptr<Token>>&) const 
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
L_65063:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~ virtual
        [bits 32]
@.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~ virtual
        [bits 32]
@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~:
        dd      @.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?0?#shared_ptr.5Token~~~.qR#__value_visitor.rn0~r#__alt.ui?0?#shared_ptr.n1~~+0
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~ virtual
        [bits 32]
; std::__invoke_constexpr<__value_visitor<visitor_struct&>, __alt<unsigned int=1, unsigned long long>&>(__value_visitor<visitor_struct&>&&, __alt<unsigned int=1, unsigned long long>&)
@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_65186:
        mov     ebx,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~ ; std::__variant_detail::__visitation::__variant::__value_visitor<visitor_struct&>::operator ()<__alt<unsigned int=1, unsigned long long>&>(__alt<unsigned int=1, unsigned long long>&) const 
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
L_65187:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~ virtual
        [bits 32]
@.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~ virtual
        [bits 32]
@.xc@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~:
        dd      @.xct@std@#__invoke_constexpr.#__value_visitor.r14visitor_struct~r#__alt.ui?1?uL~~.qR#__value_visitor.rn0~r#__alt.ui?1?uL~+0
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@get.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=1, EmbedReturnValue, bool=0>::get()
@std@#__tuple_leaf.ui?1?16EmbedReturnValue4bool?0?~@get.qv:
; Line 276:     _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return __value_;} 
L_65310:
        mov     eax,dword [esp+04h]
L_65311:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qR#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qR#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
; Line 1288: { 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_65318:
        mov     ebp,dword [esp+08h+048h]
        mov     ebx,dword [esp+04h+048h]
        mov     edi,ebx
        mov     eax,ebp
        mov     esi,ebp
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-030h+048h],eax
        and     eax,eax
        je      L_65387
        mov     eax,dword [esp-030h+048h]
        add     eax,byte 04h
        jmp     L_65388
L_65387:
        mov     eax,dword [esp-030h+048h]
L_65388:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,edi
        mov     dword [edi+04h],00h
        mov     dword [edi+08h],00h
        add     eax,byte 0ch
        xor     ecx,ecx
        mov     dword [esp-034h+048h],ecx
        lea     ecx,[esp-034h+048h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2286:   template <class _U1, class _U2> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edi+0ch],ecx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [esp-038h+048h],eax
; Line 2206:     } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 1290:     __get_db()->__insert_c(this); 
        mov     eax,dword [esi+04h]
        mov     dword [ebx+04h],eax
; Line 1294:     this->__end_ = __x.__end_; 
        mov     eax,dword [esi+08h]
        mov     dword [ebx+08h],eax
; Line 1295:     this->__end_cap() = __x.__end_cap(); 
        mov     eax,esi
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [eax+0ch]
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],ecx
; Line 1296:     __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [esi+0ch],00h
        mov     eax,dword [esi+0ch]
        mov     dword [ebp+08h],eax
        mov     dword [ebp+04h],eax
; Line 1297: } 
        mov     eax,ebx
L_65319:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
@std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~:
        add     esp,0ffffff5ch
        push    ebx
        push    esi
L_65676:
        mov     ebx,dword [esp+08h+0ach]
        mov     esi,dword [esp+04h+0ach]
; Line 2298:   if (__is_long()) { 
        mov     eax,esi
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_65679
; Line 2299:     __alloc_traits::deallocate(__alloc(), __get_long_pointer(), 
        mov     eax,esi
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0a0h+0ach],eax
        and     eax,eax
        je      L_65783
        mov     eax,dword [esp-0a0h+0ach]
        add     eax,byte 0ch
        jmp     L_65784
L_65783:
        mov     eax,dword [esp-0a0h+0ach]
L_65784:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+08h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_65911:
L_65896:
L_65751:
; Line 2302:     if (!is_nothrow_move_assignable<allocator_type>::value) { 
L_65679:
; Line 2308:   __move_assign_alloc(__str); 
        mov     edx,esi
        mov     eax,ebx
        mov     dword [esp-0a4h+0ach],00h
        lea     ecx,[esp-0a4h+0ach]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign_alloc.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ ; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign_alloc(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
L_66008:
        add     esp,byte 0ch
L_65979:
; Line 2309:   __r_.first() = __str.__r_.first(); 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        push    eax
        mov     eax,esi
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.basn.qrx55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::operator =( const std::basic_string<char, char_traits<char>, allocator<char>>::__rep&)
        add     esp,byte 08h
; Line 2310:   __str.__set_short_size(0); 
        mov     ecx,ebx
        xor     eax,eax
        shl     eax,01h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     byte [ecx+04h],al
L_66089:
; Line 2311:   traits_type::assign(__str.__get_short_pointer()[0], value_type()); 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        xor     cl,cl
        mov     byte [esp-01h+0ach],cl
        mov     cl,byte [esp-01h+0ach]
        mov     byte [eax],cl
L_66137:
; Line 2312: } 
L_66231:
L_65677:
        pop     esi
        pop     ebx
        add     esp,0a4h
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::substr(unsigned int, unsigned int) const 
@std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
        push    esi
        push    edi
L_66237:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-064h],eax
        mov     edi,dword [ebp+014h]
        mov     ebx,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3296:     return basic_string(*this, __pos, __n, __alloc()); 
        mov     eax,esi
        add     eax,byte 04h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-060h],eax
        and     eax,eax
        je      L_66274
        mov     eax,dword [ebp-060h]
        add     eax,byte 0ch
        jmp     L_66275
L_66274:
        mov     eax,dword [ebp-060h]
L_66275:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        push    eax
        push    edi
        push    ebx
        push    esi
        mov     eax,dword [ebp-064h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~uiuirx#allocator.c~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&, unsigned int, unsigned int,  const allocator<char>&)
        add     esp,byte 014h
        mov     dword [ebp-05ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 3297: } 
L_66238:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui virtual
        [bits 32]
@.xc@std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui:
        dd      00h
        dd      0ffffffa4h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::unique_ptr<bool=1, void, >()
@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.qv:
; Line 2699: public: 
        add     esp,byte 0ffffffe0h
        push    ebx
L_66281:
        mov     ebx,dword [esp+04h+024h]
        mov     ecx,ebx
        xor     eax,eax
        mov     dword [esp-08h+024h],eax
        lea     edx,[esp-08h+024h]
        mov     dword [esp-04h+024h],00h
        lea     eax,[esp-04h+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [ebx],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_66399:
        mov     eax,ebx
L_66282:
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.4bool?1?#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~.qv virtual
        [bits 32]
; std::__compressed_pair<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__compressed_pair<bool=1, __hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, >()
@std@#__compressed_pair.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.4bool?1?#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~.qv:
        push    ecx
        push    ecx
        push    ebx
L_66405:
        mov     ebx,dword [esp+04h+0ch]
        mov     dword [esp-04h+0ch],00h
        lea     eax,[esp-04h+0ch]
        push    dword [eax]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag ; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__value_init_tag)
        add     esp,byte 08h
        mov     dword [esp-08h+0ch],00h
        lea     eax,[esp-08h+0ch]
        push    dword [eax]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
        add     esp,byte 08h
        mov     eax,ebx
L_66406:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.i23@std@__default_init_tag~.qRiRn2 virtual
        [bits 32]
; std::__compressed_pair<unsigned int, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<int, std::__default_init_tag, >(int&&, &&)
@std@#__compressed_pair.ui#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.i23@std@__default_init_tag~.qRiRn2:
; Line 2286:   template <class _U1, class _U2> 
        add     esp,byte 0fffffff0h
        push    ebx
L_66447:
        mov     eax,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
        mov     edx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,ebx
L_66448:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__default_init_tag@.bctr.qv virtual
        [bits 32]
; std::__default_init_tag::__default_init_tag()
@std@__default_init_tag@.bctr.qv:
L_66523:
        mov     eax,dword [esp+04h]
L_66524:
        ret
section code
section code
        section vsc@std@__default_init_tag@.bdtr.qv virtual
        [bits 32]
; std::__default_init_tag::~__default_init_tag()
@std@__default_init_tag@.bdtr.qv:
L_66531:
L_66532:
        ret
section code
section code
        section vsc@std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.f23@std@__default_init_tag~.qRfRn2 virtual
        [bits 32]
; std::__compressed_pair<float, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>>::__compressed_pair<float, std::__default_init_tag, >(float&&, &&)
@std@#__compressed_pair.f#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~~@.bctr.f23@std@__default_init_tag~.qRfRn2:
        add     esp,byte 0fffffff0h
        push    ebx
L_66537:
        mov     eax,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
        mov     edx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        movss   xmm0,[ecx]
        movss   [edx],xmm0
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,ebx
L_66538:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 virtual
        [bits 32]
; std::__compressed_pair_elem<variant<shared_ptr<Token>, unsigned long long>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
@std@#__compressed_pair_elem.p#variant.#shared_ptr.5Token~uL~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2:
; Line 2198:   template <class _Up, class = typename enable_if< 
        push    ecx
L_66613:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2206:     } 
L_66614:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_66639:
        mov     eax,dword [esp+04h]
L_66675:
L_66640:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign.qr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_assign(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&, integral_constant<bool, bool=1>)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign.qr#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
L_66681:
        mov     esi,dword [esp+08h+058h]
        mov     ebx,dword [esp+04h+058h]
; Line 1383:     __vdeallocate(); 
        mov     eax,ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vdeallocate.qv ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__vdeallocate()
        add     esp,byte 04h
; Line 1384:     __base::__move_assign_alloc(__c);  
        mov     edx,ebx
        mov     eax,esi
        mov     dword [esp-050h+058h],00h
        lea     ecx,[esp-050h+058h]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign_alloc.qr#__vector_base.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~ ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_assign_alloc(__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&, integral_constant<bool, bool=1>)
L_66732:
        add     esp,byte 0ch
L_66703:
; Line 1385:     this->__begin_ = __c.__begin_; 
        mov     eax,esi
        mov     ecx,dword [esi+04h]
        mov     dword [ebx+04h],ecx
; Line 1386:     this->__end_ = __c.__end_; 
        mov     ecx,dword [esi+08h]
        mov     dword [ebx+08h],ecx
; Line 1387:     this->__end_cap() = __c.__end_cap(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ecx+0ch]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebx+0ch],ecx
; Line 1388:     __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],00h
        mov     eax,dword [eax+0ch]
        mov     dword [esi+08h],eax
        mov     dword [esi+04h],eax
; Line 1390:     __get_db()->swap(this, &__c); 
L_66891:
L_66682:
        pop     esi
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qR#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table(__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qR#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
; Line 1494: { 
        add     esp,byte 0ffffff84h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_66897:
        mov     eax,dword [esp+08h+08ch]
        mov     dword [esp-070h+08ch],eax
        mov     ebx,dword [esp+04h+08ch]
        mov     eax,ebx
        mov     ebp,dword [esp-070h+08ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,eax
        mov     eax,ebp
        push    eax
        call    @std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@release.qv ; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::release()
        add     esp,byte 04h
        mov     dword [esp-074h+08ch],eax
        lea     esi,[esp-074h+08ch]
; Line 2815:     return __ptr_.second(); 
        mov     eax,ebp
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-078h+08ch],eax
        and     eax,eax
        je      L_67006
        mov     eax,dword [esp-078h+08ch]
        add     eax,byte 04h
        jmp     L_67007
L_67006:
        mov     eax,dword [esp-078h+08ch]
L_67007:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2286:   template <class _U1, class _U2> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [esi]
        mov     dword [ebx],ecx
; Line 2206:     } 
        mov     ecx,edi
        add     ecx,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ecx
        call    @std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ ; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__bucket_list_deallocator(__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>&&)
        add     esp,byte 08h
; Line 2206:     } 
; Line 2758:   } 
        mov     ecx,dword [esp-070h+08ch]
        mov     eax,ecx
        add     eax,byte 0ch
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [ebx+0ch],eax
        mov     edx,ebx
        add     edx,byte 014h
        mov     eax,ecx
        add     eax,byte 014h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
        mov     ecx,eax
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [ebx+014h],eax
        add     edx,byte 04h
        mov     eax,ecx
        add     eax,dword 04h
        push    eax
        push    edx
        call    @std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#hash.#basic_string.c#char_traits.c~#allocator.c~~~ ; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::hash(hash<basic_string<char, char_traits<char>, allocator<char>>>&&)
        add     esp,byte 08h
        mov     ecx,ebx
        add     ecx,byte 01ch
        mov     edx,dword [esp-070h+08ch]
        add     edx,byte 01ch
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,edx
        movss   xmm0,[eax]
        movss   [ebx+01ch],xmm0
        add     ecx,byte 04h
        mov     eax,edx
        add     eax,dword 04h
        push    eax
        push    ecx
        call    @std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~ ; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::equal_to(equal_to<basic_string<char, char_traits<char>, allocator<char>>>&&)
        add     esp,byte 08h
        mov     eax,ebx
; Line 1495:     if (size() > 0) 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        cmp     dword [eax+014h],byte 00h
        jbe     L_66902
; Line 1496:     { 
; Line 1497:         __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] = 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     esi,eax
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebx+0ch]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     edi,dword [eax+04h]
; Line 88:     } 
        mov     eax,ebx
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-07ch+08ch],eax
        and     eax,eax
        je      L_67635
        mov     eax,dword [esp-07ch+08ch]
        add     eax,byte 04h
        jmp     L_67636
L_67635:
        mov     eax,dword [esp-07ch+08ch]
L_67636:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     eax,ecx
        dec     eax
        and     eax,ecx
        jne     L_67673
        mov     eax,ecx
        dec     eax
        mov     ecx,edi
        and     ecx,eax
        jmp     L_67674
L_67673:
        cmp     edi,ecx
        jc      L_67676
L_67675:
        mov     eax,edi
        sub     edx,edx
        xor     edx,edx
        div     ecx
        mov     edi,edx
L_67676:
        mov     ecx,edi
L_67674:
; Line 119: } 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx]
; Line 2807:   } 
        mov     dword [eax+ecx*4],esi
; Line 1499:         __u.__p1_.first().__next_ = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-070h+08ch]
        mov     dword [eax+0ch],00h
; Line 1500:         __u.size() = 0; 
        mov     eax,dword [esp-070h+08ch]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+014h],00h
; Line 1501:     } 
L_66902:
; Line 1502: } 
        mov     eax,ebx
L_66898:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 07ch
        ret
section code
section code
        section vsc@std@#char_traits.c~@eq.qcc virtual
        [bits 32]
; std::char_traits<char>::eq(char, char)
@std@#char_traits.c~@eq.qcc:
L_67794:
        mov     dl,byte [esp+08h]
        mov     al,byte [esp+04h]
        movsx   ecx,al
        mov     al,dl
        cbw
        cwde
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
L_67795:
        ret
section code
section code
        section vsc@std@#char_traits.c~@find.qpxcuirxc virtual
        [bits 32]
; std::char_traits<char>::find(char const *, unsigned int,  const char&)
@std@#char_traits.c~@find.qpxcuirxc:
; Line 313: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
        push    esi
        push    edi
L_67802:
        mov     esi,dword [esp+0ch+010h]
        mov     ecx,dword [esp+08h+010h]
        mov     edx,dword [esp+04h+010h]
; Line 317:     if (__n == 0) 
        and     ecx,ecx
        jne     L_67805
        xor     eax,eax
        jmp     L_67803
L_67805:
; Line 320:     return __builtin_char_memchr(__s, to_int_type(__a), __n); 
        and     ecx,ecx
        je      L_67812
L_67810:
; Line 325:     { 
; Line 326:         if (eq(*__s, __a)) 
        mov     al,byte [edx]
        mov     byte [esp-03h+010h],al
        mov     ebx,edx
        mov     eax,esi
        mov     al,byte [eax]
        mov     byte [esp-04h+010h],al
        mov     al,byte [esp-03h+010h]
        movsx   edi,al
        mov     al,byte [esp-04h+010h]
        cbw
        cwde
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_67817
        mov     eax,edx
        jmp     L_67803
L_67817:
; Line 328:         ++__s; 
        mov     edx,ebx
        inc     edx
; Line 329:     } 
L_67813:
        dec     ecx
L_67811:
        and     ecx,ecx
        jne     L_67810
L_67812:
        xor     eax,eax
; Line 332: } 
L_67803:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__str_find.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui virtual
        [bits 32]
; std::__str_find<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
@std@#__str_find.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui:
; Line 874: inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY 
        push    ebx
        push    ebp
        push    esi
        push    edi
L_67846:
        mov     edx,dword [esp+014h+010h]
        mov     eax,dword [esp+010h+010h]
        mov     edi,dword [esp+0ch+010h]
        mov     esi,dword [esp+08h+010h]
        mov     ebx,dword [esp+04h+010h]
; Line 878:     if (__pos > __sz) 
        cmp     eax,esi
        jbe     L_67849
        or      eax,byte 0ffffffffh
        jmp     L_67847
L_67849:
        and     edx,edx
        jne     L_67854
        jmp     L_67847
L_67854:
        mov     ecx,edi
        add     ecx,edx
        push    ecx
        push    edi
        mov     ecx,ebx
        mov     edx,ebx
        add     edx,esi
        push    edx
        add     eax,ecx
        push    eax
        call    @std@#__search_substring.c#char_traits.c~~.qpxcpxcpxcpxc ; std::__search_substring<char, char_traits<char>>(char const *, char const *, char const *, char const *)
        add     esp,byte 010h
        mov     edx,ebx
        add     edx,esi
        cmp     eax,edx
        jne     L_67859
        or      eax,byte 0ffffffffh
        jmp     L_67847
L_67859:
        sub     eax,ebx
; Line 890: } 
L_67847:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        ret
section code
section code
        section vsc@std@#__str_find_first_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui virtual
        [bits 32]
; std::__str_find_first_of<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
@std@#__str_find_first_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui:
; Line 934: inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY 
        push    ebx
        push    ebp
        push    esi
        push    edi
L_67869:
        mov     edx,dword [esp+014h+010h]
        mov     eax,dword [esp+010h+010h]
        mov     edi,dword [esp+0ch+010h]
        mov     esi,dword [esp+08h+010h]
        mov     ebx,dword [esp+04h+010h]
; Line 938:     if (__pos >= __sz || __n == 0) 
        cmp     eax,esi
        jnc     L_67884
        and     edx,edx
        jne     L_67872
L_67884:
        or      eax,byte 0ffffffffh
        jmp     L_67870
L_67872:
        push    dword @std@#char_traits.c~@eq.qcc ; std::char_traits<char>::eq(char, char)
        mov     ecx,edi
        add     ecx,edx
        push    ecx
        push    edi
        mov     ecx,ebx
        mov     edx,ebx
        add     edx,esi
        push    edx
        add     eax,ecx
        push    eax
        call    @std@#__find_first_of_ce.pxcpxcpqcc.4bool~.qpxcpxcpxcpxcpqcc.n0 ; std::__find_first_of_ce<char const *, char const *, (*)(*)(char, char)>(char const *, char const *, char const *, char const *, (*)(*)(char, char))
        add     esp,byte 014h
        mov     edx,ebx
        add     edx,esi
        cmp     eax,edx
        jne     L_67877
        or      eax,byte 0ffffffffh
        jmp     L_67870
L_67877:
        sub     eax,ebx
; Line 945: } 
L_67870:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        ret
section code
section code
        section vsc@std@#__deque_base_common.4bool?1?~@.bctr.qv virtual
        [bits 32]
; std::__deque_base_common<bool=1>::__deque_base_common()
@std@#__deque_base_common.4bool?1?~@.bctr.qv:
L_67888:
        mov     eax,dword [esp+04h]
L_67889:
        ret
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@.bctr.qv virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::__split_buffer()
@std@#__split_buffer.pc#allocator.pc~~@.bctr.qv:
        add     esp,byte 0ffffffe0h
        push    ebx
L_67896:
        mov     ebx,dword [esp+04h+024h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     ecx,ebx
        add     ecx,byte 010h
        xor     eax,eax
        mov     dword [esp-08h+024h],eax
        lea     edx,[esp-08h+024h]
        mov     dword [esp-04h+024h],00h
        lea     eax,[esp-04h+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [ebx+010h],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_68030:
; Line 329: } 
        mov     eax,ebx
L_67897:
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#allocator.c~~@.bctr.i23@std@__default_init_tag~.qRiRn0 virtual
        [bits 32]
; std::__compressed_pair<unsigned int, allocator<char>>::__compressed_pair<int, std::__default_init_tag, >(int&&, std::__default_init_tag&&)
@std@#__compressed_pair.ui#allocator.c~~@.bctr.i23@std@__default_init_tag~.qRiRn0:
; Line 2286:   template <class _U1, class _U2> 
        add     esp,byte 0fffffff0h
        push    ebx
L_68036:
        mov     eax,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
        mov     edx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,ebx
L_68037:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 virtual
        [bits 32]
; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(&&)
@std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2:
        push    ecx
L_68112:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2206:     } 
L_68113:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_68138:
        mov     eax,dword [esp+04h]
L_68174:
L_68139:
        ret
section code
section code
        section vsc@#TemplatedTokenizer.2kw~@NextShared.qv virtual
        [bits 32]
; TemplatedTokenizer<kw>::NextShared()
@#TemplatedTokenizer.2kw~@NextShared.qv:
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_68180:
        mov     ebx,dword [esp+04h+010h]
        mov     esi,dword [esp+08h+010h]
; Line 212:     Next(); 
        mov     eax,esi
        push    eax
        call    @#TemplatedTokenizer.2kw~@Next.qv ; TemplatedTokenizer<kw>::Next()
        add     esp,byte 04h
        mov     eax,esi
        add     eax,byte 018h
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [eax+04h]
        mov     dword [ebx+04h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [ebx+04h],byte 00h
        je      L_68188
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [ebx+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_68235:
; Line 3478:     } 
L_68220:
L_68188:
; Line 4064: } 
        mov     eax,dword [esp+04h+010h]
; Line 215: } 
L_68181:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@Token@IsEnd.xqv virtual
        [bits 32]
; Token::IsEnd() const 
@Token@IsEnd.xqv:
; Line 56:     virtual bool IsEnd() const { return false; } 
L_68259:
        xor     al,al
L_68260:
        ret
section code
section code
        section vsc@Token@IsKeyword.xqv virtual
        [bits 32]
; Token::IsKeyword() const 
@Token@IsKeyword.xqv:
; Line 52:     virtual bool IsKeyword() const { return false; } 
L_68267:
        xor     al,al
L_68268:
        ret
section code
section code
        section vsc@Token@GetKeyword.xqv virtual
        [bits 32]
; Token::GetKeyword() const 
@Token@GetKeyword.xqv:
; Line 64:     virtual kw GetKeyword() const { return (kw)-1; } 
L_68275:
        mov     eax,0ffffffffh
L_68276:
        ret
section code
section code
        section vsc@std@#deque.c#allocator.c~~@push_back.qRc virtual
        [bits 32]
; std::deque<char, allocator<char>>::push_back(char&&)
@std@#deque.c#allocator.c~~@push_back.qRc:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    esi
        push    edi
L_68283:
        mov     esi,dword [esp+08h+028h]
        mov     ebx,dword [esp+04h+028h]
; Line 1952:     allocator_type& __a = __base::__alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-01ch+028h],eax
        and     eax,eax
        je      L_68323
        mov     eax,dword [esp-01ch+028h]
        add     eax,byte 04h
        jmp     L_68324
L_68323:
        mov     eax,dword [esp-01ch+028h]
L_68324:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        mov     edi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     ecx,ebx
        mov     eax,ebx
; Line 1505:         return __capacity() - (__base::__start_ + __base::size()); 
; Line 1485:         return __base::__map_.size() == 0 ? 0 : __base::__map_.size() * __base::__block_size - 1; 
        mov     edx,dword [ecx+08h+04h]
        mov     ecx,dword [ecx+0ch+04h]
        sub     ecx,edx
        sar     ecx,02h
        and     ecx,ecx
        jne     L_68357
        xor     ecx,ecx
        jmp     L_68358
L_68357:
        mov     ecx,dword [eax+08h+04h]
        sub     ecx,dword [eax+0ch+04h]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,02h
        mov     edx,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        imul    ecx,edx
        dec     ecx
L_68358:
; Line 1486:     } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [eax+020h]
        mov     eax,dword [eax+01ch]
        add     eax,edx
        sub     eax,ecx
        neg     eax
; Line 1506:     } 
        and     eax,eax
        jne     L_68286
; Line 1954:         __add_back_capacity(); 
        mov     eax,ebx
        push    eax
        call    @std@#deque.c#allocator.c~~@__add_back_capacity.qv ; std::deque<char, allocator<char>>::__add_back_capacity()
        add     esp,byte 04h
L_68286:
; Line 1956:     __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), _VSTD::move(__v)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    esi
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+030h]
        push    eax
        call    @std@#__deque_base.c#allocator.c~~@end.qv ; std::__deque_base<char, allocator<char>>::end()
        add     esp,byte 08h
        mov     eax,dword [eax+04h]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    eax
        push    edi
        call    @std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc ; std::allocator_traits<allocator<char>>::construct<char, char>(allocator<char>&, char*, char&&)
L_68500:
        add     esp,byte 0ch
; Line 1957:     ++__base::size(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [esp-0ch+028h],eax
        mov     ecx,dword [eax]
        inc     ecx
        mov     eax,dword [esp-0ch+028h]
        mov     dword [eax],ecx
; Line 1958: } 
L_68284:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@Token@IsIdentifier.xqv virtual
        [bits 32]
; Token::IsIdentifier() const 
@Token@IsIdentifier.xqv:
; Line 55:     virtual bool IsIdentifier() const { return false; } 
L_68554:
        xor     al,al
L_68555:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff14h
        push    ebx
        push    esi
        push    edi
L_68562:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d0h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2458:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d8h],eax
        and     eax,eax
        je      L_68645
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        jmp     L_68646
L_68645:
        mov     eax,dword [ebp-0d8h]
L_68646:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ecx,dword [ebp-0d4h]
        mov     eax,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_68724
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_68725
L_68724:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,ecx
L_68725:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_68950
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [edx+08h+04h]
        jmp     L_68951
L_68950:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     edx,ecx
L_68951:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_69146
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+04h+04h]
        jmp     L_69147
L_69146:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ecx+04h]
        shr     eax,01h
L_69147:
        add     eax,edx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ebx
        push    eax
        push    ebx
        mov     dword [ebp-0dch],00h
        lea     eax,[ebp-0dch]
        mov     dword [ebp-0e0h],eax
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_68677:
        mov     dword [ebp-0c0h],ebx
        mov     eax,dword [ebp-0d0h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0e4h],eax
        and     eax,eax
        je      L_69356
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 04h
        jmp     L_69357
L_69356:
        mov     eax,dword [ebp-0e4h]
L_69357:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
        and     ecx,ecx
        je      L_68565
; Line 2461:     { 
; Line 2462:         size_t __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0c0h]
        mov     dword [ebp-0cch],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_69409
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_69410
L_69409:
        cmp     eax,ecx
        jc      L_69412
L_69411:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_69412:
L_69410:
; Line 119: } 
        mov     dword [ebp-0c4h],eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0d0h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_68569
; Line 2465:         { 
; Line 2466:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     edi,dword [eax]
        and     edi,edi
        je      L_68575
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_69462
        mov     ebx,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,esi
        mov     dword [ebp-0c8h],ecx
        and     ecx,ecx
        jne     L_69510
        mov     ecx,esi
        dec     ecx
        and     eax,ecx
        jmp     L_69511
L_69510:
        cmp     eax,edx
        jc      L_69513
L_69512:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_69513:
L_69511:
; Line 119: } 
        cmp     eax,ebx
        jne     L_68575
L_69462:
L_68573:
; Line 2470:             { 
; Line 2471:                 if ((__nd->__hash() == __hash) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        jne     L_68581
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0e8h],eax
        and     eax,eax
        je      L_69576
        mov     eax,dword [ebp-0e8h]
        add     eax,byte 04h
        jmp     L_69577
L_69576:
        mov     eax,dword [ebp-0e8h]
L_69577:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,edi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-0d4h]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_68581
        mov     eax,edi
        mov     dword [ebp-04ch+014h],01h
        jmp     L_68563
L_68581:
; Line 2478:             } 
L_68576:
        mov     edi,dword [edi]
L_68574:
        and     edi,edi
        je      L_69727
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_68573
        mov     esi,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,ebx
        jne     L_69775
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_69776
L_69775:
        cmp     eax,edx
        jc      L_69778
L_69777:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_69778:
L_69776:
; Line 119: } 
        cmp     eax,esi
        je      L_68573
L_69727:
L_68575:
; Line 2479:         } 
L_68569:
; Line 2480:     } 
L_68565:
        mov     eax,dword [ebp-0d0h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end()
        mov     dword [ebp-0ech],eax
        add     esp,byte 04h
        mov     eax,dword [ebp-0ech]
        mov     dword [ebp-04ch+014h],02h
; Line 2482: } 
L_68563:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::operator []( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff90h
        push    ebx
        push    esi
L_69799:
        mov     esi,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-058h],eax
        mov     dword [ebp-058h+04h],___cppexceptionhandle
        mov     dword [ebp-058h+08h],esp
        mov     dword [ebp-058h+0ch],ebp
        mov     dword [ebp-058h+010h],@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-058h+014h],00h
        lea     eax,[ebp-058h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1633:     return __table_.__emplace_unique_key_args(__k, 
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        mov     dword [ebp-070h],eax
; Line 1149: } 
        lea     eax,[ebp-08h]
        push    eax
        mov     eax,esi
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::forward_as_tuple< const basic_string<char, char_traits<char>, allocator<char>>&>( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-058h+014h],01h
        push    eax
        push    dword @std@piecewise_construct
        push    esi
        push    ebx
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const &, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
        mov     dword [ebp-058h+014h],02h
L_69889:
L_69876:
L_69863:
L_69905:
        add     esp,byte 018h
; Line 337:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container iterator"); 
        mov     eax,dword [eax]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 339:     } 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
        add     eax,byte 014h
L_70062:
L_70049:
; Line 1636: } 
L_70090:
L_70077:
L_69800:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.barray.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffa8h
        dd      0400h
        dd      @.xt@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffffch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign.qr#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__move_assign(vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=1>)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign.qr#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
L_70097:
        mov     esi,dword [esp+08h+058h]
        mov     ebx,dword [esp+04h+058h]
; Line 1383:     __vdeallocate(); 
        mov     eax,ebx
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vdeallocate.qv ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vdeallocate()
        add     esp,byte 04h
; Line 1384:     __base::__move_assign_alloc(__c);  
        mov     edx,ebx
        mov     eax,esi
        mov     dword [esp-050h+058h],00h
        lea     ecx,[esp-050h+058h]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign_alloc.qr#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~ ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__move_assign_alloc(__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=1>)
L_70148:
        add     esp,byte 0ch
L_70119:
; Line 1385:     this->__begin_ = __c.__begin_; 
        mov     eax,esi
        mov     ecx,dword [esi+04h]
        mov     dword [ebx+04h],ecx
; Line 1386:     this->__end_ = __c.__end_; 
        mov     ecx,dword [esi+08h]
        mov     dword [ebx+08h],ecx
; Line 1387:     this->__end_cap() = __c.__end_cap(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ecx+0ch]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebx+0ch],ecx
; Line 1388:     __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],00h
        mov     eax,dword [eax+0ch]
        mov     dword [esi+08h],eax
        mov     dword [esi+04h],eax
; Line 1390:     __get_db()->swap(this, &__c); 
L_70307:
L_70098:
        pop     esi
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_70313:
        mov     eax,dword [esp+04h+060h]
        mov     dword [esp-048h+060h],eax
; Line 461:     if (__begin_ != nullptr) 
        mov     eax,dword [esp-048h+060h]
        cmp     dword [eax+04h],byte 00h
        je      L_70316
; Line 462:     { 
; Line 463:         clear(); 
        mov     eax,dword [esp-048h+060h]
        mov     ebp,eax
        mov     esi,dword [eax+04h]
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     edi,dword [ebp+08h]
        mov     ecx,edi
        mov     eax,esi
        mov     ebx,ebp
        add     ebx,byte 0ch
        cmp     eax,ecx
        je      L_70342
L_70341:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     edi,byte 08h
        mov     eax,edi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-04ch+064h],ebx
        and     ebx,ebx
        je      L_70408
        mov     eax,dword [esp-04ch+064h]
        add     eax,byte 04h
        jmp     L_70409
L_70408:
        mov     eax,dword [esp-04ch+064h]
L_70409:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::destroy<shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
        add     esp,byte 08h
L_70343:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     esi,edi
        jne     L_70341
L_70342:
; Line 427:     __end_ = __new_last; 
        mov     dword [ebp+08h],esi
; Line 428: } 
L_70360:
L_70338:
; Line 464:         __alloc_traits::deallocate(__alloc(), __begin_, capacity()); 
        mov     eax,dword [esp-048h+060h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-050h+060h],eax
        and     eax,eax
        je      L_70459
        mov     eax,dword [esp-050h+060h]
        add     eax,byte 04h
        jmp     L_70460
L_70459:
        mov     eax,dword [esp-050h+060h]
L_70460:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [esp-048h+060h]
        mov     eax,dword [eax+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_70555:
L_70540:
L_70427:
; Line 465:     } 
L_70316:
; Line 466: } 
L_70645:
L_70632:
L_70660:
L_70619:
        mov     eax,dword [esp-048h+060h]
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@.bdtr.qv ; std::__vector_base_common<bool=1>::~__vector_base_common()
        add     esp,byte 04h
L_70314:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@Token@GetId.xqv virtual
        [bits 32]
; Token::GetId() const 
@Token@GetId.xqv:
; Line 65:     virtual const std::string& GetId() const 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_70667:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@Token@GetId.xqv
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 67:         static std::string aa; 
; Line 855:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        cmp     dword [_$anontemp659],dword 0ffffffffh
        je      L_70674
        push    dword _$anontemp659
        call    ___static_guard ; __static_guard
        add     esp,byte 04h
        and     al,al
        je      L_70674
        mov     edi,@Token@GetId.xqv_aa_89126
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        mov     dword [ebp-060h],00h
        lea     ebx,[ebp-060h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_70785:
L_70799:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-048h+014h],01h
        push    dword _@Token@GetId.xqv_aa_89126_dest ; @Token@GetId.xqv_aa_89126_dest
        call    _atexit ; atexit
        add     esp,byte 04h
        mov     dword [_$anontemp659],0ffffffffh
L_70674:
        mov     eax,@Token@GetId.xqv_aa_89126
; Line 69:     } 
L_70668:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@Token@GetId.xqv virtual
        [bits 32]
@.xc@Token@GetId.xqv:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__copy_assign_alloc( const __vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~:
; Line 377:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_70806:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-04h],00h
        lea     edx,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~ ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__copy_assign_alloc( const __vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=0>)
        mov     dword [ebp-04ch+014h],02h
L_70840:
        add     esp,byte 0ch
L_70807:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#integral_constant.4booln0?0?~ virtual
        [bits 32]
@.xt@#integral_constant.4booln0?0?~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      06eh
        db      074h
        db      065h
        db      067h
        db      072h
        db      061h
        db      06ch
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      061h
        db      06eh
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0fffffffch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#assign.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::assign<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#assign.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~:
        add     esp,0ffffff18h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_70846:
        mov     eax,dword [esp+0ch+0f8h]
        mov     dword [esp-0c8h+0f8h],eax
        mov     ebx,dword [esp+08h+0f8h]
        mov     eax,dword [esp+04h+0f8h]
        mov     dword [esp-0c4h+0f8h],eax
; Line 1439:     size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last)); 
        mov     esi,ebx
        mov     edi,dword [esp-0c8h+0f8h]
; Line 700:     return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [esp-0d0h+0f8h],00h
        lea     ebp,[esp-0d0h+0f8h]
        push    ebp
        call    @std@forward_iterator_tag@.bctr.qv ; std::forward_iterator_tag::forward_iterator_tag()
        add     esp,byte 04h
        push    dword [ebp]
        push    edi
        push    esi
        call    @std@#__distance.p#shared_ptr.5Token~~.qp#shared_ptr.n0~p#shared_ptr.n0~31@std@random_access_iterator_tag ; std::__distance<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, std::random_access_iterator_tag)
        mov     esi,eax
        lea     eax,[esp-0d0h+0104h]
        push    eax
        call    @std@forward_iterator_tag@.bdtr.qv ; std::forward_iterator_tag::~forward_iterator_tag()
        add     esp,byte 04h
L_70949:
L_70936:
        add     esp,byte 0ch
; Line 701: } 
        mov     dword [esp-0cch+0f8h],esi
        mov     eax,dword [esp-0c4h+0f8h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        mov     ecx,eax
        sar     ecx,03h
        cmp     dword [esp-0cch+0f8h],ecx
        ja      L_70849
; Line 1441:     { 
; Line 1442:         _ForwardIterator __mid = __last; 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     dword [esp-04h+0f8h],eax
        xor     al,al
        mov     byte [esp-0bdh+0f8h],al
        mov     eax,dword [esp-0c4h+0f8h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax+08h]
        sub     eax,ecx
        mov     ecx,eax
        sar     ecx,03h
        cmp     dword [esp-0cch+0f8h],ecx
        jbe     L_70853
; Line 1445:         { 
; Line 1446:             __growing = true; 
        mov     byte [esp-0bdh+0f8h],01h
; Line 1447:             __mid =  __first; 
        mov     eax,ebx
        mov     dword [esp-04h+0f8h],eax
; Line 1448:             _VSTD::advance(__mid, size()); 
        lea     esi,[esp-04h+0f8h]
        mov     eax,dword [esp-0c4h+0f8h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax+08h]
        sub     eax,ecx
        mov     edi,eax
        sar     edi,03h
; Line 672:     _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,                         "Attempt to advance(it, -n) on a non-bidi iterator"); 
; Line 673:     __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [esp-0d4h+0f8h],00h
        lea     ebp,[esp-0d4h+0f8h]
        push    ebp
        call    @std@forward_iterator_tag@.bctr.qv ; std::forward_iterator_tag::forward_iterator_tag()
        add     esp,byte 04h
        push    dword [ebp]
        push    edi
        push    esi
        call    @std@#__advance.p#shared_ptr.5Token~~.qrp#shared_ptr.n0~i31@std@random_access_iterator_tag ; std::__advance<shared_ptr<Token>*>(shared_ptr<Token>*&, int, std::random_access_iterator_tag)
        lea     eax,[esp-0d4h+0104h]
        push    eax
        call    @std@forward_iterator_tag@.bdtr.qv ; std::forward_iterator_tag::~forward_iterator_tag()
        add     esp,byte 04h
L_71137:
L_71124:
        add     esp,byte 0ch
; Line 674: } 
L_71063:
; Line 1449:         } 
L_70853:
        mov     ecx,dword [esp-04h+0f8h]
        mov     eax,dword [esp-0c4h+0f8h]
        mov     eax,dword [eax+04h]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1701:         *__result = *__first; 
; Line 4218:     shared_ptr(__r).swap(*this); 
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
; Line 4338: } 
; Line 4220: } 
; Line 1703: } 
; Line 1737:     } else { 
L_71143:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
        push    eax
        push    ecx
        push    ebx
        call    @std@#__copy_constexpr.p#shared_ptr.5Token~p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~p#shared_ptr.n0~ ; std::__copy_constexpr<shared_ptr<Token>*, shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, shared_ptr<Token>*)
        mov     ebx,eax
        add     esp,byte 0ch
; Line 1711: } 
; Line 1740:     } 
L_71148:
L_71167:
        cmp     byte [esp-0bdh+0f8h],byte 00h
        je      L_70860
; Line 1452:             __construct_at_end(__mid, __last, __new_size - size()); 
        mov     edx,dword [esp-0cch+0f8h]
        mov     ecx,dword [esp-0c4h+0f8h]
        mov     eax,ecx
        mov     ebx,dword [eax+04h]
        mov     eax,dword [eax+08h]
        sub     eax,ebx
        sar     eax,03h
        sub     eax,edx
        neg     eax
        push    eax
        mov     eax,dword [esp-0c8h+0fch]
        push    eax
        mov     eax,dword [esp-04h+0100h]
        push    eax
        push    ecx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_at_end<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, unsigned int)
        add     esp,byte 010h
        jmp     L_70869
L_70860:
; Line 1453:         else 
; Line 1454:             this->__destruct_at_end(__m); 
        mov     ebp,dword [esp-0c4h+0f8h]
; Line 831:         __invalidate_iterators_past(__new_last); 
; Line 2133:   __c_node* __c = __get_db()->__find_c_and_lock(this); 
; Line 2147: } 
L_71384:
; Line 833:         __base::__destruct_at_end(__new_last); 
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     esi,dword [ebp+08h]
        mov     edi,ebp
        add     edi,byte 0ch
        cmp     ebx,esi
        je      L_71405
L_71404:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     esi,byte 08h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e0h+0fch],edi
        and     edi,edi
        je      L_71471
        mov     eax,dword [esp-0e0h+0fch]
        add     eax,byte 04h
        jmp     L_71472
L_71471:
        mov     eax,dword [esp-0e0h+0fch]
L_71472:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::destroy<shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
        add     esp,byte 08h
L_71406:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     ebx,esi
        jne     L_71404
L_71405:
; Line 427:     __end_ = __new_last; 
        mov     dword [ebp+08h],ebx
; Line 428: } 
L_71423:
; Line 834:         __annotate_shrink(__old_size); 
; Line 891:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_71504:
; Line 893:     } 
L_71489:
; Line 835:     } 
L_71369:
L_70863:
; Line 1455:     } 
        jmp     L_70869
L_70849:
; Line 1456:     else 
; Line 1457:     { 
; Line 1458:         __vdeallocate(); 
        mov     eax,dword [esp-0c4h+0f8h]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vdeallocate.qv ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vdeallocate()
        add     esp,byte 04h
; Line 1459:         __vallocate(__recommend(__new_size)); 
        mov     esi,dword [esp-0c4h+0f8h]
        mov     eax,dword [esp-0cch+0f8h]
        mov     dword [esp-0ach+0f8h],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    esi
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@max_size.xqv ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::max_size() const 
        mov     edi,eax
        add     esp,byte 04h
        mov     eax,edi
        cmp     dword [esp-0ach+0f8h],eax
        jbe     L_71734
; Line 1027:         this->__throw_length_error(); 
        push    esi
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_71734:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esi+04h]
        sub     eax,dword [esi+0ch]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        mov     edx,edi
        shr     edx,01h
        cmp     eax,edx
        jnc     L_71756
L_71739:
        shl     eax,01h
        mov     dword [esp-0e4h+0f8h],eax
        lea     eax,[esp-0e4h+0f8h]
        lea     ecx,[esp-0ach+0f8h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [esp-0e8h+0f8h],00h
        lea     edx,[esp-0e8h+0f8h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_71880:
        add     esp,byte 0ch
; Line 2636: } 
        mov     edi,dword [eax]
; Line 1032: } 
L_71756:
        push    edi
        mov     eax,dword [esp-0c4h+0fch]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vallocate.qui ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vallocate(unsigned int)
        add     esp,byte 08h
; Line 1460:         __construct_at_end(__first, __last, __new_size); 
        mov     eax,dword [esp-0cch+0f8h]
        push    eax
        mov     eax,dword [esp-0c8h+0fch]
        push    eax
        push    ebx
        mov     eax,dword [esp-0c4h+0104h]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_at_end<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, unsigned int)
        add     esp,byte 010h
; Line 1461:     } 
L_70869:
; Line 1462:     __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_71898:
; Line 1463: } 
L_71170:
L_71270:
L_71255:
L_71173:
L_71171:
L_71172:
L_70847:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0e8h
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_one_at_end< const shared_ptr<Token>&>( const shared_ptr<Token>&)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
L_71904:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 923:     _ConstructTransaction __tx(*this, 1); 
        mov     ebx,eax
        mov     edx,01h
        mov     esi,ebx
        mov     dword [ebp-0ch],esi
        mov     ebx,dword [ebx+08h]
        mov     dword [ebp+04h-0ch],ebx
        shl     edx,03h
        add     edx,ebx
        mov     dword [ebp+08h-0ch],edx
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 924:     __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_), 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        mov     ecx,dword [ebp-0ch+04h]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-068h],eax
        and     eax,eax
        je      L_71991
        mov     eax,dword [ebp-068h]
        add     eax,byte 04h
        jmp     L_71992
L_71991:
        mov     eax,dword [ebp-068h]
L_71992:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>,  const shared_ptr<Token>&>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*,  const shared_ptr<Token>&)
        add     esp,byte 0ch
; Line 926:     ++__tx.__pos_; 
        add     dword [ebp-0ch+04h],byte 08h
; Line 927:   } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_72008:
L_71905:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@82@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction virtual
        [bits 32]
@.xt@82@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction:
        dd      @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_one_at_end.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@82@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__push_back_slow_path< const shared_ptr<Token>&>( const shared_ptr<Token>&)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff70h
        push    ebx
        push    esi
        push    edi
L_72014:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-090h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08ch],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1622:     allocator_type& __a = this->__alloc(); 
        mov     eax,dword [ebp-08ch]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-080h],eax
        and     eax,eax
        je      L_72051
        mov     eax,dword [ebp-080h]
        add     eax,byte 04h
        jmp     L_72052
L_72051:
        mov     eax,dword [ebp-080h]
L_72052:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
        push    eax
        mov     ebx,dword [ebp-08ch]
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        push    eax
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        inc     eax
        mov     dword [ebp-064h],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    ebx
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@max_size.xqv ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::max_size() const 
        mov     edi,eax
        add     esp,byte 04h
        mov     eax,edi
        cmp     dword [ebp-064h],eax
        jbe     L_72072
; Line 1027:         this->__throw_length_error(); 
        push    ebx
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_72072:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+0ch]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        mov     edx,edi
        shr     edx,01h
        cmp     eax,edx
        jnc     L_72094
L_72077:
        shl     eax,01h
        mov     dword [ebp-084h],eax
        lea     eax,[ebp-084h]
        lea     ecx,[ebp-064h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-088h],00h
        lea     edx,[ebp-088h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_72234:
        add     esp,byte 0ch
; Line 2636: } 
        mov     edi,dword [eax]
; Line 1032: } 
L_72094:
        push    edi
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bctr.quiuir#allocator.#shared_ptr.n0~~ ; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::__split_buffer(unsigned int, unsigned int, allocator<shared_ptr<Token>>&)
        add     esp,byte 010h
        mov     dword [ebp-060h+014h],01h
; Line 1625:     __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Up>(__x)); 
        mov     eax,dword [ebp-090h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-018h+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    esi
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>,  const shared_ptr<Token>&>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*,  const shared_ptr<Token>&)
        add     esp,byte 0ch
; Line 1626:     __v.__end_++; 
        add     dword [ebp-018h+0ch],byte 08h
; Line 1627:     __swap_out_circular_buffer(__v); 
        lea     eax,[ebp-018h]
        push    eax
        mov     eax,dword [ebp-08ch]
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__swap_out_circular_buffer.qr#__split_buffer.#shared_ptr.n0~r#allocator.#shared_ptr.n0~~~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__swap_out_circular_buffer(__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>&)
        add     esp,byte 08h
; Line 1628: } 
        mov     dword [ebp-060h+014h],02h
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::~__split_buffer()
        add     esp,byte 04h
L_72015:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~:
        dd      @std@#__compressed_pair.p#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xt@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~:
        dd      @std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__split_buffer_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__push_back_slow_path.rx#shared_ptr.n0~~.qrx#shared_ptr.n0~:
        dd      00h
        dd      0ffffffa0h
        dd      0400h
        dd      @.xt@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~+0
        dd      0ffffffe8h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#swap.p5Token~.qrpn0rpn0 virtual
        [bits 32]
; std::swap<Token*>(Token*&, Token*&)
@std@#swap.p5Token~.qrpn0rpn0:
; Line 3714: { 
        add     esp,byte 0ffffffech
L_72274:
        mov     eax,dword [esp+08h+014h]
        mov     ecx,dword [esp+04h+014h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-04h+014h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+014h]
        mov     dword [eax],ecx
; Line 3718: } 
L_72275:
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0 virtual
        [bits 32]
; std::swap<std::__shared_weak_count*>(std::__shared_weak_count*&, std::__shared_weak_count*&)
@std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0:
; Line 3714: { 
        add     esp,byte 0ffffffech
L_72330:
        mov     eax,dword [esp+08h+014h]
        mov     ecx,dword [esp+04h+014h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-04h+014h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+014h]
        mov     dword [eax],ecx
; Line 3718: } 
L_72331:
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<Token>::~shared_ptr()
@std@#shared_ptr.5Token~@.bdtr.qv:
        push    ebx
L_72386:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_72389
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_72397
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_72397:
; Line 3487:     } 
L_72414:
L_72389:
; Line 4211: } 
L_72387:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__deque_base.c#allocator.c~~@.bdtr.qv virtual
        [bits 32]
; std::__deque_base<char, allocator<char>>::~__deque_base()
@std@#__deque_base.c#allocator.c~~@.bdtr.qv:
        add     esp,byte 0ffffffc4h
        push    ebx
        push    esi
        push    edi
L_72420:
        mov     ebx,dword [esp+04h+048h]
; Line 1184:     clear(); 
        mov     eax,ebx
        push    eax
        call    @std@#__deque_base.c#allocator.c~~@clear.qv ; std::__deque_base<char, allocator<char>>::clear()
        add     esp,byte 04h
        mov     esi,dword [ebx+08h+04h]
        mov     edi,dword [ebx+0ch+04h]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     esi,edi
        je      L_72425
L_72423:
; Line 1188:         __alloc_traits::deallocate(__alloc(), *__i, __block_size); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+048h],eax
        and     eax,eax
        je      L_72510
        mov     eax,dword [esp-03ch+048h]
        add     eax,byte 04h
        jmp     L_72511
L_72510:
        mov     eax,dword [esp-03ch+048h]
L_72511:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [esi]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_72542:
L_72527:
L_72478:
L_72426:
        add     esi,byte 04h
L_72424:
        cmp     esi,edi
        jne     L_72423
L_72425:
; Line 1189: } 
L_72632:
L_72619:
L_72647:
L_72606:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>>::~__split_buffer()
        add     esp,byte 04h
L_72662:
L_72421:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@#TemplatedTokenizer.2kw~@.bdtr.qv virtual
        [bits 32]
; TemplatedTokenizer<kw>::~TemplatedTokenizer()
@#TemplatedTokenizer.2kw~@.bdtr.qv:
        push    ebx
L_72668:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_72669:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__split_buffer_common.4bool?1?~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer_common<bool=1>::~__split_buffer_common()
@std@#__split_buffer_common.4bool?1?~@.bdtr.qv:
L_72674:
L_72675:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.ppci?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<char**, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.ppci?0?4bool?0?~@.bdtr.qv:
L_72680:
L_72681:
        ret
section code
section code
        section vsc@std@#allocator.pc~@.bdtr.qv virtual
        [bits 32]
; std::allocator<char*>::~allocator()
@std@#allocator.pc~@.bdtr.qv:
L_72686:
L_72687:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bdtr.qv:
L_72692:
L_72706:
L_72693:
        ret
section code
section code
        section vsc@std@#__compressed_pair.ppc#allocator.pc~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<char**, allocator<char*>>::~__compressed_pair()
@std@#__compressed_pair.ppc#allocator.pc~~@.bdtr.qv:
L_72712:
L_72739:
L_72726:
L_72754:
L_72713:
        ret
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::~__split_buffer()
@std@#__split_buffer.pc#allocator.pc~~@.bdtr.qv:
        add     esp,byte 0ffffff98h
        push    ebx
L_72760:
        mov     ebx,dword [esp+04h+06ch]
; Line 348:     clear(); 
        mov     eax,ebx
        mov     edx,ebx
        mov     eax,dword [eax+08h]
        mov     dword [esp-064h+06ch],00h
        lea     ecx,[esp-064h+06ch]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__split_buffer.pc#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~ ; std::__split_buffer<char*, allocator<char*>>::__destruct_at_end(char**, integral_constant<bool, bool=0>)
L_72829:
        add     esp,byte 0ch
L_72800:
L_72783:
        cmp     dword [ebx+04h],byte 00h
        je      L_72763
; Line 350:         __alloc_traits::deallocate(__alloc(), __first_, capacity()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+06ch],eax
        and     eax,eax
        je      L_72879
        mov     eax,dword [esp-068h+06ch]
        add     eax,byte 04h
        jmp     L_72880
L_72879:
        mov     eax,dword [esp-068h+06ch]
L_72880:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_72975:
L_72960:
L_72847:
L_72763:
; Line 351: } 
L_73065:
L_73052:
L_73080:
L_73039:
L_73095:
L_72761:
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@#__deque_base_common.4bool?1?~@.bdtr.qv virtual
        [bits 32]
; std::__deque_base_common<bool=1>::~__deque_base_common()
@std@#__deque_base_common.4bool?1?~@.bdtr.qv:
L_73101:
L_73102:
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#allocator.c~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<unsigned int, allocator<char>>::~__compressed_pair()
@std@#__compressed_pair.ui#allocator.c~~@.bdtr.qv:
L_73107:
L_73134:
L_73121:
L_73149:
L_73108:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bdtr.qv:
L_73155:
L_73156:
        ret
section code
section code
        section vsc@std@#allocator.#shared_ptr.5Token~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<shared_ptr<Token>>::~allocator()
@std@#allocator.#shared_ptr.5Token~~@.bdtr.qv:
L_73161:
L_73162:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv:
L_73167:
L_73181:
L_73168:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<shared_ptr<Token>*, allocator<shared_ptr<Token>>>::~__compressed_pair()
@std@#__compressed_pair.p#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv:
L_73187:
L_73214:
L_73201:
L_73229:
L_73188:
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~vector()
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv:
; Line 548:     _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0fffffff0h
L_73235:
        mov     eax,dword [esp+04h+010h]
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_73268:
; Line 879:     } 
L_73253:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
        add     esp,byte 04h
L_73236:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv:
L_73579:
        mov     eax,dword [esp+04h]
L_73580:
        ret
section code
section code
        section vsc@std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui virtual
        [bits 32]
; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
@std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui:
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_73587:
        mov     edi,dword [esp+0ch+014h]
        mov     esi,dword [esp+08h+014h]
; Line 995:     const _Size __m = 0x5bd1e995; 
        mov     ebx,edi
; Line 999:     for (; __len >= 4; __data += 4, __len -= 4) 
        cmp     edi,byte 04h
        jc      L_73592
L_73590:
; Line 1000:     { 
; Line 1001:         _Size __k = __loadword<_Size>(__data); 
        mov     eax,esi
; Line 972:     _Size __r; 
; Line 973:     std::memcpy(&__r, __p, sizeof(__r)); 
        mov     ecx,04h
        push    ecx
        push    eax
        lea     eax,[esp-08h+01ch]
        push    eax
        call    _memcpy ; memcpy
        add     esp,byte 0ch
        mov     eax,dword [esp-08h+014h]
; Line 975: } 
; Line 1002:         __k *= __m; 
        imul    eax,05bd1e995h
; Line 1003:         __k ^= __k >> __r; 
        mov     ecx,eax
        shr     ecx,018h
        xor     eax,ecx
; Line 1004:         __k *= __m; 
        imul    eax,05bd1e995h
; Line 1005:         __h *= __m; 
        imul    ecx,ebx,05bd1e995h
; Line 1006:         __h ^= __k; 
        mov     ebx,ecx
        xor     ebx,eax
; Line 1007:     } 
L_73593:
        add     esi,byte 04h
        sub     edi,byte 04h
L_73591:
        cmp     edi,byte 04h
        jnc     L_73590
L_73592:
        cmp     edi,byte 01h
        je      L_73607
        cmp     edi,byte 02h
        je      L_73605
        cmp     edi,byte 03h
        je      L_73603
        jmp     L_73610
; Line 1009:     { 
; Line 1010:     case 3: 
L_73603:
; Line 1011:         __h ^= __data[2] << 16; 
        movzx   eax,byte [esi+02h]
        shl     eax,010h
        xor     ebx,eax
; Line 1012:         _LIBCPP_FALLTHROUGH(); 
L_73605:
; Line 1014:         __h ^= __data[1] << 8; 
        movzx   eax,byte [esi+01h]
        shl     eax,08h
        xor     ebx,eax
; Line 1015:         _LIBCPP_FALLTHROUGH(); 
L_73607:
; Line 1017:         __h ^= __data[0]; 
        movzx   eax,byte [esi]
        xor     eax,ebx
; Line 1018:         __h *= __m; 
        imul    ebx,eax,05bd1e995h
; Line 1019:     } 
L_73610:
L_73600:
; Line 1020:     __h ^= __h >> 13; 
        mov     eax,ebx
        shr     eax,0dh
        xor     eax,ebx
; Line 1021:     __h *= __m; 
        imul    eax,05bd1e995h
; Line 1022:     __h ^= __h >> 15; 
        mov     ecx,eax
        shr     ecx,0fh
        xor     eax,ecx
; Line 1024: } 
L_73588:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv virtual
        [bits 32]
; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
@std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv:
L_73633:
L_73634:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_73639:
        mov     eax,dword [esp+04h]
L_73640:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_73647:
        mov     eax,dword [esp+04h]
L_73648:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end() const 
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_73655:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1840:     return const_iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-04ch+014h],01h
; Line 1844: } 
L_73656:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_one_at_end<variant<shared_ptr<Token>, unsigned long long>>(variant<shared_ptr<Token>, unsigned long long>&&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~:
; Line 920:   template <class ..._Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
L_73683:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 923:     _ConstructTransaction __tx(*this, 1); 
        mov     ebx,eax
        mov     edx,01h
        mov     esi,ebx
        mov     dword [ebp-0ch],esi
        mov     ebx,dword [ebx+08h]
        mov     dword [ebp+04h-0ch],ebx
        imul    edx,byte 018h
        add     edx,ebx
        mov     dword [ebp+08h-0ch],edx
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 924:     __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_), 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        mov     ecx,dword [ebp-0ch+04h]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-068h],eax
        and     eax,eax
        je      L_73770
        mov     eax,dword [ebp-068h]
        add     eax,byte 04h
        jmp     L_73771
L_73770:
        mov     eax,dword [ebp-068h]
L_73771:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 0ch
; Line 926:     ++__tx.__pos_; 
        add     dword [ebp-0ch+04h],byte 018h
; Line 927:   } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_73787:
L_73684:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction virtual
        [bits 32]
@.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction:
        dd      @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_one_at_end.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__push_back_slow_path<variant<shared_ptr<Token>, unsigned long long>>(variant<shared_ptr<Token>, unsigned long long>&&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff70h
        push    ebx
        push    esi
        push    edi
L_73793:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-090h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-08ch],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1622:     allocator_type& __a = this->__alloc(); 
        mov     eax,dword [ebp-08ch]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-080h],eax
        and     eax,eax
        je      L_73830
        mov     eax,dword [ebp-080h]
        add     eax,byte 04h
        jmp     L_73831
L_73830:
        mov     eax,dword [ebp-080h]
L_73831:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
        push    eax
        mov     ebx,dword [ebp-08ch]
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        push    eax
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        inc     eax
        mov     dword [ebp-064h],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    ebx
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::max_size() const 
        mov     edi,eax
        add     esp,byte 04h
        mov     eax,edi
        cmp     dword [ebp-064h],eax
        jbe     L_73851
; Line 1027:         this->__throw_length_error(); 
        push    ebx
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_73851:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+0ch]
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     edx,edi
        shr     edx,01h
        cmp     eax,edx
        jnc     L_73873
L_73856:
        shl     eax,01h
        mov     dword [ebp-084h],eax
        lea     eax,[ebp-084h]
        lea     ecx,[ebp-064h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-088h],00h
        lea     edx,[ebp-088h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_74013:
        add     esp,byte 0ch
; Line 2636: } 
        mov     edi,dword [eax]
; Line 1032: } 
L_73873:
        push    edi
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.quiuir#allocator.#variant.#shared_ptr.n0~uL~~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__split_buffer(unsigned int, unsigned int, allocator<variant<shared_ptr<Token>, unsigned long long>>&)
        add     esp,byte 010h
        mov     dword [ebp-060h+014h],01h
; Line 1625:     __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Up>(__x)); 
        mov     eax,dword [ebp-090h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-018h+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        push    esi
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 0ch
; Line 1626:     __v.__end_++; 
        add     dword [ebp-018h+0ch],byte 018h
; Line 1627:     __swap_out_circular_buffer(__v); 
        lea     eax,[ebp-018h]
        push    eax
        mov     eax,dword [ebp-08ch]
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~ ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__swap_out_circular_buffer(__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>&)
        add     esp,byte 08h
; Line 1628: } 
        mov     dword [ebp-060h+014h],02h
        lea     eax,[ebp-018h]
        push    eax
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::~__split_buffer()
        add     esp,byte 04h
L_73794:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__push_back_slow_path.#variant.#shared_ptr.n0~uL~~.qR#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffa0h
        dd      0400h
        dd      @.xt@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~+0
        dd      0ffffffe8h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~ virtual
        [bits 32]
; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union<shared_ptr<bool>&, >(in_place_index_t<unsigned int=0>, shared_ptr<bool>&)
@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.r#shared_ptr.n1~~.q#in_place_index_t.ui?0?~r#shared_ptr.n1~:
        push    ecx
        push    ebx
L_74053:
        mov     eax,dword [esp+0ch+08h]
        mov     ebx,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ ; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
        add     esp,byte 0ch
L_74087:
        mov     eax,ebx
L_74054:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_74093:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_74203:
L_74158:
; Line 493:     } 
L_74094:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_74211:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_74227:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
; Line 500:   } 
L_74241:
L_74212:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_74247:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_74263:
; Line 527:   } 
L_74277:
L_74248:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_74283:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_74393:
L_74348:
; Line 493:     } 
L_74284:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_74401:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_74417:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)
; Line 500:   } 
L_74431:
L_74402:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_74437:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_74453:
; Line 527:   } 
L_74467:
L_74438:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_74473:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_74491:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_74474:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_74529:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_74562:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_74609:
L_74623:
; Line 536:   } 
L_74637:
L_74651:
L_74530:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_74657:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_74658:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_74665:
        mov     eax,dword [esp+04h]
L_74666:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_74673:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_74674:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure1__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_74713:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_74812
        mov     eax,0ffffffffh
        jmp     L_74813
L_74812:
        mov     eax,dword [esi+08h]
L_74813:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_74714:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv virtual
        [bits 32]
; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
@std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv:
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
        push    edi
L_74851:
        mov     esi,dword [esp+04h+044h]
        mov     eax,esi
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_74893
        mov     eax,0ffffffffh
        jmp     L_74894
L_74893:
        mov     eax,dword [eax+08h]
L_74894:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
        and     al,al
        jne     L_74854
        mov     eax,esi
        mov     dword [esp-04h+044h],eax
        lea     ebx,[esp-04h+044h]
        mov     edi,esi
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-02ch+044h],00h
        push    dword [esp-02ch+044h]
        mov     dword [esp-030h+048h],00h
        push    dword [esp-030h+048h]
        lea     eax,[esp-038h+04ch]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure1__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure1__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-014h+04h+044h],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-014h+044h],ecx
; Line 543:   } 
        mov     eax,edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-014h+04ch]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [edi+08h],byte 0ffffffffh
        jne     L_75006
        mov     eax,0ffffffffh
        jmp     L_75007
L_75006:
        mov     eax,dword [edi+08h]
L_75007:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_75054:
L_74854:
        mov     dword [esi+08h],0ffffffffh
L_74852:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL virtual
        [bits 32]
; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union<unsigned int=1, unsigned long long&, >(in_place_index_t<unsigned int=1>, unsigned long long&)
@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL:
        push    ecx
        push    ebx
L_75060:
        mov     eax,dword [esp+0ch+08h]
        mov     ebx,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?0?~]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~@.bctr.ruL~.q#in_place_index_t.ui?0?~ruL ; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >::__union<unsigned long long&, >(in_place_index_t<unsigned int=0>, unsigned long long&)
        add     esp,byte 0ch
L_75094:
        mov     eax,ebx
L_75061:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_75100:
        mov     eax,dword [esp+04h]
L_75136:
L_75101:
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@__vallocate.qui virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::__vallocate(unsigned int)
@std@#vector.uL#allocator.uL~~@__vallocate.qui:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
        push    edi
L_75142:
        mov     ebx,dword [esp+08h+038h]
        mov     esi,dword [esp+04h+038h]
; Line 992:     if (__n > max_size()) 
        mov     eax,esi
        push    eax
        call    @std@#vector.uL#allocator.uL~~@max_size.xqv ; std::vector<unsigned long long, allocator<unsigned long long>>::max_size() const 
        mov     ecx,eax
        add     esp,byte 04h
        cmp     ebx,ecx
        jbe     L_75145
; Line 993:         this->__throw_length_error(); 
        mov     eax,esi
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_75145:
; Line 994:     this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_75197
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_75198
L_75197:
        mov     eax,dword [esp-02ch+038h]
L_75198:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     edi,ebx
; Line 1861:         if (__n > max_size()) 
        mov     ecx,01fffffffh
        cmp     edi,ecx
        jbe     L_75203
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_75203:
        mov     eax,edi
        shl     eax,03h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        mov     dword [esi+08h],eax
        mov     dword [esi+04h],eax
; Line 995:     this->__end_cap() = this->__begin_ + __n; 
        mov     eax,esi
        mov     edx,dword [esi+04h]
        mov     ecx,ebx
        shl     ecx,03h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],ecx
; Line 996:     __annotate_new(0); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_75332:
; Line 873:     } 
L_75317:
; Line 997: } 
L_75143:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::__construct_at_end<unsigned long long const *>(unsigned long long const *, unsigned long long const *, unsigned int)
@std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_75627:
        mov     eax,dword [ebp+014h]
        mov     edi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,esi
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_75705
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_75706
L_75705:
        mov     eax,dword [ebp-078h]
L_75706:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-074h],eax
        lea     esi,[ebp-0ch+04h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
        cmp     ebx,edi
        je      L_75655
L_75653:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
        mov     eax,ebx
        push    eax
        mov     eax,esi
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [ebp-074h]
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL ; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long,  const unsigned long long&>(allocator<unsigned long long>&, unsigned long long*,  const unsigned long long&)
        add     esp,byte 0ch
L_75656:
        add     ebx,byte 08h
        mov     eax,esi
        add     dword [eax],byte 08h
L_75654:
        cmp     ebx,edi
        jne     L_75653
L_75655:
; Line 1689:         } 
L_75673:
; Line 1077: } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_75739:
L_75628:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@52@std@#vector.uL#allocator.uL~~@_ConstructTransaction virtual
        [bits 32]
@.xt@52@std@#vector.uL#allocator.uL~~@_ConstructTransaction:
        dd      @std@#vector.uL#allocator.uL~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      076h
        db      065h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui virtual
        [bits 32]
@.xc@std@#vector.uL#allocator.uL~~@#__construct_at_end.pxuL~.qpxuLpxuLui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@52@std@#vector.uL#allocator.uL~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vallocate.qui virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__vallocate(unsigned int)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vallocate.qui:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
        push    edi
L_75745:
        mov     ebx,dword [esp+08h+038h]
        mov     esi,dword [esp+04h+038h]
; Line 992:     if (__n > max_size()) 
        mov     eax,esi
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::max_size() const 
        mov     ecx,eax
        add     esp,byte 04h
        cmp     ebx,ecx
        jbe     L_75748
; Line 993:         this->__throw_length_error(); 
        mov     eax,esi
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_75748:
; Line 994:     this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_75800
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_75801
L_75800:
        mov     eax,dword [esp-02ch+038h]
L_75801:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     edi,ebx
; Line 1861:         if (__n > max_size()) 
        mov     ecx,0aaaaaaah
        cmp     edi,ecx
        jbe     L_75805
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_75805:
        imul    eax,edi,byte 018h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        mov     dword [esi+08h],eax
        mov     dword [esi+04h],eax
; Line 995:     this->__end_cap() = this->__begin_ + __n; 
        mov     eax,esi
        mov     edx,dword [esi+04h]
        imul    ecx,ebx,byte 018h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],ecx
; Line 996:     __annotate_new(0); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_75934:
; Line 873:     } 
L_75919:
; Line 997: } 
L_75746:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<variant<shared_ptr<Token>, unsigned long long> const *>(variant<shared_ptr<Token>, unsigned long long> const *, variant<shared_ptr<Token>, unsigned long long> const *, unsigned int)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_76229:
        mov     eax,dword [ebp+014h]
        mov     edi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,esi
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_76307
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_76308
L_76307:
        mov     eax,dword [ebp-078h]
L_76308:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-074h],eax
        lea     esi,[ebp-0ch+04h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
        cmp     ebx,edi
        je      L_76257
L_76255:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
        mov     eax,ebx
        push    eax
        mov     eax,esi
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [ebp-074h]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
L_76258:
        add     ebx,byte 018h
        mov     eax,esi
        add     dword [eax],byte 018h
L_76256:
        cmp     ebx,edi
        jne     L_76255
L_76257:
; Line 1689:         } 
L_76275:
; Line 1077: } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_76341:
L_76230:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.px#variant.#shared_ptr.n0~uL~~.qpx#variant.#shared_ptr.n0~uL~px#variant.#shared_ptr.n0~uL~ui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::unordered_map( const unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
; Line 1501: { 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff78h
        push    ebx
        push    esi
        push    edi
L_76347:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-07ch],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-074h],eax
        mov     dword [ebp-074h+04h],___cppexceptionhandle
        mov     dword [ebp-074h+08h],esp
        mov     dword [ebp-074h+0ch],ebp
        mov     dword [ebp-074h+010h],@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~
        mov     dword [ebp-074h+014h],00h
        lea     eax,[ebp-074h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     eax,dword [ebp-07ch]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table( const __hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&)
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],01h
; Line 1503:     __get_db()->__insert_c(this); 
        mov     eax,dword [ebp-07ch]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-080h],eax
        and     eax,eax
        je      L_76431
        mov     eax,dword [ebp-080h]
        add     eax,byte 04h
        jmp     L_76432
L_76431:
        mov     eax,dword [ebp-080h]
L_76432:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 1207:     } 
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::rehash(unsigned int)
        add     esp,byte 08h
; Line 1506:     insert(__u.begin(), __u.end()); 
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     eax,dword [ebp-07ch]
        add     esp,byte 0fffffffch
        mov     edi,esp
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@end.xqv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::end() const 
        mov     dword [ebp-084h],eax
        add     esp,byte 04h
        lea     eax,[ebp-084h]
        push    eax
        push    edi
        call    @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],03h
        lea     eax,[ebp-08h]
        mov     dword [ebp-074h+014h],04h
        push    eax
        push    esi
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qR#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>&&)
        mov     dword [ebp-074h+014h],05h
L_76510:
L_76497:
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     ecx,dword [ebp-07ch]
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 1828:     return const_iterator(__p1_.first().__next_, this); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+0ch]
        mov     dword [ebp-088h],ecx
        mov     dword [ebp-074h+014h],07h
; Line 1832: } 
        lea     ecx,[ebp-088h]
        push    ecx
        push    eax
        call    @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@.bctr.qR#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>::__hash_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],08h
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.q#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],09h
        lea     eax,[ebp-04h]
        mov     dword [ebp-074h+014h],0ah
        push    eax
        push    esi
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qR#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>&&)
        mov     dword [ebp-074h+014h],0bh
L_76622:
L_76609:
        add     esp,byte 08h
        mov     dword [ebp-074h+014h],0ch
        mov     eax,ebx
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::insert<__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>>(__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>, __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>)
        add     esp,byte 0ch
; Line 1507: } 
        mov     eax,ebx
L_76348:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
        dd      00h
        dd      0ffffff8ch
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffffch
        dd      0ah
        dd      0bh
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::vector( const vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
; Line 1250: { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
        push    edi
L_76629:
        mov     ecx,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ecx
        mov     eax,ecx
        add     eax,byte 0ch
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_76692
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_76693
L_76692:
        mov     eax,dword [ebp-078h]
L_76693:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::select_on_container_copy_construction( const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,edi
        mov     dword [edi+04h],00h
        mov     dword [edi+08h],00h
        add     eax,byte 0ch
        xor     ecx,ecx
        mov     dword [ebp-07ch],ecx
        lea     ecx,[ebp-07ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2286:   template <class _U1, class _U2> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edi+0ch],ecx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-080h],eax
; Line 2206:     } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-04ch+014h],02h
L_76844:
        mov     dword [ebp-04ch+014h],03h
; Line 1252:     __get_db()->__insert_c(this); 
        mov     eax,esi
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax+08h]
        sub     eax,ecx
        imul    eax,dword 0aaaaaaabh
        mov     edi,eax
        sar     edi,03h
        cmp     edi,byte 00h
        jbe     L_76634
; Line 1256:     { 
; Line 1257:         __vallocate(__n); 
        mov     eax,edi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vallocate.qui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__vallocate(unsigned int)
        add     esp,byte 08h
; Line 1258:         __construct_at_end(__x.__begin_, __x.__end_, __n); 
        push    edi
        mov     eax,dword [esi+08h]
        push    eax
        mov     eax,dword [esi+04h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui ; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<variant<shared_ptr<Token>, unsigned long long>*>(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, unsigned int)
        add     esp,byte 010h
; Line 1259:     } 
L_76634:
; Line 1260: } 
        mov     eax,ebx
L_76630:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.qrx#vector.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#allocator.#variant.#shared_ptr.5Token~uL~~+0
        dd      0fffffffch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::destroy<variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_76866:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__destroy<variant<shared_ptr<Token>, unsigned long long>>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
        mov     dword [ebp-04ch+014h],03h
L_76929:
L_76916:
        add     esp,byte 0ch
L_76867:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_76936:
        mov     eax,dword [esp+04h]
L_76937:
        ret
section code
section code
        section vsc@std@_DeallocateCaller@__do_deallocate_handle_size_align.qpvuiui virtual
        [bits 32]
; std::_DeallocateCaller::__do_deallocate_handle_size_align(void*, unsigned int, unsigned int)
@std@_DeallocateCaller@__do_deallocate_handle_size_align.qpvuiui:
; Line 257: struct _DeallocateCaller { 
        push    ecx
        push    ecx
        push    ecx
L_76944:
        mov     eax,dword [esp+04h+0ch]
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
L_76945:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@_DeallocateCaller@__do_deallocate_handle_size.qpvui virtual
        [bits 32]
; std::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned int)
@std@_DeallocateCaller@__do_deallocate_handle_size.qpvui:
; Line 288:  private: 
        push    ecx
L_76984:
        mov     eax,dword [esp+04h+04h]
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
L_76985:
        pop     ecx
        ret
section code
section code
        section vsc@std@_DeallocateCaller@__do_call.qpv virtual
        [bits 32]
; std::_DeallocateCaller::__do_call(void*)
@std@_DeallocateCaller@__do_call.qpv:
L_77008:
        mov     eax,dword [esp+04h]
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
L_77009:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::destroy<unsigned long long>(allocator<unsigned long long>&, unsigned long long*)
@std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL:
; Line 1627:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_77016:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL ; std::allocator_traits<allocator<unsigned long long>>::__destroy<unsigned long long>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*)
        mov     dword [ebp-04ch+014h],03h
L_77079:
L_77066:
        add     esp,byte 0ch
L_77017:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.uL~puL~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.uL~puL~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.uL~puL~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv:
L_77086:
        mov     eax,dword [esp+04h]
L_77087:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__deallocate_node(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
        push    edi
L_77094:
        mov     ebx,dword [esp+08h+05ch]
        mov     eax,dword [esp+04h+05ch]
; Line 1582:     __node_allocator& __na = __node_alloc(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-050h+05ch],eax
        and     eax,eax
        je      L_77138
        mov     eax,dword [esp-050h+05ch]
        add     eax,byte 04h
        jmp     L_77139
L_77138:
        mov     eax,dword [esp-050h+05ch]
L_77139:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        and     ebx,ebx
        je      L_77098
L_77097:
; Line 1584:     { 
; Line 1585:         __next_pointer __next = __np->__next_; 
        mov     edi,dword [ebx]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
; Line 1602:         __node_traits::destroy(__na, _NodeTypes::__get_ptr(__real_np->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,esi
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
        add     esp,byte 08h
; Line 1603:         __node_traits::deallocate(__na, __real_np, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_77329:
L_77314:
L_77299:
; Line 1604:         __np = __next; 
        mov     ebx,edi
; Line 1605:     } 
L_77099:
; Line 1583:     while (__np != nullptr) 
        and     ebx,ebx
        jne     L_77097
L_77098:
; Line 1606: } 
L_77095:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::~equal_to()
@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_77385:
L_77399:
L_77386:
        ret
section code
section code
        section vsc@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::~hash()
@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_77405:
L_77419:
L_77406:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_77425:
        mov     eax,dword [esp+04h]
L_77426:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_77433:
        mov     eax,dword [esp+04h]
L_77434:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const std::__variant_detail::_Trait&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe84h
        push    ebx
        push    esi
        push    edi
L_77441:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-017ch],eax
        mov     eax,dword [ebp+01ch]
        mov     dword [ebp-0178h],eax
        mov     eax,dword [ebp+018h]
        mov     dword [ebp-0174h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-0170h],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-016ch],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0168h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-07ch],eax
        mov     dword [ebp-07ch+04h],___cppexceptionhandle
        mov     dword [ebp-07ch+08h],esp
        mov     dword [ebp-07ch+0ch],ebp
        mov     dword [ebp-07ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-07ch+014h],00h
        lea     eax,[ebp-07ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2105:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-012ch],eax
        and     eax,eax
        je      L_77551
        mov     eax,dword [ebp-012ch]
        add     eax,byte 04h
        jmp     L_77552
L_77551:
        mov     eax,dword [ebp-012ch]
L_77552:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebp-016ch]
        mov     edx,eax
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_77630
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+08h+04h]
        jmp     L_77631
L_77630:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_77631:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ebx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_77856
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_77857
L_77856:
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     edx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,edx
L_77857:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_78052
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edx+04h+04h]
        jmp     L_78053
L_78052:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edx+04h]
        shr     eax,01h
L_78053:
        add     eax,ebx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ecx
        push    eax
        push    ecx
        mov     dword [ebp-0130h],00h
        lea     eax,[ebp-0130h]
        mov     dword [ebp-0134h],eax
        lea     eax,[ebp-0130h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0130h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_77583:
        mov     dword [ebp-015ch],ebx
        mov     eax,dword [ebp-0168h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0138h],eax
        and     eax,eax
        je      L_78262
        mov     eax,dword [ebp-0138h]
        add     eax,byte 04h
        jmp     L_78263
L_78262:
        mov     eax,dword [ebp-0138h]
L_78263:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 1207:     } 
        mov     dword [ebp-0160h],eax
        mov     byte [ebp-01h],00h
        mov     eax,dword [ebp-0160h]
        mov     dword [ebp-0158h],eax
        and     eax,eax
        je      L_77444
; Line 2111:     { 
; Line 2112:         __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-015ch]
        mov     ecx,dword [ebp-0160h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_78315
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_78316
L_78315:
        cmp     eax,ecx
        jc      L_78318
L_78317:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_78318:
L_78316:
; Line 119: } 
        mov     dword [ebp-0164h],eax
; Line 2113:         __nd = __bucket_list_[__chash]; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0168h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_77448
; Line 2115:         { 
; Line 2116:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     ebx,dword [eax]
        and     ebx,ebx
        je      L_77454
        mov     ecx,dword [ebp-015ch]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_78368
        mov     esi,dword [ebp-0164h]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_78416
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_78417
L_78416:
        cmp     eax,edx
        jc      L_78419
L_78418:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_78419:
L_78417:
; Line 119: } 
        cmp     eax,esi
        jne     L_77454
L_78368:
L_77452:
; Line 2119:             { 
; Line 2120:                 if (key_eq()(__nd->__upcast()->__value_, __k)) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-013ch],eax
        and     eax,eax
        je      L_78466
        mov     eax,dword [ebp-013ch]
        add     eax,byte 04h
        jmp     L_78467
L_78466:
        mov     eax,dword [ebp-013ch]
L_78467:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-016ch]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_77463
L_77460:
; Line 2122:             } 
L_77455:
        mov     ebx,dword [ebx]
L_77453:
        and     ebx,ebx
        je      L_78599
        mov     ecx,dword [ebp-015ch]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_77452
        mov     esi,dword [ebp-0164h]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_78647
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_78648
L_78647:
        cmp     eax,edx
        jc      L_78650
L_78649:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_78650:
L_78648:
; Line 119: } 
        cmp     eax,esi
        je      L_77452
L_78599:
L_77454:
; Line 2123:         } 
L_77448:
; Line 2124:     } 
L_77444:
; Line 2125:     { 
; Line 2127:         __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...); 
        mov     eax,dword [ebp-0178h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0174h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0170h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-015ch]
        push    eax
        mov     eax,dword [ebp-0168h]
        push    eax
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(unsigned int,  const std::__variant_detail::_Trait&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
        add     esp,byte 018h
        mov     dword [ebp-07ch+014h],01h
        mov     eax,dword [ebp-0158h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
        mov     eax,dword [ebp-0168h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mulss   xmm0,[eax+01ch]
        movss   [ebp-0154h],xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm1,xmm0
        movss   xmm0,[ebp-0154h]
        comiss  xmm0,xmm1
        jb      L_78700
        cmp     dword [ebp-0160h],byte 00h
        jne     L_77477
L_78700:
; Line 2132:         { 
; Line 2133:             rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc), 
        mov     ecx,dword [ebp-0158h]
        shl     ecx,01h
        mov     eax,dword [ebp-0158h]
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_78829
        mov     edx,eax
        dec     edx
        and     eax,edx
        je      L_78827
L_78829:
        xor     eax,eax
        jmp     L_78828
L_78827:
        mov     eax,01h
L_78828:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        sete    al
        and     eax,byte 01h
        add     eax,ecx
        mov     dword [ebp-054h],eax
        lea     ebx,[ebp-054h]
        mov     esi,dword [ebp-0168h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esi+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[esi+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [ebp-0150h]
        movss   xmm0,[ebp-0150h]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        mov     dword [ebp-058h],eax
        lea     eax,[ebp-058h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0140h],00h
        lea     ecx,[ebp-0140h]
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_78970:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        push    eax
        mov     eax,dword [ebp-0168h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::rehash(unsigned int)
        add     esp,byte 08h
; Line 2135:             __bc = bucket_count(); 
        mov     eax,dword [ebp-0168h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0144h],eax
        and     eax,eax
        je      L_79034
        mov     eax,dword [ebp-0144h]
        add     eax,byte 04h
        jmp     L_79035
L_79034:
        mov     eax,dword [ebp-0144h]
L_79035:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
; Line 2136:             __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-015ch]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_79087
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_79088
L_79087:
        cmp     eax,ecx
        jc      L_79090
L_79089:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_79090:
L_79088:
; Line 119: } 
        mov     dword [ebp-0164h],eax
; Line 2137:         } 
L_77477:
        mov     ecx,dword [ebp-0164h]
        mov     eax,ecx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0168h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     ecx,dword [edx+ecx*4]
        and     ecx,ecx
        jne     L_77484
; Line 2141:         { 
; Line 2142:             __pn = __p1_.first().__ptr(); 
        mov     ecx,dword [ebp-0168h]
        add     ecx,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2143:             __h->__next_ = __pn->__next_; 
        mov     ebx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [edx],ebx
; Line 2144:             __pn->__next_ = __h.get()->__ptr(); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     dword [ecx],edx
; Line 2146:             __bucket_list_[__chash] = __pn; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0168h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+eax*4],ecx
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        cmp     dword [eax],byte 00h
        je      L_77494
; Line 2148:                 __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)] 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     eax,dword [eax]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_79650
        mov     ecx,ebx
        dec     ecx
        and     ecx,eax
        jmp     L_79651
L_79650:
        cmp     eax,ecx
        jc      L_79653
L_79652:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_79653:
        mov     ecx,eax
L_79651:
; Line 119: } 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0168h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     dword [eax+ecx*4],esi
L_77488:
; Line 2150:         } 
        jmp     L_77494
L_77484:
; Line 2151:         else 
; Line 2152:         { 
; Line 2153:             __h->__next_ = __pn->__next_; 
        mov     edx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [eax],edx
; Line 2154:             __pn->__next_ = static_cast<__next_pointer>(__h.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2592:   } 
        mov     dword [ecx],eax
; Line 2155:         } 
L_77494:
; Line 2156:         __nd = static_cast<__next_pointer>(__h.release()); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-040h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],00h
; Line 2611:   } 
; Line 2158:         ++size(); 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 014h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],eax
        mov     ecx,dword [eax]
        inc     ecx
        mov     eax,dword [ebp-050h]
        mov     dword [eax],ecx
; Line 2159:         __inserted = true; 
        mov     byte [ebp-01h],01h
; Line 2160:     } 
        mov     dword [ebp-07ch+014h],02h
        lea     esi,[ebp-040h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-040h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],ecx
        and     eax,eax
        je      L_79928
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0148h],eax
        and     eax,eax
        je      L_80026
        mov     eax,dword [ebp-0148h]
        add     eax,byte 04h
        jmp     L_80027
L_80026:
        mov     eax,dword [ebp-0148h]
L_80027:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*)
        add     esp,byte 08h
L_79928:
; Line 2619:   } 
L_79945:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::~__hash_node_destructor()
        add     esp,byte 04h
L_80054:
L_80068:
L_80041:
L_79925:
L_77463:
; Line 440:     template<class _U1, class _U2, _EnableB< 
        lea     eax,[ebp-01h]
        push    eax
        mov     dword [ebp-08h],ebx
        lea     eax,[ebp-08h]
        mov     dword [ebp-07ch+014h],03h
        push    eax
        mov     eax,dword [ebp-017ch]
        push    eax
        call    @std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1 ; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&, bool&)
        mov     dword [ebp-07ch+014h],04h
L_80102:
        add     esp,byte 0ch
        mov     eax,dword [ebp+08h]
; Line 2167: } 
L_77442:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv+0
        dd      05h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06eh
        db      06fh
        db      064h
        db      065h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      05h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~:
        dd      @std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~:
        dd      @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffff84h
        dd      0400h
        dd      @.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~+0
        dd      0ffffffc0h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~+0
        dd      0fffffff8h
        dd      03h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?R#basic_string.c#char_traits.c~#allocator.c~~ee3_Tl#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.R#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&&>::__tuple_impl<..., unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>, >(__tuple_indices<...unsigned int=0>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?R#basic_string.c#char_traits.c~#allocator.c~~ee3_Tl#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.R#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#basic_string.c#char_traits.c~#allocator.c~~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_80108:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_80176:
L_80190:
L_80204:
L_80218:
L_80109:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv:
L_80224:
L_80225:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_80230:
L_80244:
L_80231:
        ret
section code
section code
        section vsc@std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&&>::~tuple()
@std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_80250:
L_80277:
L_80264:
L_80251:
        ret
section code
section code
        section vsc@std@#.bsub.px#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.px#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::operator -<variant<shared_ptr<Token>, unsigned long long> const *, variant<shared_ptr<Token>, unsigned long long>*>( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long> const *>&,  const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
@std@#.bsub.px#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.px#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
; Line 1698: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_80284:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        sub     eax,ecx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
; Line 1708: } 
L_80285:
        ret
section code
section code
        section vsc@std@#.bsub.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::operator -<variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*>( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&,  const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
@std@#.bsub.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
; Line 1698: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_80324:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        sub     eax,ecx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
; Line 1708: } 
L_80325:
        ret
section code
section code
        section vsc@std@#distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::distance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
@std@#distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
; Line 696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
L_80364:
; Line 700:     return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [esp-04h+08h],00h
        lea     ebx,[esp-04h+08h]
        push    ebx
        call    @std@input_iterator_tag@.bctr.qv ; std::input_iterator_tag::input_iterator_tag()
        add     esp,byte 04h
        push    dword [ebx]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        call    @std@#__distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~31@std@random_access_iterator_tag ; std::__distance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, std::random_access_iterator_tag)
        mov     ebx,eax
        lea     eax,[esp-04h+014h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_80454:
L_80441:
L_80428:
        add     esp,byte 0ch
L_80470:
L_80484:
        mov     eax,ebx
; Line 701: } 
L_80498:
L_80512:
L_80365:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
@std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
L_80518:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_80519:
        ret
section code
section code
        section vsc@std@#__advance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.qr#__wrap_iter.p#variant.#shared_ptr.n0~uL~~i31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__advance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&, int, std::random_access_iterator_tag)
@std@#__advance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.qr#__wrap_iter.p#variant.#shared_ptr.n0~uL~~i31@std@random_access_iterator_tag:
; Line 659: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
L_80526:
        mov     eax,dword [esp+08h+04h]
        mov     ecx,dword [esp+04h+04h]
; Line 663:    __i += __n; 
; Line 1502:         _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n), 
        mov     edx,dword [ecx]
        imul    eax,byte 018h
        add     eax,edx
        mov     dword [ecx],eax
; Line 1507:     } 
; Line 664: } 
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_80584:
L_80571:
L_80558:
L_80527:
        pop     ecx
        ret
section code
section code
        section vsc@std@forward_iterator_tag@.bctr.qv virtual
        [bits 32]
; std::forward_iterator_tag::forward_iterator_tag()
@std@forward_iterator_tag@.bctr.qv:
L_80592:
        mov     eax,dword [esp+04h]
L_80593:
        ret
section code
section code
        section vsc@std@forward_iterator_tag@.bdtr.qv virtual
        [bits 32]
; std::forward_iterator_tag::~forward_iterator_tag()
@std@forward_iterator_tag@.bdtr.qv:
L_80616:
L_80630:
L_80617:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, unsigned int)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_80636:
        mov     eax,dword [ebp+014h]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,ebx
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        lea     eax,[ebp-0ch+04h]
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-060h],eax
        and     eax,eax
        je      L_80691
        mov     eax,dword [ebp-060h]
        add     eax,byte 04h
        jmp     L_80692
L_80691:
        mov     eax,dword [ebp-060h]
L_80692:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     dword [ebp-054h+014h],02h
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rp#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_range_forward<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*&)
        add     esp,byte 010h
; Line 1077: } 
        mov     dword [ebp-054h+014h],03h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_80708:
L_80722:
L_80736:
L_80637:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_range(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff4ch
        push    ebx
        push    esi
        push    edi
L_80742:
        mov     ecx,dword [ebp+014h]
        mov     edi,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0b0h],eax
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1749:     pointer __old_last = this->__end_; 
        mov     eax,dword [esi+08h]
        mov     dword [ebp-0ach],eax
        sub     eax,ecx
        imul    eax,dword 0aaaaaaabh
        mov     ecx,eax
        sar     ecx,03h
; Line 1751:     { 
; Line 1752:       pointer __i = __from_s + __n; 
        mov     eax,dword [ebp-0b0h]
        imul    ecx,byte 018h
        add     eax,ecx
        mov     dword [ebp-0a8h],ecx
        mov     ebx,eax
        mov     edx,esi
        mov     ecx,edi
        mov     eax,ebx
        sub     eax,ecx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        sar     eax,03h
        mov     ecx,edx
        mov     dword [ebp-030h],ecx
        mov     ecx,dword [edx+08h]
        mov     dword [ebp+04h-030h],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+08h-030h],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1754:       for (; __i < __from_e; ++__i, ++__tx.__pos_) { 
        cmp     ebx,edi
        jge     L_80748
L_80746:
; Line 1755:           __alloc_traits::construct(this->__alloc(), 
        mov     eax,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,dword [ebp-030h+04h]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0b4h],eax
        and     eax,eax
        je      L_80841
        mov     eax,dword [ebp-0b4h]
        add     eax,byte 04h
        jmp     L_80842
L_80841:
        mov     eax,dword [ebp-0b4h]
L_80842:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
        add     esp,byte 0ch
; Line 1758:       } 
L_80749:
        add     ebx,byte 018h
        add     dword [ebp-030h+04h],byte 018h
L_80747:
        cmp     ebx,edi
        jl      L_80746
L_80748:
; Line 1759:     } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-030h]
        mov     eax,dword [ebp-030h]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_80858:
; Line 1760:     _VSTD::move_backward(__from_s, __from_s + __n, __old_last); 
        mov     ebx,dword [ebp-0b0h]
        mov     eax,dword [ebp-0b0h]
        mov     ecx,dword [ebp-0a8h]
        mov     esi,eax
        add     esi,ecx
        mov     edi,dword [ebp-0ach]
; Line 1933:     return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1903:     while (__first != __last) 
        cmp     ebx,esi
        je      L_80878
L_80877:
; Line 1904:         *--__result = _VSTD::move(*--__last); 
        sub     esi,byte 018h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    esi
        sub     edi,byte 018h
        push    edi
        call    @std@#variant.#shared_ptr.5Token~uL~@.basn.qrx#variant.#shared_ptr.n0~uL~ ; std::variant<shared_ptr<Token>, unsigned long long>::operator =( const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 08h
L_80879:
        cmp     ebx,esi
        jne     L_80877
L_80878:
; Line 1906: } 
; Line 1934: } 
; Line 1761: } 
L_80743:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_range.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0ffffffd0h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::copy<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
; Line 1730: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffe8h
        push    ebx
L_80967:
        mov     eax,dword [esp+0ch+01ch]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1737:     } else { 
L_80970:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
        push    eax
        add     esp,byte 0fffffffch
        mov     ebx,esp
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+028h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        call    @std@#__unwrap_iter.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__unwrap_iter<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        mov     dword [esp-014h+028h],eax
        add     esp,byte 04h
        lea     eax,[esp-014h+024h]
        push    eax
        push    ebx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ebx,esp
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+02ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        call    @std@#__unwrap_iter.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__unwrap_iter<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        mov     dword [esp-018h+02ch],eax
        add     esp,byte 04h
        lea     eax,[esp-018h+028h]
        push    eax
        push    ebx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qR#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&&)
        add     esp,byte 08h
        call    @std@#__copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::__copy<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
L_81055:
L_81069:
; Line 1740:     } 
L_80975:
L_81083:
L_81097:
L_81011:
L_81025:
L_80968:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.quiuir#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__split_buffer(unsigned int, unsigned int, allocator<variant<shared_ptr<Token>, unsigned long long>>&)
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bctr.quiuir#allocator.#variant.#shared_ptr.n0~uL~~:
; Line 317: { 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_81103:
        mov     eax,dword [esp+010h+04ch]
        mov     edi,dword [esp+0ch+04ch]
        mov     esi,dword [esp+08h+04ch]
        mov     ebx,dword [esp+04h+04ch]
        xor     ecx,ecx
        mov     dword [esp-04h+04ch],ecx
        lea     ecx,[esp-04h+04ch]
; Line 2286:   template <class _U1, class _U2> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [ebx+010h],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx+04h+010h],eax
; Line 2206:     } 
; Line 318:     __first_ = __cap != 0 ? __alloc_traits::allocate(__alloc(), __cap) : nullptr; 
        and     esi,esi
        je      L_81244
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+04ch],eax
        and     eax,eax
        je      L_81291
        mov     eax,dword [esp-03ch+04ch]
        add     eax,byte 04h
        jmp     L_81292
L_81291:
        mov     eax,dword [esp-03ch+04ch]
L_81292:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ebp,esi
; Line 1861:         if (__n > max_size()) 
        mov     ecx,0aaaaaaah
        cmp     ebp,ecx
        jbe     L_81296
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_81296:
        imul    eax,ebp,byte 018h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        jmp     L_81245
L_81244:
        xor     eax,eax
L_81245:
        mov     dword [ebx+04h],eax
; Line 319:     __begin_ = __end_ = __first_ + __start; 
        mov     ecx,eax
        imul    eax,edi,byte 018h
        add     eax,ecx
        mov     dword [ebx+0ch],eax
        mov     dword [ebx+08h],eax
; Line 320:     __end_cap() = __first_ + __cap; 
        mov     eax,ebx
        mov     edx,dword [ebx+04h]
        imul    ecx,esi,byte 018h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+010h],ecx
; Line 321: } 
        mov     eax,ebx
L_81104:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::max_size() const 
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@max_size.xqv:
        add     esp,byte 0ffffffbch
L_81400:
        mov     eax,dword [esp+04h+044h]
; Line 1015:     return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()), 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+044h],eax
        and     eax,eax
        je      L_81467
        mov     eax,dword [esp-03ch+044h]
        add     eax,byte 04h
        jmp     L_81468
L_81467:
        mov     eax,dword [esp-03ch+044h]
L_81468:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     dword [esp-040h+048h],00h
        lea     eax,[esp-040h+048h]
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#variant.#shared_ptr.n0~uL~~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__max_size(integral_constant<bool, bool=1>,  const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
L_81527:
L_81514:
        add     esp,byte 08h
        mov     dword [esp-04h+044h],eax
        lea     eax,[esp-04h+044h]
        mov     dword [esp-08h+044h],07fffffffh
        lea     ecx,[esp-08h+044h]
; Line 2562:     return _VSTD::min(__a, __b, __less<_Tp>()); 
        mov     dword [esp-044h+044h],00h
        lea     edx,[esp-044h+044h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#min.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::min<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_81575:
        add     esp,byte 0ch
; Line 2563: } 
        mov     eax,dword [eax]
; Line 1017: } 
L_81401:
        add     esp,byte 044h
        ret
section code
section code
        section vsc@std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ virtual
        [bits 32]
; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
@std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~:
; Line 2621: _LIBCPP_NODISCARD_EXT inline 
        push    ecx
        push    ecx
        push    ebx
L_81582:
        mov     eax,dword [esp+08h+0ch]
        mov     ebx,dword [esp+04h+0ch]
; Line 2626:     return __comp(__a, __b) ? __b : __a; 
        mov     edx,ebx
        mov     ecx,eax
        mov     edx,dword [edx]
        mov     ecx,dword [ecx]
        cmp     edx,ecx
        setc    cl
        and     ecx,byte 01h
        and     cl,cl
        jne     L_81588
L_81587:
        mov     eax,ebx
L_81588:
L_81616:
; Line 2627: } 
L_81630:
L_81583:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__construct_at_end<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
        push    esi
L_81636:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 273:     _ConstructTransaction __tx(&this->__end_, std::distance(__first, __last)); 
        mov     esi,ebx
        add     esi,byte 0ch
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],01h
        call    @std@#distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::distance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
        add     esp,byte 08h
        mov     ecx,dword [esi]
        mov     dword [ebp-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+04h-0ch],eax
        mov     dword [ebp+08h-0ch],esi
; Line 168:       } 
        mov     dword [ebp-054h+014h],02h
; Line 274:     for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, ++__first) { 
        mov     edx,dword [ebp-0ch+04h]
        lea     eax,[ebp-0ch]
        cmp     dword [ebp-0ch],edx
        je      L_81641
L_81639:
; Line 275:         __alloc_traits::construct(this->__alloc(), 
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        mov     ecx,dword [ebp+0ch]
; Line 1465:     } 
        push    ecx
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-064h],eax
        and     eax,eax
        je      L_81733
        mov     eax,dword [ebp-064h]
        add     eax,byte 04h
        jmp     L_81734
L_81733:
        mov     eax,dword [ebp-064h]
L_81734:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
; Line 277:     } 
L_81642:
        lea     eax,[ebp-0ch]
        add     dword [ebp-0ch],byte 018h
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     dword [ebp+0ch],byte 018h
; Line 1482:     } 
L_81640:
        mov     edx,dword [ebp-0ch+04h]
        cmp     dword [ebp-0ch],edx
        jne     L_81639
L_81641:
; Line 278: } 
        mov     dword [ebp-054h+014h],03h
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [ebp-0ch]
        mov     eax,dword [ebp+08h-0ch]
        mov     dword [eax],ecx
; Line 171:       } 
L_81766:
L_81780:
L_81794:
L_81637:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@115@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction virtual
        [bits 32]
@.xt@115@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction:
        dd      @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@115@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__swap_out_circular_buffer(__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>&, variant<shared_ptr<Token>, unsigned long long>*)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~p#variant.#shared_ptr.n0~uL~:
        add     esp,0ffffff2ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_81800:
        mov     eax,dword [esp+0ch+0e4h]
        mov     dword [esp-0cch+0e4h],eax
        mov     eax,dword [esp+08h+0e4h]
        mov     dword [esp-0c8h+0e4h],eax
        mov     eax,dword [esp+04h+0e4h]
        mov     dword [esp-0c4h+0e4h],eax
; Line 966:     __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_81833:
; Line 879:     } 
L_81818:
        mov     esi,dword [esp-0c8h+0e4h]
        add     esi,byte 08h
        mov     eax,dword [esp-0c8h+0e4h]
        mov     eax,dword [eax+08h]
        mov     dword [esp-0c0h+0e4h],eax
; Line 968:     __alloc_traits::__construct_backward_with_exception_guarantees( 
        mov     eax,dword [esp-0c4h+0e4h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d0h+0e4h],eax
        and     eax,eax
        je      L_82195
        mov     eax,dword [esp-0d0h+0e4h]
        add     eax,byte 04h
        jmp     L_82196
L_82195:
        mov     eax,dword [esp-0d0h+0e4h]
L_82196:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [esp-0bch+0e4h],eax
        mov     eax,dword [esp-0c4h+0e4h]
        mov     edi,dword [eax+04h]
        mov     ebp,dword [esp-0cch+0e4h]
; Line 1720:             static_assert(__is_cpp17_move_insertable<allocator_type>::value, 
        cmp     ebp,edi
        je      L_82143
L_82142:
; Line 1723:             { 
; Line 1724:               construct(__a, _VSTD::__to_address(__end2 - 1), 
        sub     ebp,byte 018h
        mov     eax,ebp
; Line 271:     return _VSTD::move(__x); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 272: } 
        push    eax
        mov     eax,esi
        mov     ebx,dword [eax]
        mov     eax,ebx
        sub     eax,byte 018h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [esp-0bch+0ech]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
; Line 1731:               --__end2; 
        mov     eax,esi
        mov     ecx,ebx
        sub     ecx,byte 018h
        mov     dword [eax],ecx
; Line 1732:             } 
L_82144:
; Line 1722:             while (__end1 != __begin1) 
        cmp     ebp,edi
        jne     L_82142
L_82143:
; Line 1733:         } 
L_82163:
; Line 970:     __alloc_traits::__construct_forward_with_exception_guarantees( 
        mov     eax,dword [esp-0c4h+0e4h]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d4h+0e4h],eax
        and     eax,eax
        je      L_82301
        mov     eax,dword [esp-0d4h+0e4h]
        add     eax,byte 04h
        jmp     L_82302
L_82301:
        mov     eax,dword [esp-0d4h+0e4h]
L_82302:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        mov     edi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     ebp,dword [esp-0cch+0e4h]
        mov     eax,dword [esp-0c4h+0e4h]
        mov     esi,dword [eax+08h]
        mov     ebx,dword [esp-0c8h+0e4h]
        add     ebx,byte 0ch
; Line 1649:             static_assert(__is_cpp17_move_insertable<allocator_type>::value, 
; Line 1651:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
        cmp     ebp,esi
        je      L_82251
L_82249:
; Line 1652:               construct(__a, _VSTD::__to_address(__begin2), 
        mov     eax,ebp
; Line 271:     return _VSTD::move(__x); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 272: } 
        push    eax
        mov     eax,ebx
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
L_82252:
        add     ebp,byte 018h
        mov     eax,ebx
        add     dword [eax],byte 018h
L_82250:
        cmp     ebp,esi
        jne     L_82249
L_82251:
; Line 1659:         } 
L_82269:
; Line 972:     _VSTD::swap(this->__begin_, __v.__begin_); 
        mov     ecx,dword [esp-0c4h+0e4h]
        add     ecx,byte 04h
        mov     eax,dword [esp-0c8h+0e4h]
        add     eax,byte 08h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-06ch+0e4h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-06ch+0e4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_82367:
; Line 973:     _VSTD::swap(this->__end_, __v.__end_); 
        mov     ecx,dword [esp-0c4h+0e4h]
        add     ecx,byte 08h
        mov     eax,dword [esp-0c8h+0e4h]
        add     eax,byte 0ch
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-06ch+0e4h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-06ch+0e4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_82431:
; Line 974:     _VSTD::swap(this->__end_cap(), __v.__end_cap()); 
        mov     eax,dword [esp-0c4h+0e4h]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        mov     eax,dword [esp-0c8h+0e4h]
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-06ch+0e4h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-06ch+0e4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_82495:
; Line 975:     __v.__first_ = __v.__begin_; 
        mov     eax,dword [esp-0c8h+0e4h]
        mov     ecx,dword [eax+08h]
        mov     eax,dword [esp-0c8h+0e4h]
        mov     dword [eax+04h],ecx
; Line 976:     __annotate_new(size()); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_82686:
; Line 873:     } 
L_82655:
; Line 977:     __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_82991:
        mov     eax,dword [esp-0c0h+0e4h]
; Line 979: } 
L_81801:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0d4h
        ret
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::~__split_buffer()
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv:
        add     esp,byte 0ffffff98h
        push    ebx
L_82997:
        mov     ebx,dword [esp+04h+06ch]
; Line 348:     clear(); 
        mov     eax,ebx
        mov     edx,ebx
        mov     eax,dword [eax+08h]
        mov     dword [esp-064h+06ch],00h
        lea     ecx,[esp-064h+06ch]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~#integral_constant.4booln1?0?~ ; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__destruct_at_end(variant<shared_ptr<Token>, unsigned long long>*, integral_constant<bool, bool=0>)
L_83066:
        add     esp,byte 0ch
L_83037:
L_83020:
        cmp     dword [ebx+04h],byte 00h
        je      L_83000
; Line 350:         __alloc_traits::deallocate(__alloc(), __first_, capacity()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+06ch],eax
        and     eax,eax
        je      L_83116
        mov     eax,dword [esp-068h+06ch]
        add     eax,byte 04h
        jmp     L_83117
L_83116:
        mov     eax,dword [esp-068h+06ch]
L_83117:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_83212:
L_83197:
L_83084:
L_83000:
; Line 351: } 
L_83289:
L_83303:
L_83276:
L_83318:
L_82998:
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@.bdtr.qv:
L_83324:
L_83325:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<variant<shared_ptr<Token>, unsigned long long>*, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::~__compressed_pair()
@std@#__compressed_pair.p#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@.bdtr.qv:
L_83330:
L_83344:
L_83358:
L_83331:
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@__append.qui virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::__append(unsigned int)
@std@#vector.uL#allocator.uL~~@__append.qui:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff7ch
        push    ebx
        push    esi
        push    edi
L_83364:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-078h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@#vector.uL#allocator.uL~~@__append.qui
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1087:     if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n) 
        mov     ecx,dword [ebp-078h]
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edx,dword [ebx+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,edx
        sar     eax,03h
        cmp     eax,ecx
        jc      L_83367
; Line 1088:         this->__construct_at_end(__n); 
        mov     eax,dword [ebp-078h]
        push    eax
        push    ebx
        call    @std@#vector.uL#allocator.uL~~@__construct_at_end.qui ; std::vector<unsigned long long, allocator<unsigned long long>>::__construct_at_end(unsigned int)
        add     esp,byte 08h
        jmp     L_83370
L_83367:
; Line 1089:     else 
; Line 1090:     { 
; Line 1091:         allocator_type& __a = this->__alloc(); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-07ch],eax
        and     eax,eax
        je      L_83459
        mov     eax,dword [ebp-07ch]
        add     eax,byte 04h
        jmp     L_83460
L_83459:
        mov     eax,dword [ebp-07ch]
L_83460:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     esi,ebx
        mov     eax,dword [esi+04h]
        sub     eax,dword [esi+08h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        push    eax
        mov     eax,dword [esi+04h]
        sub     eax,dword [esi+08h]
        neg     eax
        imul    eax,byte 01h
        mov     ecx,eax
        sar     ecx,03h
        mov     eax,dword [ebp-078h]
        add     eax,ecx
        mov     dword [ebp-064h],eax
; Line 1025:     const size_type __ms = max_size(); 
        push    esi
        call    @std@#vector.uL#allocator.uL~~@max_size.xqv ; std::vector<unsigned long long, allocator<unsigned long long>>::max_size() const 
        mov     edi,eax
        add     esp,byte 04h
        mov     eax,edi
        cmp     dword [ebp-064h],eax
        jbe     L_83480
; Line 1027:         this->__throw_length_error(); 
        push    esi
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_83480:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esi+04h]
        sub     eax,dword [esi+0ch]
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        mov     edx,edi
        shr     edx,01h
        cmp     eax,edx
        jnc     L_83502
L_83485:
        shl     eax,01h
        mov     dword [ebp-080h],eax
        lea     eax,[ebp-080h]
        lea     ecx,[ebp-064h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-084h],00h
        lea     edx,[ebp-084h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_83642:
        add     esp,byte 0ch
; Line 2636: } 
        mov     edi,dword [eax]
; Line 1032: } 
L_83502:
        push    edi
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.uLr#allocator.uL~~@.bctr.quiuir#allocator.uL~ ; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__split_buffer(unsigned int, unsigned int, allocator<unsigned long long>&)
        add     esp,byte 010h
        mov     dword [ebp-060h+014h],01h
; Line 1093:         __v.__construct_at_end(__n); 
        mov     eax,dword [ebp-078h]
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui ; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__construct_at_end(unsigned int)
        add     esp,byte 08h
; Line 1094:         __swap_out_circular_buffer(__v); 
        lea     eax,[ebp-03ch]
        push    eax
        push    ebx
        call    @std@#vector.uL#allocator.uL~~@__swap_out_circular_buffer.qr#__split_buffer.uLr#allocator.uL~~ ; std::vector<unsigned long long, allocator<unsigned long long>>::__swap_out_circular_buffer(__split_buffer<unsigned long long, allocator<unsigned long long>&>&)
        add     esp,byte 08h
; Line 1095:     } 
        mov     dword [ebp-060h+014h],02h
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.uLr#allocator.uL~~@.bdtr.qv ; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::~__split_buffer()
        add     esp,byte 04h
L_83370:
; Line 1096: } 
L_83365:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.puLr#allocator.uL~~ virtual
        [bits 32]
@.xt@#__compressed_pair.puLr#allocator.uL~~:
        dd      @std@#__compressed_pair.puLr#allocator.uL~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.puLi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer.uLr#allocator.uL~~ virtual
        [bits 32]
@.xt@#__split_buffer.uLr#allocator.uL~~:
        dd      @std@#__split_buffer.uLr#allocator.uL~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__split_buffer_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#vector.uL#allocator.uL~~@__append.qui virtual
        [bits 32]
@.xc@std@#vector.uL#allocator.uL~~@__append.qui:
        dd      00h
        dd      0ffffffa0h
        dd      0400h
        dd      @.xt@#__split_buffer.uLr#allocator.uL~~+0
        dd      0ffffffc4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<Tokenizer>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#default_delete.9Tokenizer~i?1?4bool?0?~@__get.qv:
L_83650:
        mov     eax,dword [esp+04h]
L_83651:
        ret
section code
section code
        section vsc@Tokenizer@.bdtr.qv virtual
        [bits 32]
; Tokenizer::~Tokenizer()
@Tokenizer@.bdtr.qv:
; Line 215:     virtual ~Tokenizer() {} 
        add     esp,byte 0ffffffech
        push    ebx
        push    esi
        push    edi
L_83658:
        mov     ebx,dword [esp+04h+020h]
        mov     edi,ebx
        add     edi,byte 01ch
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     esi,dword [ebx+01ch]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebx+01ch],eax
        and     esi,esi
        je      L_83679
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,edi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+020h],eax
        and     eax,eax
        je      L_83792
        mov     eax,dword [esp-010h+020h]
        add     eax,byte 04h
        jmp     L_83793
L_83792:
        mov     eax,dword [esp-010h+020h]
L_83793:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<Token>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-014h+020h],esi
        and     esi,esi
        je      L_83795
        mov     eax,dword [esp-014h+020h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+040h]
        add     esp,byte 04h
        mov     eax,dword [esp-014h+020h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_83795:
; Line 2364:   } 
L_83775:
L_83679:
; Line 2619:   } 
L_83696:
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#default_delete.5Token~@.bdtr.qv ; std::default_delete<Token>::~default_delete()
        add     esp,byte 04h
L_83822:
L_83836:
L_83809:
L_83676:
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_83659:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__throw_bad_function_call.qv virtual
        [bits 32]
; std::__throw_bad_function_call()
@std@__throw_bad_function_call.qv:
; Line 1427: _LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_83844:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@__throw_bad_function_call.qv
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1429: { 
        push    dword @.xt@22@std@bad_function_call
        push    dword @std@bad_function_call@.bctr.qrx22@std@bad_function_call ; std::bad_function_call::bad_function_call( const std::bad_function_call&)
        push    byte 01h
        mov     dword [ebp-028h],00h
        lea     eax,[ebp-028h]
        mov     dword [ebp-028h],@std@exception@_.vt+0ch
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-028h],@std@bad_function_call@_.vt+0ch
        mov     dword [ebp-04ch+014h],02h
        push    eax
        lea     eax,[ebp-04ch]
        push    eax
        call    @_ThrowException.qpvpvipvpv ; _ThrowException(void*, void*, int, void*, void*)
        add     esp,byte 014h
; Line 1431:     throw bad_function_call(); 
        mov     dword [ebp-04ch+014h],03h
        lea     eax,[ebp-028h]
        push    eax
        call    @std@bad_function_call@.bdtr.qv ; std::bad_function_call::~bad_function_call()
        add     esp,byte 04h
L_83845:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@14@std@exception virtual
        [bits 32]
@.xt@14@std@exception:
        dd      @std@exception@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      065h
        db      078h
        db      063h
        db      065h
        db      070h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@22@std@bad_function_call virtual
        [bits 32]
@.xt@22@std@bad_function_call:
        dd      @std@bad_function_call@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      064h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      061h
        db      06ch
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@14@std@exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__throw_bad_function_call.qv virtual
        [bits 32]
@.xc@std@__throw_bad_function_call.qv:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@22@std@bad_function_call+0
        dd      0ffffffd8h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#.bsub.puLpuL~.qrx#__wrap_iter.puL~rx#__wrap_iter.puL~ virtual
        [bits 32]
; std::operator -<unsigned long long*, unsigned long long*>( const __wrap_iter<unsigned long long*>&,  const __wrap_iter<unsigned long long*>&)
@std@#.bsub.puLpuL~.qrx#__wrap_iter.puL~rx#__wrap_iter.puL~:
; Line 1698: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_83888:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
; Line 1708: } 
L_83889:
        ret
section code
section code
        section vsc@std@#distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ virtual
        [bits 32]
; std::distance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
@std@#distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~:
; Line 696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
L_83928:
; Line 700:     return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [esp-04h+08h],00h
        lea     ebx,[esp-04h+08h]
        push    ebx
        call    @std@input_iterator_tag@.bctr.qv ; std::input_iterator_tag::input_iterator_tag()
        add     esp,byte 04h
        push    dword [ebx]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+014h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        call    @std@#__distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~31@std@random_access_iterator_tag ; std::__distance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, std::random_access_iterator_tag)
        mov     ebx,eax
        lea     eax,[esp-04h+014h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_84018:
L_84005:
L_83992:
        add     esp,byte 0ch
L_84034:
L_84048:
        mov     eax,ebx
; Line 701: } 
L_84062:
L_84076:
L_83929:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ virtual
        [bits 32]
; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
@std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~:
L_84082:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_84083:
        ret
section code
section code
        section vsc@std@#__advance.#__wrap_iter.puL~~.qr#__wrap_iter.puL~i31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__advance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>&, int, std::random_access_iterator_tag)
@std@#__advance.#__wrap_iter.puL~~.qr#__wrap_iter.puL~i31@std@random_access_iterator_tag:
; Line 659: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
L_84090:
        mov     eax,dword [esp+08h+04h]
        mov     ecx,dword [esp+04h+04h]
; Line 663:    __i += __n; 
; Line 1502:         _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n), 
        mov     edx,dword [ecx]
        shl     eax,03h
        add     eax,edx
        mov     dword [ecx],eax
; Line 1507:     } 
; Line 664: } 
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_84148:
L_84135:
L_84122:
L_84091:
        pop     ecx
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, unsigned int)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_84156:
        mov     eax,dword [ebp+014h]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,ebx
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        lea     eax,[ebp-0ch+04h]
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-060h],eax
        and     eax,eax
        je      L_84211
        mov     eax,dword [ebp-060h]
        add     eax,byte 04h
        jmp     L_84212
L_84211:
        mov     eax,dword [ebp-060h]
L_84212:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     dword [ebp-054h+014h],02h
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~rp#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_range_forward<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, __wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*&)
        add     esp,byte 010h
; Line 1077: } 
        mov     dword [ebp-054h+014h],03h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_84228:
L_84242:
L_84256:
L_84157:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::copy<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~:
; Line 1730: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffe8h
        push    ebx
L_84262:
        mov     eax,dword [esp+0ch+01ch]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1737:     } else { 
L_84265:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
        push    eax
        add     esp,byte 0fffffffch
        mov     ebx,esp
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+028h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        call    @std@#__unwrap_iter.#__wrap_iter.puL~~.q#__wrap_iter.puL~ ; std::__unwrap_iter<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>)
        mov     dword [esp-014h+028h],eax
        add     esp,byte 04h
        lea     eax,[esp-014h+024h]
        push    eax
        push    ebx
        call    @std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter(__wrap_iter<unsigned long long*>&&)
        add     esp,dword 08h+0fffffffch
        mov     ebx,esp
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+02ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        call    @std@#__unwrap_iter.#__wrap_iter.puL~~.q#__wrap_iter.puL~ ; std::__unwrap_iter<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>)
        mov     dword [esp-018h+02ch],eax
        add     esp,byte 04h
        lea     eax,[esp-018h+028h]
        push    eax
        push    ebx
        call    @std@#__wrap_iter.puL~@.bctr.qR#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter(__wrap_iter<unsigned long long*>&&)
        add     esp,byte 08h
        call    @std@#__copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ ; std::__copy<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
L_84350:
L_84364:
; Line 1740:     } 
L_84270:
L_84378:
L_84392:
L_84306:
L_84320:
L_84263:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__construct_at_end<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
        push    esi
L_84398:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 273:     _ConstructTransaction __tx(&this->__end_, std::distance(__first, __last)); 
        mov     esi,ebx
        add     esi,byte 0ch
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],01h
        call    @std@#distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ ; std::distance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>)
        add     esp,byte 08h
        mov     ecx,dword [esi]
        mov     dword [ebp-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+04h-0ch],eax
        mov     dword [ebp+08h-0ch],esi
; Line 168:       } 
        mov     dword [ebp-054h+014h],02h
; Line 274:     for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, ++__first) { 
        mov     edx,dword [ebp-0ch+04h]
        lea     eax,[ebp-0ch]
        cmp     dword [ebp-0ch],edx
        je      L_84403
L_84401:
; Line 275:         __alloc_traits::construct(this->__alloc(), 
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        mov     ecx,dword [ebp+0ch]
; Line 1465:     } 
        push    ecx
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-064h],eax
        and     eax,eax
        je      L_84495
        mov     eax,dword [ebp-064h]
        add     eax,byte 04h
        jmp     L_84496
L_84495:
        mov     eax,dword [ebp-064h]
L_84496:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, unsigned long long&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, unsigned long long&)
        add     esp,byte 0ch
; Line 277:     } 
L_84404:
        lea     eax,[ebp-0ch]
        add     dword [ebp-0ch],byte 018h
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     dword [ebp+0ch],byte 08h
; Line 1482:     } 
L_84402:
        mov     edx,dword [ebp-0ch+04h]
        cmp     dword [ebp-0ch],edx
        jne     L_84401
L_84403:
; Line 278: } 
        mov     dword [ebp-054h+014h],03h
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [ebp-0ch]
        mov     eax,dword [ebp+08h-0ch]
        mov     dword [eax],ecx
; Line 171:       } 
L_84528:
L_84542:
L_84556:
L_84399:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~ virtual
        [bits 32]
@.xc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@115@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~@.bdtr.qv virtual
        [bits 32]
; std::unary_function<basic_string<char, char_traits<char>, allocator<char>>, unsigned int>::~unary_function()
@std@#unary_function.#basic_string.c#char_traits.c~#allocator.c~~ui~@.bdtr.qv:
L_84562:
L_84563:
        ret
section code
section code
        section vsc@std@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~@.bdtr.qv virtual
        [bits 32]
; std::binary_function<basic_string<char, char_traits<char>, allocator<char>>, basic_string<char, char_traits<char>, allocator<char>>, bool>::~binary_function()
@std@#binary_function.#basic_string.c#char_traits.c~#allocator.c~~#basic_string.c#char_traits.c~#allocator.c~~4bool~@.bdtr.qv:
L_84568:
L_84569:
        ret
section code
section code
        section vsc@std@#basic_iostream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~ virtual
        [bits 32]
; std::basic_iostream<char, char_traits<char>>::basic_iostream(basic_streambuf<char, char_traits<char>>*)
@std@#basic_iostream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~:
; Line 1409:     {} 
        push    ebx
L_84574:
        mov     ecx,dword [esp+0ch+04h]
        mov     eax,dword [esp+08h+04h]
        mov     ebx,dword [esp+04h+04h]
        and     ecx,ecx
        je      L_84577
        mov     ecx,ebx
        add     ecx,byte 018h
        mov     dword [ebx+08h],ecx
        mov     ecx,ebx
        add     ecx,byte 018h
        mov     dword [ebx+014h],ecx
        mov     ecx,ebx
        add     ecx,byte 018h
        mov     dword [ebx+010h],ecx
        mov     dword [ebx+018h],@std@ios_base@_.vt+0ch
; Line 345:                } 
        mov     dword [ebx+018h],@std@#basic_ios.c#char_traits.c~~@_.vt+0ch
; Line 675:                 } 
L_84577:
        push    byte 00h
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#basic_istream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~ ; std::basic_istream<char, char_traits<char>>::basic_istream(basic_streambuf<char, char_traits<char>>*)
        add     esp,byte 0ch
        push    byte 00h
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#basic_ostream.c#char_traits.c~~@.bctr.qv ; std::basic_ostream<char, char_traits<char>>::basic_ostream()
        add     esp,byte 08h
        mov     ecx,@std@#basic_iostream.c#char_traits.c~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     dword [ebx+0ch],@std@#basic_iostream.c#char_traits.c~~@_.vt+018h
        mov     eax,ebx
L_84575:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec virtual
        [bits 32]
; std::__pad_and_output<char, char_traits<char>>(ostreambuf_iterator<char, char_traits<char>>, char const *, char const *, char const *, std::ios_base&, char)
@std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec:
; Line 1376: _LIBCPP_HIDDEN 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff04h
        push    ebx
        push    esi
        push    edi
L_84621:
        mov     edi,dword [ebp+08h]
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0dch],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d8h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d4h],eax
        mov     al,byte [ebp+024h]
        mov     byte [ebp-0c1h],al
        mov     ecx,dword [ebp+020h]
        mov     edx,dword [ebp+01ch]
        mov     eax,dword [ebp+018h]
        mov     dword [ebp-0c0h],eax
        mov     eax,dword [ebp+014h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1382:     if (__s.__sbuf_ == nullptr) 
        cmp     dword [ebp+0ch+04h],byte 00h
        jne     L_84624
        mov     eax,dword [ebp+04h+0ch]
        mov     dword [edi+04h],eax
        mov     dword [ebp-05ch+014h],01h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],02h
L_84739:
L_84726:
        jmp     L_84622
L_84624:
        mov     esi,edx
        sub     esi,eax
        mov     dword [ebp-0c5h],edx
        mov     dword [ebp-0c9h],ecx
; Line 521: { 
; Line 522:     return __width_; 
        mov     edx,dword [ecx+0ch]
; Line 523: } 
        cmp     edx,esi
        jle     L_84629
; Line 1387:         __ns -= __sz; 
        mov     ecx,edx
        sub     ecx,esi
        mov     dword [ebp-0d0h],ecx
        jmp     L_84632
L_84629:
; Line 1388:     else 
; Line 1389:         __ns = 0; 
        xor     ecx,ecx
        mov     dword [ebp-0d0h],ecx
L_84632:
        mov     ecx,dword [ebp-0c0h]
        sub     ecx,eax
        and     ecx,ecx
        jle     L_84637
; Line 1392:     { 
; Line 1393:         if (__s.__sbuf_->sputn(__ob, __np) != __np) 
        mov     edx,dword [ebp+0ch+04h]
        mov     dword [ebp-0edh],ecx
        push    ecx
        mov     dword [ebp-0f9h],eax
        push    eax
        push    edx
        mov     eax,dword [edx]
        call    dword [eax+02ch]
        mov     ecx,eax
        add     esp,byte 0ch
        cmp     ecx,dword [ebp-0edh]
        je      L_84641
; Line 1394:         { 
; Line 1395:             __s.__sbuf_ = nullptr; 
        mov     dword [ebp+0ch+04h],00h
        mov     dword [ebp-0f5h],ebx
        mov     ecx,dword [ebp+04h+0ch]
        mov     eax,dword [ebp-0f5h]
        mov     dword [eax+04h],ecx
        mov     dword [ebp-05ch+014h],03h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],04h
L_84831:
L_84818:
        jmp     L_84622
; Line 1397:         } 
L_84641:
; Line 1398:     } 
L_84637:
        cmp     dword [ebp-0d0h],byte 00h
        jle     L_84651
; Line 1400:     { 
; Line 1401:         basic_string<_CharT, _Traits> __sp(__ns, __fl); 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     ebx,[ebp-038h]
        mov     ecx,dword [ebp-0d0h]
        mov     eax,dword [ebp-0d0h]
        mov     dword [ebp-0e0h],ecx
        mov     dword [ebp-0e4h],eax
        mov     al,byte [ebp-0c1h]
        mov     byte [ebp-0e5h],al
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-0b8h],00h
        lea     eax,[ebp-0b8h]
        mov     dword [ebp-0bch],00h
        lea     esi,[ebp-0bch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_84945:
L_84959:
; Line 1930:     __init(__n, __c); 
        mov     al,byte [ebp-0e5h]
        cbw
        cwde
        push    eax
        mov     eax,dword [ebp-0e4h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.quic ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(unsigned int, char)
        add     esp,byte 0ch
; Line 1932:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],05h
        mov     edx,dword [ebp+0ch+04h]
        lea     ecx,[ebp-038h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ebp-038h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_85023
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+08h+04h-038h]
        jmp     L_85024
L_85023:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_85024:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,dword [ebp-0d0h]
        mov     dword [ebp-0e9h],ecx
        mov     ecx,dword [ebp-0e0h]
        push    ecx
        push    eax
        push    edx
        mov     eax,dword [edx]
        call    dword [eax+02ch]
        mov     ecx,eax
        add     esp,byte 0ch
        cmp     ecx,dword [ebp-0e9h]
        je      L_84655
; Line 1403:         { 
; Line 1404:             __s.__sbuf_ = nullptr; 
        mov     dword [ebp+0ch+04h],00h
        mov     eax,dword [ebp-0dch]
        mov     ecx,dword [ebp+04h+0ch]
        mov     dword [eax+04h],ecx
        mov     dword [ebp-05ch+014h],06h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],07h
        lea     eax,[ebp-038h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],08h
L_85261:
L_85248:
        mov     eax,ebx
        jmp     L_84622
; Line 1406:         } 
L_84655:
; Line 1407:     } 
        mov     dword [ebp-05ch+014h],09h
        lea     eax,[ebp-038h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_84651:
; Line 1408:     __np = __oe - __op; 
        mov     eax,dword [ebp-0c0h]
        mov     ecx,dword [ebp-0c5h]
        sub     ecx,eax
        and     ecx,ecx
        jle     L_84665
; Line 1410:     { 
; Line 1411:         if (__s.__sbuf_->sputn(__op, __np) != __np) 
        mov     edx,dword [ebp+0ch+04h]
        mov     dword [ebp-0f1h],ecx
        push    ecx
        push    eax
        push    edx
        mov     eax,dword [edx]
        call    dword [eax+02ch]
        mov     ecx,eax
        add     esp,byte 0ch
        cmp     ecx,dword [ebp-0f1h]
        je      L_84669
; Line 1412:         { 
; Line 1413:             __s.__sbuf_ = nullptr; 
        mov     dword [ebp+0ch+04h],00h
        mov     eax,dword [ebp-0d8h]
        mov     ecx,dword [ebp+04h+0ch]
        mov     dword [eax+04h],ecx
        mov     dword [ebp-05ch+014h],0ah
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],0bh
L_85337:
L_85324:
        jmp     L_84622
; Line 1415:         } 
L_84669:
; Line 1416:     } 
L_84665:
; Line 1417:     __iob.width(0); 
        mov     eax,dword [ebp-0c9h]
        xor     ecx,ecx
; Line 528: { 
; Line 529:     streamsize __r = __width_; 
; Line 530:     __width_ = __wide; 
        mov     dword [eax+0ch],ecx
; Line 531:     return __r; 
; Line 532: } 
        mov     eax,dword [ebp-0d4h]
        mov     ecx,dword [ebp+04h+0ch]
        mov     dword [eax+04h],ecx
        mov     dword [ebp-05ch+014h],0ch
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],0dh
L_85413:
L_85400:
; Line 1419: } 
L_85441:
L_85428:
L_84622:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec virtual
        [bits 32]
@.xc@std@#__pad_and_output.c#char_traits.c~~.q#ostreambuf_iterator.c#char_traits.c~~pxcpxcpxcr13@std@ios_basec:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffc8h
        dd      05h
        dd      09h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      04h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      08h
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      0bh
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      0dh
        dd      0400h
        dd      @.xt@#ostreambuf_iterator.c#char_traits.c~~+0
        dd      0ch
        dd      00h
        dd      0eh
        dd      00h
section code
section code
        section vsc@std@#char_traits.c~@eq_int_type.qii virtual
        [bits 32]
; std::char_traits<char>::eq_int_type(int, int)
@std@#char_traits.c~@eq_int_type.qii:
L_85448:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
L_85449:
        ret
section code
section code
        section vsc@std@#basic_ios.c#char_traits.c~~@widen.xqc virtual
        [bits 32]
; std::basic_ios<char, char_traits<char>>::widen(char) const 
@std@#basic_ios.c#char_traits.c~~@widen.xqc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_85456:
        mov     bl,byte [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#basic_ios.c#char_traits.c~~@widen.xqc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 777:     return use_facet<ctype<char_type> >(getloc()).widen(__c); 
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@ios_base@getloc.xqv ; std::ios_base::getloc() const 
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],01h
; Line 250:     return static_cast<const _Facet&>(*__l.use_facet(_Facet::id)); 
        push    dword @std@#ctype.c~@id
        push    eax
        call    @std@locale@use_facet.xqr14@std@locale@id ; std::locale::use_facet(std::locale::id&) const 
        add     esp,byte 08h
; Line 251: } 
; Line 681:         return do_widen(__c); 
        movsx   ebx,bl
        push    ebx
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+018h]
        mov     bl,al
        add     esp,byte 08h
; Line 682:     } 
        mov     dword [ebp-04ch+014h],02h
        lea     eax,[ebp-04h]
        push    eax
        call    @std@locale@.bdtr.qv ; std::locale::~locale()
        add     esp,byte 04h
        mov     al,bl
; Line 778: } 
L_85457:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#basic_ios.c#char_traits.c~~@widen.xqc virtual
        [bits 32]
@.xc@std@#basic_ios.c#char_traits.c~~@widen.xqc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@11@std@locale+0
        dd      0fffffffch
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#ostreambuf_iterator.c#char_traits.c~~@.bctr.qR#ostreambuf_iterator.c#char_traits.c~~ virtual
        [bits 32]
; std::ostreambuf_iterator<char, char_traits<char>>::ostreambuf_iterator(ostreambuf_iterator<char, char_traits<char>>&&)
@std@#ostreambuf_iterator.c#char_traits.c~~@.bctr.qR#ostreambuf_iterator.c#char_traits.c~~:
L_85498:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h],ecx
L_85499:
        ret
section code
section code
        section vsc@std@#ostreambuf_iterator.c#char_traits.c~~@.bdtr.qv virtual
        [bits 32]
; std::ostreambuf_iterator<char, char_traits<char>>::~ostreambuf_iterator()
@std@#ostreambuf_iterator.c#char_traits.c~~@.bdtr.qv:
L_85522:
L_85536:
L_85523:
        ret
section code
section code
        section vsc@std@__throw_bad_variant_access.qv virtual
        [bits 32]
; std::__throw_bad_variant_access()
@std@__throw_bad_variant_access.qv:
; Line 228: _LIBCPP_BEGIN_NAMESPACE_STD 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_85542:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@__throw_bad_variant_access.qv
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 237:         throw bad_variant_access(); 
        push    dword @.xt@23@std@bad_variant_access
        push    dword @std@bad_variant_access@.bctr.qrx23@std@bad_variant_access ; std::bad_variant_access::bad_variant_access( const std::bad_variant_access&)
        push    byte 01h
        mov     dword [ebp-028h],00h
        lea     eax,[ebp-028h]
        mov     dword [ebp-028h],@std@exception@_.vt+0ch
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-028h],@std@bad_variant_access@_.vt+0ch
        mov     dword [ebp-04ch+014h],02h
        push    eax
        lea     eax,[ebp-04ch]
        push    eax
        call    @_ThrowException.qpvpvipvpv ; _ThrowException(void*, void*, int, void*, void*)
        add     esp,byte 014h
; Line 239:         _VSTD::abort(); 
        mov     dword [ebp-04ch+014h],03h
        lea     eax,[ebp-028h]
        push    eax
        call    @std@bad_variant_access@.bdtr.qv ; std::bad_variant_access::~bad_variant_access()
        add     esp,byte 04h
L_85543:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@23@std@bad_variant_access virtual
        [bits 32]
@.xt@23@std@bad_variant_access:
        dd      @std@bad_variant_access@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      064h
        db      05fh
        db      076h
        db      061h
        db      072h
        db      069h
        db      061h
        db      06eh
        db      074h
        db      05fh
        db      061h
        db      063h
        db      063h
        db      065h
        db      073h
        db      073h
        db      00h
        dd      0800h
        dd      @.xt@14@std@exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__throw_bad_variant_access.qv virtual
        [bits 32]
@.xc@std@__throw_bad_variant_access.qv:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@23@std@bad_variant_access+0
        dd      0ffffffd8h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__variant::__value_visitor<visitor_struct&>::operator ()<__alt<unsigned int=0, shared_ptr<Token>>&>(__alt<unsigned int=0, shared_ptr<bool>>&) const 
@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_85586:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 595:       __std_visit_exhaustive_visitor_check< 
; Line 586:     static_assert(is_invocable_v<_Visitor, _Values...>, 
; Line 588:   } 
L_85606:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ecx]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~ ; std::__invoke_constexpr<visitor_struct&, shared_ptr<Token>&>(visitor_struct&, shared_ptr<Token>&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 600:     } 
L_85587:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?0?#shared_ptr.5Token~~~.xqr#__alt.ui?0?#shared_ptr.n1~~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__variant::__value_visitor<visitor_struct&>::operator ()<__alt<unsigned int=1, unsigned long long>&>(__alt<unsigned int=1, unsigned long long>&) const 
@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_85726:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 595:       __std_visit_exhaustive_visitor_check< 
; Line 586:     static_assert(is_invocable_v<_Visitor, _Values...>, 
; Line 588:   } 
L_85746:
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ecx]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL ; std::__invoke_constexpr<visitor_struct&, unsigned long long&>(visitor_struct&, unsigned long long&)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
; Line 600:     } 
L_85727:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~ virtual
        [bits 32]
@.xc@std@__variant_detail@__visitation@__variant@#__value_visitor.r14visitor_struct~@#.bcall.r#__alt.ui?1?uL~~.xqr#__alt.ui?1?uL~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_85866:
        mov     eax,dword [esp+04h]
L_85867:
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign_alloc.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~ virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::__move_assign_alloc(basic_string<char, char_traits<char>, allocator<char>>&, integral_constant<bool, bool=1>)
@std@#basic_string.c#char_traits.c~#allocator.c~~@__move_assign_alloc.qr#basic_string.c#char_traits.c~#allocator.c~~#integral_constant.4booln0?1?~:
        add     esp,byte 0ffffffcch
        push    ebx
L_85874:
        mov     ebx,dword [esp+08h+038h]
        mov     eax,dword [esp+04h+038h]
; Line 1633:             __alloc() = _VSTD::move(__c.__alloc()); 
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-030h+038h],eax
        and     eax,eax
        je      L_85924
        mov     eax,dword [esp-030h+038h]
        add     eax,byte 0ch
        jmp     L_85925
L_85924:
        mov     eax,dword [esp-030h+038h]
L_85925:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-034h+038h],eax
        and     eax,eax
        je      L_85973
        mov     eax,dword [esp-034h+038h]
        add     eax,byte 0ch
        jmp     L_85974
L_85973:
        mov     eax,dword [esp-034h+038h]
L_85974:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 1634:         } 
L_85990:
L_85875:
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_85996:
        mov     eax,dword [esp+04h]
L_85997:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_86004:
        mov     ebx,dword [esp+04h+028h]
        mov     esi,ebx
        mov     eax,ebx
        mov     ecx,eax
        mov     dword [esp-01ch+028h],00h
        lea     edx,[esp-01ch+028h]
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [esi],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_86139:
; Line 2198:   template <class _Up, class = typename enable_if< 
L_86154:
        mov     eax,ebx
L_86005:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__value_init_tag)
@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag:
L_86160:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        xor     edx,edx
        mov     dword [ecx],edx
        mov     dword [eax],00h
L_86196:
L_86161:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag:
; Line 2195:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_86202:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
L_86238:
L_86203:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag:
L_86244:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
        mov     dword [ecx],00h
L_86312:
L_86245:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_86318:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
        mov     dword [ecx],00h
L_86386:
L_86319:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vdeallocate.qv virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__vdeallocate()
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__vdeallocate.qv:
        add     esp,byte 0ffffffach
        push    ebx
L_86392:
        mov     ebx,dword [esp+04h+058h]
; Line 1003:     if (this->__begin_ != nullptr) 
        cmp     dword [ebx+04h],byte 00h
        je      L_86395
; Line 1004:     { 
; Line 1005:         clear(); 
        mov     eax,ebx
        mov     ecx,ebx
; Line 771:         size_type __old_size = size(); 
; Line 772:         __base::clear(); 
        mov     eax,dword [eax+04h]
        push    eax
        push    ecx
        call    @std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~ ; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__destruct_at_end(variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 08h
L_86448:
; Line 773:         __annotate_shrink(__old_size); 
; Line 891:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_86479:
; Line 893:     } 
L_86464:
; Line 774:         __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_86720:
; Line 775:     } 
L_86417:
; Line 1006:         __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity()); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-054h+058h],eax
        and     eax,eax
        je      L_86769
        mov     eax,dword [esp-054h+058h]
        add     eax,byte 04h
        jmp     L_86770
L_86769:
        mov     eax,dword [esp-054h+058h]
L_86770:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_86881:
L_86866:
L_86737:
; Line 1007:         this->__begin_ = this->__end_ = this->__end_cap() = nullptr; 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],00h
        mov     eax,dword [eax+0ch]
        mov     dword [ebx+08h],eax
        mov     dword [ebx+04h],eax
; Line 1008:     } 
L_86395:
; Line 1009: } 
L_86393:
        pop     ebx
        add     esp,byte 054h
        ret
section code
section code
        section vsc@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign_alloc.qr#__vector_base.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__move_assign_alloc(__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&, integral_constant<bool, bool=1>)
@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__move_assign_alloc.qr#__vector_base.#variant.#shared_ptr.n0~uL~#allocator.#variant.#shared_ptr.n0~uL~~~#integral_constant.4booln1?1?~:
        add     esp,byte 0ffffffcch
        push    ebx
L_86985:
        mov     ebx,dword [esp+08h+038h]
        mov     eax,dword [esp+04h+038h]
; Line 410:             __alloc() = _VSTD::move(__c.__alloc()); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-030h+038h],eax
        and     eax,eax
        je      L_87035
        mov     eax,dword [esp-030h+038h]
        add     eax,byte 04h
        jmp     L_87036
L_87035:
        mov     eax,dword [esp-030h+038h]
L_87036:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-034h+038h],eax
        and     eax,eax
        je      L_87084
        mov     eax,dword [esp-034h+038h]
        add     eax,byte 04h
        jmp     L_87085
L_87084:
        mov     eax,dword [esp-034h+038h]
L_87085:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 411:         } 
L_87101:
L_86986:
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@release.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::release()
@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@release.qv:
; Line 2827:   _LIBCPP_INLINE_VISIBILITY 
L_87107:
        mov     ecx,dword [esp+04h]
; Line 2829:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ecx]
; Line 2830:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
; Line 2832:   } 
L_87108:
        ret
section code
section code
        section vsc@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__bucket_list_deallocator(__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>&&)
@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~:
; Line 790:         : __data_(_VSTD::move(__x.__data_)) 
        push    ecx
        push    ecx
        push    ecx
L_87179:
        mov     ecx,dword [esp+08h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 792:         __x.size() = 0; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
; Line 793:     } 
L_87180:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#hash.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::hash(hash<basic_string<char, char_traits<char>, allocator<char>>>&&)
@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#hash.#basic_string.c#char_traits.c~#allocator.c~~~:
L_87317:
        mov     eax,dword [esp+04h]
L_87318:
        ret
section code
section code
        section vsc@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::equal_to(equal_to<basic_string<char, char_traits<char>, allocator<char>>>&&)
@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~:
L_87341:
        mov     eax,dword [esp+04h]
L_87342:
        ret
section code
section code
        section vsc@std@#__search_substring.c#char_traits.c~~.qpxcpxcpxcpxc virtual
        [bits 32]
; std::__search_substring<char, char_traits<char>>(char const *, char const *, char const *, char const *)
@std@#__search_substring.c#char_traits.c~~.qpxcpxcpxcpxc:
; Line 835: inline _LIBCPP_CONSTEXPR_AFTER_CXX11 const _CharT * 
        push    ecx
        push    ecx
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_87365:
        mov     ecx,dword [esp+010h+01ch]
        mov     eax,dword [esp+0ch+01ch]
        mov     dword [esp-0ch+01ch],eax
        mov     eax,dword [esp+08h+01ch]
        mov     dword [esp-08h+01ch],eax
        mov     eax,dword [esp+04h+01ch]
; Line 840:   const ptrdiff_t __len2 = __last2 - __first2; 
        mov     ebx,dword [esp-0ch+01ch]
        sub     ecx,ebx
        mov     ebp,ecx
        and     ebp,ebp
        jne     L_87368
        jmp     L_87366
L_87368:
        mov     edx,dword [esp-08h+01ch]
        sub     edx,eax
        mov     ecx,edx
        cmp     ecx,ebp
        jge     L_87373
        mov     eax,dword [esp-08h+01ch]
        jmp     L_87366
L_87373:
        mov     cl,byte [ebx]
        mov     byte [esp-01h+01ch],cl
L_87378:
; Line 851:     __len1 = __last1 - __first1; 
        mov     esi,dword [esp-08h+01ch]
        cmp     edx,ebp
        jge     L_87384
        mov     eax,dword [esp-08h+01ch]
        jmp     L_87366
L_87384:
; Line 857:     __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2); 
        lea     ecx,[esp-01h+01ch]
        push    ecx
        mov     ecx,ebp
        sub     edx,ecx
        inc     edx
        mov     ebx,ecx
        push    edx
        push    eax
        call    @std@#char_traits.c~@find.qpxcuirxc ; std::char_traits<char>::find(char const *, unsigned int,  const char&)
        mov     edi,eax
        add     esp,byte 0ch
        and     edi,edi
        jne     L_87389
        mov     eax,dword [esp-08h+01ch]
        jmp     L_87366
L_87389:
        push    ebx
        mov     eax,dword [esp-0ch+020h]
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#char_traits.c~@compare.qpxcpxcui ; std::char_traits<char>::compare(char const *, char const *, unsigned int)
        add     esp,byte 0ch
        and     eax,eax
        jne     L_87394
        mov     eax,edi
        jmp     L_87366
L_87394:
; Line 869:     ++__first1; 
        mov     eax,edi
        inc     eax
; Line 870:   } 
L_87380:
; Line 850:   while (true) { 
        mov     ecx,eax
        mov     edx,esi
        sub     edx,ecx
        jmp     L_87378
; Line 871: } 
L_87379:
L_87366:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__find_first_of_ce.pxcpxcpqcc.4bool~.qpxcpxcpxcpxcpqcc.n0 virtual
        [bits 32]
; std::__find_first_of_ce<char const *, char const *, (*)(*)(char, char)>(char const *, char const *, char const *, char const *, (*)(*)(char, char))
@std@#__find_first_of_ce.pxcpxcpqcc.4bool~.qpxcpxcpxcpxcpqcc.n0:
; Line 1104: _LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator1 
        push    ecx
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_87407:
        mov     eax,dword [esp+014h+018h]
        mov     dword [esp-04h+018h],eax
        mov     edi,dword [esp+010h+018h]
        mov     ebp,dword [esp+0ch+018h]
        mov     esi,dword [esp+08h+018h]
        mov     eax,dword [esp+04h+018h]
        mov     dword [esp-08h+018h],eax
; Line 1108:     for (; __first1 != __last1; ++__first1) 
        mov     ecx,esi
        cmp     dword [esp-08h+018h],ecx
        je      L_87412
L_87410:
; Line 1109:         for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j) 
        mov     ebx,ebp
        cmp     ebx,edi
        je      L_87418
L_87416:
        mov     al,byte [ebx]
        cbw
        cwde
        push    eax
        mov     eax,dword [esp-08h+01ch]
        mov     al,byte [eax]
        cbw
        cwde
        push    eax
        call    dword [esp-04h+020h]
        add     esp,byte 08h
        and     al,al
        je      L_87423
        mov     eax,dword [esp-08h+018h]
        jmp     L_87408
L_87423:
L_87419:
        inc     ebx
L_87417:
        cmp     ebx,edi
        jne     L_87416
L_87418:
L_87413:
        inc     dword [esp-08h+018h]
L_87411:
        mov     ecx,esi
        cmp     dword [esp-08h+018h],ecx
        jne     L_87410
L_87412:
        mov     eax,esi
; Line 1113: } 
L_87408:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_87438:
        mov     eax,dword [esp+04h]
L_87474:
L_87439:
        ret
section code
section code
        section vsc@#TemplatedTokenizer.2kw~@Next.qv virtual
        [bits 32]
; TemplatedTokenizer<kw>::Next()
@#TemplatedTokenizer.2kw~@Next.qv:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff64h
        push    ebx
        push    esi
        push    edi
L_87481:
        mov     edi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-080h],eax
        mov     dword [ebp-080h+04h],___cppexceptionhandle
        mov     dword [ebp-080h+08h],esp
        mov     dword [ebp-080h+0ch],ebp
        mov     dword [ebp-080h+010h],@.xc@#TemplatedTokenizer.2kw~@Next.qv
        mov     dword [ebp-080h+014h],00h
        lea     eax,[ebp-080h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 191:     size_t n = line.find_first_not_of("\t \v"); 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,edi
        add     eax,byte 04h
        mov     dword [ebp-09ch],eax
        mov     ebx,L_87480
        xor     esi,esi
; Line 3610:     _LIBCPP_ASSERT(__s != nullptr, "string::find_first_not_of(): received nullptr"); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    esi
        push    ebx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_87582
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edi+04h+04h+04h]
        jmp     L_87583
L_87582:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h+04h]
        shr     eax,01h
L_87583:
        push    eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_87774
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edi+08h+04h+04h]
        jmp     L_87775
L_87774:
        mov     eax,dword [ebp-09ch]
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_87775:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    @std@#__str_find_first_not_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui ; std::__str_find_first_not_of<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
        add     esp,byte 014h
; Line 3613: } 
; Line 192:     line.erase(0, n); 
        push    eax
        push    byte 00h
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui ; std::basic_string<char, char_traits<char>, allocator<char>>::erase(unsigned int, unsigned int)
        add     esp,byte 0ch
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_87986
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edi+04h+04h+04h]
        jmp     L_87987
L_87986:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edi+04h+04h]
        shr     eax,01h
L_87987:
        and     eax,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_87484
; Line 194:         currentToken = std::make_shared<EndToken>(); 
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#make_shared.8EndTokene5_Args~.qV ; std::make_shared<EndToken, ..._Args>()
        add     esp,byte 04h
        mov     dword [ebp-080h+014h],01h
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~ ; std::shared_ptr<Token>::operator =<EndToken>(shared_ptr<EndToken>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],02h
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@#shared_ptr.8EndToken~@.bdtr.qv ; std::shared_ptr<EndToken>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87487
L_87484:
; Line 195:     else if (NumericToken::Start(line)) 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @NumericToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; NumericToken::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 04h
        and     al,al
        je      L_87490
; Line 196:         currentToken = std::make_shared<NumericToken>(line); 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-054h]
        push    eax
        call    @std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::make_shared<NumericToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],03h
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~ ; std::shared_ptr<Token>::operator =<NumericToken>(shared_ptr<NumericToken>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],04h
        lea     eax,[ebp-054h]
        push    eax
        call    @std@#shared_ptr.12NumericToken~@.bdtr.qv ; std::shared_ptr<NumericToken>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87493
L_87490:
; Line 197:     else if (CharacterToken::Start(line)) 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @CharacterToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; CharacterToken::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 04h
        and     al,al
        je      L_87496
; Line 198:         currentToken = std::make_shared<CharacterToken>(line); 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-04ch]
        push    eax
        call    @std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::make_shared<CharacterToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],05h
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~ ; std::shared_ptr<Token>::operator =<CharacterToken>(shared_ptr<CharacterToken>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],06h
        lea     eax,[ebp-04ch]
        push    eax
        call    @std@#shared_ptr.14CharacterToken~@.bdtr.qv ; std::shared_ptr<CharacterToken>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87499
L_87496:
; Line 199:     else if (StringToken::Start(line)) 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @StringToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; StringToken::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 04h
        and     al,al
        je      L_87502
; Line 200:         currentToken = std::make_shared<StringToken>(line); 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::make_shared<StringToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],07h
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~ ; std::shared_ptr<Token>::operator =<StringToken>(shared_ptr<StringToken>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],08h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#shared_ptr.11StringToken~@.bdtr.qv ; std::shared_ptr<StringToken>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87505
L_87502:
; Line 201:     else if (TemplatedIdentifierToken<T>::Start(line)) 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; TemplatedIdentifierToken<kw>::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 04h
        and     al,al
        je      L_87508
; Line 202:         currentToken = std::make_shared<TemplatedIdentifierToken<T>>(line, keywordTable, caseInsensitive); 
        mov     eax,edi
        mov     ecx,edi
        add     ecx,byte 020h
        push    ecx
        push    eax
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 ; std::make_shared<TemplatedIdentifierToken<kw>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
        add     esp,byte 010h
        mov     dword [ebp-080h+014h],09h
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~ ; std::shared_ptr<Token>::operator =<TemplatedIdentifierToken<kw>>(shared_ptr<TemplatedIdentifierToken<kw>>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],0ah
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@.bdtr.qv ; std::shared_ptr<TemplatedIdentifierToken<kw>>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87511
L_87508:
; Line 203:     else if (keywordTable && TemplatedKeywordToken<T>::Start(line)) 
        cmp     dword [edi],byte 00h
        je      L_87514
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @#TemplatedKeywordToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; TemplatedKeywordToken<kw>::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 04h
        and     al,al
        je      L_87514
; Line 204:         currentToken = std::make_shared<TemplatedKeywordToken<T>>(line, keywordTable); 
        mov     eax,edi
        push    eax
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-034h]
        push    eax
        call    @std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ ; std::make_shared<TemplatedKeywordToken<kw>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
        add     esp,byte 0ch
        mov     dword [ebp-080h+014h],0bh
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~ ; std::shared_ptr<Token>::operator =<TemplatedKeywordToken<kw>>(shared_ptr<TemplatedKeywordToken<kw>>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],0ch
        lea     eax,[ebp-034h]
        push    eax
        call    @std@#shared_ptr.#TemplatedKeywordToken.2kw~~@.bdtr.qv ; std::shared_ptr<TemplatedKeywordToken<kw>>::~shared_ptr()
        add     esp,byte 04h
        jmp     L_87517
L_87514:
; Line 205:     else 
; Line 206:         currentToken = std::make_shared<ErrorToken>(line); 
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::make_shared<ErrorToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],0dh
        push    eax
        mov     eax,edi
        add     eax,byte 018h
        push    eax
        call    @std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~ ; std::shared_ptr<Token>::operator =<ErrorToken>(shared_ptr<ErrorToken>&&)
        add     esp,byte 08h
        mov     dword [ebp-080h+014h],0eh
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@#shared_ptr.10ErrorToken~@.bdtr.qv ; std::shared_ptr<ErrorToken>::~shared_ptr()
        add     esp,byte 04h
L_87517:
L_87511:
L_87505:
L_87499:
L_87493:
L_87487:
        mov     eax,dword [edi+018h]
; Line 208: } 
L_87482:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#shared_ptr.8EndToken~ virtual
        [bits 32]
@.xt@#shared_ptr.8EndToken~:
        dd      @std@#shared_ptr.8EndToken~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.12NumericToken~ virtual
        [bits 32]
@.xt@#shared_ptr.12NumericToken~:
        dd      @std@#shared_ptr.12NumericToken~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.14CharacterToken~ virtual
        [bits 32]
@.xt@#shared_ptr.14CharacterToken~:
        dd      @std@#shared_ptr.14CharacterToken~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.11StringToken~ virtual
        [bits 32]
@.xt@#shared_ptr.11StringToken~:
        dd      @std@#shared_ptr.11StringToken~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.#TemplatedIdentifierToken.2kw~~ virtual
        [bits 32]
@.xt@#shared_ptr.#TemplatedIdentifierToken.2kw~~:
        dd      @std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.#TemplatedKeywordToken.2kw~~ virtual
        [bits 32]
@.xt@#shared_ptr.#TemplatedKeywordToken.2kw~~:
        dd      @std@#shared_ptr.#TemplatedKeywordToken.2kw~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#shared_ptr.10ErrorToken~ virtual
        [bits 32]
@.xt@#shared_ptr.10ErrorToken~:
        dd      @std@#shared_ptr.10ErrorToken~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@#TemplatedTokenizer.2kw~@Next.qv virtual
        [bits 32]
@.xc@#TemplatedTokenizer.2kw~@Next.qv:
        dd      00h
        dd      0ffffff80h
        dd      0400h
        dd      @.xt@#shared_ptr.8EndToken~+0
        dd      0ffffffa4h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#shared_ptr.12NumericToken~+0
        dd      0ffffffach
        dd      03h
        dd      04h
        dd      0400h
        dd      @.xt@#shared_ptr.14CharacterToken~+0
        dd      0ffffffb4h
        dd      05h
        dd      06h
        dd      0400h
        dd      @.xt@#shared_ptr.11StringToken~+0
        dd      0ffffffbch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#shared_ptr.#TemplatedIdentifierToken.2kw~~+0
        dd      0ffffffc4h
        dd      09h
        dd      0ah
        dd      0400h
        dd      @.xt@#shared_ptr.#TemplatedKeywordToken.2kw~~+0
        dd      0ffffffcch
        dd      0bh
        dd      0ch
        dd      0400h
        dd      @.xt@#shared_ptr.10ErrorToken~+0
        dd      0ffffffd4h
        dd      0dh
        dd      0eh
        dd      00h
section code
section code
        section vsc@std@#deque.c#allocator.c~~@__add_back_capacity.qv virtual
        [bits 32]
; std::deque<char, allocator<char>>::__add_back_capacity()
@std@#deque.c#allocator.c~~@__add_back_capacity.qv:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe74h
        push    ebx
        push    esi
        push    edi
L_88153:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-090h],eax
        mov     dword [ebp-090h+04h],___cppexceptionhandle
        mov     dword [ebp-090h+08h],esp
        mov     dword [ebp-090h+0ch],ebp
        mov     dword [ebp-090h+010h],@.xc@std@#deque.c#allocator.c~~@__add_back_capacity.qv
        mov     dword [ebp-090h+014h],00h
        lea     eax,[ebp-090h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2568:     allocator_type& __a = __base::__alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0180h],eax
        and     eax,eax
        je      L_88232
        mov     eax,dword [ebp-0180h]
        add     eax,byte 04h
        jmp     L_88233
L_88232:
        mov     eax,dword [ebp-0180h]
L_88233:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     esi,eax
        mov     edi,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     ecx,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     eax,ebx
; Line 1496:         return __base::__start_; 
        mov     eax,dword [eax+01ch]
; Line 1497:     } 
        cmp     eax,ecx
        jc      L_88156
; Line 2570:     { 
; Line 2571:         __base::__start_ -= __base::__block_size; 
        sub     dword [ebx+01ch],edi
        mov     eax,dword [ebx+08h+04h]
        mov     eax,dword [eax]
        mov     dword [ebp-06ch],eax
; Line 2573:         __base::__map_.pop_front(); 
        mov     ecx,ebx
        add     ecx,byte 04h
        mov     eax,dword [ebx+08h+04h]
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc ; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**)
        add     esp,byte 08h
L_88281:
; Line 2574:         __base::__map_.push_back(__pt); 
        lea     eax,[ebp-06ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc ; std::__split_buffer<char*, allocator<char*>>::push_back(char*&&)
        add     esp,byte 08h
; Line 2575:     } 
        jmp     L_88161
L_88156:
; Line 2577:     else if (__base::__map_.size() < __base::__map_.capacity()) 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h+04h]
        sub     eax,dword [ebx+010h+04h]
        neg     eax
        imul    eax,byte 01h
        mov     ecx,eax
        sar     ecx,02h
        mov     eax,dword [ebx+08h+04h]
        sub     eax,dword [ebx+0ch+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,ecx
        jnc     L_88164
; Line 2578:     {    
; Line 2581:         if (__base::__map_.__back_spare() != 0) 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+0ch+04h]
        sub     eax,dword [ebx+010h+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        and     eax,eax
        je      L_88168
; Line 2582:             __base::__map_.push_back(__alloc_traits::allocate(__a, __base::__block_size)); 
; Line 1861:         if (__n > max_size()) 
        or      ecx,byte 0ffffffffh
        cmp     edi,ecx
        jbe     L_88444
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_88444:
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    edi
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        mov     dword [ebp-068h],eax
        lea     eax,[ebp-068h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc ; std::__split_buffer<char*, allocator<char*>>::push_back(char*&&)
        add     esp,byte 08h
        jmp     L_88179
L_88168:
; Line 2583:         else 
; Line 2584:         { 
; Line 2585:             __base::__map_.push_front(__alloc_traits::allocate(__a, __base::__block_size)); 
; Line 1861:         if (__n > max_size()) 
        or      ecx,byte 0ffffffffh
        cmp     edi,ecx
        jbe     L_88513
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_88513:
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    edi
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        mov     dword [ebp-060h],eax
        lea     eax,[ebp-060h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc ; std::__split_buffer<char*, allocator<char*>>::push_front(char*&&)
        add     esp,byte 08h
        mov     eax,dword [ebx+08h+04h]
        mov     eax,dword [eax]
        mov     dword [ebp-064h],eax
; Line 2588:             __base::__map_.pop_front(); 
        mov     ecx,ebx
        add     ecx,byte 04h
        mov     eax,dword [ebx+08h+04h]
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc ; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**)
        add     esp,byte 08h
L_88595:
; Line 2589:             __base::__map_.push_back(__pt); 
        lea     eax,[ebp-064h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc ; std::__split_buffer<char*, allocator<char*>>::push_back(char*&&)
        add     esp,byte 08h
; Line 2590:         } 
L_88171:
; Line 2591:     } 
        jmp     L_88179
L_88164:
; Line 2593:     else 
; Line 2594:     { 
; Line 2595:         __split_buffer<pointer, typename __base::__pointer_allocator&> 
        mov     eax,ebx
        add     eax,byte 04h
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0184h],eax
        and     eax,eax
        je      L_88628
        mov     eax,dword [ebp-0184h]
        add     eax,byte 04h
        jmp     L_88629
L_88628:
        mov     eax,dword [ebp-0184h]
L_88629:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,dword [ebx+08h+04h]
        sub     eax,dword [ebx+0ch+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        push    eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebx+04h+04h]
        sub     eax,dword [ebx+010h+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        shl     eax,01h
        mov     dword [ebp-040h],eax
        lea     eax,[ebp-040h]
        mov     dword [ebp-044h],01h
        lea     ecx,[ebp-044h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0188h],00h
        lea     edx,[ebp-0188h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_88754:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ ; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
        add     esp,byte 010h
        mov     dword [ebp-090h+014h],01h
; Line 2498:   template <bool _Dummy = true, 
        mov     edi,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     eax,edi
        mov     dword [ebp-058h],esi
        mov     dword [ebp-058h+04h],eax
        lea     eax,[ebp-058h]
        mov     dword [ebp-090h+014h],02h
        push    eax
; Line 1861:         if (__n > max_size()) 
        or      ecx,byte 0ffffffffh
        cmp     edi,ecx
        jbe     L_88792
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_88792:
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    edi
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-050h]
        push    eax
        call    @std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bctr.4bool?1?v~.qpcR#__allocator_destructor.#allocator.c~~ ; std::unique_ptr<char*, __allocator_destructor<allocator<char>>>::unique_ptr<bool=1, void, >(char*, __allocator_destructor<allocator<char>>&&)
        mov     dword [ebp-090h+014h],03h
L_88856:
        add     esp,byte 0ch
        mov     dword [ebp-090h+014h],04h
; Line 2604:         __buf.push_back(__hold.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-050h]
; Line 2592:   } 
        mov     dword [ebp-05ch],eax
        lea     eax,[ebp-05ch]
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc ; std::__split_buffer<char*, allocator<char*>&>::push_back(char*&&)
        add     esp,byte 08h
; Line 2605:         __hold.release(); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],00h
; Line 2611:   } 
; Line 2607:         for (typename __base::__map_pointer __i = __base::__map_.end(); 
        mov     esi,dword [ebx+0ch+04h]
        mov     ecx,dword [ebx+08h+04h]
        cmp     esi,ecx
        je      L_88185
L_88183:
; Line 2609:             __buf.push_front(*--__i); 
        sub     esi,byte 04h
        mov     eax,esi
        push    eax
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc ; std::__split_buffer<char*, allocator<char*>&>::push_front(char*&&)
        add     esp,byte 08h
L_88186:
L_88184:
        mov     ecx,dword [ebx+08h+04h]
        cmp     esi,ecx
        jne     L_88183
L_88185:
; Line 2610:         _VSTD::swap(__base::__map_.__first_, __buf.__first_); 
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,eax
        add     ecx,byte 04h
        lea     eax,[ebp-03ch+04h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-0ech],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0ech]
        mov     dword [eax],ecx
; Line 3718: } 
L_89048:
; Line 2611:         _VSTD::swap(__base::__map_.__begin_, __buf.__begin_); 
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,eax
        add     ecx,byte 08h
        lea     eax,[ebp-03ch+08h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-0ech],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0ech]
        mov     dword [eax],ecx
; Line 3718: } 
L_89112:
; Line 2612:         _VSTD::swap(__base::__map_.__end_, __buf.__end_); 
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,eax
        add     ecx,byte 0ch
        lea     eax,[ebp-03ch+0ch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-0ech],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0ech]
        mov     dword [eax],ecx
; Line 3718: } 
L_89176:
; Line 2613:         _VSTD::swap(__base::__map_.__end_cap(), __buf.__end_cap()); 
        mov     eax,ebx
        add     eax,byte 04h
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        lea     eax,[ebp-03ch+010h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-0ech],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0ech]
        mov     dword [eax],ecx
; Line 3718: } 
L_89240:
; Line 2614:     } 
        mov     dword [ebp-090h+014h],05h
        lea     esi,[ebp-050h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-050h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],eax
        and     ebx,ebx
        je      L_89403
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-018ch],eax
        and     eax,eax
        je      L_89516
        mov     eax,dword [ebp-018ch]
        add     eax,byte 04h
        jmp     L_89517
L_89516:
        mov     eax,dword [ebp-018ch]
L_89517:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<char>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_89562:
L_89547:
L_89532:
L_89499:
L_89403:
; Line 2619:   } 
L_89420:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.c~~@.bdtr.qv ; std::__allocator_destructor<allocator<char>>::~__allocator_destructor()
        add     esp,byte 04h
L_89641:
L_89655:
L_89628:
L_89400:
        mov     dword [ebp-090h+014h],06h
        lea     eax,[ebp-03ch]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
        add     esp,byte 04h
L_88179:
L_88161:
; Line 2615: } 
L_88154:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.ppcr#allocator.pc~~ virtual
        [bits 32]
@.xt@#__compressed_pair.ppcr#allocator.pc~~:
        dd      @std@#__compressed_pair.ppcr#allocator.pc~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.ppci?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__split_buffer.pcr#allocator.pc~~ virtual
        [bits 32]
@.xt@#__split_buffer.pcr#allocator.pc~~:
        dd      @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__split_buffer_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.c~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.c~~:
        dd      @std@#__allocator_destructor.#allocator.c~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.pci?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.pci?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.pci?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.pc#__allocator_destructor.#allocator.c~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.pc#__allocator_destructor.#allocator.c~~~:
        dd      @std@#__compressed_pair.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.pci?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~ virtual
        [bits 32]
@.xt@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~:
        dd      @std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#deque.c#allocator.c~~@__add_back_capacity.qv virtual
        [bits 32]
@.xc@std@#deque.c#allocator.c~~@__add_back_capacity.qv:
        dd      00h
        dd      0ffffff70h
        dd      0400h
        dd      @.xt@#__split_buffer.pcr#allocator.pc~~+0
        dd      0ffffffc4h
        dd      01h
        dd      06h
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.c~~+0
        dd      0ffffffa8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~+0
        dd      0ffffffb0h
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc virtual
        [bits 32]
; std::allocator_traits<allocator<char>>::construct<char, char>(allocator<char>&, char*, char&&)
@std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_89663:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc ; std::allocator_traits<allocator<char>>::__construct<char, char>(integral_constant<bool, bool=1>, allocator<char>&, char*, char&&)
        mov     dword [ebp-04ch+014h],03h
L_89742:
L_89729:
        add     esp,byte 010h
L_89664:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.c~pcc~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.c~pcc~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.c~~@#construct.cc~.qr#allocator.c~pcRc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.c~pcc~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__deque_base.c#allocator.c~~@end.qv virtual
        [bits 32]
; std::__deque_base<char, allocator<char>>::end()
@std@#__deque_base.c#allocator.c~~@end.qv:
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_89749:
        mov     esi,dword [esp+04h+024h]
        mov     eax,dword [esp+08h+024h]
        mov     dword [esp-014h+024h],eax
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,dword [esp-014h+024h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [esp-014h+024h]
        mov     ecx,dword [ecx+01ch]
        mov     eax,dword [eax+020h]
        add     eax,ecx
        mov     dword [esp-018h+024h],eax
        mov     eax,dword [esp-014h+024h]
        mov     ebx,dword [eax+08h+04h]
        mov     ecx,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     eax,dword [esp-018h+024h]
        sub     edx,edx
        xor     edx,edx
        div     ecx
        shl     eax,02h
        add     ebx,eax
        mov     edx,dword [esp-018h+024h]
        mov     eax,dword [esp-014h+024h]
        mov     eax,dword [eax+0ch+04h]
        mov     edi,dword [esp-014h+024h]
        cmp     eax,dword [edi+08h+04h]
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_89835
        xor     eax,eax
        jmp     L_89836
L_89835:
        mov     edi,dword [ebx]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ecx
        mov     eax,edi
        add     eax,edx
L_89836:
        mov     dword [esi],ebx
        mov     dword [esi+04h],eax
        mov     eax,dword [esp+04h+024h]
; Line 1159: } 
L_89750:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv:
L_89857:
        mov     eax,dword [esp+04h]
L_89858:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_89865:
        mov     eax,dword [esp+04h]
L_89866:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const std::__variant_detail::_Trait&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe84h
        push    ebx
        push    esi
        push    edi
L_89873:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-017ch],eax
        mov     eax,dword [ebp+01ch]
        mov     dword [ebp-0178h],eax
        mov     eax,dword [ebp+018h]
        mov     dword [ebp-0174h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-0170h],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-016ch],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0168h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-07ch],eax
        mov     dword [ebp-07ch+04h],___cppexceptionhandle
        mov     dword [ebp-07ch+08h],esp
        mov     dword [ebp-07ch+0ch],ebp
        mov     dword [ebp-07ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-07ch+014h],00h
        lea     eax,[ebp-07ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2105:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-012ch],eax
        and     eax,eax
        je      L_89983
        mov     eax,dword [ebp-012ch]
        add     eax,byte 04h
        jmp     L_89984
L_89983:
        mov     eax,dword [ebp-012ch]
L_89984:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebp-016ch]
        mov     edx,eax
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_90062
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+08h+04h]
        jmp     L_90063
L_90062:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_90063:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ebx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_90288
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_90289
L_90288:
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     edx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,edx
L_90289:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_90484
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edx+04h+04h]
        jmp     L_90485
L_90484:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edx+04h]
        shr     eax,01h
L_90485:
        add     eax,ebx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ecx
        push    eax
        push    ecx
        mov     dword [ebp-0130h],00h
        lea     eax,[ebp-0130h]
        mov     dword [ebp-0134h],eax
        lea     eax,[ebp-0130h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0130h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_90015:
        mov     dword [ebp-015ch],ebx
        mov     eax,dword [ebp-0168h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0138h],eax
        and     eax,eax
        je      L_90694
        mov     eax,dword [ebp-0138h]
        add     eax,byte 04h
        jmp     L_90695
L_90694:
        mov     eax,dword [ebp-0138h]
L_90695:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 1207:     } 
        mov     dword [ebp-0160h],eax
        mov     byte [ebp-01h],00h
        mov     eax,dword [ebp-0160h]
        mov     dword [ebp-0158h],eax
        and     eax,eax
        je      L_89876
; Line 2111:     { 
; Line 2112:         __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-015ch]
        mov     ecx,dword [ebp-0160h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_90747
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_90748
L_90747:
        cmp     eax,ecx
        jc      L_90750
L_90749:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_90750:
L_90748:
; Line 119: } 
        mov     dword [ebp-0164h],eax
; Line 2113:         __nd = __bucket_list_[__chash]; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0168h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_89880
; Line 2115:         { 
; Line 2116:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     ebx,dword [eax]
        and     ebx,ebx
        je      L_89886
        mov     ecx,dword [ebp-015ch]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_90800
        mov     esi,dword [ebp-0164h]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_90848
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_90849
L_90848:
        cmp     eax,edx
        jc      L_90851
L_90850:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_90851:
L_90849:
; Line 119: } 
        cmp     eax,esi
        jne     L_89886
L_90800:
L_89884:
; Line 2119:             { 
; Line 2120:                 if (key_eq()(__nd->__upcast()->__value_, __k)) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-013ch],eax
        and     eax,eax
        je      L_90898
        mov     eax,dword [ebp-013ch]
        add     eax,byte 04h
        jmp     L_90899
L_90898:
        mov     eax,dword [ebp-013ch]
L_90899:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-016ch]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_89895
L_89892:
; Line 2122:             } 
L_89887:
        mov     ebx,dword [ebx]
L_89885:
        and     ebx,ebx
        je      L_91031
        mov     ecx,dword [ebp-015ch]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_89884
        mov     esi,dword [ebp-0164h]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_91079
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_91080
L_91079:
        cmp     eax,edx
        jc      L_91082
L_91081:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_91082:
L_91080:
; Line 119: } 
        cmp     eax,esi
        je      L_89884
L_91031:
L_89886:
; Line 2123:         } 
L_89880:
; Line 2124:     } 
L_89876:
; Line 2125:     { 
; Line 2127:         __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...); 
        mov     eax,dword [ebp-0178h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0174h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0170h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-015ch]
        push    eax
        mov     eax,dword [ebp-0168h]
        push    eax
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(unsigned int,  const std::__variant_detail::_Trait&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
        add     esp,byte 018h
        mov     dword [ebp-07ch+014h],01h
        mov     eax,dword [ebp-0158h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
        mov     eax,dword [ebp-0168h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mulss   xmm0,[eax+01ch]
        movss   [ebp-0154h],xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm1,xmm0
        movss   xmm0,[ebp-0154h]
        comiss  xmm0,xmm1
        jb      L_91132
        cmp     dword [ebp-0160h],byte 00h
        jne     L_89909
L_91132:
; Line 2132:         { 
; Line 2133:             rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc), 
        mov     ecx,dword [ebp-0158h]
        shl     ecx,01h
        mov     eax,dword [ebp-0158h]
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_91261
        mov     edx,eax
        dec     edx
        and     eax,edx
        je      L_91259
L_91261:
        xor     eax,eax
        jmp     L_91260
L_91259:
        mov     eax,01h
L_91260:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        sete    al
        and     eax,byte 01h
        add     eax,ecx
        mov     dword [ebp-054h],eax
        lea     ebx,[ebp-054h]
        mov     esi,dword [ebp-0168h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esi+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[esi+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [ebp-0150h]
        movss   xmm0,[ebp-0150h]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        mov     dword [ebp-058h],eax
        lea     eax,[ebp-058h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0140h],00h
        lea     ecx,[ebp-0140h]
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_91402:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        push    eax
        mov     eax,dword [ebp-0168h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::rehash(unsigned int)
        add     esp,byte 08h
; Line 2135:             __bc = bucket_count(); 
        mov     eax,dword [ebp-0168h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0144h],eax
        and     eax,eax
        je      L_91466
        mov     eax,dword [ebp-0144h]
        add     eax,byte 04h
        jmp     L_91467
L_91466:
        mov     eax,dword [ebp-0144h]
L_91467:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
; Line 2136:             __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-015ch]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_91519
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_91520
L_91519:
        cmp     eax,ecx
        jc      L_91522
L_91521:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_91522:
L_91520:
; Line 119: } 
        mov     dword [ebp-0164h],eax
; Line 2137:         } 
L_89909:
        mov     ecx,dword [ebp-0164h]
        mov     eax,ecx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0168h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     ecx,dword [edx+ecx*4]
        and     ecx,ecx
        jne     L_89916
; Line 2141:         { 
; Line 2142:             __pn = __p1_.first().__ptr(); 
        mov     ecx,dword [ebp-0168h]
        add     ecx,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2143:             __h->__next_ = __pn->__next_; 
        mov     ebx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [edx],ebx
; Line 2144:             __pn->__next_ = __h.get()->__ptr(); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     dword [ecx],edx
; Line 2146:             __bucket_list_[__chash] = __pn; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0168h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+eax*4],ecx
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        cmp     dword [eax],byte 00h
        je      L_89926
; Line 2148:                 __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)] 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     eax,dword [eax]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_92082
        mov     ecx,ebx
        dec     ecx
        and     ecx,eax
        jmp     L_92083
L_92082:
        cmp     eax,ecx
        jc      L_92085
L_92084:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_92085:
        mov     ecx,eax
L_92083:
; Line 119: } 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0168h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     dword [eax+ecx*4],esi
L_89920:
; Line 2150:         } 
        jmp     L_89926
L_89916:
; Line 2151:         else 
; Line 2152:         { 
; Line 2153:             __h->__next_ = __pn->__next_; 
        mov     edx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [eax],edx
; Line 2154:             __pn->__next_ = static_cast<__next_pointer>(__h.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2592:   } 
        mov     dword [ecx],eax
; Line 2155:         } 
L_89926:
; Line 2156:         __nd = static_cast<__next_pointer>(__h.release()); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-040h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],00h
; Line 2611:   } 
; Line 2158:         ++size(); 
        mov     eax,dword [ebp-0168h]
        add     eax,byte 014h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],eax
        mov     ecx,dword [eax]
        inc     ecx
        mov     eax,dword [ebp-050h]
        mov     dword [eax],ecx
; Line 2159:         __inserted = true; 
        mov     byte [ebp-01h],01h
; Line 2160:     } 
        mov     dword [ebp-07ch+014h],02h
        lea     esi,[ebp-040h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-040h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],ecx
        and     eax,eax
        je      L_92360
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0148h],eax
        and     eax,eax
        je      L_92458
        mov     eax,dword [ebp-0148h]
        add     eax,byte 04h
        jmp     L_92459
L_92458:
        mov     eax,dword [ebp-0148h]
L_92459:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*)
        add     esp,byte 08h
L_92360:
; Line 2619:   } 
L_92377:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::~__hash_node_destructor()
        add     esp,byte 04h
L_92486:
L_92500:
L_92473:
L_92357:
L_89895:
; Line 440:     template<class _U1, class _U2, _EnableB< 
        lea     eax,[ebp-01h]
        push    eax
        mov     dword [ebp-08h],ebx
        lea     eax,[ebp-08h]
        mov     dword [ebp-07ch+014h],03h
        push    eax
        mov     eax,dword [ebp-017ch]
        push    eax
        call    @std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1 ; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&, bool&)
        mov     dword [ebp-07ch+014h],04h
L_92534:
        add     esp,byte 0ch
        mov     eax,dword [ebp+08h]
; Line 2167: } 
L_89874:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffff84h
        dd      0400h
        dd      @.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~+0
        dd      0ffffffc0h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~+0
        dd      0fffffff8h
        dd      03h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::forward_as_tuple< const basic_string<char, char_traits<char>, allocator<char>>&>( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_92540:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?rx#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlrx#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const basic_string<char, char_traits<char>, allocator<char>>&>::__tuple_impl<..., unsigned int=0,  const basic_string<char, char_traits<char>, allocator<char>>&, ..., ..., _Tl,  const basic_string<char, char_traits<char>, allocator<char>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const basic_string<char, char_traits<char>, allocator<char>>&)
L_92655:
L_92669:
L_92683:
L_92697:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_92541:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0,  const basic_string<char, char_traits<char>, allocator<char>>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv:
L_92704:
L_92705:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const basic_string<char, char_traits<char>, allocator<char>>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_92710:
L_92724:
L_92711:
        ret
section code
section code
        section vsc@std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple< const basic_string<char, char_traits<char>, allocator<char>>&>::~tuple()
@std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_92730:
L_92757:
L_92744:
L_92731:
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vdeallocate.qv virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vdeallocate()
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vdeallocate.qv:
        add     esp,byte 0ffffffach
        push    ebx
L_92764:
        mov     ebx,dword [esp+04h+058h]
; Line 1003:     if (this->__begin_ != nullptr) 
        cmp     dword [ebx+04h],byte 00h
        je      L_92767
; Line 1004:     { 
; Line 1005:         clear(); 
        mov     eax,ebx
        mov     ecx,ebx
; Line 771:         size_type __old_size = size(); 
; Line 772:         __base::clear(); 
        mov     eax,dword [eax+04h]
        push    eax
        push    ecx
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~ ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__destruct_at_end(shared_ptr<Token>*)
        add     esp,byte 08h
L_92820:
; Line 773:         __annotate_shrink(__old_size); 
; Line 891:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_92851:
; Line 893:     } 
L_92836:
; Line 774:         __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_93092:
; Line 775:     } 
L_92789:
; Line 1006:         __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity()); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-054h+058h],eax
        and     eax,eax
        je      L_93141
        mov     eax,dword [esp-054h+058h]
        add     eax,byte 04h
        jmp     L_93142
L_93141:
        mov     eax,dword [esp-054h+058h]
L_93142:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_93253:
L_93238:
L_93109:
; Line 1007:         this->__begin_ = this->__end_ = this->__end_cap() = nullptr; 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],00h
        mov     eax,dword [eax+0ch]
        mov     dword [ebx+08h],eax
        mov     dword [ebx+04h],eax
; Line 1008:     } 
L_92767:
; Line 1009: } 
L_92765:
        pop     ebx
        add     esp,byte 054h
        ret
section code
section code
        section vsc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign_alloc.qr#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__move_assign_alloc(__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=1>)
@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__move_assign_alloc.qr#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?1?~:
        add     esp,byte 0ffffffcch
        push    ebx
L_93357:
        mov     ebx,dword [esp+08h+038h]
        mov     eax,dword [esp+04h+038h]
; Line 410:             __alloc() = _VSTD::move(__c.__alloc()); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-030h+038h],eax
        and     eax,eax
        je      L_93407
        mov     eax,dword [esp-030h+038h]
        add     eax,byte 04h
        jmp     L_93408
L_93407:
        mov     eax,dword [esp-030h+038h]
L_93408:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-034h+038h],eax
        and     eax,eax
        je      L_93456
        mov     eax,dword [esp-034h+038h]
        add     eax,byte 04h
        jmp     L_93457
L_93456:
        mov     eax,dword [esp-034h+038h]
L_93457:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 411:         } 
L_93473:
L_93358:
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::destroy<shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~:
; Line 1627:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_93479:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__destroy<shared_ptr<Token>>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
        mov     dword [ebp-04ch+014h],03h
L_93542:
L_93529:
        add     esp,byte 0ch
L_93480:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv:
L_93549:
        mov     eax,dword [esp+04h]
L_93550:
        ret
section code
section code
        section vsc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~ virtual
        [bits 32]
; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__copy_assign_alloc( const __vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>&, integral_constant<bool, bool=0>)
@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~:
; Line 402:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_93557:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
L_93575:
L_93558:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~ virtual
        [bits 32]
@.xc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__copy_assign_alloc.qrx#__vector_base.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~#integral_constant.4booln1?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      010h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__distance.p#shared_ptr.5Token~~.qp#shared_ptr.n0~p#shared_ptr.n0~31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__distance<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, std::random_access_iterator_tag)
@std@#__distance.p#shared_ptr.5Token~~.qp#shared_ptr.n0~p#shared_ptr.n0~31@std@random_access_iterator_tag:
; Line 688: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ebx
L_93581:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 692:     return __last - __first; 
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        mov     ebx,eax
        sar     ebx,03h
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_93623:
L_93610:
L_93597:
        mov     eax,ebx
; Line 693: } 
L_93665:
L_93652:
L_93639:
L_93582:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__advance.p#shared_ptr.5Token~~.qrp#shared_ptr.n0~i31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__advance<shared_ptr<Token>*>(shared_ptr<Token>*&, int, std::random_access_iterator_tag)
@std@#__advance.p#shared_ptr.5Token~~.qrp#shared_ptr.n0~i31@std@random_access_iterator_tag:
; Line 659: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
L_93673:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 663:    __i += __n; 
        mov     edx,dword [ecx]
        shl     eax,03h
        add     eax,edx
        mov     dword [ecx],eax
; Line 664: } 
        lea     eax,[esp+0ch]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_93715:
L_93702:
L_93689:
L_93674:
        ret
section code
section code
        section vsc@std@#copy.p#shared_ptr.5Token~p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~p#shared_ptr.n0~ virtual
        [bits 32]
; std::copy<shared_ptr<Token>*, shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, shared_ptr<Token>*)
@std@#copy.p#shared_ptr.5Token~p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~p#shared_ptr.n0~:
; Line 1730: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffff84h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_93723:
        mov     eax,dword [esp+0ch+08ch]
        mov     edx,dword [esp+08h+08ch]
        mov     ecx,dword [esp+04h+08ch]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1701:         *__result = *__first; 
; Line 4218:     shared_ptr(__r).swap(*this); 
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
; Line 4338: } 
; Line 4220: } 
; Line 1703: } 
; Line 1737:     } else { 
L_93726:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
        mov     ebx,ecx
        mov     dword [esp-074h+08ch],edx
        mov     esi,eax
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     ebx,dword [esp-074h+08ch]
        je      L_93912
L_93910:
; Line 1701:         *__result = *__first; 
        mov     ebp,esi
        mov     eax,ebx
; Line 4218:     shared_ptr(__r).swap(*this); 
        push    eax
        lea     eax,[esp-07ch+090h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bctr.qrx#shared_ptr.n0~ ; std::shared_ptr<Token>::shared_ptr( const shared_ptr<Token>&)
        mov     edi,eax
        add     esp,byte 08h
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     eax,ebp
        push    eax
        push    edi
        call    @std@#swap.p5Token~.qrpn0rpn0 ; std::swap<Token*>(Token*&, Token*&)
        add     esp,byte 08h
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     eax,ebp
        add     eax,byte 04h
        push    eax
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0 ; std::swap<std::__shared_weak_count*>(std::__shared_weak_count*&, std::__shared_weak_count*&)
        add     esp,byte 08h
; Line 4338: } 
L_93962:
        lea     eax,[esp-07ch+08ch]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
; Line 4220: } 
L_93947:
L_93913:
        add     ebx,byte 08h
        add     esi,byte 08h
L_93911:
        cmp     ebx,dword [esp-074h+08ch]
        jne     L_93910
L_93912:
; Line 1703: } 
; Line 1711: } 
        mov     eax,esi
; Line 1740:     } 
L_93731:
L_93741:
L_93841:
L_93826:
L_93744:
L_93742:
L_93743:
L_93724:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 07ch
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@.bctr.qrx#shared_ptr.n0~ virtual
        [bits 32]
; std::shared_ptr<Token>::shared_ptr( const shared_ptr<Token>&)
@std@#shared_ptr.5Token~@.bctr.qrx#shared_ptr.n0~:
; Line 4061: { 
        push    ecx
L_93971:
        mov     edx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     ecx,dword [edx]
        mov     dword [eax],ecx
        mov     ecx,dword [edx+04h]
        mov     dword [eax+04h],ecx
; Line 4062:     if (__cntrl_) 
        cmp     dword [eax+04h],byte 00h
        je      L_93976
; Line 4063:         __cntrl_->__add_shared(); 
        mov     ecx,dword [eax+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     ecx,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [ecx],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_94011:
; Line 3478:     } 
L_93996:
L_93976:
; Line 4064: } 
L_93972:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__copy_constexpr.p#shared_ptr.5Token~p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~p#shared_ptr.n0~ virtual
        [bits 32]
; std::__copy_constexpr<shared_ptr<Token>*, shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, shared_ptr<Token>*)
@std@#__copy_constexpr.p#shared_ptr.5Token~p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~p#shared_ptr.n0~:
; Line 1696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        add     esp,byte 0ffffffc0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_94034:
        mov     esi,dword [esp+0ch+050h]
        mov     eax,dword [esp+08h+050h]
        mov     dword [esp-038h+050h],eax
        mov     ebx,dword [esp+04h+050h]
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     ebx,dword [esp-038h+050h]
        je      L_94039
L_94037:
; Line 1701:         *__result = *__first; 
        mov     ebp,esi
        mov     eax,ebx
; Line 4218:     shared_ptr(__r).swap(*this); 
        lea     edi,[esp-040h+050h]
        mov     ecx,dword [eax]
        mov     dword [esp-040h+050h],ecx
        mov     eax,dword [eax+04h]
        mov     dword [esp-040h+04h+050h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [esp-040h+04h+050h],byte 00h
        je      L_94082
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [esp+04h-040h+050h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_94129:
; Line 3478:     } 
L_94114:
L_94082:
; Line 4064: } 
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     eax,ebp
        push    eax
        push    edi
        call    @std@#swap.p5Token~.qrpn0rpn0 ; std::swap<Token*>(Token*&, Token*&)
        add     esp,byte 08h
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     eax,ebp
        add     eax,byte 04h
        push    eax
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0 ; std::swap<std::__shared_weak_count*>(std::__shared_weak_count*&, std::__shared_weak_count*&)
        add     esp,byte 08h
; Line 4338: } 
L_94077:
        lea     eax,[esp-040h+050h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
; Line 4220: } 
L_94062:
L_94040:
        add     ebx,byte 08h
        add     esi,byte 08h
L_94038:
        cmp     ebx,dword [esp-038h+050h]
        jne     L_94037
L_94039:
        mov     eax,esi
; Line 1703: } 
L_94035:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 040h
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_at_end<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, unsigned int)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_94155:
        mov     eax,dword [ebp+014h]
        mov     edi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,esi
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_94233
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_94234
L_94233:
        mov     eax,dword [ebp-078h]
L_94234:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-074h],eax
        lea     esi,[ebp-0ch+04h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
        cmp     ebx,edi
        je      L_94183
L_94181:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
        mov     eax,ebx
        push    eax
        mov     eax,esi
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [ebp-074h]
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>, shared_ptr<Token>&>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&)
        add     esp,byte 0ch
L_94184:
        add     ebx,byte 08h
        mov     eax,esi
        add     dword [eax],byte 08h
L_94182:
        cmp     ebx,edi
        jne     L_94181
L_94183:
; Line 1689:         } 
L_94201:
; Line 1077: } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_94267:
L_94156:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui virtual
        [bits 32]
@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@82@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vallocate.qui virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vallocate(unsigned int)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vallocate.qui:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
        push    edi
L_94273:
        mov     ebx,dword [esp+08h+038h]
        mov     esi,dword [esp+04h+038h]
; Line 992:     if (__n > max_size()) 
        mov     eax,esi
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@max_size.xqv ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::max_size() const 
        mov     ecx,eax
        add     esp,byte 04h
        cmp     ebx,ecx
        jbe     L_94276
; Line 993:         this->__throw_length_error(); 
        mov     eax,esi
        push    eax
        call    @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv ; std::__vector_base_common<bool=1>::__throw_length_error() const 
        add     esp,byte 04h
L_94276:
; Line 994:     this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_94328
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_94329
L_94328:
        mov     eax,dword [esp-02ch+038h]
L_94329:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     edi,ebx
; Line 1861:         if (__n > max_size()) 
        mov     ecx,01fffffffh
        cmp     edi,ecx
        jbe     L_94333
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_94333:
        mov     eax,edi
        shl     eax,03h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        mov     dword [esi+08h],eax
        mov     dword [esi+04h],eax
; Line 995:     this->__end_cap() = this->__begin_ + __n; 
        mov     eax,esi
        mov     edx,dword [esi+04h]
        mov     ecx,ebx
        shl     ecx,03h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+0ch],ecx
; Line 996:     __annotate_new(0); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_94462:
; Line 873:     } 
L_94447:
; Line 997: } 
L_94274:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@max_size.xqv virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::max_size() const 
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@max_size.xqv:
        add     esp,byte 0ffffffbch
L_94757:
        mov     eax,dword [esp+04h+044h]
; Line 1015:     return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()), 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+044h],eax
        and     eax,eax
        je      L_94824
        mov     eax,dword [esp-03ch+044h]
        add     eax,byte 04h
        jmp     L_94825
L_94824:
        mov     eax,dword [esp-03ch+044h]
L_94825:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     dword [esp-040h+048h],00h
        lea     eax,[esp-040h+048h]
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#shared_ptr.n0~~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__max_size(integral_constant<bool, bool=1>,  const allocator<shared_ptr<Token>>&)
L_94884:
L_94871:
        add     esp,byte 08h
        mov     dword [esp-04h+044h],eax
        lea     eax,[esp-04h+044h]
        mov     dword [esp-08h+044h],07fffffffh
        lea     ecx,[esp-08h+044h]
; Line 2562:     return _VSTD::min(__a, __b, __less<_Tp>()); 
        mov     dword [esp-044h+044h],00h
        lea     edx,[esp-044h+044h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#min.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::min<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_94932:
        add     esp,byte 0ch
; Line 2563: } 
        mov     eax,dword [eax]
; Line 1017: } 
L_94758:
        add     esp,byte 044h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>,  const shared_ptr<Token>&>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*,  const shared_ptr<Token>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_94939:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>,  const shared_ptr<Token>&>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*,  const shared_ptr<Token>&)
        mov     dword [ebp-04ch+014h],03h
L_95018:
L_95005:
        add     esp,byte 010h
L_94940:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~rx#shared_ptr.n0~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~rx#shared_ptr.n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~rx#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~rx#shared_ptr.n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::_ConstructTransaction::~_ConstructTransaction()
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@_ConstructTransaction@.bdtr.qv:
L_95025:
        mov     eax,dword [esp+04h]
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_95026:
        ret
section code
section code
        section vsc@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bctr.quiuir#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::__split_buffer(unsigned int, unsigned int, allocator<shared_ptr<Token>>&)
@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bctr.quiuir#allocator.#shared_ptr.n0~~:
; Line 317: { 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_95033:
        mov     eax,dword [esp+010h+04ch]
        mov     edi,dword [esp+0ch+04ch]
        mov     esi,dword [esp+08h+04ch]
        mov     ebx,dword [esp+04h+04ch]
        xor     ecx,ecx
        mov     dword [esp-04h+04ch],ecx
        lea     ecx,[esp-04h+04ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [ebx+010h],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx+04h+010h],eax
; Line 2206:     } 
; Line 318:     __first_ = __cap != 0 ? __alloc_traits::allocate(__alloc(), __cap) : nullptr; 
        and     esi,esi
        je      L_95174
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+04ch],eax
        and     eax,eax
        je      L_95221
        mov     eax,dword [esp-03ch+04ch]
        add     eax,byte 04h
        jmp     L_95222
L_95221:
        mov     eax,dword [esp-03ch+04ch]
L_95222:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ebp,esi
; Line 1861:         if (__n > max_size()) 
        mov     ecx,01fffffffh
        cmp     ebp,ecx
        jbe     L_95226
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_95226:
        mov     eax,ebp
        shl     eax,03h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        jmp     L_95175
L_95174:
        xor     eax,eax
L_95175:
        mov     dword [ebx+04h],eax
; Line 319:     __begin_ = __end_ = __first_ + __start; 
        mov     ecx,eax
        mov     eax,edi
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebx+0ch],eax
        mov     dword [ebx+08h],eax
; Line 320:     __end_cap() = __first_ + __cap; 
        mov     eax,ebx
        mov     edx,dword [ebx+04h]
        mov     ecx,esi
        shl     ecx,03h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+010h],ecx
; Line 321: } 
        mov     eax,ebx
L_95034:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__swap_out_circular_buffer.qr#__split_buffer.#shared_ptr.n0~r#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__swap_out_circular_buffer(__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>&)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__swap_out_circular_buffer.qr#__split_buffer.#shared_ptr.n0~r#allocator.#shared_ptr.n0~~~:
        add     esp,0ffffff64h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_95330:
        mov     eax,dword [esp+08h+0ach]
        mov     dword [esp-098h+0ach],eax
        mov     eax,dword [esp+04h+0ach]
        mov     dword [esp-094h+0ach],eax
; Line 951:     __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_95363:
; Line 879:     } 
L_95348:
; Line 952:     __alloc_traits::__construct_backward_with_exception_guarantees( 
        mov     eax,dword [esp-094h+0ach]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-09ch+0ach],eax
        and     eax,eax
        je      L_95725
        mov     eax,dword [esp-09ch+0ach]
        add     eax,byte 04h
        jmp     L_95726
L_95725:
        mov     eax,dword [esp-09ch+0ach]
L_95726:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [esp-090h+0ach],eax
        mov     eax,dword [esp-094h+0ach]
        mov     edi,dword [eax+04h]
        mov     eax,dword [esp-094h+0ach]
        mov     ebp,dword [eax+08h]
        mov     esi,dword [esp-098h+0ach]
        add     esi,byte 08h
; Line 1720:             static_assert(__is_cpp17_move_insertable<allocator_type>::value, 
        cmp     ebp,edi
        je      L_95673
L_95672:
; Line 1723:             { 
; Line 1724:               construct(__a, _VSTD::__to_address(__end2 - 1), 
        sub     ebp,byte 08h
        mov     eax,ebp
; Line 271:     return _VSTD::move(__x); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 272: } 
        push    eax
        mov     eax,esi
        mov     ebx,dword [eax]
        mov     eax,ebx
        sub     eax,byte 08h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [esp-090h+0b4h]
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>, shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&&)
        add     esp,byte 0ch
; Line 1731:               --__end2; 
        mov     eax,esi
        mov     ecx,ebx
        sub     ecx,byte 08h
        mov     dword [eax],ecx
; Line 1732:             } 
L_95674:
; Line 1722:             while (__end1 != __begin1) 
        cmp     ebp,edi
        jne     L_95672
L_95673:
; Line 1733:         } 
L_95693:
; Line 954:     _VSTD::swap(this->__begin_, __v.__begin_); 
        mov     ecx,dword [esp-094h+0ach]
        add     ecx,byte 04h
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 08h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_95791:
; Line 955:     _VSTD::swap(this->__end_, __v.__end_); 
        mov     ecx,dword [esp-094h+0ach]
        add     ecx,byte 08h
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 0ch
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_95855:
; Line 956:     _VSTD::swap(this->__end_cap(), __v.__end_cap()); 
        mov     eax,dword [esp-094h+0ach]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_95919:
; Line 957:     __v.__first_ = __v.__begin_; 
        mov     eax,dword [esp-098h+0ach]
        mov     ecx,dword [eax+08h]
        mov     eax,dword [esp-098h+0ach]
        mov     dword [eax+04h],ecx
; Line 958:     __annotate_new(size()); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_96110:
; Line 873:     } 
L_96079:
; Line 959:     __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_96415:
; Line 960: } 
L_95331:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,09ch
        ret
section code
section code
        section vsc@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::~__split_buffer()
@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv:
        add     esp,byte 0ffffff98h
        push    ebx
L_96421:
        mov     ebx,dword [esp+04h+06ch]
; Line 348:     clear(); 
        mov     eax,ebx
        mov     edx,ebx
        mov     eax,dword [eax+08h]
        mov     dword [esp-064h+06ch],00h
        lea     ecx,[esp-064h+06ch]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~#integral_constant.4booln1?0?~ ; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::__destruct_at_end(shared_ptr<Token>*, integral_constant<bool, bool=0>)
L_96490:
        add     esp,byte 0ch
L_96461:
L_96444:
        cmp     dword [ebx+04h],byte 00h
        je      L_96424
; Line 350:         __alloc_traits::deallocate(__alloc(), __first_, capacity()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+06ch],eax
        and     eax,eax
        je      L_96540
        mov     eax,dword [esp-068h+06ch]
        add     eax,byte 04h
        jmp     L_96541
L_96540:
        mov     eax,dword [esp-068h+06ch]
L_96541:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_96636:
L_96621:
L_96508:
L_96424:
; Line 351: } 
L_96713:
L_96727:
L_96700:
L_96742:
L_96422:
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>&, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bdtr.qv:
L_96748:
L_96749:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<shared_ptr<Token>*, allocator<shared_ptr<Token>>&>::~__compressed_pair()
@std@#__compressed_pair.p#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@.bdtr.qv:
L_96754:
L_96768:
L_96782:
L_96755:
        ret
section code
section code
        section vsc@std@__shared_count@__release_shared.qv virtual
        [bits 32]
; std::__shared_count::__release_shared()
@std@__shared_count@__release_shared.qv:
; Line 3440:     _LIBCPP_INLINE_VISIBILITY 
        push    ecx
L_96788:
        mov     eax,dword [esp+04h+04h]
; Line 3442:       if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) { 
        mov     ecx,eax
        add     ecx,byte 04h
; Line 3389:     return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL); 
        or      edx,byte 0ffffffffh
        lock xadd dword [ecx],edx
        add     edx,dword 0ffffffffh
        mov     ecx,edx
; Line 3391:     return __t -= 1; 
        cmp     ecx,dword 0ffffffffh
        jne     L_96791
; Line 3443:         __on_zero_shared(); 
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+04h]
        add     esp,byte 04h
        mov     al,01h
        jmp     L_96789
; Line 3445:       } 
L_96791:
        xor     al,al
; Line 3447:     } 
L_96789:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__deque_base.c#allocator.c~~@clear.qv virtual
        [bits 32]
; std::__deque_base<char, allocator<char>>::clear()
@std@#__deque_base.c#allocator.c~~@clear.qv:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
        push    edi
L_96819:
        mov     esi,dword [esp+04h+08ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-080h+08ch],eax
        mov     ecx,eax
        mov     edi,esi
        add     edi,byte 04h
        and     ecx,ecx
        je      L_96883
        mov     eax,dword [esp-080h+08ch]
        add     eax,byte 04h
        jmp     L_96884
L_96883:
        mov     eax,dword [esp-080h+08ch]
L_96884:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__get()
        mov     ebx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,esi
        push    eax
        lea     eax,[esp-08h+090h]
        push    eax
        call    @std@#__deque_base.c#allocator.c~~@begin.qv ; std::__deque_base<char, allocator<char>>::begin()
        add     esp,byte 08h
        mov     eax,esi
        push    eax
        lea     eax,[esp-018h+090h]
        push    eax
        call    @std@#__deque_base.c#allocator.c~~@end.qv ; std::__deque_base<char, allocator<char>>::end()
        add     esp,byte 08h
        lea     ecx,[esp-08h+08ch]
        lea     eax,[esp-018h+08ch]
        mov     ecx,dword [ecx+04h]
        mov     eax,dword [eax+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_96824
L_96822:
; Line 1247:         __alloc_traits::destroy(__a, _VSTD::addressof(*__i)); 
        mov     eax,dword [esp-08h+04h+08ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc ; std::allocator_traits<allocator<char>>::destroy<char>(allocator<char>&, char*)
        add     esp,byte 08h
L_96825:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@#__deque_iterator.cpcrcppcii?4096?~@__block_size]
        inc     dword [esp-08h+04h+08ch]
        mov     edx,dword [esp-08h+04h+08ch]
        mov     ecx,dword [esp-08h+08ch]
        mov     ecx,dword [ecx]
        sub     ecx,edx
        neg     ecx
        cmp     ecx,eax
        jne     L_96952
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+08ch],byte 04h
; Line 326:             __ptr_ = *__m_iter_; 
        mov     eax,dword [esp-08h+08ch]
        mov     eax,dword [eax]
        mov     dword [esp+04h-08h+08ch],eax
; Line 327:         } 
L_96952:
; Line 329:     } 
L_96823:
        lea     ecx,[esp-08h+08ch]
        lea     eax,[esp-018h+08ch]
        mov     ecx,dword [ecx+04h]
        mov     eax,dword [eax+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        and     al,al
        sete    al
        and     eax,byte 01h
        and     al,al
        jne     L_96822
L_96824:
L_97017:
L_97031:
; Line 1248:     size() = 0; 
        mov     eax,esi
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+020h],00h
        mov     eax,dword [esi+08h+04h]
        sub     eax,dword [esi+0ch+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_96833
L_96832:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,dword [esi+08h+04h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_97157:
L_97142:
L_97111:
; Line 1252:         __map_.pop_front(); 
        mov     eax,dword [esi+08h+04h]
        add     eax,byte 04h
        push    eax
        push    edi
        call    @std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc ; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**)
        add     esp,byte 08h
L_97223:
; Line 1253:     } 
L_96834:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,dword [esi+08h+04h]
        sub     eax,dword [esi+0ch+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_96832
L_96833:
        mov     eax,dword [esi+08h+04h]
        sub     eax,dword [esi+0ch+04h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_96844
        cmp     eax,byte 02h
        je      L_96846
        jmp     L_96849
; Line 1255:     { 
; Line 1256:     case 1: 
L_96844:
; Line 1257:         __start_ = __block_size / 2; 
        mov     eax,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esi+01ch],eax
; Line 1258:         break; 
        jmp     L_96841
L_96846:
; Line 1260:         __start_ = __block_size; 
        mov     eax,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        mov     dword [esi+01ch],eax
; Line 1261:         break; 
; Line 1262:     } 
L_96849:
L_96841:
; Line 1263: } 
L_96820:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~ virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::__destruct_at_end(char**, integral_constant<bool, bool=0>)
@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
L_97261:
        mov     ebx,dword [esp+08h+034h]
        mov     esi,dword [esp+04h+034h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_97265
L_97264:
; Line 303:         __alloc_traits::destroy(__alloc(), __to_address(--__end_)); 
        sub     dword [esi+0ch],byte 04h
        mov     eax,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_97321
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_97322
L_97321:
        mov     eax,dword [esp-02ch+038h]
L_97322:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc ; std::allocator_traits<allocator<char*>>::destroy<char*>(allocator<char*>&, char**)
        add     esp,byte 08h
L_97266:
        cmp     ebx,dword [esi+0ch]
        jne     L_97264
L_97265:
; Line 304: } 
L_97336:
L_97262:
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv:
L_97342:
        mov     eax,dword [esp+04h]
L_97343:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_97350:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
        mov     dword [ebp-04ch+014h],03h
L_97429:
L_97416:
        add     esp,byte 010h
L_97351:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::_ConstructTransaction::~_ConstructTransaction()
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv:
; Line 902:     ~_ConstructTransaction() { 
L_97436:
        mov     eax,dword [esp+04h]
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_97437:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~ virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__swap_out_circular_buffer(__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>&)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__swap_out_circular_buffer.qr#__split_buffer.#variant.#shared_ptr.n0~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~:
        add     esp,0ffffff54h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_97444:
        mov     eax,dword [esp+08h+0bch]
        mov     dword [esp-0a8h+0bch],eax
        mov     eax,dword [esp+04h+0bch]
        mov     dword [esp-0a4h+0bch],eax
; Line 951:     __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_97477:
; Line 879:     } 
L_97462:
; Line 952:     __alloc_traits::__construct_backward_with_exception_guarantees( 
        mov     eax,dword [esp-0a4h+0bch]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0ach+0bch],eax
        and     eax,eax
        je      L_97839
        mov     eax,dword [esp-0ach+0bch]
        add     eax,byte 04h
        jmp     L_97840
L_97839:
        mov     eax,dword [esp-0ach+0bch]
L_97840:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [esp-0a0h+0bch],eax
        mov     eax,dword [esp-0a4h+0bch]
        mov     edi,dword [eax+04h]
        mov     eax,dword [esp-0a4h+0bch]
        mov     ebp,dword [eax+08h]
        mov     esi,dword [esp-0a8h+0bch]
        add     esi,byte 08h
; Line 1720:             static_assert(__is_cpp17_move_insertable<allocator_type>::value, 
        cmp     ebp,edi
        je      L_97787
L_97786:
; Line 1723:             { 
; Line 1724:               construct(__a, _VSTD::__to_address(__end2 - 1), 
        sub     ebp,byte 018h
        mov     eax,ebp
; Line 271:     return _VSTD::move(__x); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 272: } 
        push    eax
        mov     eax,esi
        mov     ebx,dword [eax]
        mov     eax,ebx
        sub     eax,byte 018h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [esp-0a0h+0c4h]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
; Line 1731:               --__end2; 
        mov     eax,esi
        mov     ecx,ebx
        sub     ecx,byte 018h
        mov     dword [eax],ecx
; Line 1732:             } 
L_97788:
; Line 1722:             while (__end1 != __begin1) 
        cmp     ebp,edi
        jne     L_97786
L_97787:
; Line 1733:         } 
L_97807:
; Line 954:     _VSTD::swap(this->__begin_, __v.__begin_); 
        mov     ecx,dword [esp-0a4h+0bch]
        add     ecx,byte 04h
        mov     eax,dword [esp-0a8h+0bch]
        add     eax,byte 08h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-050h+0bch],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-050h+0bch]
        mov     dword [eax],ecx
; Line 3718: } 
L_97905:
; Line 955:     _VSTD::swap(this->__end_, __v.__end_); 
        mov     ecx,dword [esp-0a4h+0bch]
        add     ecx,byte 08h
        mov     eax,dword [esp-0a8h+0bch]
        add     eax,byte 0ch
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-050h+0bch],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-050h+0bch]
        mov     dword [eax],ecx
; Line 3718: } 
L_97969:
; Line 956:     _VSTD::swap(this->__end_cap(), __v.__end_cap()); 
        mov     eax,dword [esp-0a4h+0bch]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        mov     eax,dword [esp-0a8h+0bch]
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-050h+0bch],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-050h+0bch]
        mov     dword [eax],ecx
; Line 3718: } 
L_98033:
; Line 957:     __v.__first_ = __v.__begin_; 
        mov     eax,dword [esp-0a8h+0bch]
        mov     ecx,dword [eax+08h]
        mov     eax,dword [esp-0a8h+0bch]
        mov     dword [eax+04h],ecx
; Line 958:     __annotate_new(size()); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_98224:
; Line 873:     } 
L_98193:
; Line 959:     __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_98529:
; Line 960: } 
L_97445:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0ach
        ret
section code
section code
        section vsc@std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ virtual
        [bits 32]
; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
@std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~:
        push    ecx
        push    ecx
        push    ecx
L_98535:
        mov     ecx,dword [esp+0ch+0ch]
        mov     eax,dword [esp+04h+0ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h],ecx
; Line 4062:     if (__cntrl_) 
        cmp     dword [eax+04h],byte 00h
        je      L_98545
; Line 4063:         __cntrl_->__add_shared(); 
        mov     ecx,dword [eax+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     ecx,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [ecx],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_98608:
; Line 3478:     } 
L_98593:
L_98545:
; Line 4064: } 
L_98640:
L_98536:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~@.bctr.ruL~.q#in_place_index_t.ui?0?~ruL virtual
        [bits 32]
; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=1, unsigned long long, ...=, >::__union<unsigned long long&, >(in_place_index_t<unsigned int=0>, unsigned long long&)
@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?1?uLe????~@.bctr.ruL~.q#in_place_index_t.ui?0?~ruL:
        push    ecx
        push    ebx
L_98646:
        mov     eax,dword [esp+0ch+08h]
        mov     ebx,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL ; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
        add     esp,byte 0ch
L_98680:
        mov     eax,ebx
L_98647:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@max_size.xqv virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::max_size() const 
@std@#vector.uL#allocator.uL~~@max_size.xqv:
        add     esp,byte 0ffffffbch
L_98686:
        mov     eax,dword [esp+04h+044h]
; Line 1015:     return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()), 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+044h],eax
        and     eax,eax
        je      L_98753
        mov     eax,dword [esp-03ch+044h]
        add     eax,byte 04h
        jmp     L_98754
L_98753:
        mov     eax,dword [esp-03ch+044h]
L_98754:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     dword [esp-040h+048h],00h
        lea     eax,[esp-040h+048h]
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.uL~~@__max_size.q#integral_constant.4booln0?1?~rx#allocator.uL~ ; std::allocator_traits<allocator<unsigned long long>>::__max_size(integral_constant<bool, bool=1>,  const allocator<unsigned long long>&)
L_98813:
L_98800:
        add     esp,byte 08h
        mov     dword [esp-04h+044h],eax
        lea     eax,[esp-04h+044h]
        mov     dword [esp-08h+044h],07fffffffh
        lea     ecx,[esp-08h+044h]
; Line 2562:     return _VSTD::min(__a, __b, __less<_Tp>()); 
        mov     dword [esp-044h+044h],00h
        lea     edx,[esp-044h+044h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#min.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::min<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_98861:
        add     esp,byte 0ch
; Line 2563: } 
        mov     eax,dword [eax]
; Line 1017: } 
L_98687:
        add     esp,byte 044h
        ret
section code
section code
        section vsc@std@__throw_length_error.qpxc virtual
        [bits 32]
; std::__throw_length_error(char const *)
@std@__throw_length_error.qpxc:
; Line 247: _LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_98868:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@__throw_length_error.qpxc
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 249: { 
        push    dword @.xt@17@std@length_error
        push    dword @std@length_error@.bctr.qrx17@std@length_error ; std::length_error::length_error( const std::length_error&)
        push    byte 01h
        lea     ebx,[ebp-02ch]
        push    eax
        push    ebx
        call    @std@logic_error@.bctr.qpxc ; std::logic_error::logic_error(char const *)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        mov     dword [ebp-02ch],@std@length_error@_.vt+0ch
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     dword [ebp-050h+014h],02h
        push    ebx
        lea     eax,[ebp-050h]
        push    eax
        call    @_ThrowException.qpvpvipvpv ; _ThrowException(void*, void*, int, void*, void*)
        add     esp,byte 014h
; Line 251:     throw length_error(__msg); 
        mov     dword [ebp-050h+014h],03h
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@length_error@.bdtr.qv ; std::length_error::~length_error()
        add     esp,byte 04h
L_98869:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@23@std@__libcpp_refstring virtual
        [bits 32]
@.xt@23@std@__libcpp_refstring:
        dd      @std@__libcpp_refstring@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06ch
        db      069h
        db      062h
        db      063h
        db      070h
        db      070h
        db      05fh
        db      072h
        db      065h
        db      066h
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@16@std@logic_error virtual
        [bits 32]
@.xt@16@std@logic_error:
        dd      @std@logic_error@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06ch
        db      06fh
        db      067h
        db      069h
        db      063h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@14@std@exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@17@std@length_error virtual
        [bits 32]
@.xt@17@std@length_error:
        dd      @std@length_error@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06ch
        db      065h
        db      06eh
        db      067h
        db      074h
        db      068h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@16@std@logic_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__throw_length_error.qpxc virtual
        [bits 32]
@.xc@std@__throw_length_error.qpxc:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@17@std@length_error+0
        dd      0ffffffd4h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long,  const unsigned long long&>(allocator<unsigned long long>&, unsigned long long*,  const unsigned long long&)
@std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_98896:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL ; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long,  const unsigned long long&>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*,  const unsigned long long&)
        mov     dword [ebp-04ch+014h],03h
L_98975:
L_98962:
        add     esp,byte 010h
L_98897:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.uL~puLrxuL~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.uL~puLrxuL~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLrxuL~.qr#allocator.uL~puLrxuL:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.uL~puLrxuL~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::_ConstructTransaction::~_ConstructTransaction()
@std@#vector.uL#allocator.uL~~@_ConstructTransaction@.bdtr.qv:
L_98982:
        mov     eax,dword [esp+04h]
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_98983:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_98990:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
        mov     dword [ebp-04ch+014h],03h
L_99069:
L_99056:
        add     esp,byte 010h
L_98991:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r9_SourceTp~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r9_SourceTp~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r9_SourceTp~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__hash_table( const __hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
; Line 1467: { 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff24h
        push    ebx
        push    esi
        push    edi
L_99076:
        mov     eax,dword [ebp+0ch]
        mov     ecx,dword [ebp+08h]
        mov     dword [ebp-0c4h],ecx
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-060h],eax
        mov     dword [ebp-060h+04h],___cppexceptionhandle
        mov     dword [ebp-060h+08h],esp
        mov     dword [ebp-060h+0ch],ebp
        mov     dword [ebp-060h+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~
        mov     dword [ebp-060h+014h],00h
        lea     eax,[ebp-060h]
        mov     dword [fs:00h],eax
        pop     eax
        lea     esi,[ebp-0ch]
        mov     ecx,eax
; Line 2815:     return __ptr_.second(); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     ebx,eax
        mov     dword [ebp-0c8h],ecx
        and     ecx,ecx
        je      L_99147
        mov     eax,dword [ebp-0c8h]
        add     eax,byte 04h
        jmp     L_99148
L_99147:
        mov     eax,dword [ebp-0c8h]
L_99148:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0cch],eax
        and     eax,eax
        je      L_99166
        mov     eax,dword [ebp-0cch]
        add     eax,byte 04h
        jmp     L_99167
L_99166:
        mov     eax,dword [ebp-0cch]
L_99167:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::allocator_traits<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::select_on_container_copy_construction( const allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>&)
        add     esp,byte 08h
        mov     dword [ebp-060h+014h],01h
        xor     eax,eax
        mov     dword [ebp-068h],eax
        mov     ecx,esi
        lea     eax,[ebp-068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ebp-0ch],eax
; Line 2206:     } 
        mov     eax,ecx
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-0d0h],eax
; Line 2206:     } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-060h+014h],02h
        push    esi
        push    byte 00h
        mov     eax,dword [ebp-0c4h]
        push    eax
        call    @std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.q9nullptr_tR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ ; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::unique_ptr<bool=1, void, >(nullptr_t, __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<nullptr_t>, allocator<shared_ptr<nullptr_t>>>>, void*>*>*>>&&)
        mov     dword [ebp-060h+014h],03h
L_99284:
        mov     dword [ebp-060h+014h],04h
        lea     eax,[ebp-0ch+04h]
        push    eax
        call    @std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv ; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>::~allocator()
        add     esp,byte 04h
L_99324:
L_99338:
L_99311:
L_99298:
        add     esp,byte 0ch
        mov     dword [ebp-060h+014h],05h
        mov     esi,dword [ebp-0c4h]
        add     esi,byte 0ch
        mov     dword [ebp-010h],00h
        lea     edi,[ebp-010h]
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0d4h],eax
        and     eax,eax
        je      L_99406
        mov     eax,dword [ebp-0d4h]
        add     eax,byte 04h
        jmp     L_99407
L_99406:
        mov     eax,dword [ebp-0d4h]
L_99407:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::select_on_container_copy_construction( const allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&)
        add     esp,byte 08h
        mov     dword [ebp-060h+014h],06h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        push    esi
        call    @std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
        mov     eax,esi
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-0d8h],eax
; Line 2206:     } 
L_99472:
        mov     dword [ebp-060h+014h],07h
L_99486:
        mov     edi,dword [ebp-0c4h]
        add     edi,byte 014h
        mov     dword [ebp-018h],00h
        lea     esi,[ebp-018h]
        mov     eax,ebx
        add     eax,byte 014h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0dch],eax
        and     eax,eax
        je      L_99536
        mov     eax,dword [ebp-0dch]
        add     eax,byte 04h
        jmp     L_99537
L_99536:
        mov     eax,dword [ebp-0dch]
L_99537:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.xqv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [esi]
        mov     ecx,dword [ebp-0c4h]
        mov     dword [ecx+014h],edx
; Line 2206:     } 
        mov     ecx,edi
        add     ecx,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ecx
        call    @std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#hash.#basic_string.c#char_traits.c~#allocator.c~~~ ; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::hash( const hash<basic_string<char, char_traits<char>, allocator<char>>>&)
        add     esp,byte 08h
; Line 2206:     } 
        mov     ecx,dword [ebp-0c4h]
        add     ecx,byte 01ch
        mov     edx,ebx
        add     edx,byte 01ch
        mov     eax,edx
        movss   xmm0,[eax]
        mov     eax,dword [ebp-0c4h]
        movss   [eax+01ch],xmm0
        add     ecx,byte 04h
        mov     eax,edx
        add     eax,dword 04h
        push    eax
        push    ecx
        call    @std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~ ; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::equal_to( const equal_to<basic_string<char, char_traits<char>, allocator<char>>>&)
        add     esp,byte 08h
        mov     eax,dword [ebp-0c4h]
; Line 1468: } 
L_99077:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@.bctr.qrx#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~:
        dd      00h
        dd      0ffffffa0h
        dd      0400h
        dd      @.xt@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffffch
        dd      01h
        dd      03h
        dd      0400h
        dd      @.xt@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~+0
        dd      0fffffff4h
        dd      02h
        dd      04h
        dd      0400h
        dd      @.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~+0
        dd      0ffffffech
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::rehash(unsigned int)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui:
        add     esp,byte 0ffffffc8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_99724:
        mov     ebx,dword [esp+04h+048h]
; Line 2378:     if (__n == 1) 
        cmp     dword [esp+08h+048h],byte 01h
        jne     L_99727
; Line 2379:         __n = 2; 
        mov     dword [esp+08h+048h],02h
        jmp     L_99730
L_99727:
; Line 2380:     else if (__n & (__n - 1)) 
        mov     ecx,dword [esp+08h+048h]
        mov     eax,ecx
        dec     eax
        and     eax,ecx
        je      L_99733
; Line 2381:         __n = __next_prime(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        call    @std@__next_prime.qui ; std::__next_prime(unsigned int)
        add     esp,byte 04h
        mov     dword [esp+08h+048h],eax
L_99733:
L_99730:
        mov     eax,ebx
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-034h+048h],eax
        and     eax,eax
        je      L_99822
        mov     eax,dword [esp-034h+048h]
        add     eax,byte 04h
        jmp     L_99823
L_99822:
        mov     eax,dword [esp-034h+048h]
L_99823:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [eax]
; Line 1207:     } 
        mov     eax,edi
        cmp     dword [esp+08h+048h],eax
        jbe     L_99740
; Line 2384:         __rehash(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        push    ebx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__rehash(unsigned int)
        add     esp,byte 08h
        jmp     L_99743
L_99740:
; Line 2385:     else if (__n < __bc) 
        mov     eax,edi
        cmp     dword [esp+08h+048h],eax
        jnc     L_99746
; Line 2386:     { 
; Line 2387:         __n = _VSTD::max<size_type> 
        lea     esi,[esp+08h+048h]
        mov     eax,edi
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_99894
        mov     ecx,eax
        dec     ecx
        and     eax,ecx
        je      L_99892
L_99894:
        xor     eax,eax
        jmp     L_99893
L_99892:
        mov     eax,01h
L_99893:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        je      L_99875
        mov     ebp,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+014h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[ebp+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [esp-030h+04ch]
        movss   xmm0,[esp-030h+04ch]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
; Line 124: { 
; Line 125:     return __n < 2 ? __n : (size_t(1) << (std::numeric_limits<size_t>::digits - __libcpp_clz(__n-1))); 
        cmp     eax,byte 02h
        jc      L_100024
L_100023:
        mov     ecx,eax
        dec     ecx
        bsr     eax,ecx
        xor     eax,byte 01fh
        mov     ecx,020h
        sub     ecx,eax
        mov     eax,01h
        shl     eax,cl
L_100024:
; Line 126: } 
        mov     dword [esp-04h+048h],eax
        lea     eax,[esp-04h+048h]
        jmp     L_99876
L_99875:
        mov     ebp,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+014h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[ebp+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [esp-030h+04ch]
        movss   xmm0,[esp-030h+04ch]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        push    eax
        call    @std@__next_prime.qui ; std::__next_prime(unsigned int)
        add     esp,byte 04h
        mov     dword [esp-08h+048h],eax
        lea     eax,[esp-08h+048h]
L_99876:
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [esp-038h+048h],00h
        lea     ecx,[esp-038h+048h]
        push    dword [ecx]
        push    eax
        push    esi
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_100181:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        mov     dword [esp+08h+048h],eax
        cmp     dword [esp+08h+048h],edi
        jnc     L_99750
; Line 2394:             __rehash(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        push    ebx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__rehash(unsigned int)
        add     esp,byte 08h
L_99750:
; Line 2395:     } 
L_99746:
L_99743:
; Line 2396: } 
L_99725:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::insert<__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>>(__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>, __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
L_100188:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1623:     for (; __first != __last; ++__first) 
; Line 476:         return __x.__node_ == __y.__node_; 
        mov     edx,dword [ebp+0ch]
        mov     ecx,dword [ebp+010h]
        cmp     edx,ecx
        sete    cl
        and     ecx,byte 01h
; Line 477:     } 
        and     cl,cl
        sete    cl
        and     ecx,byte 01h
        mov     ebx,eax
        and     cl,cl
        je      L_100193
L_100191:
; Line 1624:         __table_.__insert_unique(*__first); 
; Line 453:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container const_iterator"); 
        mov     eax,dword [ebp+0ch]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 455:     } 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 1165:         return __emplace_unique_key_args(_NodeTypes::__get_key(__x), __x); 
; Line 493:     template<class _Tuple, _EnableB< 
        push    eax
; Line 177:     return __v.first; 
; Line 178:   } 
        push    eax
        push    ebx
        lea     eax,[ebp-078h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>( const basic_string<char, char_traits<char>, allocator<char>>&,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
        add     esp,byte 010h
        mov     ecx,dword [eax]
        mov     dword [ebp-02ch],ecx
        mov     dword [ebp-050h+014h],01h
        mov     al,byte [eax+04h]
        mov     byte [ebp+04h-02ch],al
L_100514:
L_100501:
; Line 1166:     } 
L_100543:
L_100530:
L_100194:
; Line 460:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                               "Attempted to increment non-incrementable unordered container const_iterator"); 
; Line 461:         __node_ = __node_->__next_; 
        mov     eax,dword [ebp+0ch]
        mov     eax,dword [eax]
        mov     dword [ebp+0ch],eax
; Line 463:     } 
L_100192:
; Line 476:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+010h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 477:     } 
        and     al,al
        sete    al
        and     eax,byte 01h
        and     al,al
        jne     L_100191
L_100193:
; Line 1625: } 
        mov     dword [ebp-050h+014h],02h
L_100651:
L_100638:
        mov     dword [ebp-050h+014h],03h
L_100679:
L_100666:
L_100189:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#insert.#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~.q#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0ch
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qR#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>::__hash_map_const_iterator(__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>>&&)
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qR#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
L_100686:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     edx,dword [edx]
        mov     dword [ecx],edx
L_100687:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::select_on_container_copy_construction( const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_100710:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-050h+014h],01h
        mov     dword [ebp-050h+014h],02h
        push    dword [eax]
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
        mov     dword [ebp-050h+014h],03h
L_100788:
L_100775:
        add     esp,byte 0ch
        mov     dword [ebp-050h+014h],04h
        mov     dword [ebp-050h+014h],05h
L_100804:
        mov     dword [ebp-050h+014h],06h
        mov     eax,dword [ebp+08h]
L_100711:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_select_on_container_copy_construction.x#allocator.#variant.#shared_ptr.5Token~uL~~~ virtual
        [bits 32]
@.xt@#__has_select_on_container_copy_construction.x#allocator.#variant.#shared_ptr.5Token~uL~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      073h
        db      065h
        db      06ch
        db      065h
        db      063h
        db      074h
        db      05fh
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      074h
        db      061h
        db      069h
        db      06eh
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@select_on_container_copy_construction.qrx#allocator.#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#__has_select_on_container_copy_construction.x#allocator.#variant.#shared_ptr.5Token~uL~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#allocator.#variant.#shared_ptr.5Token~uL~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_100810:
        mov     eax,dword [esp+04h]
L_100811:
        ret
section code
section code
        section vsc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui virtual
        [bits 32]
; std::vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_at_end<variant<shared_ptr<Token>, unsigned long long>*>(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, unsigned int)
@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_100818:
        mov     eax,dword [ebp+014h]
        mov     edi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1075:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,esi
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        imul    eax,byte 018h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1076:     __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_); 
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_100896
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_100897
L_100896:
        mov     eax,dword [ebp-078h]
L_100897:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-074h],eax
        lea     esi,[ebp-0ch+04h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
        cmp     ebx,edi
        je      L_100846
L_100844:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
        mov     eax,ebx
        push    eax
        mov     eax,esi
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [ebp-074h]
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
L_100847:
        add     ebx,byte 018h
        mov     eax,esi
        add     dword [eax],byte 018h
L_100845:
        cmp     ebx,edi
        jne     L_100844
L_100846:
; Line 1689:         } 
L_100864:
; Line 1077: } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_100930:
L_100819:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui virtual
        [bits 32]
@.xc@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@#__construct_at_end.p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@106@std@#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__destroy<variant<shared_ptr<Token>, unsigned long long>>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_100936:
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        call    @std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~ ; std::allocator<variant<shared_ptr<Token>, unsigned long long>>::destroy(variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
L_100954:
L_100937:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__destroy.#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::__destroy<unsigned long long>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*)
@std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL:
; Line 1790:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_100960:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
L_100980:
        mov     dword [ebp-048h+014h],01h
L_100994:
L_100961:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#__destroy.uL~.q#integral_constant.4booln0?1?~r#allocator.uL~puL:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_101000:
        mov     eax,dword [esp+04h]
L_101001:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_101008:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(integral_constant<bool, bool=0>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
        mov     dword [ebp-04ch+014h],03h
L_101071:
L_101058:
        add     esp,byte 0ch
L_101009:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(unsigned int,  const std::__variant_detail::_Trait&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff1ch
        push    ebx
        push    esi
        push    edi
L_101078:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp+01ch]
        mov     dword [ebp-0d0h],eax
        mov     ebx,dword [ebp+018h]
        mov     esi,dword [ebp+014h]
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-0c4h],eax
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2540:     static_assert(!__is_hash_value_type<_First, _Rest...>::value, 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d8h],eax
        and     eax,eax
        je      L_101115
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        jmp     L_101116
L_101115:
        mov     eax,dword [ebp-0d8h]
L_101116:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-0c8h],eax
        xor     cl,cl
        mov     dword [ebp-014h],eax
        mov     byte [ebp-014h+04h],cl
        lea     eax,[ebp-014h]
        mov     dword [ebp-05ch+014h],01h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,05555555h
        cmp     edi,ecx
        jbe     L_101153
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_101153:
        imul    eax,edi,byte 030h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-0ch]
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&&)
        mov     dword [ebp-05ch+014h],02h
L_101217:
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],03h
; Line 2544:     __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), 
        mov     eax,dword [ebp-0d0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ebp-0c8h]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
        add     esp,byte 014h
; Line 2547:     __h.get_deleter().__value_constructed = true; 
; Line 2595:     return __ptr_.second(); 
        lea     eax,[ebp-0ch]
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0dch],eax
        and     eax,eax
        je      L_101442
        mov     eax,dword [ebp-0dch]
        add     eax,byte 04h
        jmp     L_101443
L_101442:
        mov     eax,dword [ebp-0dch]
L_101443:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
        mov     byte [eax+04h],01h
; Line 2548:     __h->__hash_ = __hash; 
        mov     eax,dword [ebp-0c4h]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [ecx+04h],eax
; Line 2549:     __h->__next_ = nullptr; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax],00h
        mov     edi,dword [ebp-0d4h]
        mov     eax,edi
        lea     ebx,[ebp-0ch]
        mov     dword [ebp-0cch],eax
        mov     eax,ebx
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@release.qv ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::release()
        add     esp,byte 04h
        mov     dword [ebp-0e0h],eax
        lea     esi,[ebp-0e0h]
; Line 2595:     return __ptr_.second(); 
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0e4h],eax
        and     eax,eax
        je      L_101621
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 04h
        jmp     L_101622
L_101621:
        mov     eax,dword [ebp-0e4h]
L_101622:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [esi]
        mov     eax,dword [ebp-0cch]
        mov     dword [edi],edx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],04h
; Line 2206:     } 
; Line 2515:   } 
        mov     dword [ebp-05ch+014h],05h
        mov     eax,dword [ebp+08h]
; Line 2551: } 
L_101079:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0ffffffech
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~ virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*)
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~:
; Line 844:     { 
        add     esp,byte 0ffffffb4h
        push    ebx
L_101731:
        mov     ebx,dword [esp+08h+050h]
        mov     ecx,dword [esp+04h+050h]
; Line 845:         if (__value_constructed) 
        cmp     byte [ecx+04h],byte 00h
        je      L_101734
; Line 846:             __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ecx]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
        add     esp,byte 08h
L_101734:
        and     ebx,ebx
        je      L_101739
; Line 848:             __alloc_traits::deallocate(__na_, __p, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_101885:
L_101870:
L_101855:
L_101739:
; Line 849:     } 
L_101732:
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv:
L_101941:
        mov     eax,dword [esp+04h]
L_101942:
        ret
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::~__hash_node_destructor()
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv:
L_101949:
L_101950:
        ret
section code
section code
        section vsc@std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1 virtual
        [bits 32]
; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&, bool&)
@std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1:
        push    ecx
        push    ecx
L_101955:
        mov     ecx,dword [esp+0ch+08h]
        mov     edx,dword [esp+08h+08h]
        mov     eax,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     cl,byte [ecx]
        mov     byte [eax+04h],cl
L_101956:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~i?0?4bool?0?~@.bdtr.qv:
L_102013:
L_102014:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bdtr.qv:
L_102019:
L_102033:
L_102020:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv:
L_102039:
L_102066:
L_102053:
L_102081:
L_102040:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::~unique_ptr()
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bdtr.qv:
        add     esp,byte 0ffffffa4h
        push    ebx
L_102087:
        mov     edx,dword [esp+04h+060h]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_102093
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-05ch+060h],eax
        and     eax,eax
        je      L_102216
        mov     eax,dword [esp-05ch+060h]
        add     eax,byte 04h
        jmp     L_102217
L_102216:
        mov     eax,dword [esp-05ch+060h]
L_102217:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 845:         if (__value_constructed) 
        cmp     byte [ecx+04h],byte 00h
        je      L_102177
; Line 846:             __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ecx]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
        add     esp,byte 08h
L_102177:
        and     ebx,ebx
        je      L_102182
; Line 848:             __alloc_traits::deallocate(__na_, __p, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_102358:
L_102343:
L_102328:
L_102182:
; Line 849:     } 
L_102199:
L_102093:
; Line 2619:   } 
L_102110:
L_102450:
L_102437:
L_102465:
L_102424:
L_102088:
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__distance<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, std::random_access_iterator_tag)
@std@#__distance.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~31@std@random_access_iterator_tag:
; Line 688: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ebx
L_102472:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 692:     return __last - __first; 
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        sub     eax,ecx
        neg     eax
        imul    eax,dword 0aaaaaaabh
        mov     ebx,eax
        sar     ebx,03h
; Line 1708: } 
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_102562:
L_102549:
L_102536:
L_102578:
L_102592:
        mov     eax,ebx
; Line 693: } 
L_102632:
L_102619:
L_102606:
L_102648:
L_102662:
L_102473:
        pop     ebx
        ret
section code
section code
        section vsc@std@input_iterator_tag@.bctr.qv virtual
        [bits 32]
; std::input_iterator_tag::input_iterator_tag()
@std@input_iterator_tag@.bctr.qv:
L_102668:
        mov     eax,dword [esp+04h]
L_102669:
        ret
section code
section code
        section vsc@std@input_iterator_tag@.bdtr.qv virtual
        [bits 32]
; std::input_iterator_tag::~input_iterator_tag()
@std@input_iterator_tag@.bdtr.qv:
L_102676:
L_102677:
        ret
section code
section code
        section vsc@std@#.bequ.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::operator ==<variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*>( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&,  const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
@std@#.bequ.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
; Line 1613: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_102682:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
L_102683:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rp#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_range_forward<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~rp#variant.#shared_ptr.n0~uL~:
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_102722:
        mov     ebp,dword [esp+010h+014h]
        mov     esi,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     edi,dword [esp+04h+014h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     ebx,ecx
        mov     eax,esi
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        je      L_102727
L_102725:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
        push    ebx
        mov     eax,ebp
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 0ch
L_102728:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     ebx,byte 018h
; Line 1482:     } 
        mov     eax,ebp
        add     dword [eax],byte 018h
L_102726:
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,ebx
        cmp     eax,esi
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        jne     L_102725
L_102727:
; Line 1689:         } 
L_102922:
L_102936:
L_102723:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#move_backward.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::move_backward<variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*>(variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>*)
@std@#move_backward.p#variant.#shared_ptr.5Token~uL~p#variant.#shared_ptr.n0~uL~~.qp#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~p#variant.#shared_ptr.n0~uL~:
; Line 1928: inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
        push    edi
L_102942:
        mov     esi,dword [esp+0ch+044h]
        mov     edi,dword [esp+08h+044h]
        mov     ebx,dword [esp+04h+044h]
; Line 1933:     return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1903:     while (__first != __last) 
        cmp     ebx,edi
        je      L_102949
L_102948:
; Line 1904:         *--__result = _VSTD::move(*--__last); 
        sub     edi,byte 018h
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        sub     esi,byte 018h
        mov     eax,esi
        push    eax
        call    @std@#variant.#shared_ptr.5Token~uL~@.basn.qrx#variant.#shared_ptr.n0~uL~ ; std::variant<shared_ptr<Token>, unsigned long long>::operator =( const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 08h
L_102950:
        cmp     ebx,edi
        jne     L_102948
L_102949:
; Line 1906: } 
        mov     eax,esi
; Line 1934: } 
L_102943:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@#variant.#shared_ptr.5Token~uL~@.basn.qrx#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::variant<shared_ptr<Token>, unsigned long long>::operator =( const variant<shared_ptr<Token>, unsigned long long>&)
@std@#variant.#shared_ptr.5Token~uL~@.basn.qrx#variant.#shared_ptr.n0~uL~:
        push    ecx
        push    ebx
L_103037:
        mov     eax,dword [esp+08h+08h]
        mov     ebx,dword [esp+04h+08h]
        mov     ecx,ebx
        add     ecx,byte 08h
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__generic_assign.rx#__copy_assignment.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qrx#__copy_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__generic_assign< const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>( const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
        add     esp,byte 08h
        mov     eax,ebx
L_103038:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__copy_constexpr.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__copy_constexpr<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#__copy_constexpr.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
; Line 1696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ebx
        push    esi
        push    edi
L_103088:
        mov     ebx,dword [esp+0ch+0ch]
        mov     esi,dword [esp+08h+0ch]
        mov     edi,dword [esp+04h+0ch]
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,edi
        mov     eax,esi
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        je      L_103093
L_103091:
; Line 1701:         *__result = *__first; 
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
        push    edi
        mov     eax,ebx
        push    eax
        call    @std@#variant.#shared_ptr.5Token~uL~@.basn.qrx#variant.#shared_ptr.n0~uL~ ; std::variant<shared_ptr<Token>, unsigned long long>::operator =( const variant<shared_ptr<Token>, unsigned long long>&)
        add     esp,byte 08h
L_103094:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     edi,byte 018h
; Line 1482:     } 
        add     ebx,byte 018h
L_103092:
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,edi
        cmp     eax,esi
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        jne     L_103091
L_103093:
        mov     eax,ebx
L_103272:
L_103286:
; Line 1703: } 
L_103300:
L_103314:
L_103089:
        pop     edi
        pop     esi
        pop     ebx
        ret
section code
section code
        section vsc@std@#__unwrap_iter.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__unwrap_iter<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>)
@std@#__unwrap_iter.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~:
; Line 1634: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
L_103320:
        mov     eax,dword [esp+04h+04h]
; Line 1638:     return __i; 
L_103352:
; Line 1639: } 
L_103366:
L_103321:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__copy<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#__copy.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~:
; Line 1706: inline _LIBCPP_INLINE_VISIBILITY 
L_103372:
        mov     eax,dword [esp+0ch]
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+08h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~@.bctr.qrx#__wrap_iter.p#variant.#shared_ptr.n0~uL~~ ; std::__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>::__wrap_iter( const __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>&)
        add     esp,byte 08h
        call    @std@#__copy_constexpr.#__wrap_iter.p#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~~.q#__wrap_iter.p#variant.#shared_ptr.n0~uL~~#__wrap_iter.p#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::__copy_constexpr<__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, __wrap_iter<variant<shared_ptr<Token>, unsigned long long>*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
L_103388:
L_103402:
; Line 1711: } 
L_103416:
L_103430:
L_103373:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv:
L_103436:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_103437:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__max_size(integral_constant<bool, bool=1>,  const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#variant.#shared_ptr.n0~uL~~:
        add     esp,byte 0ffffffdch
L_103444:
        mov     eax,0aaaaaaah
L_103478:
L_103492:
L_103445:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#min.ui#__less.uiui~~.qrxuirxui#__less.uiui~ virtual
        [bits 32]
; std::min<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
@std@#min.ui#__less.uiui~~.qrxuirxui#__less.uiui~:
; Line 2548: _LIBCPP_NODISCARD_EXT inline 
        push    ecx
        push    ecx
        push    ebx
L_103498:
        mov     eax,dword [esp+08h+0ch]
        mov     ebx,dword [esp+04h+0ch]
; Line 2553:     return __comp(__b, __a) ? __b : __a; 
        mov     edx,eax
        mov     ecx,ebx
        mov     edx,dword [edx]
        mov     ecx,dword [ecx]
        cmp     edx,ecx
        setc    cl
        and     ecx,byte 01h
        and     cl,cl
        jne     L_103504
L_103503:
        mov     eax,ebx
L_103504:
L_103532:
; Line 2554: } 
L_103546:
L_103499:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_103552:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
        mov     dword [ebp-04ch+014h],03h
L_103631:
L_103618:
        add     esp,byte 010h
L_103553:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::_ConstructTransaction::~_ConstructTransaction()
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@_ConstructTransaction@.bdtr.qv:
L_103638:
        mov     eax,dword [esp+04h]
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [eax]
        mov     eax,dword [eax+08h]
        mov     dword [eax],ecx
; Line 171:       } 
L_103639:
        ret
section code
section code
        section vsc@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~#integral_constant.4booln1?0?~ virtual
        [bits 32]
; std::__split_buffer<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>&>::__destruct_at_end(variant<shared_ptr<Token>, unsigned long long>*, integral_constant<bool, bool=0>)
@std@#__split_buffer.#variant.#shared_ptr.5Token~uL~r#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~#integral_constant.4booln1?0?~:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
L_103646:
        mov     ebx,dword [esp+08h+034h]
        mov     esi,dword [esp+04h+034h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_103650
L_103649:
; Line 303:         __alloc_traits::destroy(__alloc(), __to_address(--__end_)); 
        sub     dword [esi+0ch],byte 018h
        mov     eax,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_103706
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_103707
L_103706:
        mov     eax,dword [esp-02ch+038h]
L_103707:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::destroy<variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 08h
L_103651:
        cmp     ebx,dword [esi+0ch]
        jne     L_103649
L_103650:
; Line 304: } 
L_103721:
L_103647:
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@__construct_at_end.qui virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::__construct_at_end(unsigned int)
@std@#vector.uL#allocator.uL~~@__construct_at_end.qui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
L_103727:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#vector.uL#allocator.uL~~@__construct_at_end.qui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1043:     _ConstructTransaction __tx(*this, __n); 
        mov     ecx,ebx
        mov     edx,ecx
        mov     dword [ebp-0ch],edx
        mov     ecx,dword [ecx+08h]
        mov     dword [ebp+04h-0ch],ecx
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebp+08h-0ch],eax
; Line 899:       __v_.__annotate_increase(__n); 
        mov     dword [ebp-054h+014h],01h
; Line 1044:     for (; __tx.__pos_ != __tx.__new_end_; ++__tx.__pos_) { 
        mov     edx,dword [ebp-0ch+08h]
        lea     eax,[ebp-0ch+04h]
        cmp     dword [ebp-0ch+04h],edx
        je      L_103732
L_103730:
; Line 1045:       __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_)); 
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-064h],eax
        and     eax,eax
        je      L_103808
        mov     eax,dword [ebp-064h]
        add     eax,byte 04h
        jmp     L_103809
L_103808:
        mov     eax,dword [ebp-064h]
L_103809:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV ; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long, ..._Args>(allocator<unsigned long long>&, unsigned long long*, )
        add     esp,byte 08h
; Line 1046:     } 
L_103733:
        lea     eax,[ebp-0ch+04h]
        add     dword [ebp-0ch+04h],byte 08h
L_103731:
        mov     edx,dword [ebp-0ch+08h]
        cmp     dword [ebp-0ch+04h],edx
        jne     L_103730
L_103732:
; Line 1047: } 
        mov     dword [ebp-054h+014h],02h
; Line 903:       __v_.__end_ = __pos_; 
        mov     ecx,dword [ebp+04h-0ch]
        mov     eax,dword [ebp-0ch]
        mov     dword [eax+08h],ecx
; Line 905:       if (__pos_ != __new_end_) { 
L_103825:
L_103728:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.uL#allocator.uL~~@__construct_at_end.qui virtual
        [bits 32]
@.xc@std@#vector.uL#allocator.uL~~@__construct_at_end.qui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@52@std@#vector.uL#allocator.uL~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.uLr#allocator.uL~~@.bctr.quiuir#allocator.uL~ virtual
        [bits 32]
; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__split_buffer(unsigned int, unsigned int, allocator<unsigned long long>&)
@std@#__split_buffer.uLr#allocator.uL~~@.bctr.quiuir#allocator.uL~:
; Line 317: { 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_103831:
        mov     eax,dword [esp+010h+04ch]
        mov     edi,dword [esp+0ch+04ch]
        mov     esi,dword [esp+08h+04ch]
        mov     ebx,dword [esp+04h+04ch]
        xor     ecx,ecx
        mov     dword [esp-04h+04ch],ecx
        lea     ecx,[esp-04h+04ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [ebx+010h],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx+04h+010h],eax
; Line 2206:     } 
; Line 318:     __first_ = __cap != 0 ? __alloc_traits::allocate(__alloc(), __cap) : nullptr; 
        and     esi,esi
        je      L_103972
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+04ch],eax
        and     eax,eax
        je      L_104019
        mov     eax,dword [esp-03ch+04ch]
        add     eax,byte 04h
        jmp     L_104020
L_104019:
        mov     eax,dword [esp-03ch+04ch]
L_104020:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ebp,esi
; Line 1861:         if (__n > max_size()) 
        mov     ecx,01fffffffh
        cmp     ebp,ecx
        jbe     L_104024
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_104024:
        mov     eax,ebp
        shl     eax,03h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        jmp     L_103973
L_103972:
        xor     eax,eax
L_103973:
        mov     dword [ebx+04h],eax
; Line 319:     __begin_ = __end_ = __first_ + __start; 
        mov     ecx,eax
        mov     eax,edi
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebx+0ch],eax
        mov     dword [ebx+08h],eax
; Line 320:     __end_cap() = __first_ + __cap; 
        mov     eax,ebx
        mov     edx,dword [ebx+04h]
        mov     ecx,esi
        shl     ecx,03h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+010h],ecx
; Line 321: } 
        mov     eax,ebx
L_103832:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui virtual
        [bits 32]
; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__construct_at_end(unsigned int)
@std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
L_104128:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 213:     _ConstructTransaction __tx(&this->__end_, __n); 
        mov     edx,ebx
        add     edx,byte 0ch
        mov     ecx,dword [edx]
        mov     dword [ebp-0ch],ecx
        shl     eax,03h
        add     eax,ecx
        mov     dword [ebp+04h-0ch],eax
        mov     dword [ebp+08h-0ch],edx
; Line 168:       } 
        mov     dword [ebp-054h+014h],01h
; Line 214:     for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) { 
        mov     edx,dword [ebp-0ch+04h]
        lea     eax,[ebp-0ch]
        cmp     dword [ebp-0ch],edx
        je      L_104133
L_104131:
; Line 215:         __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_)); 
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-064h],eax
        and     eax,eax
        je      L_104209
        mov     eax,dword [ebp-064h]
        add     eax,byte 04h
        jmp     L_104210
L_104209:
        mov     eax,dword [ebp-064h]
L_104210:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV ; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long, ..._Args>(allocator<unsigned long long>&, unsigned long long*, )
        add     esp,byte 08h
; Line 216:     } 
L_104134:
        lea     eax,[ebp-0ch]
        add     dword [ebp-0ch],byte 08h
L_104132:
        mov     edx,dword [ebp-0ch+04h]
        cmp     dword [ebp-0ch],edx
        jne     L_104131
L_104133:
; Line 217: } 
        mov     dword [ebp-054h+014h],02h
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [ebp-0ch]
        mov     eax,dword [ebp+08h-0ch]
        mov     dword [eax],ecx
; Line 171:       } 
L_104226:
L_104129:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@61@std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction virtual
        [bits 32]
@.xt@61@std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction:
        dd      @std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui virtual
        [bits 32]
@.xc@std@#__split_buffer.uLr#allocator.uL~~@__construct_at_end.qui:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@61@std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#vector.uL#allocator.uL~~@__swap_out_circular_buffer.qr#__split_buffer.uLr#allocator.uL~~ virtual
        [bits 32]
; std::vector<unsigned long long, allocator<unsigned long long>>::__swap_out_circular_buffer(__split_buffer<unsigned long long, allocator<unsigned long long>&>&)
@std@#vector.uL#allocator.uL~~@__swap_out_circular_buffer.qr#__split_buffer.uLr#allocator.uL~~:
        add     esp,0ffffff64h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_104232:
        mov     eax,dword [esp+08h+0ach]
        mov     dword [esp-098h+0ach],eax
        mov     eax,dword [esp+04h+0ach]
        mov     dword [esp-094h+0ach],eax
; Line 951:     __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_104265:
; Line 879:     } 
L_104250:
; Line 952:     __alloc_traits::__construct_backward_with_exception_guarantees( 
        mov     eax,dword [esp-094h+0ach]
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-09ch+0ach],eax
        and     eax,eax
        je      L_104627
        mov     eax,dword [esp-09ch+0ach]
        add     eax,byte 04h
        jmp     L_104628
L_104627:
        mov     eax,dword [esp-09ch+0ach]
L_104628:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [esp-090h+0ach],eax
        mov     eax,dword [esp-094h+0ach]
        mov     edi,dword [eax+04h]
        mov     eax,dword [esp-094h+0ach]
        mov     ebp,dword [eax+08h]
        mov     esi,dword [esp-098h+0ach]
        add     esi,byte 08h
; Line 1720:             static_assert(__is_cpp17_move_insertable<allocator_type>::value, 
        cmp     ebp,edi
        je      L_104575
L_104574:
; Line 1723:             { 
; Line 1724:               construct(__a, _VSTD::__to_address(__end2 - 1), 
        sub     ebp,byte 08h
        mov     eax,ebp
; Line 271:     return _VSTD::move(__x); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 272: } 
        push    eax
        mov     eax,esi
        mov     ebx,dword [eax]
        mov     eax,ebx
        sub     eax,byte 08h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,dword [esp-090h+0b4h]
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL ; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long, unsigned long long>(allocator<unsigned long long>&, unsigned long long*, unsigned long long&&)
        add     esp,byte 0ch
; Line 1731:               --__end2; 
        mov     eax,esi
        mov     ecx,ebx
        sub     ecx,byte 08h
        mov     dword [eax],ecx
; Line 1732:             } 
L_104576:
; Line 1722:             while (__end1 != __begin1) 
        cmp     ebp,edi
        jne     L_104574
L_104575:
; Line 1733:         } 
L_104595:
; Line 954:     _VSTD::swap(this->__begin_, __v.__begin_); 
        mov     ecx,dword [esp-094h+0ach]
        add     ecx,byte 04h
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 08h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_104693:
; Line 955:     _VSTD::swap(this->__end_, __v.__end_); 
        mov     ecx,dword [esp-094h+0ach]
        add     ecx,byte 08h
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 0ch
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_104757:
; Line 956:     _VSTD::swap(this->__end_cap(), __v.__end_cap()); 
        mov     eax,dword [esp-094h+0ach]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        mov     eax,dword [esp-098h+0ach]
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-040h+0ach],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-040h+0ach]
        mov     dword [eax],ecx
; Line 3718: } 
L_104821:
; Line 957:     __v.__first_ = __v.__begin_; 
        mov     eax,dword [esp-098h+0ach]
        mov     ecx,dword [eax+08h]
        mov     eax,dword [esp-098h+0ach]
        mov     dword [eax+04h],ecx
; Line 958:     __annotate_new(size()); 
; Line 871:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
L_105012:
; Line 873:     } 
L_104981:
; Line 959:     __invalidate_all_iterators(); 
; Line 2123:     __get_db()->__invalidate_all(this); 
L_105317:
; Line 960: } 
L_104233:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,09ch
        ret
section code
section code
        section vsc@std@#__split_buffer.uLr#allocator.uL~~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::~__split_buffer()
@std@#__split_buffer.uLr#allocator.uL~~@.bdtr.qv:
        add     esp,byte 0ffffff98h
        push    ebx
L_105323:
        mov     ebx,dword [esp+04h+06ch]
; Line 348:     clear(); 
        mov     eax,ebx
        mov     edx,ebx
        mov     eax,dword [eax+08h]
        mov     dword [esp-064h+06ch],00h
        lea     ecx,[esp-064h+06ch]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__split_buffer.uLr#allocator.uL~~@__destruct_at_end.qpuL#integral_constant.4booln0?0?~ ; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__destruct_at_end(unsigned long long*, integral_constant<bool, bool=0>)
L_105392:
        add     esp,byte 0ch
L_105363:
L_105346:
        cmp     dword [ebx+04h],byte 00h
        je      L_105326
; Line 350:         __alloc_traits::deallocate(__alloc(), __first_, capacity()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+06ch],eax
        and     eax,eax
        je      L_105442
        mov     eax,dword [esp-068h+06ch]
        add     eax,byte 04h
        jmp     L_105443
L_105442:
        mov     eax,dword [esp-068h+06ch]
L_105443:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_105538:
L_105523:
L_105410:
L_105326:
; Line 351: } 
L_105615:
L_105629:
L_105602:
L_105644:
L_105324:
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@.bdtr.qv:
L_105650:
L_105651:
        ret
section code
section code
        section vsc@std@#__compressed_pair.puLr#allocator.uL~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<unsigned long long*, allocator<unsigned long long>&>::~__compressed_pair()
@std@#__compressed_pair.puLr#allocator.uL~~@.bdtr.qv:
L_105656:
L_105670:
L_105684:
L_105657:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<Token>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@__get.qv:
L_105690:
        mov     eax,dword [esp+04h]
L_105691:
        ret
section code
section code
        section vsc@Token@.bdtr.qv virtual
        [bits 32]
; Token::~Token()
@Token@.bdtr.qv:
; Line 73:     virtual ~Token() {} 
L_105698:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_105699:
        ret
section code
section code
        section vsc@std@#default_delete.5Token~@.bdtr.qv virtual
        [bits 32]
; std::default_delete<Token>::~default_delete()
@std@#default_delete.5Token~@.bdtr.qv:
L_105706:
L_105707:
        ret
section code
section code
        section vsc@std@bad_function_call@.bctr.qrx22@std@bad_function_call virtual
        [bits 32]
; std::bad_function_call::bad_function_call( const std::bad_function_call&)
@std@bad_function_call@.bctr.qrx22@std@bad_function_call:
L_105712:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],@std@exception@_.vt+0ch
        mov     edx,@std@bad_function_call@_.vt+0ch
        mov     ecx,eax
        mov     dword [ecx],edx
L_105713:
        ret
section code
section code
        section vsc@std@bad_function_call@.bdtr.qv virtual
        [bits 32]
; std::bad_function_call::~bad_function_call()
@std@bad_function_call@.bdtr.qv:
L_105736:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@exception@.bdtr.qv ; std::exception::~exception()
        add     esp,byte 04h
L_105737:
        ret
section code
section code
        section vsc@std@#__distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__distance<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, std::random_access_iterator_tag)
@std@#__distance.#__wrap_iter.puL~~.q#__wrap_iter.puL~#__wrap_iter.puL~31@std@random_access_iterator_tag:
; Line 688: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ebx
L_105742:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 692:     return __last - __first; 
; Line 1704:     _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), 
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        mov     ebx,eax
        sar     ebx,03h
; Line 1708: } 
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_105832:
L_105819:
L_105806:
L_105848:
L_105862:
        mov     eax,ebx
; Line 693: } 
L_105902:
L_105889:
L_105876:
L_105918:
L_105932:
L_105743:
        pop     ebx
        ret
section code
section code
        section vsc@std@#.bequ.puLpuL~.qrx#__wrap_iter.puL~rx#__wrap_iter.puL~ virtual
        [bits 32]
; std::operator ==<unsigned long long*, unsigned long long*>( const __wrap_iter<unsigned long long*>&,  const __wrap_iter<unsigned long long*>&)
@std@#.bequ.puLpuL~.qrx#__wrap_iter.puL~rx#__wrap_iter.puL~:
; Line 1613: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG 
L_105938:
        mov     eax,dword [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
L_105939:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~rp#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct_range_forward<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, __wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct_range_forward.#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~#__wrap_iter.puL~#__wrap_iter.puL~rp#variant.#shared_ptr.n0~uL~:
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_105978:
        mov     ebp,dword [esp+010h+014h]
        mov     esi,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     edi,dword [esp+04h+014h]
; Line 1687:             for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) 
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     ebx,ecx
        mov     eax,esi
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        je      L_105983
L_105981:
; Line 1688:                 construct(__a, _VSTD::__to_address(__begin2), *__begin1); 
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
; Line 1465:     } 
        push    ebx
        mov     eax,ebp
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, unsigned long long&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, unsigned long long&)
        add     esp,byte 0ch
L_105984:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     ebx,byte 08h
; Line 1482:     } 
        mov     eax,ebp
        add     dword [eax],byte 018h
L_105982:
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,ebx
        cmp     eax,esi
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        jne     L_105981
L_105983:
; Line 1689:         } 
L_106178:
L_106192:
L_105979:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__copy_constexpr.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__copy_constexpr<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#__copy_constexpr.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~:
; Line 1696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_106198:
        mov     ebx,dword [esp+0ch+024h]
        mov     esi,dword [esp+08h+024h]
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     ecx,dword [esp+04h+024h]
        mov     eax,esi
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        je      L_106203
L_106201:
; Line 1701:         *__result = *__first; 
        mov     ecx,ebx
; Line 1461:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        mov     eax,dword [esp+04h+024h]
; Line 1465:     } 
; Line 1282:     __impl.template __assign<_Ip>(_VSTD::forward<_Arg>(__arg)); 
        mov     edi,ecx
        add     edi,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1041:     this->__assign_alt(__access::__base::__get_alt<_Ip>(*this), 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,edi
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<bool>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
        push    eax
        push    edi
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt<unsigned int=1, unsigned long long, unsigned long long&>(__alt<unsigned int=1, unsigned long long>&, unsigned long long&)
        add     esp,byte 0ch
; Line 1043:   } 
L_106319:
; Line 1284:   } 
L_106204:
; Line 1477:         _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this), 
        add     dword [esp+04h+024h],byte 08h
; Line 1482:     } 
        add     ebx,byte 018h
L_106202:
; Line 1669:     return !(__x == __y); 
; Line 1617:     return __x.base() == __y.base(); 
        mov     eax,dword [esp+04h+024h]
        cmp     eax,esi
        sete    al
        and     eax,byte 01h
; Line 1618: } 
        and     al,al
        sete    al
        and     eax,byte 01h
; Line 1670: } 
        and     al,al
        jne     L_106201
L_106203:
        mov     eax,ebx
L_106478:
L_106492:
; Line 1703: } 
L_106506:
L_106520:
L_106199:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__unwrap_iter.#__wrap_iter.puL~~.q#__wrap_iter.puL~ virtual
        [bits 32]
; std::__unwrap_iter<__wrap_iter<unsigned long long*>>(__wrap_iter<unsigned long long*>)
@std@#__unwrap_iter.#__wrap_iter.puL~~.q#__wrap_iter.puL~:
; Line 1634: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
L_106526:
        mov     eax,dword [esp+04h+04h]
; Line 1638:     return __i; 
L_106558:
; Line 1639: } 
L_106572:
L_106527:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__copy<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
@std@#__copy.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~:
; Line 1706: inline _LIBCPP_INLINE_VISIBILITY 
L_106578:
        mov     eax,dword [esp+0ch]
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
        push    eax
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+08h]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+0ch]
        push    eax
        push    ecx
        call    @std@#__wrap_iter.puL~@.bctr.qrx#__wrap_iter.puL~ ; std::__wrap_iter<unsigned long long*>::__wrap_iter( const __wrap_iter<unsigned long long*>&)
        add     esp,byte 08h
        call    @std@#__copy_constexpr.#__wrap_iter.puL~p#variant.#shared_ptr.5Token~uL~~.q#__wrap_iter.puL~#__wrap_iter.puL~p#variant.#shared_ptr.n0~uL~ ; std::__copy_constexpr<__wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*>(__wrap_iter<unsigned long long*>, __wrap_iter<unsigned long long*>, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 0ch
L_106594:
L_106608:
; Line 1711: } 
L_106622:
L_106636:
L_106579:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::construct<variant<shared_ptr<Token>, unsigned long long>, unsigned long long&>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, unsigned long long&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_106642:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, unsigned long long&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, unsigned long long&)
        mov     dword [ebp-04ch+014h],03h
L_106721:
L_106708:
        add     esp,byte 010h
L_106643:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~ruL~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~ruL~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#construct.#variant.#shared_ptr.n0~uL~ruL~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#variant.#shared_ptr.5Token~uL~~p#variant.#shared_ptr.n0~uL~ruL~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#basic_istream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~ virtual
        [bits 32]
; std::basic_istream<char, char_traits<char>>::basic_istream(basic_streambuf<char, char_traits<char>>*)
@std@#basic_istream.c#char_traits.c~~@.bctr.qp#basic_streambuf.c#char_traits.c~~:
; Line 191:     { this->init(__sb); } 
        push    ecx
        push    ebx
        push    esi
L_106728:
        mov     ecx,dword [esp+0ch+0ch]
        mov     eax,dword [esp+08h+0ch]
        mov     ebx,dword [esp+04h+0ch]
        and     ecx,ecx
        je      L_106731
        mov     ecx,ebx
        add     ecx,byte 0ch
        mov     dword [ebx+08h],ecx
        mov     dword [ebx+0ch],@std@ios_base@_.vt+0ch
; Line 345:                } 
        mov     dword [ebx+0ch],@std@#basic_ios.c#char_traits.c~~@_.vt+0ch
; Line 675:                 } 
L_106731:
        mov     edx,@std@#basic_istream.c#char_traits.c~~@_.vt+0ch
        mov     ecx,ebx
        mov     dword [ecx],edx
        mov     dword [ebx+04h],00h
        mov     esi,dword [ebx+08h]
        mov     ecx,esi
; Line 711:     ios_base::init(__sb); 
        push    eax
        push    ecx
        call    @std@ios_base@init.qpv ; std::ios_base::init(void*)
        add     esp,byte 08h
; Line 712:     __tie_ = 0; 
        mov     dword [esi+048h],00h
; Line 713:     __fill_ = traits_type::eof(); 
        mov     dword [esi+04ch],0ffffffffh
; Line 714: } 
L_106785:
        mov     eax,ebx
L_106729:
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#basic_ostream.c#char_traits.c~~@.bctr.qv virtual
        [bits 32]
; std::basic_ostream<char, char_traits<char>>::basic_ostream()
@std@#basic_ostream.c#char_traits.c~~@.bctr.qv:
L_106791:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        and     ecx,ecx
        je      L_106794
        mov     ecx,eax
        add     ecx,byte 08h
        mov     dword [eax+04h],ecx
        mov     dword [eax+08h],@std@ios_base@_.vt+0ch
; Line 345:                } 
        mov     dword [eax+08h],@std@#basic_ios.c#char_traits.c~~@_.vt+0ch
; Line 675:                 } 
L_106794:
        mov     edx,@std@#basic_ostream.c#char_traits.c~~@_.vt+0ch
        mov     ecx,eax
        mov     dword [ecx],edx
L_106792:
        ret
section code
section code
        section vsc@std@#use_facet.#ctype.c~~.qrx11@std@locale virtual
        [bits 32]
; std::use_facet<ctype<char>>( const std::locale&)
@std@#use_facet.#ctype.c~~.qrx11@std@locale:
; Line 246: inline _LIBCPP_INLINE_VISIBILITY 
L_106838:
        mov     eax,dword [esp+04h]
; Line 250:     return static_cast<const _Facet&>(*__l.use_facet(_Facet::id)); 
        push    dword @std@#ctype.c~@id
        push    eax
        call    @std@locale@use_facet.xqr14@std@locale@id ; std::locale::use_facet(std::locale::id&) const 
        add     esp,byte 08h
; Line 251: } 
L_106839:
        ret
section code
section code
        section vsc@std@bad_variant_access@.bctr.qrx23@std@bad_variant_access virtual
        [bits 32]
; std::bad_variant_access::bad_variant_access( const std::bad_variant_access&)
@std@bad_variant_access@.bctr.qrx23@std@bad_variant_access:
L_106846:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],@std@exception@_.vt+0ch
        mov     edx,@std@bad_variant_access@_.vt+0ch
        mov     ecx,eax
        mov     dword [ecx],edx
L_106847:
        ret
section code
section code
        section vsc@std@bad_variant_access@.bdtr.qv virtual
        [bits 32]
; std::bad_variant_access::~bad_variant_access()
@std@bad_variant_access@.bdtr.qv:
L_106870:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@exception@.bdtr.qv ; std::exception::~exception()
        add     esp,byte 04h
L_106871:
        ret
section code
section code
        section vsc@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~ virtual
        [bits 32]
; std::__invoke_constexpr<visitor_struct&, shared_ptr<Token>&>(visitor_struct&, shared_ptr<Token>&)
@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_106876:
        mov     eax,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     esi,eax
        add     esp,byte 0fffffff8h
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    eax
        call    @std@#shared_ptr.5Token~@.bctr.qrx#shared_ptr.n0~ ; std::shared_ptr<Token>::shared_ptr( const shared_ptr<Token>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],01h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     eax,[ebp-014h]
        push    eax
        mov     dword [ebp-05ch+014h],02h
        call    @visitor_struct@.bcall.q#shared_ptr.5Token~ ; visitor_struct::operator ()(shared_ptr<Token>)
        add     esp,byte 010h
        mov     dword [ebp-05ch+014h],03h
        mov     ebx,eax
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],04h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],05h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],06h
        mov     eax,dword [ebp+08h]
L_106877:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~ virtual
        [bits 32]
@.xct@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~:
        dd      @.xct@std@#__invoke_constexpr.r14visitor_structr#shared_ptr.5Token~~.qrn0r#shared_ptr.n1~+0
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      03h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL virtual
        [bits 32]
; std::__invoke_constexpr<visitor_struct&, unsigned long long&>(visitor_struct&, unsigned long long&)
@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
        push    esi
        push    edi
L_107000:
        mov     ebx,dword [ebp+08h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        push    edx
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @visitor_struct@.bcall.quL ; visitor_struct::operator ()(unsigned long long)
        mov     esi,eax
        add     esp,byte 010h
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
L_107001:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL virtual
        [bits 32]
@.xct@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL virtual
        [bits 32]
@.xc@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL:
        dd      @.xct@std@#__invoke_constexpr.r14visitor_structruL~.qrn0ruL+0
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_107124:
        mov     eax,dword [esp+04h]
L_107160:
L_107125:
        ret
section code
section code
        section vsc@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__vector_base<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>::__destruct_at_end(variant<shared_ptr<Token>, unsigned long long>*)
@std@#__vector_base.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~@__destruct_at_end.qp#variant.#shared_ptr.n0~uL~:
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_107166:
        mov     ebx,dword [esp+08h+014h]
        mov     esi,dword [esp+04h+014h]
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     edi,dword [esi+08h]
        cmp     ebx,edi
        je      L_107170
L_107169:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     edi,byte 018h
        mov     eax,edi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08h+018h],eax
        and     eax,eax
        je      L_107224
        mov     eax,dword [esp-08h+018h]
        add     eax,byte 04h
        jmp     L_107225
L_107224:
        mov     eax,dword [esp-08h+018h]
L_107225:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#variant.#shared_ptr.5Token~uL~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<variant<shared_ptr<Token>, unsigned long long>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#destroy.#variant.#shared_ptr.n0~uL~~.qr#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ ; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::destroy<variant<shared_ptr<Token>, unsigned long long>>(allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*)
        add     esp,byte 08h
L_107171:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     ebx,edi
        jne     L_107169
L_107170:
; Line 427:     __end_ = __new_last; 
        mov     dword [esi+08h],ebx
; Line 428: } 
L_107167:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__str_find_first_not_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui virtual
        [bits 32]
; std::__str_find_first_not_of<char, unsigned int, char_traits<char>, unsigned int=-1>(char const *, unsigned int, char const *, unsigned int, unsigned int)
@std@#__str_find_first_not_of.cui#char_traits.c~ui?4294967295?~.qpxcuipxcuiui:
; Line 973: inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_107231:
        mov     eax,dword [esp+014h+014h]
        mov     dword [esp-04h+014h],eax
        mov     ecx,dword [esp+010h+014h]
        mov     ebp,dword [esp+0ch+014h]
        mov     eax,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
; Line 977:     if (__pos < __sz) 
        cmp     ecx,eax
        jnc     L_107234
; Line 978:     { 
; Line 979:         const _CharT* __pe = __p + __sz; 
        mov     edx,ebx
        mov     esi,ebx
        add     esi,eax
; Line 980:         for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps) 
        mov     edi,edx
        add     edi,ecx
        cmp     edi,esi
        je      L_107240
L_107238:
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-04h+018h]
        push    eax
        mov     eax,ebp
        push    eax
        call    @std@#char_traits.c~@find.qpxcuirxc ; std::char_traits<char>::find(char const *, unsigned int,  const char&)
        add     esp,byte 0ch
        and     eax,eax
        jne     L_107245
        mov     eax,edi
        sub     eax,ebx
        jmp     L_107232
L_107245:
L_107241:
        inc     edi
L_107239:
        cmp     edi,esi
        jne     L_107238
L_107240:
; Line 983:     } 
L_107234:
        or      eax,byte 0ffffffffh
; Line 985: } 
L_107232:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<EndToken>(shared_ptr<EndToken>&&)
@std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_107261:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_107343:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_107360:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_107424:
; Line 4338: } 
L_107281:
L_107487:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_107501:
L_107262:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.8EndToken~.qR#shared_ptr.n1~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.8EndTokene5_Args~.qV virtual
        [bits 32]
; std::make_shared<EndToken, ..._Args>()
@std@#make_shared.8EndTokene5_Args~.qV:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee4h
        push    ebx
        push    esi
        push    edi
L_107507:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.8EndTokene5_Args~.qV
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     esi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,06666666h
        cmp     esi,ecx
        jbe     L_107551
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_107551:
        imul    eax,esi,byte 028h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ ; std::unique_ptr<__shared_ptr_emplace<EndToken, allocator<EndToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<EndToken, allocator<EndToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_107614:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebp-010h]
; Line 2592:   } 
        and     esi,esi
        je      L_107617
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.8EndToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ ; std::allocator<EndToken>::allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>, >( const allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    esi
        call    @std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~ ; std::__shared_ptr_emplace<EndToken, allocator<EndToken>>::__shared_ptr_emplace(allocator<EndToken>)
        add     esp,byte 08h
L_107617:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0118h],eax
        and     eax,eax
        je      L_107775
        mov     eax,dword [ebp-0118h]
        add     eax,byte 04h
        jmp     L_107776
L_107775:
        mov     eax,dword [ebp-0118h]
L_107776:
        push    eax
        call    @std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<EndToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ ; std::shared_ptr<EndToken>::__create_with_control_block<EndToken, __shared_ptr_emplace<EndToken, allocator<EndToken>>>(EndToken*, __shared_ptr_emplace<EndToken, allocator<EndToken>>*)
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.8EndToken~@.bdtr.qv ; std::shared_ptr<EndToken>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_107894
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_108007
        mov     eax,dword [ebp-011ch]
        add     eax,byte 04h
        jmp     L_108008
L_108007:
        mov     eax,dword [ebp-011ch]
L_108008:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_108053:
L_108038:
L_108023:
L_107990:
L_107894:
; Line 2619:   } 
L_107911:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_108132:
L_108146:
L_108119:
L_107891:
        mov     dword [ebp-06ch+014h],0ah
L_108162:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_108294:
L_108295:
L_108340:
L_108325:
L_108310:
L_108277:
L_108181:
L_108198:
L_108419:
L_108433:
L_108406:
L_108178:
L_108449:
L_107508:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.8EndToken~ virtual
        [bits 32]
@.xt@#allocator.8EndToken~:
        dd      @std@#allocator.8EndToken~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.8EndTokene5_Args~.qV virtual
        [bits 32]
@.xc@std@#make_shared.8EndTokene5_Args~.qV:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.8EndToken~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.8EndToken~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<EndToken>::~shared_ptr()
@std@#shared_ptr.8EndToken~@.bdtr.qv:
        push    ebx
L_108455:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_108458
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_108466
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_108466:
; Line 3487:     } 
L_108483:
L_108458:
; Line 4211: } 
L_108456:
        pop     ebx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<NumericToken>(shared_ptr<NumericToken>&&)
@std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_108489:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_108571:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_108588:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_108652:
; Line 4338: } 
L_108509:
L_108715:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_108729:
L_108490:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.12NumericToken~.qR#shared_ptr.n1~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::make_shared<NumericToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
@std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_108735:
        mov     esi,dword [ebp+08h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,02e8ba2eh
        cmp     edi,ecx
        jbe     L_108779
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_108779:
        imul    eax,edi,byte 058h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ ; std::unique_ptr<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<NumericToken, allocator<NumericToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_108842:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_108845
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.12NumericToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ ; std::allocator<NumericToken>::allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>, >( const allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ ; std::__shared_ptr_emplace<NumericToken, allocator<NumericToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<NumericToken>, basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
L_108845:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_109019
        mov     eax,dword [ebp-011ch]
        add     eax,byte 08h
        jmp     L_109020
L_109019:
        mov     eax,dword [ebp-011ch]
L_109020:
        push    eax
        call    @std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ ; std::shared_ptr<NumericToken>::__create_with_control_block<NumericToken, __shared_ptr_emplace<NumericToken, allocator<NumericToken>>>(NumericToken*, __shared_ptr_emplace<NumericToken, allocator<NumericToken>>*)
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     ecx,dword [eax]
        mov     dword [esi],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [esi+04h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.12NumericToken~@.bdtr.qv ; std::shared_ptr<NumericToken>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_109138
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_109251
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_109252
L_109251:
        mov     eax,dword [ebp-0120h]
L_109252:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_109297:
L_109282:
L_109267:
L_109234:
L_109138:
; Line 2619:   } 
L_109155:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_109376:
L_109390:
L_109363:
L_109135:
        mov     dword [ebp-06ch+014h],0ah
L_109406:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_109538:
L_109539:
L_109584:
L_109569:
L_109554:
L_109521:
L_109425:
L_109442:
L_109663:
L_109677:
L_109650:
L_109422:
L_109693:
L_108736:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.12NumericToken~ virtual
        [bits 32]
@.xt@#allocator.12NumericToken~:
        dd      @std@#allocator.12NumericToken~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#make_shared.12NumericTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.12NumericToken~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.12NumericToken~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<NumericToken>::~shared_ptr()
@std@#shared_ptr.12NumericToken~@.bdtr.qv:
        push    ebx
L_109699:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_109702
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_109710
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_109710:
; Line 3487:     } 
L_109727:
L_109702:
; Line 4211: } 
L_109700:
        pop     ebx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<CharacterToken>(shared_ptr<CharacterToken>&&)
@std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_109733:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_109815:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_109832:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_109896:
; Line 4338: } 
L_109753:
L_109959:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_109973:
L_109734:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.14CharacterToken~.qR#shared_ptr.n1~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::make_shared<CharacterToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
@std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_109979:
        mov     esi,dword [ebp+08h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,04924924h
        cmp     edi,ecx
        jbe     L_110023
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_110023:
        imul    eax,edi,byte 038h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ ; std::unique_ptr<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_110086:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_110089
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.14CharacterToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ ; std::allocator<CharacterToken>::allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>, >( const allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ ; std::__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<CharacterToken>, basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
L_110089:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_110263
        mov     eax,dword [ebp-011ch]
        add     eax,byte 08h
        jmp     L_110264
L_110263:
        mov     eax,dword [ebp-011ch]
L_110264:
        push    eax
        call    @std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ ; std::shared_ptr<CharacterToken>::__create_with_control_block<CharacterToken, __shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>(CharacterToken*, __shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*)
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     ecx,dword [eax]
        mov     dword [esi],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [esi+04h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.14CharacterToken~@.bdtr.qv ; std::shared_ptr<CharacterToken>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_110382
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_110495
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_110496
L_110495:
        mov     eax,dword [ebp-0120h]
L_110496:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_110541:
L_110526:
L_110511:
L_110478:
L_110382:
; Line 2619:   } 
L_110399:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_110620:
L_110634:
L_110607:
L_110379:
        mov     dword [ebp-06ch+014h],0ah
L_110650:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_110782:
L_110783:
L_110828:
L_110813:
L_110798:
L_110765:
L_110669:
L_110686:
L_110907:
L_110921:
L_110894:
L_110666:
L_110937:
L_109980:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.14CharacterToken~ virtual
        [bits 32]
@.xt@#allocator.14CharacterToken~:
        dd      @std@#allocator.14CharacterToken~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#make_shared.14CharacterTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.14CharacterToken~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.14CharacterToken~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<CharacterToken>::~shared_ptr()
@std@#shared_ptr.14CharacterToken~@.bdtr.qv:
        push    ebx
L_110943:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_110946
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_110954
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_110954:
; Line 3487:     } 
L_110971:
L_110946:
; Line 4211: } 
L_110944:
        pop     ebx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<StringToken>(shared_ptr<StringToken>&&)
@std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_110977:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_111059:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_111076:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_111140:
; Line 4338: } 
L_110997:
L_111203:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_111217:
L_110978:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.11StringToken~.qR#shared_ptr.n1~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::make_shared<StringToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
@std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_111223:
        mov     esi,dword [ebp+08h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,030c30c3h
        cmp     edi,ecx
        jbe     L_111267
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_111267:
        imul    eax,edi,byte 054h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ ; std::unique_ptr<__shared_ptr_emplace<StringToken, allocator<StringToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<StringToken, allocator<StringToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_111330:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_111333
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.11StringToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ ; std::allocator<StringToken>::allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>, >( const allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ ; std::__shared_ptr_emplace<StringToken, allocator<StringToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<StringToken>, basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
L_111333:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_111507
        mov     eax,dword [ebp-011ch]
        add     eax,byte 04h
        jmp     L_111508
L_111507:
        mov     eax,dword [ebp-011ch]
L_111508:
        push    eax
        call    @std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<StringToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ ; std::shared_ptr<StringToken>::__create_with_control_block<StringToken, __shared_ptr_emplace<StringToken, allocator<StringToken>>>(StringToken*, __shared_ptr_emplace<StringToken, allocator<StringToken>>*)
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     ecx,dword [eax]
        mov     dword [esi],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [esi+04h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.11StringToken~@.bdtr.qv ; std::shared_ptr<StringToken>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_111626
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_111739
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_111740
L_111739:
        mov     eax,dword [ebp-0120h]
L_111740:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_111785:
L_111770:
L_111755:
L_111722:
L_111626:
; Line 2619:   } 
L_111643:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_111864:
L_111878:
L_111851:
L_111623:
        mov     dword [ebp-06ch+014h],0ah
L_111894:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_112026:
L_112027:
L_112072:
L_112057:
L_112042:
L_112009:
L_111913:
L_111930:
L_112151:
L_112165:
L_112138:
L_111910:
L_112181:
L_111224:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.11StringToken~ virtual
        [bits 32]
@.xt@#allocator.11StringToken~:
        dd      @std@#allocator.11StringToken~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#make_shared.11StringTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.11StringToken~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.11StringToken~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<StringToken>::~shared_ptr()
@std@#shared_ptr.11StringToken~@.bdtr.qv:
        push    ebx
L_112187:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_112190
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_112198
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_112198:
; Line 3487:     } 
L_112215:
L_112190:
; Line 4211: } 
L_112188:
        pop     ebx
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
@#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
L_112221:
        mov     ecx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 150:     return TokenizerSettings::Instance()->GetSymbolCheckFunction()(line.c_str(), true); 
        mov     eax,01h
        push    eax
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_112288
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_112289
L_112288:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_112289:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @TokenizerSettings@Instance.qv ; TokenizerSettings::Instance()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],01h
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bctr.qrx#function.qpxcn0.n0~ ; std::function<(*)(char const *, bool)>::function( const function<(*)(char const *, bool)>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],02h
        lea     eax,[ebp-024h]
        mov     dword [ebp-06ch+014h],03h
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bcall.xqpxcn0 ; std::function<(*)(char const *, bool)>::operator ()(char const *, bool) const 
        mov     bl,al
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],05h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv ; std::shared_ptr<TokenizerSettings>::~shared_ptr()
        add     esp,byte 04h
        mov     al,bl
; Line 151: } 
L_112222:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#shared_ptr.17TokenizerSettings~ virtual
        [bits 32]
@.xt@#shared_ptr.17TokenizerSettings~:
        dd      @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__maybe_derive_from_unary_function.qpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__maybe_derive_from_unary_function.qpxc4bool.n0~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06dh
        db      061h
        db      079h
        db      062h
        db      065h
        db      05fh
        db      064h
        db      065h
        db      072h
        db      069h
        db      076h
        db      065h
        db      05fh
        db      066h
        db      072h
        db      06fh
        db      06dh
        db      05fh
        db      075h
        db      06eh
        db      061h
        db      072h
        db      079h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#binary_function.pxc4booln0~ virtual
        [bits 32]
@.xt@#binary_function.pxc4booln0~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      069h
        db      06eh
        db      061h
        db      072h
        db      079h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__maybe_derive_from_binary_function.qpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__maybe_derive_from_binary_function.qpxc4bool.n0~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06dh
        db      061h
        db      079h
        db      062h
        db      065h
        db      05fh
        db      064h
        db      065h
        db      072h
        db      069h
        db      076h
        db      065h
        db      05fh
        db      066h
        db      072h
        db      06fh
        db      06dh
        db      05fh
        db      062h
        db      069h
        db      06eh
        db      061h
        db      072h
        db      079h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#binary_function.pxc4booln0~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@39@std@#aligned_storage.ui?12?ui?8?~@type virtual
        [bits 32]
@.xt@39@std@#aligned_storage.ui?12?ui?8?~@type:
        dd      00h
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      069h
        db      067h
        db      06eh
        db      065h
        db      064h
        db      05fh
        db      073h
        db      074h
        db      06fh
        db      072h
        db      061h
        db      067h
        db      065h
        db      074h
        db      079h
        db      070h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__value_func.qpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__value_func.qpxc4bool.n0~:
        dd      @std@__function@#__value_func.qpxc4bool.n0~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      076h
        db      061h
        db      06ch
        db      075h
        db      065h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#function.qpxc4bool.n0~ virtual
        [bits 32]
@.xt@#function.qpxc4bool.n0~:
        dd      @std@#function.qpxc4bool.n0~@.bdtr.qv+0
        dd      01ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#__maybe_derive_from_unary_function.qpxc4bool.n0~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__maybe_derive_from_binary_function.qpxc4bool.n0~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xc@#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@#TemplatedIdentifierToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#shared_ptr.17TokenizerSettings~+0
        dd      0fffffff8h
        dd      01h
        dd      07h
        dd      0400h
        dd      @.xt@#function.qpxc4bool.n0~+0
        dd      0ffffffdch
        dd      03h
        dd      06h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<TemplatedIdentifierToken<kw>>(shared_ptr<TemplatedIdentifierToken<kw>>&&)
@std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_112505:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_112587:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_112604:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_112668:
; Line 4338: } 
L_112525:
L_112731:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_112745:
L_112506:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedIdentifierToken.2kw~~.qR#shared_ptr.#TemplatedIdentifierToken.n1~~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
; std::make_shared<TemplatedIdentifierToken<kw>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
@std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffed0h
        push    ebx
        push    esi
        push    edi
L_112751:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0130h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-012ch],eax
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,035e50d7h
        cmp     edi,ecx
        jbe     L_112795
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_112795:
        imul    eax,edi,byte 04ch
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~ ; std::unique_ptr<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_112858:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_112861
        mov     eax,dword [ebp-012ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.#TemplatedIdentifierToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~ ; std::allocator<TemplatedIdentifierToken<kw>>::allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>, >( const allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 ; std::__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, >(allocator<TemplatedIdentifierToken<kw>>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
        add     esp,byte 014h
L_112861:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_113067
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_113068
L_113067:
        mov     eax,dword [ebp-0124h]
L_113068:
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,dword [ebp-0130h]
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~ ; std::shared_ptr<TemplatedIdentifierToken<kw>>::__create_with_control_block<TemplatedIdentifierToken<kw>, __shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>(TemplatedIdentifierToken<kw>*, __shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*)
        mov     ecx,eax
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     eax,dword [ecx]
        mov     dword [ebx],eax
        mov     eax,dword [ecx+04h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ecx],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ecx+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@.bdtr.qv ; std::shared_ptr<TemplatedIdentifierToken<kw>>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_113186
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0128h],eax
        and     eax,eax
        je      L_113299
        mov     eax,dword [ebp-0128h]
        add     eax,byte 04h
        jmp     L_113300
L_113299:
        mov     eax,dword [ebp-0128h]
L_113300:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_113345:
L_113330:
L_113315:
L_113282:
L_113186:
; Line 2619:   } 
L_113203:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_113424:
L_113438:
L_113411:
L_113183:
        mov     dword [ebp-06ch+014h],0ah
L_113454:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_113586:
L_113587:
L_113632:
L_113617:
L_113602:
L_113569:
L_113473:
L_113490:
L_113711:
L_113725:
L_113698:
L_113470:
L_113741:
L_112752:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#TemplatedIdentifierToken.2kw~~ virtual
        [bits 32]
@.xt@#allocator.#TemplatedIdentifierToken.2kw~~:
        dd      @std@#allocator.#TemplatedIdentifierToken.2kw~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
@.xc@std@#make_shared.#TemplatedIdentifierToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.#TemplatedIdentifierToken.2kw~~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<TemplatedIdentifierToken<kw>>::~shared_ptr()
@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@.bdtr.qv:
        push    ebx
L_113747:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_113750
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_113758
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_113758:
; Line 3487:     } 
L_113775:
L_113750:
; Line 4211: } 
L_113748:
        pop     ebx
        ret
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; TemplatedKeywordToken<kw>::Start( const basic_string<char, char_traits<char>, allocator<char>>&)
@#TemplatedKeywordToken.2kw~@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        add     esp,byte 0fffffff0h
L_113781:
        mov     edx,dword [esp+04h+010h]
; Line 110:     return ispunct(line[0]) != 0; 
        mov     eax,edx
        xor     ecx,ecx
; Line 3212:     _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds"); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_113846
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_113847
L_113846:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_113847:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 3214: } 
        mov     al,byte [eax+ecx]
        cbw
        cwde
        push    eax
        call    _ispunct ; ispunct
        add     esp,byte 04h
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
L_113782:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<TemplatedKeywordToken<kw>>(shared_ptr<TemplatedKeywordToken<kw>>&&)
@std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_114031:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_114113:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_114130:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_114194:
; Line 4338: } 
L_114051:
L_114257:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_114271:
L_114032:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.#TemplatedKeywordToken.2kw~~.qR#shared_ptr.#TemplatedKeywordToken.n1~~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
; std::make_shared<TemplatedKeywordToken<kw>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
@std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffed8h
        push    ebx
        push    esi
        push    edi
L_114277:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0128h],eax
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,05555555h
        cmp     edi,ecx
        jbe     L_114321
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_114321:
        imul    eax,edi,byte 030h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~ ; std::unique_ptr<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_114384:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_114387
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.#TemplatedKeywordToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~ ; std::allocator<TemplatedKeywordToken<kw>>::allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>, >( const allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ ; std::__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, >(allocator<TemplatedKeywordToken<kw>>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
        add     esp,byte 010h
L_114387:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_114577
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_114578
L_114577:
        mov     eax,dword [ebp-0120h]
L_114578:
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,dword [ebp-0128h]
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~ ; std::shared_ptr<TemplatedKeywordToken<kw>>::__create_with_control_block<TemplatedKeywordToken<kw>, __shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>(TemplatedKeywordToken<kw>*, __shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*)
        mov     ecx,eax
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     eax,dword [ecx]
        mov     dword [ebx],eax
        mov     eax,dword [ecx+04h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ecx],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ecx+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.#TemplatedKeywordToken.2kw~~@.bdtr.qv ; std::shared_ptr<TemplatedKeywordToken<kw>>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_114696
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_114809
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_114810
L_114809:
        mov     eax,dword [ebp-0124h]
L_114810:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_114855:
L_114840:
L_114825:
L_114792:
L_114696:
; Line 2619:   } 
L_114713:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_114934:
L_114948:
L_114921:
L_114693:
        mov     dword [ebp-06ch+014h],0ah
L_114964:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_115096:
L_115097:
L_115142:
L_115127:
L_115112:
L_115079:
L_114983:
L_115000:
L_115221:
L_115235:
L_115208:
L_114980:
L_115251:
L_114278:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#TemplatedKeywordToken.2kw~~ virtual
        [bits 32]
@.xt@#allocator.#TemplatedKeywordToken.2kw~~:
        dd      @std@#allocator.#TemplatedKeywordToken.2kw~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
@.xc@std@#make_shared.#TemplatedKeywordToken.2kw~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.#TemplatedKeywordToken.2kw~~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<TemplatedKeywordToken<kw>>::~shared_ptr()
@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@.bdtr.qv:
        push    ebx
L_115257:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_115260
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_115268
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_115268:
; Line 3487:     } 
L_115285:
L_115260:
; Line 4211: } 
L_115258:
        pop     ebx
        ret
section code
section code
        section vsc@std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
; std::shared_ptr<Token>::operator =<ErrorToken>(shared_ptr<ErrorToken>&&)
@std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff60h
        push    ebx
        push    esi
        push    edi
L_115291:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4257:     shared_ptr(_VSTD::move(__r)).swap(*this); 
        lea     edi,[ebp-08h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-0ch],00h
        mov     ecx,dword [eax]
        mov     dword [ebp-08h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [ebp-08h+04h],ecx
; Line 4100:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4101:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4102: } 
L_115373:
        mov     dword [ebp-054h+014h],01h
        mov     eax,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     edx,edi
        mov     esi,eax
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [ebp-074h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-074h]
        mov     dword [eax],ecx
; Line 3718: } 
L_115390:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     ecx,edi
        add     ecx,byte 04h
        mov     eax,esi
        add     eax,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ebp-090h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-090h]
        mov     dword [eax],ecx
; Line 3718: } 
L_115454:
; Line 4338: } 
L_115311:
L_115517:
        mov     dword [ebp-054h+014h],02h
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4259: } 
L_115531:
L_115292:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~ virtual
        [bits 32]
@.xc@std@#shared_ptr.5Token~@#.basn.10ErrorToken~.qR#shared_ptr.n1~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      0fffffff8h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::make_shared<ErrorToken, basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
@std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 4388: inline _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_115537:
        mov     esi,dword [ebp+08h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-06ch],eax
        mov     dword [ebp-06ch+04h],___cppexceptionhandle
        mov     dword [ebp-06ch+08h],esp
        mov     dword [ebp-06ch+0ch],ebp
        mov     dword [ebp-06ch+010h],@.xc@std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-06ch+014h],00h
        lea     eax,[ebp-06ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 4396:     static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared"); 
        mov     dword [ebp-06ch+014h],01h
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-06ch+014h],02h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,05d1745dh
        cmp     edi,ecx
        jbe     L_115581
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_115581:
        imul    eax,edi,byte 02ch
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ ; std::unique_ptr<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>&&)
        mov     dword [ebp-06ch+014h],03h
L_115644:
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],04h
; Line 4403:     ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [ebp-010h]
; Line 2592:   } 
        and     edi,edi
        je      L_115647
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp-04h]
        push    eax
        push    ecx
        call    @std@#allocator.10ErrorToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ ; std::allocator<ErrorToken>::allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>, >( const allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>&)
        add     esp,byte 08h
        mov     dword [ebp-06ch+014h],05h
        push    edi
        call    @std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ ; std::__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<ErrorToken>, basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 0ch
L_115647:
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_115821
        mov     eax,dword [ebp-011ch]
        add     eax,byte 04h
        jmp     L_115822
L_115821:
        mov     eax,dword [ebp-011ch]
L_115822:
        push    eax
        call    @std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        push    ecx
        push    eax
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ ; std::shared_ptr<ErrorToken>::__create_with_control_block<ErrorToken, __shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>(ErrorToken*, __shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*)
        add     esp,byte 0ch
        mov     dword [ebp-06ch+014h],06h
        mov     ecx,dword [eax]
        mov     dword [esi],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [esi+04h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        mov     dword [ebp-06ch+014h],07h
        lea     eax,[ebp-024h]
        push    eax
        call    @std@#shared_ptr.10ErrorToken~@.bdtr.qv ; std::shared_ptr<ErrorToken>::~shared_ptr()
        add     esp,byte 04h
        mov     dword [ebp-06ch+014h],08h
        mov     edi,dword [ebp+08h]
        mov     dword [ebp-06ch+014h],09h
        lea     esi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     ebx,ebx
        je      L_115940
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_116053
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_116054
L_116053:
        mov     eax,dword [ebp-0120h]
L_116054:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_116099:
L_116084:
L_116069:
L_116036:
L_115940:
; Line 2619:   } 
L_115957:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>::~__allocator_destructor()
        add     esp,byte 04h
L_116178:
L_116192:
L_116165:
L_115937:
        mov     dword [ebp-06ch+014h],0ah
L_116208:
        mov     eax,edi
; Line 4407: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_116340:
L_116341:
L_116386:
L_116371:
L_116356:
L_116323:
L_116227:
L_116244:
L_116465:
L_116479:
L_116452:
L_116224:
L_116495:
L_115538:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~ virtual
        [bits 32]
@.xt@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~:
        dd      @std@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~:
        dd      @std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#__compressed_pair.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~:
        dd      @std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.10ErrorToken~ virtual
        [bits 32]
@.xt@#allocator.10ErrorToken~:
        dd      @std@#allocator.10ErrorToken~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#make_shared.10ErrorTokenr#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffff94h
        dd      0400h
        dd      @.xt@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~+0
        dd      0fffffffch
        dd      01h
        dd      0ch
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      0bh
        dd      0400h
        dd      @.xt@#shared_ptr.10ErrorToken~+0
        dd      0ffffffdch
        dd      06h
        dd      07h
        dd      00h
section code
section code
        section vsc@std@#shared_ptr.10ErrorToken~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<ErrorToken>::~shared_ptr()
@std@#shared_ptr.10ErrorToken~@.bdtr.qv:
        push    ebx
L_116501:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_116504
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_116512
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_116512:
; Line 3487:     } 
L_116529:
L_116504:
; Line 4211: } 
L_116502:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**)
@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_116535:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-04h],00h
        lea     edx,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~ ; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**, integral_constant<bool, bool=1>)
        mov     dword [ebp-04ch+014h],03h
L_116598:
L_116585:
        add     esp,byte 0ch
L_116536:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#is_trivially_destructible.pc~ virtual
        [bits 32]
@.xt@#is_trivially_destructible.pc~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      073h
        db      05fh
        db      074h
        db      072h
        db      069h
        db      076h
        db      069h
        db      061h
        db      06ch
        db      06ch
        db      079h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      069h
        db      062h
        db      06ch
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc virtual
        [bits 32]
@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#is_trivially_destructible.pc~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::push_back(char*&&)
@std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_116605:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0114h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-070h],eax
        mov     dword [ebp-070h+04h],___cppexceptionhandle
        mov     dword [ebp-070h+08h],esp
        mov     dword [ebp-070h+0ch],ebp
        mov     dword [ebp-070h+010h],@.xc@std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc
        mov     dword [ebp-070h+014h],00h
        lea     eax,[ebp-070h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 572:     if (__end_ == __end_cap()) 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [eax+010h]
        cmp     dword [ebx+0ch],ecx
        jne     L_116608
; Line 573:     { 
; Line 574:         if (__begin_ > __first_) 
        mov     ecx,dword [ebx+04h]
        cmp     dword [ebx+08h],ecx
        jle     L_116612
; Line 575:         { 
; Line 576:             difference_type __d = __begin_ - __first_; 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
; Line 577:             __d = (__d + 1) / 2; 
        inc     eax
        mov     ecx,eax
        shr     eax,01fh
        add     eax,ecx
        mov     esi,eax
        sar     esi,01h
; Line 578:             __end_ = _VSTD::move(__begin_, __end_, __begin_ - __d); 
        mov     edx,dword [ebx+08h]
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebx+08h]
        shl     esi,02h
        sub     eax,esi
        mov     dword [ebp-0110h],esi
; Line 1893:     return _VSTD::__move(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
        mov     edi,ecx
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1867:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     edx,edi
        je      L_116697
L_116695:
; Line 1868:         *__result = _VSTD::move(*__first); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_116698:
        add     edx,byte 04h
        add     eax,byte 04h
L_116696:
        cmp     edx,edi
        jne     L_116695
L_116697:
; Line 1870: } 
; Line 1894: } 
        mov     dword [ebx+0ch],eax
; Line 579:             __begin_ -= __d; 
        mov     ecx,dword [ebx+08h]
        mov     eax,dword [ebp-0110h]
        sub     eax,ecx
        neg     eax
        mov     dword [ebx+08h],eax
; Line 580:         } 
        jmp     L_116617
L_116612:
; Line 581:         else 
; Line 582:         { 
; Line 583:             size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1); 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+04h]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
        shl     eax,01h
        mov     dword [ebp-028h],eax
        lea     eax,[ebp-028h]
        mov     dword [ebp-02ch],01h
        lea     ecx,[ebp-02ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0118h],00h
        lea     edx,[ebp-0118h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_116873:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_116907
        mov     eax,dword [ebp-011ch]
        add     eax,byte 04h
        jmp     L_116908
L_116907:
        mov     eax,dword [ebp-011ch]
L_116908:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,esi
        shr     eax,02h
        push    eax
        push    esi
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ ; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
        add     esp,byte 010h
        mov     dword [ebp-070h+014h],01h
; Line 585:             __t.__construct_at_end(move_iterator<pointer>(__begin_), 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+0ch]
        mov     dword [ebp-04ch],eax
        lea     eax,[ebp-04ch]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+08h]
        mov     dword [ebp-048h],eax
        lea     eax,[ebp-048h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,byte 08h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ ; std::__split_buffer<char*, allocator<char*>&>::__construct_at_end<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
L_116958:
L_116972:
        add     esp,byte 0ch
; Line 587:             _VSTD::swap(__first_, __t.__first_); 
        mov     ecx,ebx
        add     ecx,byte 04h
        lea     eax,[ebp-044h+04h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_116988:
; Line 588:             _VSTD::swap(__begin_, __t.__begin_); 
        mov     ecx,ebx
        add     ecx,byte 08h
        lea     eax,[ebp-044h+08h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117052:
; Line 589:             _VSTD::swap(__end_, __t.__end_); 
        mov     ecx,ebx
        add     ecx,byte 0ch
        lea     eax,[ebp-044h+0ch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117116:
; Line 590:             _VSTD::swap(__end_cap(), __t.__end_cap()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        lea     eax,[ebp-044h+010h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117180:
; Line 591:         } 
        mov     dword [ebp-070h+014h],02h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
        add     esp,byte 04h
L_116617:
; Line 592:     } 
L_116608:
; Line 593:     __alloc_traits::construct(__alloc(), _VSTD::__to_address(__end_), 
        mov     eax,dword [ebp-0114h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,dword [ebx+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_117389
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_117390
L_117389:
        mov     eax,dword [ebp-0120h]
L_117390:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
        add     esp,byte 0ch
; Line 595:     ++__end_; 
        add     dword [ebx+0ch],byte 04h
; Line 596: } 
L_116606:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc virtual
        [bits 32]
@.xc@std@#__split_buffer.pc#allocator.pc~~@push_back.qRpc:
        dd      00h
        dd      0ffffff90h
        dd      0400h
        dd      @.xt@#__split_buffer.pcr#allocator.pc~~+0
        dd      0ffffffbch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::push_front(char*&&)
@std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffedch
        push    ebx
        push    esi
L_117396:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0114h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-070h],eax
        mov     dword [ebp-070h+04h],___cppexceptionhandle
        mov     dword [ebp-070h+08h],esp
        mov     dword [ebp-070h+0ch],ebp
        mov     dword [ebp-070h+010h],@.xc@std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc
        mov     dword [ebp-070h+014h],00h
        lea     eax,[ebp-070h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 508:     if (__begin_ == __first_) 
        mov     ecx,dword [ebx+04h]
        cmp     dword [ebx+08h],ecx
        jne     L_117399
; Line 509:     { 
; Line 510:         if (__end_ < __end_cap()) 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [eax+010h]
        cmp     dword [ebx+0ch],ecx
        jge     L_117403
; Line 511:         { 
; Line 512:             difference_type __d = __end_cap() - __end_; 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
; Line 513:             __d = (__d + 1) / 2; 
        inc     eax
        mov     ecx,eax
        shr     eax,01fh
        add     eax,ecx
        mov     esi,eax
        sar     esi,01h
; Line 514:             __begin_ = _VSTD::move_backward(__begin_, __end_, __end_ + __d); 
        mov     edx,dword [ebx+08h]
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebx+0ch]
        shl     esi,02h
        add     eax,esi
        mov     dword [ebp-0110h],esi
; Line 1933:     return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
        mov     dword [ebp-0118h],edx
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1903:     while (__first != __last) 
        mov     esi,ecx
        cmp     dword [ebp-0118h],esi
        je      L_117535
L_117534:
; Line 1904:         *--__result = _VSTD::move(*--__last); 
        sub     ecx,byte 04h
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        sub     eax,byte 04h
        mov     dword [eax],edx
L_117536:
        mov     esi,ecx
        cmp     dword [ebp-0118h],esi
        jne     L_117534
L_117535:
; Line 1906: } 
; Line 1934: } 
        mov     dword [ebx+08h],eax
; Line 515:             __end_ += __d; 
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebp-0110h]
        add     eax,ecx
        mov     dword [ebx+0ch],eax
; Line 516:         } 
        jmp     L_117408
L_117403:
; Line 517:         else 
; Line 518:         { 
; Line 519:             size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1); 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+04h]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
        shl     eax,01h
        mov     dword [ebp-028h],eax
        lea     eax,[ebp-028h]
        mov     dword [ebp-02ch],01h
        lea     ecx,[ebp-02ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-011ch],00h
        lea     edx,[ebp-011ch]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_117711:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_117745
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_117746
L_117745:
        mov     eax,dword [ebp-0120h]
L_117746:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,esi
        add     eax,byte 03h
        shr     eax,02h
        push    eax
        push    esi
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ ; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
        add     esp,byte 010h
        mov     dword [ebp-070h+014h],01h
; Line 521:             __t.__construct_at_end(move_iterator<pointer>(__begin_), 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+0ch]
        mov     dword [ebp-04ch],eax
        lea     eax,[ebp-04ch]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+08h]
        mov     dword [ebp-048h],eax
        lea     eax,[ebp-048h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,byte 08h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ ; std::__split_buffer<char*, allocator<char*>&>::__construct_at_end<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
L_117796:
L_117810:
        add     esp,byte 0ch
; Line 523:             _VSTD::swap(__first_, __t.__first_); 
        mov     ecx,ebx
        add     ecx,byte 04h
        lea     eax,[ebp-044h+04h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117826:
; Line 524:             _VSTD::swap(__begin_, __t.__begin_); 
        mov     ecx,ebx
        add     ecx,byte 08h
        lea     eax,[ebp-044h+08h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117890:
; Line 525:             _VSTD::swap(__end_, __t.__end_); 
        mov     ecx,ebx
        add     ecx,byte 0ch
        lea     eax,[ebp-044h+0ch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_117954:
; Line 526:             _VSTD::swap(__end_cap(), __t.__end_cap()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        lea     eax,[ebp-044h+010h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_118018:
; Line 527:         } 
        mov     dword [ebp-070h+014h],02h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
        add     esp,byte 04h
L_117408:
; Line 528:     } 
L_117399:
; Line 529:     __alloc_traits::construct(__alloc(), _VSTD::__to_address(__begin_-1), 
        mov     eax,dword [ebp-0114h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,dword [ebx+08h]
        sub     eax,byte 04h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_118227
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_118228
L_118227:
        mov     eax,dword [ebp-0124h]
L_118228:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
        add     esp,byte 0ch
; Line 531:     --__begin_; 
        sub     dword [ebx+08h],byte 04h
; Line 532: } 
L_117397:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc virtual
        [bits 32]
@.xc@std@#__split_buffer.pc#allocator.pc~~@push_front.qRpc:
        dd      00h
        dd      0ffffff90h
        dd      0400h
        dd      @.xt@#__split_buffer.pcr#allocator.pc~~+0
        dd      0ffffffbch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
@std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~:
; Line 317: { 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_118234:
        mov     eax,dword [esp+010h+04ch]
        mov     edi,dword [esp+0ch+04ch]
        mov     esi,dword [esp+08h+04ch]
        mov     ebx,dword [esp+04h+04ch]
        xor     ecx,ecx
        mov     dword [esp-04h+04ch],ecx
        lea     ecx,[esp-04h+04ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [ebx+010h],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx+04h+010h],eax
; Line 2206:     } 
; Line 318:     __first_ = __cap != 0 ? __alloc_traits::allocate(__alloc(), __cap) : nullptr; 
        and     esi,esi
        je      L_118375
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-03ch+04ch],eax
        and     eax,eax
        je      L_118422
        mov     eax,dword [esp-03ch+04ch]
        add     eax,byte 04h
        jmp     L_118423
L_118422:
        mov     eax,dword [esp-03ch+04ch]
L_118423:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ebp,esi
; Line 1861:         if (__n > max_size()) 
        mov     ecx,03fffffffh
        cmp     ebp,ecx
        jbe     L_118427
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_118427:
        mov     eax,ebp
        shl     eax,02h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        jmp     L_118376
L_118375:
        xor     eax,eax
L_118376:
        mov     dword [ebx+04h],eax
; Line 319:     __begin_ = __end_ = __first_ + __start; 
        mov     ecx,eax
        mov     eax,edi
        shl     eax,02h
        add     eax,ecx
        mov     dword [ebx+0ch],eax
        mov     dword [ebx+08h],eax
; Line 320:     __end_cap() = __first_ + __cap; 
        mov     eax,ebx
        mov     edx,dword [ebx+04h]
        mov     ecx,esi
        shl     ecx,02h
        add     ecx,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [eax+010h],ecx
; Line 321: } 
        mov     eax,ebx
L_118235:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bctr.4bool?1?v~.qpcR#__allocator_destructor.#allocator.c~~ virtual
        [bits 32]
; std::unique_ptr<char*, __allocator_destructor<allocator<char>>>::unique_ptr<bool=1, void, >(char*, __allocator_destructor<allocator<char>>&&)
@std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bctr.4bool?1?v~.qpcR#__allocator_destructor.#allocator.c~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_118531:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_118532:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::push_back(char*&&)
@std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_118691:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0114h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-070h],eax
        mov     dword [ebp-070h+04h],___cppexceptionhandle
        mov     dword [ebp-070h+08h],esp
        mov     dword [ebp-070h+0ch],ebp
        mov     dword [ebp-070h+010h],@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc
        mov     dword [ebp-070h+014h],00h
        lea     eax,[ebp-070h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 572:     if (__end_ == __end_cap()) 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [eax+010h]
        cmp     dword [ebx+0ch],ecx
        jne     L_118694
; Line 573:     { 
; Line 574:         if (__begin_ > __first_) 
        mov     ecx,dword [ebx+04h]
        cmp     dword [ebx+08h],ecx
        jle     L_118698
; Line 575:         { 
; Line 576:             difference_type __d = __begin_ - __first_; 
        mov     eax,dword [ebx+04h]
        sub     eax,dword [ebx+08h]
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
; Line 577:             __d = (__d + 1) / 2; 
        inc     eax
        mov     ecx,eax
        shr     eax,01fh
        add     eax,ecx
        mov     esi,eax
        sar     esi,01h
; Line 578:             __end_ = _VSTD::move(__begin_, __end_, __begin_ - __d); 
        mov     edx,dword [ebx+08h]
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebx+08h]
        shl     esi,02h
        sub     eax,esi
        mov     dword [ebp-0110h],esi
; Line 1893:     return _VSTD::__move(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
        mov     edi,ecx
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1867:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     edx,edi
        je      L_118783
L_118781:
; Line 1868:         *__result = _VSTD::move(*__first); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_118784:
        add     edx,byte 04h
        add     eax,byte 04h
L_118782:
        cmp     edx,edi
        jne     L_118781
L_118783:
; Line 1870: } 
; Line 1894: } 
        mov     dword [ebx+0ch],eax
; Line 579:             __begin_ -= __d; 
        mov     ecx,dword [ebx+08h]
        mov     eax,dword [ebp-0110h]
        sub     eax,ecx
        neg     eax
        mov     dword [ebx+08h],eax
; Line 580:         } 
        jmp     L_118703
L_118698:
; Line 581:         else 
; Line 582:         { 
; Line 583:             size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1); 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+04h]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
        shl     eax,01h
        mov     dword [ebp-028h],eax
        lea     eax,[ebp-028h]
        mov     dword [ebp-02ch],01h
        lea     ecx,[ebp-02ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0118h],00h
        lea     edx,[ebp-0118h]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_118959:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-011ch],eax
        and     eax,eax
        je      L_118993
        mov     eax,dword [ebp-011ch]
        add     eax,byte 04h
        jmp     L_118994
L_118993:
        mov     eax,dword [ebp-011ch]
L_118994:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,esi
        shr     eax,02h
        push    eax
        push    esi
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ ; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
        add     esp,byte 010h
        mov     dword [ebp-070h+014h],01h
; Line 585:             __t.__construct_at_end(move_iterator<pointer>(__begin_), 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+0ch]
        mov     dword [ebp-04ch],eax
        lea     eax,[ebp-04ch]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+08h]
        mov     dword [ebp-048h],eax
        lea     eax,[ebp-048h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,byte 08h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ ; std::__split_buffer<char*, allocator<char*>&>::__construct_at_end<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
L_119044:
L_119058:
        add     esp,byte 0ch
; Line 587:             _VSTD::swap(__first_, __t.__first_); 
        mov     ecx,ebx
        add     ecx,byte 04h
        lea     eax,[ebp-044h+04h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119074:
; Line 588:             _VSTD::swap(__begin_, __t.__begin_); 
        mov     ecx,ebx
        add     ecx,byte 08h
        lea     eax,[ebp-044h+08h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119138:
; Line 589:             _VSTD::swap(__end_, __t.__end_); 
        mov     ecx,ebx
        add     ecx,byte 0ch
        lea     eax,[ebp-044h+0ch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119202:
; Line 590:             _VSTD::swap(__end_cap(), __t.__end_cap()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        lea     eax,[ebp-044h+010h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119266:
; Line 591:         } 
        mov     dword [ebp-070h+014h],02h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
        add     esp,byte 04h
L_118703:
; Line 592:     } 
L_118694:
; Line 593:     __alloc_traits::construct(__alloc(), _VSTD::__to_address(__end_), 
        mov     eax,dword [ebp-0114h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,dword [ebx+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_119475
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_119476
L_119475:
        mov     eax,dword [ebp-0120h]
L_119476:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
        add     esp,byte 0ch
; Line 595:     ++__end_; 
        add     dword [ebx+0ch],byte 04h
; Line 596: } 
L_118692:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc virtual
        [bits 32]
@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_back.qRpc:
        dd      00h
        dd      0ffffff90h
        dd      0400h
        dd      @.xt@#__split_buffer.pcr#allocator.pc~~+0
        dd      0ffffffbch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::push_front(char*&&)
@std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffedch
        push    ebx
        push    esi
L_119482:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0114h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-070h],eax
        mov     dword [ebp-070h+04h],___cppexceptionhandle
        mov     dword [ebp-070h+08h],esp
        mov     dword [ebp-070h+0ch],ebp
        mov     dword [ebp-070h+010h],@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc
        mov     dword [ebp-070h+014h],00h
        lea     eax,[ebp-070h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 508:     if (__begin_ == __first_) 
        mov     ecx,dword [ebx+04h]
        cmp     dword [ebx+08h],ecx
        jne     L_119485
; Line 509:     { 
; Line 510:         if (__end_ < __end_cap()) 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [eax+010h]
        cmp     dword [ebx+0ch],ecx
        jge     L_119489
; Line 511:         { 
; Line 512:             difference_type __d = __end_cap() - __end_; 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
; Line 513:             __d = (__d + 1) / 2; 
        inc     eax
        mov     ecx,eax
        shr     eax,01fh
        add     eax,ecx
        mov     esi,eax
        sar     esi,01h
; Line 514:             __begin_ = _VSTD::move_backward(__begin_, __end_, __end_ + __d); 
        mov     edx,dword [ebx+08h]
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebx+0ch]
        shl     esi,02h
        add     eax,esi
        mov     dword [ebp-0110h],esi
; Line 1933:     return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
        mov     dword [ebp-0118h],edx
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1903:     while (__first != __last) 
        mov     esi,ecx
        cmp     dword [ebp-0118h],esi
        je      L_119621
L_119620:
; Line 1904:         *--__result = _VSTD::move(*--__last); 
        sub     ecx,byte 04h
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        sub     eax,byte 04h
        mov     dword [eax],edx
L_119622:
        mov     esi,ecx
        cmp     dword [ebp-0118h],esi
        jne     L_119620
L_119621:
; Line 1906: } 
; Line 1934: } 
        mov     dword [ebx+08h],eax
; Line 515:             __end_ += __d; 
        mov     ecx,dword [ebx+0ch]
        mov     eax,dword [ebp-0110h]
        add     eax,ecx
        mov     dword [ebx+0ch],eax
; Line 516:         } 
        jmp     L_119494
L_119489:
; Line 517:         else 
; Line 518:         { 
; Line 519:             size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1); 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+04h]
        mov     eax,dword [eax+010h]
        sub     eax,ecx
        sar     eax,02h
        shl     eax,01h
        mov     dword [ebp-028h],eax
        lea     eax,[ebp-028h]
        mov     dword [ebp-02ch],01h
        lea     ecx,[ebp-02ch]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-011ch],00h
        lea     edx,[ebp-011ch]
        push    dword [edx]
        push    ecx
        push    eax
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_119797:
        add     esp,byte 0ch
; Line 2636: } 
        mov     esi,dword [eax]
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0120h],eax
        and     eax,eax
        je      L_119831
        mov     eax,dword [ebp-0120h]
        add     eax,byte 04h
        jmp     L_119832
L_119831:
        mov     eax,dword [ebp-0120h]
L_119832:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        mov     eax,esi
        add     eax,byte 03h
        shr     eax,02h
        push    eax
        push    esi
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bctr.quiuir#allocator.pc~ ; std::__split_buffer<char*, allocator<char*>&>::__split_buffer(unsigned int, unsigned int, allocator<char*>&)
        add     esp,byte 010h
        mov     dword [ebp-070h+014h],01h
; Line 521:             __t.__construct_at_end(move_iterator<pointer>(__begin_), 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+0ch]
        mov     dword [ebp-04ch],eax
        lea     eax,[ebp-04ch]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        mov     eax,dword [ebx+08h]
        mov     dword [ebp-048h],eax
        lea     eax,[ebp-048h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
        add     esp,byte 08h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ ; std::__split_buffer<char*, allocator<char*>&>::__construct_at_end<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
L_119882:
L_119896:
        add     esp,byte 0ch
; Line 523:             _VSTD::swap(__first_, __t.__first_); 
        mov     ecx,ebx
        add     ecx,byte 04h
        lea     eax,[ebp-044h+04h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119912:
; Line 524:             _VSTD::swap(__begin_, __t.__begin_); 
        mov     ecx,ebx
        add     ecx,byte 08h
        lea     eax,[ebp-044h+08h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_119976:
; Line 525:             _VSTD::swap(__end_, __t.__end_); 
        mov     ecx,ebx
        add     ecx,byte 0ch
        lea     eax,[ebp-044h+0ch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_120040:
; Line 526:             _VSTD::swap(__end_cap(), __t.__end_cap()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
        lea     eax,[ebp-044h+010h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [ebp-0b8h],edx
; Line 3716:     __x = _VSTD::move(__y); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebp-0b8h]
        mov     dword [eax],ecx
; Line 3718: } 
L_120104:
; Line 527:         } 
        mov     dword [ebp-070h+014h],02h
        lea     eax,[ebp-044h]
        push    eax
        call    @std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv ; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
        add     esp,byte 04h
L_119494:
; Line 528:     } 
L_119485:
; Line 529:     __alloc_traits::construct(__alloc(), _VSTD::__to_address(__begin_-1), 
        mov     eax,dword [ebp-0114h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,dword [ebx+08h]
        sub     eax,byte 04h
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_120313
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_120314
L_120313:
        mov     eax,dword [ebp-0124h]
L_120314:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
        add     esp,byte 0ch
; Line 531:     --__begin_; 
        sub     dword [ebx+08h],byte 04h
; Line 532: } 
L_119483:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc virtual
        [bits 32]
@.xc@std@#__split_buffer.pcr#allocator.pc~~@push_front.qRpc:
        dd      00h
        dd      0ffffff90h
        dd      0400h
        dd      @.xt@#__split_buffer.pcr#allocator.pc~~+0
        dd      0ffffffbch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<char>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_120320:
        mov     eax,dword [esp+04h]
L_120321:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.c~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<char>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.c~~@.bdtr.qv:
L_120328:
L_120329:
        ret
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::~__split_buffer()
@std@#__split_buffer.pcr#allocator.pc~~@.bdtr.qv:
        add     esp,byte 0ffffff98h
        push    ebx
L_120334:
        mov     ebx,dword [esp+04h+06ch]
; Line 348:     clear(); 
        mov     eax,ebx
        mov     edx,ebx
        mov     eax,dword [eax+08h]
        mov     dword [esp-064h+06ch],00h
        lea     ecx,[esp-064h+06ch]
        push    dword [ecx]
        push    eax
        push    edx
        call    @std@#__split_buffer.pcr#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~ ; std::__split_buffer<char*, allocator<char*>&>::__destruct_at_end(char**, integral_constant<bool, bool=0>)
L_120403:
        add     esp,byte 0ch
L_120374:
L_120357:
        cmp     dword [ebx+04h],byte 00h
        je      L_120337
; Line 350:         __alloc_traits::deallocate(__alloc(), __first_, capacity()); 
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+06ch],eax
        and     eax,eax
        je      L_120453
        mov     eax,dword [esp-068h+06ch]
        add     eax,byte 04h
        jmp     L_120454
L_120453:
        mov     eax,dword [esp-068h+06ch]
L_120454:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_120549:
L_120534:
L_120421:
L_120337:
; Line 351: } 
L_120626:
L_120640:
L_120613:
L_120655:
L_120335:
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@.bdtr.qv:
L_120661:
L_120662:
        ret
section code
section code
        section vsc@std@#__compressed_pair.ppcr#allocator.pc~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<char**, allocator<char*>&>::~__compressed_pair()
@std@#__compressed_pair.ppcr#allocator.pc~~@.bdtr.qv:
L_120667:
L_120681:
L_120695:
L_120668:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.pci?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<char*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.pci?0?4bool?0?~@.bdtr.qv:
L_120701:
L_120702:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<char>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@.bdtr.qv:
L_120707:
L_120721:
L_120708:
        ret
section code
section code
        section vsc@std@#__compressed_pair.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<char*, __allocator_destructor<allocator<char>>>::~__compressed_pair()
@std@#__compressed_pair.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv:
L_120727:
L_120754:
L_120741:
L_120769:
L_120728:
        ret
section code
section code
        section vsc@std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<char*, __allocator_destructor<allocator<char>>>::~unique_ptr()
@std@#unique_ptr.pc#__allocator_destructor.#allocator.c~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
L_120775:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_120781
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_120894
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_120895
L_120894:
        mov     eax,dword [esp-048h+04ch]
L_120895:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.c~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<char>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_120940:
L_120925:
L_120910:
L_120877:
L_120781:
; Line 2619:   } 
L_120798:
L_121032:
L_121019:
L_121047:
L_121006:
L_120776:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc virtual
        [bits 32]
; std::allocator_traits<allocator<char>>::__construct<char, char>(integral_constant<bool, bool=1>, allocator<char>&, char*, char&&)
@std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
L_121054:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-060h],ecx
        and     ecx,ecx
        je      L_121092
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     cl,byte [eax]
        mov     eax,dword [ebp-060h]
        mov     byte [eax],cl
L_121092:
; Line 1877:         } 
L_121074:
        mov     dword [ebp-048h+014h],01h
L_121137:
L_121055:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.c~~@#__construct.cc~.q#integral_constant.4booln0?1?~r#allocator.c~pcRc:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(unsigned int,  const std::__variant_detail::_Trait&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff1ch
        push    ebx
        push    esi
        push    edi
L_121143:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp+01ch]
        mov     dword [ebp-0d0h],eax
        mov     ebx,dword [ebp+018h]
        mov     esi,dword [ebp+014h]
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-0c4h],eax
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2540:     static_assert(!__is_hash_value_type<_First, _Rest...>::value, 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d8h],eax
        and     eax,eax
        je      L_121180
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        jmp     L_121181
L_121180:
        mov     eax,dword [ebp-0d8h]
L_121181:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     dword [ebp-0c8h],eax
        xor     cl,cl
        mov     dword [ebp-014h],eax
        mov     byte [ebp-014h+04h],cl
        lea     eax,[ebp-014h]
        mov     dword [ebp-05ch+014h],01h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,05555555h
        cmp     edi,ecx
        jbe     L_121218
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_121218:
        imul    eax,edi,byte 030h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-0ch]
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&&)
        mov     dword [ebp-05ch+014h],02h
L_121282:
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],03h
; Line 2544:     __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), 
        mov     eax,dword [ebp-0d0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ebp-0c8h]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
        add     esp,byte 014h
; Line 2547:     __h.get_deleter().__value_constructed = true; 
; Line 2595:     return __ptr_.second(); 
        lea     eax,[ebp-0ch]
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0dch],eax
        and     eax,eax
        je      L_121507
        mov     eax,dword [ebp-0dch]
        add     eax,byte 04h
        jmp     L_121508
L_121507:
        mov     eax,dword [ebp-0dch]
L_121508:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
        mov     byte [eax+04h],01h
; Line 2548:     __h->__hash_ = __hash; 
        mov     eax,dword [ebp-0c4h]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [ecx+04h],eax
; Line 2549:     __h->__next_ = nullptr; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax],00h
; Line 2517:   template <class _Up, class _Ep, 
        mov     edi,dword [ebp-0d4h]
        mov     eax,edi
        lea     ebx,[ebp-0ch]
        mov     dword [ebp-0cch],eax
        mov     eax,ebx
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@release.qv ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::release()
        add     esp,byte 04h
        mov     dword [ebp-0e0h],eax
        lea     esi,[ebp-0e0h]
; Line 2595:     return __ptr_.second(); 
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0e4h],eax
        and     eax,eax
        je      L_121686
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 04h
        jmp     L_121687
L_121686:
        mov     eax,dword [ebp-0e4h]
L_121687:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [esi]
        mov     eax,dword [ebp-0cch]
        mov     dword [edi],edx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],04h
; Line 2206:     } 
; Line 2515:   } 
        mov     dword [ebp-05ch+014h],05h
        mov     eax,dword [ebp+08h]
; Line 2551: } 
L_121144:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.quirxn2R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0ffffffech
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?rx#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlrx#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const basic_string<char, char_traits<char>, allocator<char>>&>::__tuple_impl<..., unsigned int=0,  const basic_string<char, char_traits<char>, allocator<char>>&, ..., ..., _Tl,  const basic_string<char, char_traits<char>, allocator<char>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?rx#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlrx#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_121796:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_121864:
L_121878:
L_121892:
L_121906:
L_121797:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~ virtual
        [bits 32]
; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__destruct_at_end(shared_ptr<Token>*)
@std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~:
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_121912:
        mov     ebx,dword [esp+08h+014h]
        mov     esi,dword [esp+04h+014h]
; Line 424:     pointer __soon_to_be_end = __end_; 
        mov     edi,dword [esi+08h]
        cmp     ebx,edi
        je      L_121916
L_121915:
; Line 426:         __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end)); 
        sub     edi,byte 08h
        mov     eax,edi
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08h+018h],eax
        and     eax,eax
        je      L_121970
        mov     eax,dword [esp-08h+018h]
        add     eax,byte 04h
        jmp     L_121971
L_121970:
        mov     eax,dword [esp-08h+018h]
L_121971:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::destroy<shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
        add     esp,byte 08h
L_121917:
; Line 425:     while (__new_last != __soon_to_be_end) 
        cmp     ebx,edi
        jne     L_121915
L_121916:
; Line 427:     __end_ = __new_last; 
        mov     dword [esi+08h],ebx
; Line 428: } 
L_121913:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__destroy<shared_ptr<Token>>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~:
; Line 1790:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_121977:
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        call    @std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~ ; std::allocator<shared_ptr<Token>>::destroy(shared_ptr<Token>*)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
L_121995:
L_121978:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__destroy.#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>, shared_ptr<Token>&>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_122001:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>, shared_ptr<Token>&>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&)
        mov     dword [ebp-04ch+014h],03h
L_122080:
L_122067:
        add     esp,byte 010h
L_122002:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~r#shared_ptr.n0~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~r#shared_ptr.n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~r#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~r#shared_ptr.n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__max_size(integral_constant<bool, bool=1>,  const allocator<shared_ptr<Token>>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__max_size.q#integral_constant.4booln1?1?~rx#allocator.#shared_ptr.n0~~:
; Line 1801:     _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffdch
L_122087:
        mov     eax,01fffffffh
L_122121:
L_122135:
L_122088:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>,  const shared_ptr<Token>&>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*,  const shared_ptr<Token>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
L_122141:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-068h],ecx
        and     ecx,ecx
        je      L_122179
        mov     ecx,dword [ebp-068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
        mov     eax,dword [eax+04h]
        mov     dword [ecx+04h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_122199
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [ecx+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_122262:
; Line 3478:     } 
L_122247:
L_122199:
; Line 4064: } 
L_122179:
; Line 1877:         } 
L_122161:
        mov     dword [ebp-048h+014h],01h
L_122295:
L_122142:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~rx#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~rx#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>&, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_122301:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_122302:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::construct<shared_ptr<Token>, shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_122309:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>, shared_ptr<Token>>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&&)
        mov     dword [ebp-04ch+014h],03h
L_122388:
L_122375:
        add     esp,byte 010h
L_122310:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~#shared_ptr.n0~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~#shared_ptr.n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#construct.#shared_ptr.n0~#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#shared_ptr.5Token~~p#shared_ptr.n0~#shared_ptr.n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~#integral_constant.4booln1?0?~ virtual
        [bits 32]
; std::__split_buffer<shared_ptr<Token>, allocator<shared_ptr<Token>>&>::__destruct_at_end(shared_ptr<Token>*, integral_constant<bool, bool=0>)
@std@#__split_buffer.#shared_ptr.5Token~r#allocator.#shared_ptr.n0~~~@__destruct_at_end.qp#shared_ptr.n0~#integral_constant.4booln1?0?~:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
L_122395:
        mov     ebx,dword [esp+08h+034h]
        mov     esi,dword [esp+04h+034h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_122399
L_122398:
; Line 303:         __alloc_traits::destroy(__alloc(), __to_address(--__end_)); 
        sub     dword [esi+0ch],byte 08h
        mov     eax,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_122455
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_122456
L_122455:
        mov     eax,dword [esp-02ch+038h]
L_122456:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#destroy.#shared_ptr.n0~~.qr#allocator.#shared_ptr.n0~~p#shared_ptr.n0~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::destroy<shared_ptr<Token>>(allocator<shared_ptr<Token>>&, shared_ptr<Token>*)
        add     esp,byte 08h
L_122400:
        cmp     ebx,dword [esi+0ch]
        jne     L_122398
L_122399:
; Line 304: } 
L_122470:
L_122396:
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#__deque_base.c#allocator.c~~@begin.qv virtual
        [bits 32]
; std::__deque_base<char, allocator<char>>::begin()
@std@#__deque_base.c#allocator.c~~@begin.qv:
        add     esp,byte 0fffffff0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_122476:
        mov     ebx,dword [esp+04h+020h]
        mov     ebp,dword [esp+08h+020h]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     ecx,dword [ebp+08h+04h]
        mov     eax,dword [ebp+01ch]
        mov     esi,dword [@std@#__deque_base.c#allocator.c~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     esi
        shl     eax,02h
        add     ecx,eax
        mov     edx,ecx
        mov     eax,dword [ebp+0ch+04h]
        cmp     eax,dword [ebp+08h+04h]
        sete    al
        and     eax,byte 01h
        and     al,al
        je      L_122514
        xor     eax,eax
        jmp     L_122515
L_122514:
        mov     edi,dword [edx]
        mov     eax,dword [ebp+01ch]
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edi
        add     eax,edx
L_122515:
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],eax
        mov     eax,dword [esp+04h+020h]
; Line 1142: } 
L_122477:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc virtual
        [bits 32]
; std::allocator_traits<allocator<char>>::destroy<char>(allocator<char>&, char*)
@std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_122536:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc ; std::allocator_traits<allocator<char>>::__destroy<char>(integral_constant<bool, bool=1>, allocator<char>&, char*)
        mov     dword [ebp-04ch+014h],03h
L_122599:
L_122586:
        add     esp,byte 0ch
L_122537:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.c~pc~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.c~pc~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.c~~@#destroy.c~.qr#allocator.c~pc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.c~pc~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc virtual
        [bits 32]
; std::allocator_traits<allocator<char*>>::destroy<char*>(allocator<char*>&, char**)
@std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_122606:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc ; std::allocator_traits<allocator<char*>>::__destroy<char*>(integral_constant<bool, bool=1>, allocator<char*>&, char**)
        mov     dword [ebp-04ch+014h],03h
L_122669:
L_122656:
        add     esp,byte 0ch
L_122607:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.pc~ppc~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.pc~ppc~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.pc~ppc~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_122676:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-064h],ecx
        and     ecx,ecx
        je      L_122714
        mov     ecx,dword [ebp-064h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        add     ecx,byte 08h
        add     eax,dword 08h
        push    eax
        push    ecx
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qR#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__move_assignment(__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
L_122714:
; Line 1877:         } 
L_122696:
        mov     dword [ebp-048h+014h],03h
L_122823:
L_122677:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~R#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL virtual
        [bits 32]
; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
@std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL:
; Line 617:   template <class... _Args> 
        push    ecx
L_122829:
        mov     ecx,dword [esp+0ch+04h]
        mov     eax,dword [esp+04h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
L_122863:
L_122830:
        pop     ecx
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@__max_size.q#integral_constant.4booln0?1?~rx#allocator.uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::__max_size(integral_constant<bool, bool=1>,  const allocator<unsigned long long>&)
@std@#allocator_traits.#allocator.uL~~@__max_size.q#integral_constant.4booln0?1?~rx#allocator.uL~:
; Line 1801:     _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffdch
L_122869:
        mov     eax,01fffffffh
L_122903:
L_122917:
L_122870:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@length_error@.bctr.qrx17@std@length_error virtual
        [bits 32]
; std::length_error::length_error( const std::length_error&)
@std@length_error@.bctr.qrx17@std@length_error:
        push    ebx
L_122923:
        mov     eax,dword [esp+08h+04h]
        mov     ebx,dword [esp+04h+04h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@logic_error@.bctr.qrx16@std@logic_error ; std::logic_error::logic_error( const std::logic_error&)
        add     esp,byte 08h
        mov     ecx,@std@length_error@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
L_122924:
        pop     ebx
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long,  const unsigned long long&>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*,  const unsigned long long&)
@std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
L_122931:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-060h],ecx
        and     ecx,ecx
        je      L_122969
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     eax,dword [ebp-060h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
L_122969:
; Line 1877:         } 
L_122951:
        mov     dword [ebp-048h+014h],01h
L_123014:
L_122932:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLrxuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLrxuL:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>,  const variant<shared_ptr<Token>, unsigned long long>&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*,  const variant<shared_ptr<Token>, unsigned long long>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_123020:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-064h],ecx
        and     ecx,ecx
        je      L_123058
        mov     ecx,dword [ebp-064h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        add     ecx,byte 08h
        add     eax,dword 08h
        push    eax
        push    ecx
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qrx#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__move_assignment( const __move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
L_123058:
; Line 1877:         } 
L_123040:
        mov     dword [ebp-048h+014h],03h
L_123167:
L_123021:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~rx#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.q9nullptr_tR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
; std::unique_ptr<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*[], __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>>::unique_ptr<bool=1, void, >(nullptr_t, __bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<nullptr_t>, allocator<shared_ptr<nullptr_t>>>>, void*>*>*>>&&)
@std@#unique_ptr.Ap#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~~@.bctr.4bool?1?v~.q9nullptr_tR#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~:
; Line 2740:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffc0h
        push    ebx
        push    esi
L_123173:
        mov     esi,dword [esp+0ch+048h]
        mov     ebx,dword [esp+04h+048h]
        mov     ecx,ebx
        xor     eax,eax
        mov     dword [esp-04h+048h],eax
        lea     eax,[esp-04h+048h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ebx],eax
; Line 2206:     } 
        mov     eax,ecx
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ ; std::__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__compressed_pair(__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>&&)
        add     esp,byte 08h
; Line 792:         __x.size() = 0; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [esi],00h
; Line 793:     } 
; Line 2206:     } 
; Line 2745:     static_assert(!is_reference<deleter_type>::value, 
; Line 2747:   } 
        mov     eax,ebx
L_123174:
        pop     esi
        pop     ebx
        add     esp,byte 040h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::select_on_container_copy_construction( const allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>&)
@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
; Line 1636:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_123399:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-050h+014h],01h
        mov     dword [ebp-050h+014h],02h
        push    dword [eax]
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::allocator_traits<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>&)
        mov     dword [ebp-050h+014h],03h
L_123477:
L_123464:
        add     esp,byte 0ch
        mov     dword [ebp-050h+014h],04h
        mov     dword [ebp-050h+014h],05h
L_123493:
        mov     dword [ebp-050h+014h],06h
        mov     eax,dword [ebp+08h]
L_123400:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_select_on_container_copy_construction.x#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
@.xt@#__has_select_on_container_copy_construction.x#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      073h
        db      065h
        db      06ch
        db      065h
        db      063h
        db      074h
        db      05fh
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      074h
        db      061h
        db      069h
        db      06eh
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@select_on_container_copy_construction.qrx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#__has_select_on_container_copy_construction.x#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::select_on_container_copy_construction( const allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_123499:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-050h+014h],01h
        mov     dword [ebp-050h+014h],02h
        push    dword [eax]
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&)
        mov     dword [ebp-050h+014h],03h
L_123577:
L_123564:
        add     esp,byte 0ch
        mov     dword [ebp-050h+014h],04h
        mov     dword [ebp-050h+014h],05h
L_123593:
        mov     dword [ebp-050h+014h],06h
        mov     eax,dword [ebp+08h]
L_123500:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_select_on_container_copy_construction.x#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xt@#__has_select_on_container_copy_construction.x#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      073h
        db      065h
        db      06ch
        db      065h
        db      063h
        db      074h
        db      05fh
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      074h
        db      061h
        db      069h
        db      06eh
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@select_on_container_copy_construction.qrx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#__has_select_on_container_copy_construction.x#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_123599:
        mov     eax,dword [esp+04h]
L_123600:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?0?4bool?0?~@.bctr.q23@std@__default_init_tag:
L_123607:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
L_123643:
L_123608:
        ret
section code
section code
        section vsc@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#hash.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::hash( const hash<basic_string<char, char_traits<char>, allocator<char>>>&)
@std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#hash.#basic_string.c#char_traits.c~#allocator.c~~~:
L_123649:
        mov     eax,dword [esp+04h]
L_123650:
        ret
section code
section code
        section vsc@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::equal_to( const equal_to<basic_string<char, char_traits<char>, allocator<char>>>&)
@std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qrx#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~:
L_123673:
        mov     eax,dword [esp+04h]
L_123674:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__rehash.qui virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__rehash(unsigned int)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@__rehash.qui:
        add     esp,0ffffff18h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_123697:
        mov     ebx,dword [esp+08h+0f8h]
        mov     eax,dword [esp+04h+0f8h]
        mov     dword [esp-0c8h+0f8h],eax
; Line 2403:     __get_db()->__invalidate_all(this); 
        mov     eax,dword [esp-0c8h+0f8h]
; Line 2815:     return __ptr_.second(); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d4h+0f8h],eax
        and     eax,eax
        je      L_123813
        mov     eax,dword [esp-0d4h+0f8h]
        add     eax,byte 04h
        jmp     L_123814
L_123813:
        mov     eax,dword [esp-0d4h+0f8h]
L_123814:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d8h+0f8h],eax
        and     eax,eax
        je      L_123832
        mov     eax,dword [esp-0d8h+0f8h]
        add     eax,byte 04h
        jmp     L_123833
L_123832:
        mov     eax,dword [esp-0d8h+0f8h]
L_123833:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2406:     __bucket_list_.reset(__nbc > 0 ? 
        mov     edi,dword [esp-0c8h+0f8h]
        cmp     ebx,byte 00h
        jbe     L_123856
        mov     eax,ebx
        mov     dword [esp-0d0h+0f8h],eax
        push    byte 00h
        push    eax
        push    ecx
        call    @std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@allocate.quipxv ; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>::allocate(unsigned int, void const *)
        mov     ecx,eax
        add     esp,byte 0ch
        jmp     L_123857
L_123856:
        mov     eax,ebx
        mov     dword [esp-0d0h+0f8h],eax
        xor     ecx,ecx
L_123857:
; Line 2840:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     esi,dword [eax]
; Line 2841:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     dword [eax],ecx
        and     esi,esi
        je      L_123837
; Line 2843:       __ptr_.second()(__tmp); 
        mov     eax,edi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0dch+0f8h],eax
        and     eax,eax
        je      L_123968
        mov     eax,dword [esp-0dch+0f8h]
        add     eax,byte 04h
        jmp     L_123969
L_123968:
        mov     eax,dword [esp-0dch+0f8h]
L_123969:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 809:         __alloc_traits::deallocate(__alloc(), __p, size()); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e0h+0f8h],eax
        and     eax,eax
        je      L_124016
        mov     eax,dword [esp-0e0h+0f8h]
        add     eax,byte 04h
        jmp     L_124017
L_124016:
        mov     eax,dword [esp-0e0h+0f8h]
L_124017:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_124096:
L_124081:
L_123984:
; Line 810:     } 
L_123951:
L_123837:
; Line 2844:   } 
L_123854:
; Line 2408:     __bucket_list_.get_deleter().size() = __nbc; 
        mov     eax,dword [esp-0c8h+0f8h]
; Line 2815:     return __ptr_.second(); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e4h+0f8h],eax
        and     eax,eax
        je      L_124196
        mov     eax,dword [esp-0e4h+0f8h]
        add     eax,byte 04h
        jmp     L_124197
L_124196:
        mov     eax,dword [esp-0e4h+0f8h]
L_124197:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0d0h+0f8h]
        mov     dword [ecx],eax
        cmp     ebx,byte 00h
        jbe     L_123700
; Line 2410:     { 
; Line 2411:         for (size_type __i = 0; __i < __nbc; ++__i) 
        xor     eax,eax
        cmp     eax,ebx
        jnc     L_123706
L_123704:
; Line 2412:             __bucket_list_[__i] = nullptr; 
        mov     ecx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [esp-0c8h+0f8h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+ecx*4],00h
L_123707:
        inc     eax
L_123705:
        cmp     eax,ebx
        jc      L_123704
L_123706:
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     ebx,dword [ecx]
        and     ebx,ebx
        je      L_123714
; Line 2416:         { 
; Line 2417:             size_type __chash = __constrain_hash(__cp->__hash(), __nbc); 
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [esp-0d0h+0f8h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,edx
        mov     edi,edx
        dec     edi
        and     edi,esi
        jne     L_124392
        mov     edx,esi
        dec     edx
        and     eax,edx
        jmp     L_124393
L_124392:
        cmp     eax,edx
        jc      L_124395
L_124394:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_124395:
L_124393:
; Line 119: } 
; Line 2418:             __bucket_list_[__chash] = __pp; 
        mov     edx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [esp-0c8h+0f8h]
        mov     esi,dword [esi]
; Line 2807:   } 
        mov     dword [esi+edx*4],ecx
        mov     dword [esp-0cch+0f8h],eax
; Line 2420:             for (__pp = __cp, __cp = __cp->__next_; __cp != nullptr; 
        mov     edi,ebx
        mov     esi,dword [ebx]
        and     esi,esi
        je      L_123720
L_123718:
; Line 2422:             { 
; Line 2423:                 __chash = __constrain_hash(__cp->__hash(), __nbc); 
        mov     eax,esi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [esp-0d0h+0f8h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_124476
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_124477
L_124476:
        cmp     eax,ecx
        jc      L_124479
L_124478:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_124479:
L_124477:
; Line 119: } 
        cmp     eax,dword [esp-0cch+0f8h]
        jne     L_123726
; Line 2425:                     __pp = __cp; 
        mov     edi,esi
        jmp     L_123729
L_123726:
; Line 2426:                 else 
; Line 2427:                 { 
; Line 2428:                     if (__bucket_list_[__chash] == nullptr) 
        mov     ebx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [esp-0c8h+0f8h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        cmp     dword [ecx+eax*4],byte 00h
        jne     L_123733
; Line 2429:                     { 
; Line 2430:                         __bucket_list_[__chash] = __pp; 
        mov     eax,edi
        mov     ecx,ebx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [esp-0c8h+0f8h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+ecx*4],eax
; Line 2431:                         __pp = __cp; 
        mov     edi,esi
; Line 2432:                         __phash = __chash; 
        mov     eax,ebx
        mov     dword [esp-0cch+0f8h],eax
; Line 2433:                     } 
        jmp     L_123738
L_123733:
; Line 2434:                     else 
; Line 2435:                     { 
; Line 2436:                         __next_pointer __np = __cp; 
        mov     ebp,esi
; Line 2437:                         for (; __np->__next_ != nullptr && 
        cmp     dword [ebp],byte 00h
        je      L_123744
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e8h+0f8h],eax
        and     eax,eax
        je      L_124622
        mov     eax,dword [esp-0e8h+0f8h]
        add     eax,byte 04h
        jmp     L_124623
L_124622:
        mov     eax,dword [esp-0e8h+0f8h]
L_124623:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     ecx,byte 08h
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_123744
L_123742:
L_123745:
        mov     ebp,dword [ebp]
L_123743:
        cmp     dword [ebp],byte 00h
        je      L_124867
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e8h+0f8h],eax
        and     eax,eax
        je      L_124913
        mov     eax,dword [esp-0e8h+0f8h]
        add     eax,byte 04h
        jmp     L_124914
L_124913:
        mov     eax,dword [esp-0e8h+0f8h]
L_124914:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     ecx,byte 08h
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_123742
L_124867:
L_123744:
; Line 2442:                         __pp->__next_ = __np->__next_; 
        mov     eax,dword [ebp]
        mov     dword [edi],eax
; Line 2443:                         __np->__next_ = __bucket_list_[__chash]->__next_; 
        mov     eax,ebx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [esp-0c8h+0f8h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        mov     eax,dword [eax]
        mov     dword [ebp],eax
; Line 2444:                         __bucket_list_[__chash]->__next_ = __cp; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     eax,dword [eax+ebx*4]
        mov     dword [eax],esi
; Line 2446:                     } 
L_123738:
; Line 2447:                 } 
L_123729:
; Line 2448:             } 
L_123721:
        mov     eax,edi
        mov     esi,dword [eax]
L_123719:
        and     esi,esi
        jne     L_123718
L_123720:
; Line 2449:         } 
L_123714:
; Line 2450:     } 
L_123700:
; Line 2451: } 
L_123698:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0e8h
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>( const basic_string<char, char_traits<char>, allocator<char>>&,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe90h
        push    ebx
        push    esi
        push    edi
L_125257:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0170h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-016ch],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-0168h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0164h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-07ch],eax
        mov     dword [ebp-07ch+04h],___cppexceptionhandle
        mov     dword [ebp-07ch+08h],esp
        mov     dword [ebp-07ch+0ch],ebp
        mov     dword [ebp-07ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-07ch+014h],00h
        lea     eax,[ebp-07ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2105:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_125367
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_125368
L_125367:
        mov     eax,dword [ebp-0124h]
L_125368:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebp-0168h]
        mov     edx,eax
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_125446
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+08h+04h]
        jmp     L_125447
L_125446:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_125447:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ebx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_125672
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_125673
L_125672:
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     edx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,edx
L_125673:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_125868
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edx+04h+04h]
        jmp     L_125869
L_125868:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edx+04h]
        shr     eax,01h
L_125869:
        add     eax,ebx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ecx
        push    eax
        push    ecx
        mov     dword [ebp-0128h],00h
        lea     eax,[ebp-0128h]
        mov     dword [ebp-012ch],eax
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_125399:
        mov     dword [ebp-0150h],ebx
        mov     eax,dword [ebp-0164h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0130h],eax
        and     eax,eax
        je      L_126078
        mov     eax,dword [ebp-0130h]
        add     eax,byte 04h
        jmp     L_126079
L_126078:
        mov     eax,dword [ebp-0130h]
L_126079:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 1207:     } 
        mov     dword [ebp-0154h],eax
        mov     byte [ebp-01h],00h
        mov     eax,dword [ebp-0154h]
        mov     dword [ebp-0158h],eax
        and     eax,eax
        je      L_125260
; Line 2111:     { 
; Line 2112:         __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0150h]
        mov     ecx,dword [ebp-0154h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_126131
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_126132
L_126131:
        cmp     eax,ecx
        jc      L_126134
L_126133:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_126134:
L_126132:
; Line 119: } 
        mov     dword [ebp-015ch],eax
; Line 2113:         __nd = __bucket_list_[__chash]; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0164h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_125264
; Line 2115:         { 
; Line 2116:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     ebx,dword [eax]
        and     ebx,ebx
        je      L_125270
        mov     ecx,dword [ebp-0150h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_126184
        mov     eax,dword [ebp-015ch]
        mov     dword [ebp-0160h],eax
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,ecx
        mov     edx,ecx
        dec     edx
        and     edx,esi
        jne     L_126232
        mov     ecx,esi
        dec     ecx
        and     eax,ecx
        jmp     L_126233
L_126232:
        cmp     eax,ecx
        jc      L_126235
L_126234:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_126235:
L_126233:
; Line 119: } 
        cmp     eax,dword [ebp-0160h]
        jne     L_125270
L_126184:
L_125268:
; Line 2119:             { 
; Line 2120:                 if (key_eq()(__nd->__upcast()->__value_, __k)) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0134h],eax
        and     eax,eax
        je      L_126282
        mov     eax,dword [ebp-0134h]
        add     eax,byte 04h
        jmp     L_126283
L_126282:
        mov     eax,dword [ebp-0134h]
L_126283:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-0168h]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_125279
L_125276:
; Line 2122:             } 
L_125271:
        mov     ebx,dword [ebx]
L_125269:
        and     ebx,ebx
        je      L_126415
        mov     ecx,dword [ebp-0150h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_125268
        mov     esi,dword [ebp-015ch]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_126463
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_126464
L_126463:
        cmp     eax,edx
        jc      L_126466
L_126465:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_126466:
L_126464:
; Line 119: } 
        cmp     eax,esi
        je      L_125268
L_126415:
L_125270:
; Line 2123:         } 
L_125264:
; Line 2124:     } 
L_125260:
; Line 2125:     { 
; Line 2127:         __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...); 
        mov     eax,dword [ebp-016ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0150h]
        push    eax
        mov     eax,dword [ebp-0164h]
        push    eax
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&, ..._Rest>(unsigned int,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<_Rest>, allocator<shared_ptr<_Rest>>>>&, )
        add     esp,byte 010h
        mov     dword [ebp-07ch+014h],01h
        mov     eax,dword [ebp-0158h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
        mov     eax,dword [ebp-0164h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mulss   xmm0,[eax+01ch]
        movss   [ebp-014ch],xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm1,xmm0
        movss   xmm0,[ebp-014ch]
        comiss  xmm0,xmm1
        jb      L_126484
        cmp     dword [ebp-0154h],byte 00h
        jne     L_125293
L_126484:
; Line 2132:         { 
; Line 2133:             rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc), 
        mov     ecx,dword [ebp-0158h]
        shl     ecx,01h
        mov     eax,dword [ebp-0158h]
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_126613
        mov     edx,eax
        dec     edx
        and     eax,edx
        je      L_126611
L_126613:
        xor     eax,eax
        jmp     L_126612
L_126611:
        mov     eax,01h
L_126612:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        sete    al
        and     eax,byte 01h
        add     eax,ecx
        mov     dword [ebp-054h],eax
        lea     ebx,[ebp-054h]
        mov     esi,dword [ebp-0164h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esi+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[esi+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [ebp-0148h]
        movss   xmm0,[ebp-0148h]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        mov     dword [ebp-058h],eax
        lea     eax,[ebp-058h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0138h],00h
        lea     ecx,[ebp-0138h]
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_126754:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        push    eax
        mov     eax,dword [ebp-0164h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::rehash(unsigned int)
        add     esp,byte 08h
; Line 2135:             __bc = bucket_count(); 
        mov     eax,dword [ebp-0164h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-013ch],eax
        and     eax,eax
        je      L_126818
        mov     eax,dword [ebp-013ch]
        add     eax,byte 04h
        jmp     L_126819
L_126818:
        mov     eax,dword [ebp-013ch]
L_126819:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
; Line 2136:             __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0150h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_126871
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_126872
L_126871:
        cmp     eax,ecx
        jc      L_126874
L_126873:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_126874:
L_126872:
; Line 119: } 
        mov     dword [ebp-015ch],eax
; Line 2137:         } 
L_125293:
        mov     ecx,dword [ebp-015ch]
        mov     eax,ecx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0164h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     ecx,dword [edx+ecx*4]
        and     ecx,ecx
        jne     L_125300
; Line 2141:         { 
; Line 2142:             __pn = __p1_.first().__ptr(); 
        mov     ecx,dword [ebp-0164h]
        add     ecx,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2143:             __h->__next_ = __pn->__next_; 
        mov     ebx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [edx],ebx
; Line 2144:             __pn->__next_ = __h.get()->__ptr(); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     dword [ecx],edx
; Line 2146:             __bucket_list_[__chash] = __pn; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0164h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+eax*4],ecx
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        cmp     dword [eax],byte 00h
        je      L_125310
; Line 2148:                 __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)] 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     eax,dword [eax]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_127434
        mov     ecx,ebx
        dec     ecx
        and     ecx,eax
        jmp     L_127435
L_127434:
        cmp     eax,ecx
        jc      L_127437
L_127436:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_127437:
        mov     ecx,eax
L_127435:
; Line 119: } 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0164h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     dword [eax+ecx*4],esi
L_125304:
; Line 2150:         } 
        jmp     L_125310
L_125300:
; Line 2151:         else 
; Line 2152:         { 
; Line 2153:             __h->__next_ = __pn->__next_; 
        mov     edx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [eax],edx
; Line 2154:             __pn->__next_ = static_cast<__next_pointer>(__h.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2592:   } 
        mov     dword [ecx],eax
; Line 2155:         } 
L_125310:
; Line 2156:         __nd = static_cast<__next_pointer>(__h.release()); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-040h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],00h
; Line 2611:   } 
; Line 2158:         ++size(); 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 014h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],eax
        mov     ecx,dword [eax]
        inc     ecx
        mov     eax,dword [ebp-050h]
        mov     dword [eax],ecx
; Line 2159:         __inserted = true; 
        mov     byte [ebp-01h],01h
; Line 2160:     } 
        mov     dword [ebp-07ch+014h],02h
        lea     esi,[ebp-040h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-040h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],ecx
        and     eax,eax
        je      L_127712
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0140h],eax
        and     eax,eax
        je      L_127810
        mov     eax,dword [ebp-0140h]
        add     eax,byte 04h
        jmp     L_127811
L_127810:
        mov     eax,dword [ebp-0140h]
L_127811:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*)
        add     esp,byte 08h
L_127712:
; Line 2619:   } 
L_127729:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bdtr.qv ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::~__hash_node_destructor()
        add     esp,byte 04h
L_127838:
L_127852:
L_127825:
L_127709:
L_125279:
; Line 440:     template<class _U1, class _U2, _EnableB< 
        lea     eax,[ebp-01h]
        push    eax
        mov     dword [ebp-08h],ebx
        lea     eax,[ebp-08h]
        mov     dword [ebp-07ch+014h],03h
        push    eax
        mov     eax,dword [ebp-0170h]
        push    eax
        call    @std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~rn1 ; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>&&, bool&)
        mov     dword [ebp-07ch+014h],04h
L_127886:
        add     esp,byte 0ch
        mov     eax,dword [ebp+08h]
; Line 2167: } 
L_125258:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffff84h
        dd      0400h
        dd      @.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~+0
        dd      0ffffffc0h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~+0
        dd      0fffffff8h
        dd      03h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<variant<shared_ptr<Token>, unsigned long long>>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_127892:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-048h+014h],02h
L_127926:
L_127940:
L_127893:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#variant.#shared_ptr.n0~uL~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator<variant<shared_ptr<Token>, unsigned long long>>::destroy(variant<shared_ptr<Token>, unsigned long long>*)
@std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~:
; Line 1931:     _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();} 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_127946:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        add     eax,byte 08h
        push    eax
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bdtr.qv ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::~__move_assignment()
        add     esp,byte 04h
L_127990:
L_127977:
L_128005:
L_128019:
L_127964:
L_127947:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator.#variant.#shared_ptr.5Token~uL~~@destroy.qp#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>(integral_constant<bool, bool=0>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
L_128026:
        mov     ebx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1798:                 __p->~_Tp(); 
        mov     eax,ebx
        add     eax,byte 014h
; Line 551:         __annotate_delete(); 
; Line 877:       __annotate_contiguous_container(data(), data() + capacity(), 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
L_128089:
; Line 879:     } 
L_128074:
; Line 553:         __get_db()->__erase_c(this); 
        push    eax
        call    @std@#__vector_base.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bdtr.qv ; std::__vector_base<shared_ptr<Token>, allocator<shared_ptr<Token>>>::~__vector_base()
        add     esp,byte 04h
L_128059:
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_128044:
; Line 1799:             } 
        mov     dword [ebp-048h+014h],01h
L_128410:
L_128027:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&&)
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_128416:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     cl,byte [ecx+04h]
        mov     byte [eax+04h+04h],cl
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_128417:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
L_128576:
        mov     esi,dword [ebp+018h]
        mov     ebx,dword [ebp+014h]
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
        mov     dword [ebp-04ch+014h],03h
L_128687:
L_128674:
        add     esp,byte 018h
L_128577:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@release.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::release()
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@release.qv:
L_128694:
        mov     ecx,dword [esp+04h]
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ecx]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
; Line 2611:   } 
L_128695:
        ret
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&)
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
L_128766:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [edx]
        mov     dword [eax],ecx
        mov     cl,byte [edx+04h]
        mov     byte [eax+04h],cl
L_128767:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
        push    edi
L_128774:
        mov     esi,dword [esp+0ch+040h]
        mov     eax,dword [esp+08h+040h]
        mov     edi,dword [esp+04h+040h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 940:             this->__assign_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ebx
        mov     eax,dword [edi]
        push    eax
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~.qr#__alt.ui?0?#shared_ptr.n0~~r#shared_ptr.n0~ ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt<unsigned int=0, shared_ptr<Token>, shared_ptr<Token>&>(__alt<unsigned int=0, shared_ptr<Token>>&, shared_ptr<Token>&)
        add     esp,byte 0ch
; Line 943:           }, 
L_128871:
; Line 493:     } 
L_128775:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_128942:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_128958:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_128972:
L_128943:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=0, LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_128978:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
L_128979:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
        push    edi
L_128986:
        mov     esi,dword [esp+0ch+040h]
        mov     eax,dword [esp+08h+040h]
        mov     edi,dword [esp+04h+040h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 940:             this->__assign_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    ebx
        mov     eax,dword [edi]
        push    eax
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt<unsigned int=1, unsigned long long, unsigned long long&>(__alt<unsigned int=1, unsigned long long>&, unsigned long long&)
        add     esp,byte 0ch
; Line 943:           }, 
L_129083:
; Line 493:     } 
L_128987:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_129154:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_129170:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_129184:
L_129155:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=1, LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_129190:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
L_129191:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_129198:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_129216:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_129199:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~:
; Line 510:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_129254:
        mov     esi,dword [esp+04h+03ch]
; Line 512:     return __base::__make_farray(__make_fdiagonal_impl<_Is, _Fp, _Vs...>()...); 
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-02ch+03ch],00h
        push    dword [esp-02ch+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-04h+03ch],eax
        lea     ebx,[esp-04h+03ch]
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-030h+03ch],00h
        push    dword [esp-030h+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-08h+03ch],eax
        lea     eax,[esp-08h+03ch]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_129319:
        lea     ecx,[esp-010h+03ch]
        mov     dword [esp-034h+03ch],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-034h+03ch]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-034h+03ch]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-010h+04h+03ch]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-010h+03ch]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+03ch]
L_129366:
; Line 513:   } 
L_129380:
L_129255:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv:
; Line 516:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_129386:
        mov     ebx,dword [esp+04h+010h]
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-04h+010h],00h
        push    dword [esp-04h+010h]
        lea     eax,[esp-0ch+014h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+010h]
; Line 521:   } 
L_129387:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__assignment.#__traits.#shared_ptr.5Token~uL~~rx#__copy_assignment.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__assignment.#__traits.#shared_ptr.n1~uL~~rx#__copy_assignment.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt_at<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __assignment<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(unsigned int, LambdaClosure2__ppEmbed_cpp__e1e322b3&, __assignment<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__assignment.#__traits.#shared_ptr.5Token~uL~~rx#__copy_assignment.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__assignment.#__traits.#shared_ptr.n1~uL~~rx#__copy_assignment.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 432: namespace __visitation { 
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_129394:
        mov     ebp,dword [esp+010h+03ch]
        mov     edi,dword [esp+0ch+03ch]
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-024h+03ch],00h
        push    dword [esp-024h+03ch]
        lea     eax,[esp-02ch+040h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    dword [esp+ebx*4-08h+048h]
        add     esp,byte 0ch
; Line 444:   } 
L_129395:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__generic_assign.rx#__copy_assignment.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qrx#__copy_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__generic_assign< const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>( const __copy_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__generic_assign.rx#__copy_assignment.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qrx#__copy_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~:
        add     esp,byte 0ffffffc8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_129514:
        mov     eax,dword [esp+08h+048h]
        mov     edi,dword [esp+04h+048h]
; Line 932:     if (this->valueless_by_exception() && __that.valueless_by_exception()) { 
        mov     ecx,edi
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [ecx+08h],byte 0ffffffffh
        jne     L_129571
        mov     ecx,0ffffffffh
        jmp     L_129572
L_129571:
        mov     ecx,dword [ecx+08h]
L_129572:
; Line 697:   } 
        cmp     ecx,byte 0ffffffffh
        sete    cl
        and     ecx,byte 01h
; Line 692:   } 
        mov     ebp,eax
        and     cl,cl
        je      L_129517
        mov     ebp,eax
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_129605
        mov     eax,0ffffffffh
        jmp     L_129606
L_129605:
        mov     eax,dword [eax+08h]
L_129606:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
        and     al,al
        jne     L_129522
; Line 934:     } else if (__that.valueless_by_exception()) { 
L_129517:
        mov     eax,ebp
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_129639
        mov     eax,0ffffffffh
        jmp     L_129640
L_129639:
        mov     eax,dword [eax+08h]
L_129640:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
        and     al,al
        je      L_129525
; Line 935:       this->__destroy(); 
        push    edi
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
; Line 936:     } else { 
        jmp     L_129530
L_129525:
; Line 937:       __visitation::__base::__visit_alt_at( 
        mov     eax,ebp
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_129674
        mov     esi,0ffffffffh
        jmp     L_129675
L_129674:
        mov     esi,dword [eax+08h]
L_129675:
; Line 697:   } 
        mov     eax,edi
        mov     dword [esp-04h+048h],eax
        lea     ebx,[esp-04h+048h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-030h+048h],00h
        push    dword [esp-030h+048h]
        lea     eax,[esp-038h+04ch]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure2__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure2__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-01ch+04h+048h],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-01ch+048h],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        call    dword [esp+esi*4-01ch+054h]
        add     esp,byte 0ch
; Line 444:   } 
; Line 945:     } 
L_129817:
L_129530:
L_129522:
; Line 946:   } 
L_129515:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, variant<shared_ptr<Token>, unsigned long long>&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, variant<shared_ptr<Token>, unsigned long long>&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_129823:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-064h],ecx
        and     ecx,ecx
        je      L_129861
        mov     ecx,dword [ebp-064h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        add     ecx,byte 08h
        add     eax,dword 08h
        push    eax
        push    ecx
        call    @std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qrx#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__move_assignment( const __move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
L_129861:
; Line 1877:         } 
L_129843:
        mov     dword [ebp-048h+014h],03h
L_129970:
L_129824:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~r#variant.#shared_ptr.n0~uL~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long, ..._Args>(allocator<unsigned long long>&, unsigned long long*, )
@std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_129976:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV ; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long, ..._Args>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*, )
        mov     dword [ebp-04ch+014h],03h
L_130039:
L_130026:
        add     esp,byte 0ch
L_129977:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.uL~puLe5_Args~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.uL~puLe5_Args~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLe5_Args~.qr#allocator.uL~puLV:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.uL~puLe5_Args~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_130046:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_130047:
        ret
section code
section code
        section vsc@std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::_ConstructTransaction::~_ConstructTransaction()
@std@#__split_buffer.uLr#allocator.uL~~@_ConstructTransaction@.bdtr.qv:
; Line 169:       ~_ConstructTransaction() { 
L_130054:
        mov     eax,dword [esp+04h]
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [eax]
        mov     eax,dword [eax+08h]
        mov     dword [eax],ecx
; Line 171:       } 
L_130055:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::construct<unsigned long long, unsigned long long>(allocator<unsigned long long>&, unsigned long long*, unsigned long long&&)
@std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_130062:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL ; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long, unsigned long long>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*, unsigned long long&&)
        mov     dword [ebp-04ch+014h],03h
L_130141:
L_130128:
        add     esp,byte 010h
L_130063:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.uL~puLuL~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.uL~puLuL~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#construct.uLuL~.qr#allocator.uL~puLRuL:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.uL~puLuL~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__split_buffer.uLr#allocator.uL~~@__destruct_at_end.qpuL#integral_constant.4booln0?0?~ virtual
        [bits 32]
; std::__split_buffer<unsigned long long, allocator<unsigned long long>&>::__destruct_at_end(unsigned long long*, integral_constant<bool, bool=0>)
@std@#__split_buffer.uLr#allocator.uL~~@__destruct_at_end.qpuL#integral_constant.4booln0?0?~:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
L_130148:
        mov     ebx,dword [esp+08h+034h]
        mov     esi,dword [esp+04h+034h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_130152
L_130151:
; Line 303:         __alloc_traits::destroy(__alloc(), __to_address(--__end_)); 
        sub     dword [esi+0ch],byte 08h
        mov     eax,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_130208
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_130209
L_130208:
        mov     eax,dword [esp-02ch+038h]
L_130209:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.uL~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<unsigned long long>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.uL~~@#destroy.uL~.qr#allocator.uL~puL ; std::allocator_traits<allocator<unsigned long long>>::destroy<unsigned long long>(allocator<unsigned long long>&, unsigned long long*)
        add     esp,byte 08h
L_130153:
        cmp     ebx,dword [esi+0ch]
        jne     L_130151
L_130152:
; Line 304: } 
L_130223:
L_130149:
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__impl.#shared_ptr.5Token~uL~~.qr#__impl.#shared_ptr.n0~uL~ virtual
        [bits 32]
; std::__variant_detail::__access::__base::__get_alt<unsigned int=1, __impl<shared_ptr<Token>, unsigned long long>&>(__impl<shared_ptr<Token>, unsigned long long>&)
@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__impl.#shared_ptr.5Token~uL~~.qr#__impl.#shared_ptr.n0~uL~:
; Line 413: struct __base { 
        push    ecx
L_130229:
        mov     eax,dword [esp+04h+04h]
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<bool>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
L_130230:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt<unsigned int=1, unsigned long long, unsigned long long&>(__alt<unsigned int=1, unsigned long long>&, unsigned long long&)
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL:
        add     esp,byte 0ffffffech
        push    ebx
        push    esi
L_130253:
        mov     eax,dword [esp+0ch+01ch]
        mov     edx,dword [esp+08h+01ch]
        mov     ecx,dword [esp+04h+01ch]
; Line 911:     if (this->index() == _Ip) { 
        mov     ebx,ecx
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [ebx+08h],byte 0ffffffffh
        jne     L_130285
        mov     ebx,0ffffffffh
        jmp     L_130286
L_130285:
        mov     ebx,dword [ebx+08h]
L_130286:
; Line 697:   } 
        cmp     ebx,byte 01h
        jne     L_130256
; Line 912:       __a.__value = _VSTD::forward<_Arg>(__arg); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [edx],eax
        mov     dword [edx+04h],ecx
; Line 913:     } else { 
        jmp     L_130261
L_130256:
; Line 914:       struct { 
        mov     dword [esp-08h+04h+01ch],00h
        mov     dword [esp-08h+01ch],00h
        mov     dword [esp-08h+01ch],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [esp-08h+04h+01ch],eax
; Line 924:       __impl(bool_constant<is_nothrow_constructible_v<_Tp, _Arg> || 
        mov     dword [esp-0ch+01ch],00h
        mov     byte [esp-0ch+01ch],01h
        push    dword [esp-0ch+01ch]
        lea     eax,[esp-08h+020h]
        push    eax
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~ ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt__assign_alt<unsigned int=1, unsigned long long, unsigned long long&>::::operator ()(integral_constant<bool, bool=1>) const 
        add     esp,byte 08h
; Line 926:     } 
L_130261:
; Line 927:   } 
L_130254:
        pop     esi
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL virtual
        [bits 32]
; std::allocator_traits<allocator<variant<shared_ptr<Token>, unsigned long long>>>::__construct<variant<shared_ptr<Token>, unsigned long long>, unsigned long long&>(integral_constant<bool, bool=1>, allocator<variant<shared_ptr<Token>, unsigned long long>>&, variant<shared_ptr<Token>, unsigned long long>*, unsigned long long&)
@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
L_130323:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-068h],ecx
        and     ecx,ecx
        je      L_130361
        mov     ecx,dword [ebp-068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@#in_place_index.ui?1?~]
        mov     eax,ecx
        add     eax,byte 08h
        push    eax
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.ui?1?ruL~.q#in_place_index_t.ui?1?~ruL ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base<unsigned int=1, unsigned long long&, >(in_place_index_t<unsigned int=1>, unsigned long long&)
        add     esp,byte 0ch
        mov     dword [ebp-048h+014h],01h
L_130361:
; Line 1877:         } 
L_130343:
        mov     dword [ebp-048h+014h],02h
L_130472:
L_130324:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#variant.#shared_ptr.5Token~uL~~~@#__construct.#variant.#shared_ptr.n0~uL~ruL~.q#integral_constant.4booln1?1?~r#allocator.#variant.#shared_ptr.n0~uL~~p#variant.#shared_ptr.n0~uL~ruL:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@visitor_struct@.bcall.q#shared_ptr.5Token~ virtual
        [bits 32]
; visitor_struct::operator ()(shared_ptr<Token>)
@visitor_struct@.bcall.q#shared_ptr.5Token~:
; Line 17: struct visitor_struct 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
        push    esi
        push    edi
L_130478:
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@visitor_struct@.bcall.q#shared_ptr.5Token~
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        mov     eax,dword [ebp+010h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     eax,byte 04h
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],01h
        mov     dword [ebp-05ch+014h],02h
        lea     ebx,[ebp-014h]
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebx
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],03h
; Line 1872:     __str.__zero(); 
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],04h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],05h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-05ch+014h],06h
        lea     eax,[ebp+010h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
L_130479:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@visitor_struct@.bcall.q#shared_ptr.5Token~ virtual
        [bits 32]
@.xc@visitor_struct@.bcall.q#shared_ptr.5Token~:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      02h
        dd      04h
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      010h
        dd      00h
        dd      06h
        dd      0400h
        dd      @.xt@#shared_ptr.5Token~+0
        dd      010h
        dd      00h
        dd      07h
        dd      00h
section code
section code
        section vsc@visitor_struct@.bcall.quL virtual
        [bits 32]
; visitor_struct::operator ()(unsigned long long)
@visitor_struct@.bcall.quL:
; Line 20:     std::string operator()(embed_value_type token) { return std::to_string(token); } 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
        push    esi
        push    edi
L_130602:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     edx,dword [ebp+010h+04h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@visitor_struct@.bcall.quL
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        push    edx
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@to_string.quL ; std::to_string(unsigned long long)
        mov     esi,eax
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],01h
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     ebx,esi
        add     ebx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,ebx
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,ebx
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],02h
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     dword [ebp-05ch+014h],03h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        mov     dword [ebp-05ch+014h],04h
        mov     eax,dword [ebp+08h]
L_130603:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@visitor_struct@.bcall.quL virtual
        [bits 32]
@.xc@visitor_struct@.bcall.quL:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ffffffech
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<EndToken, allocator<EndToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<EndToken, allocator<EndToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_130694:
; Line 2498:   template <bool _Dummy = true, 
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_130695:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~ virtual
        [bits 32]
; std::__shared_ptr_emplace<EndToken, allocator<EndToken>>::__shared_ptr_emplace(allocator<EndToken>)
@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
        push    esi
        push    edi
L_130854:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-04ch+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-04ch+014h],02h
        mov     dword [ebp-04ch+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     ecx,ebx
        add     ecx,byte 0ch
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-074h],ecx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bctr.q21@std@__value_init_tag ; std::__compressed_pair_elem<EndToken, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
        add     esp,byte 08h
L_131024:
        mov     dword [ebp-04ch+014h],04h
L_131038:
        mov     eax,ebx
L_130855:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@19@std@__shared_count virtual
        [bits 32]
@.xt@19@std@__shared_count:
        dd      @std@__shared_count@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      063h
        db      06fh
        db      075h
        db      06eh
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@24@std@__shared_weak_count virtual
        [bits 32]
@.xt@24@std@__shared_weak_count:
        dd      @std@__shared_weak_count@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      077h
        db      065h
        db      061h
        db      06bh
        db      05fh
        db      063h
        db      06fh
        db      075h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@19@std@__shared_count+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bctr.q#allocator.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#allocator.8EndToken~+0
        dd      0ch
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#allocator.8EndToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ virtual
        [bits 32]
; std::allocator<EndToken>::allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>, >( const allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>&)
@std@#allocator.8EndToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~:
; Line 1850:     template <class _Up> 
L_131044:
        mov     eax,dword [esp+04h]
L_131045:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<EndToken, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_131054:
        mov     eax,dword [esp+04h]
L_131055:
        ret
section code
section code
        section vsc@std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
; std::shared_ptr<EndToken>::__create_with_control_block<EndToken, __shared_ptr_emplace<EndToken, allocator<EndToken>>>(EndToken*, __shared_ptr_emplace<EndToken, allocator<EndToken>>*)
@std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_131062:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.8EndToken~@__enable_weak_this.qe ; std::shared_ptr<EndToken>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_131063:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.8EndToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_131108:
        mov     eax,dword [esp+04h]
L_131109:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~@.bdtr.qv:
L_131116:
L_131117:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~@.bdtr.qv:
L_131122:
L_131123:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<EndToken, allocator<EndToken>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.8EndToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv:
L_131128:
L_131129:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv:
L_131134:
L_131148:
L_131135:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<EndToken, allocator<EndToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
L_131154:
L_131181:
L_131168:
L_131196:
L_131155:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<EndToken, allocator<EndToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.8EndToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffb8h
        push    ebx
L_131202:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_131208
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_131321
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_131322
L_131321:
        mov     eax,dword [esp-048h+04ch]
L_131322:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.8EndToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<EndToken, allocator<EndToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_131367:
L_131352:
L_131337:
L_131304:
L_131208:
; Line 2619:   } 
L_131225:
L_131459:
L_131446:
L_131474:
L_131433:
L_131203:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.8EndToken~@.bdtr.qv virtual
        [bits 32]
; std::allocator<EndToken>::~allocator()
@std@#allocator.8EndToken~@.bdtr.qv:
L_131481:
L_131482:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<NumericToken, allocator<NumericToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_131487:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_131488:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.12NumericToken~~.qr#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<NumericToken>&>(tuple<allocator<NumericToken>&>&)
@std@#get.ui?0?r#allocator.12NumericToken~~.qr#tuple.r#allocator.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_131647:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_131648:
        ret
section code
section code
        section vsc@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::get<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&)
@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_131671:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_131672:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__shared_ptr_emplace<NumericToken, allocator<NumericToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<NumericToken>, basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_131695:
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-060h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-050h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-050h+014h],02h
        mov     dword [ebp-050h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     eax,dword [ebp-060h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        mov     dword [ebp-050h+014h],05h
L_131807:
L_131794:
L_131781:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~ ; std::forward_as_tuple<allocator<NumericToken>&>(allocator<NumericToken>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.12NumericToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<NumericToken>&>::tuple(tuple<allocator<NumericToken>&>&&)
        mov     dword [ebp-050h+014h],08h
L_131849:
L_131836:
L_131823:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::__compressed_pair<allocator<NumericToken>, NumericToken>::__compressed_pair<allocator<NumericToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<NumericToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],0ah
L_131865:
        mov     eax,ebx
L_131696:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.12NumericToken~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.12NumericToken~~:
        dd      @std@#tuple.r#allocator.12NumericToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.12NumericToken~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.12NumericToken~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.12NumericToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ virtual
        [bits 32]
; std::allocator<NumericToken>::allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>, >( const allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>&)
@std@#allocator.12NumericToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~:
; Line 1850:     template <class _Up> 
L_131871:
        mov     eax,dword [esp+04h]
L_131872:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_131881:
        mov     eax,dword [esp+04h]
L_131882:
        ret
section code
section code
        section vsc@std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
; std::shared_ptr<NumericToken>::__create_with_control_block<NumericToken, __shared_ptr_emplace<NumericToken, allocator<NumericToken>>>(NumericToken*, __shared_ptr_emplace<NumericToken, allocator<NumericToken>>*)
@std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
; Line 3858:     template<class _Yp, class _CntrlBlk> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_131889:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.12NumericToken~@__enable_weak_this.qe ; std::shared_ptr<NumericToken>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_131890:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.12NumericToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_131935:
        mov     eax,dword [esp+04h]
L_131936:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~@.bdtr.qv:
L_131943:
L_131944:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~@.bdtr.qv:
L_131949:
L_131950:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv:
L_131955:
L_131956:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv:
L_131961:
L_131975:
L_131962:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
L_131981:
L_132008:
L_131995:
L_132023:
L_131982:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.12NumericToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
L_132029:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_132035
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_132148
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_132149
L_132148:
        mov     eax,dword [esp-048h+04ch]
L_132149:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.12NumericToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<NumericToken, allocator<NumericToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_132194:
L_132179:
L_132164:
L_132131:
L_132035:
; Line 2619:   } 
L_132052:
L_132286:
L_132273:
L_132301:
L_132260:
L_132030:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.12NumericToken~@.bdtr.qv virtual
        [bits 32]
; std::allocator<NumericToken>::~allocator()
@std@#allocator.12NumericToken~@.bdtr.qv:
L_132308:
L_132309:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_132314:
; Line 2498:   template <bool _Dummy = true, 
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_132315:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.14CharacterToken~~.qr#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<CharacterToken>&>(tuple<allocator<CharacterToken>&>&)
@std@#get.ui?0?r#allocator.14CharacterToken~~.qr#tuple.r#allocator.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_132474:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_132475:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<CharacterToken>, basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
; Line 3569:     template <class ..._Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_132498:
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-060h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-050h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-050h+014h],02h
        mov     dword [ebp-050h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     eax,dword [ebp-060h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        mov     dword [ebp-050h+014h],05h
L_132610:
L_132597:
L_132584:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~ ; std::forward_as_tuple<allocator<CharacterToken>&>(allocator<CharacterToken>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.14CharacterToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<CharacterToken>&>::tuple(tuple<allocator<CharacterToken>&>&&)
        mov     dword [ebp-050h+014h],08h
L_132652:
L_132639:
L_132626:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::__compressed_pair<allocator<CharacterToken>, CharacterToken>::__compressed_pair<allocator<CharacterToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<CharacterToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],0ah
L_132668:
        mov     eax,ebx
L_132499:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.14CharacterToken~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.14CharacterToken~~:
        dd      @std@#tuple.r#allocator.14CharacterToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.14CharacterToken~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.14CharacterToken~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.14CharacterToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ virtual
        [bits 32]
; std::allocator<CharacterToken>::allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>, >( const allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>&)
@std@#allocator.14CharacterToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~:
; Line 1850:     template <class _Up> 
L_132674:
        mov     eax,dword [esp+04h]
L_132675:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_132684:
        mov     eax,dword [esp+04h]
L_132685:
        ret
section code
section code
        section vsc@std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
; std::shared_ptr<CharacterToken>::__create_with_control_block<CharacterToken, __shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>(CharacterToken*, __shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*)
@std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_132692:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.14CharacterToken~@__enable_weak_this.qe ; std::shared_ptr<CharacterToken>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_132693:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.14CharacterToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_132738:
        mov     eax,dword [esp+04h]
L_132739:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~@.bdtr.qv:
L_132746:
L_132747:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~@.bdtr.qv:
L_132752:
L_132753:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv:
L_132758:
L_132759:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv:
L_132764:
L_132778:
L_132765:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
L_132784:
L_132811:
L_132798:
L_132826:
L_132785:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffb8h
        push    ebx
L_132832:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_132838
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_132951
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_132952
L_132951:
        mov     eax,dword [esp-048h+04ch]
L_132952:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.14CharacterToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_132997:
L_132982:
L_132967:
L_132934:
L_132838:
; Line 2619:   } 
L_132855:
L_133089:
L_133076:
L_133104:
L_133063:
L_132833:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.14CharacterToken~@.bdtr.qv virtual
        [bits 32]
; std::allocator<CharacterToken>::~allocator()
@std@#allocator.14CharacterToken~@.bdtr.qv:
L_133111:
L_133112:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<StringToken, allocator<StringToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<StringToken, allocator<StringToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_133117:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_133118:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.11StringToken~~.qr#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<StringToken>&>(tuple<allocator<StringToken>&>&)
@std@#get.ui?0?r#allocator.11StringToken~~.qr#tuple.r#allocator.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_133277:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_133278:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__shared_ptr_emplace<StringToken, allocator<StringToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<StringToken>, basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_133301:
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-060h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-050h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-050h+014h],02h
        mov     dword [ebp-050h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     eax,dword [ebp-060h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        mov     dword [ebp-050h+014h],05h
L_133413:
L_133400:
L_133387:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~ ; std::forward_as_tuple<allocator<StringToken>&>(allocator<StringToken>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.11StringToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<StringToken>&>::tuple(tuple<allocator<StringToken>&>&&)
        mov     dword [ebp-050h+014h],08h
L_133455:
L_133442:
L_133429:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::__compressed_pair<allocator<StringToken>, StringToken>::__compressed_pair<allocator<StringToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<StringToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],0ah
L_133471:
        mov     eax,ebx
L_133302:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.11StringToken~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.11StringToken~~:
        dd      @std@#tuple.r#allocator.11StringToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.11StringToken~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.11StringToken~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.11StringToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ virtual
        [bits 32]
; std::allocator<StringToken>::allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>, >( const allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>&)
@std@#allocator.11StringToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~:
; Line 1850:     template <class _Up> 
L_133477:
        mov     eax,dword [esp+04h]
L_133478:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<StringToken, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_133487:
        mov     eax,dword [esp+04h]
L_133488:
        ret
section code
section code
        section vsc@std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
; std::shared_ptr<StringToken>::__create_with_control_block<StringToken, __shared_ptr_emplace<StringToken, allocator<StringToken>>>(StringToken*, __shared_ptr_emplace<StringToken, allocator<StringToken>>*)
@std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
; Line 3858:     template<class _Yp, class _CntrlBlk> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_133495:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.11StringToken~@__enable_weak_this.qe ; std::shared_ptr<StringToken>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_133496:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.11StringToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_133541:
        mov     eax,dword [esp+04h]
L_133542:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~@.bdtr.qv:
L_133549:
L_133550:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~@.bdtr.qv:
L_133555:
L_133556:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<StringToken, allocator<StringToken>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.11StringToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv:
L_133561:
L_133562:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv:
L_133567:
L_133581:
L_133568:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<StringToken, allocator<StringToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
L_133587:
L_133614:
L_133601:
L_133629:
L_133588:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<StringToken, allocator<StringToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.11StringToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
L_133635:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_133641
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_133754
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_133755
L_133754:
        mov     eax,dword [esp-048h+04ch]
L_133755:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.11StringToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<StringToken, allocator<StringToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_133800:
L_133785:
L_133770:
L_133737:
L_133641:
; Line 2619:   } 
L_133658:
L_133892:
L_133879:
L_133907:
L_133866:
L_133636:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.11StringToken~@.bdtr.qv virtual
        [bits 32]
; std::allocator<StringToken>::~allocator()
@std@#allocator.11StringToken~@.bdtr.qv:
L_133914:
L_133915:
        ret
section code
section code
        section vsc@std@#function.qpxc4bool.n0~@.bcall.xqpxcn0 virtual
        [bits 32]
; std::function<(*)(char const *, bool)>::operator ()(char const *, bool) const 
@std@#function.qpxc4bool.n0~@.bcall.xqpxcn0:
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_133920:
        mov     esi,dword [esp+04h+024h]
; Line 2473:     return __f_(_VSTD::forward<_ArgTypes>(__arg)...); 
        lea     ebx,[esp+08h+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        lea     edi,[esp+0ch+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1865:         if (__f_ == 0) 
        cmp     dword [esi+010h+08h],byte 00h
        jne     L_133926
; Line 1866:             __throw_bad_function_call(); 
        call    @std@__throw_bad_function_call.qv ; std::__throw_bad_function_call()
L_133926:
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        mov     eax,dword [esi+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+014h]
        add     esp,byte 0ch
; Line 1868:     } 
; Line 2474: } 
L_133921:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@TokenizerSettings@Instance.qv virtual
        [bits 32]
; TokenizerSettings::Instance()
@TokenizerSettings@Instance.qv:
; Line 33:     static std::shared_ptr<TokenizerSettings> Instance() 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_134013:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-058h],eax
        mov     dword [ebp-058h+04h],___cppexceptionhandle
        mov     dword [ebp-058h+08h],esp
        mov     dword [ebp-058h+0ch],ebp
        mov     dword [ebp-058h+010h],@.xc@TokenizerSettings@Instance.qv
        mov     dword [ebp-058h+014h],00h
        lea     eax,[ebp-058h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 35:         if (!instance) 
        mov     eax,dword [@TokenizerSettings@instance]
        and     eax,eax
        setne   al
        and     eax,byte 01h
        and     al,al
        jne     L_134016
; Line 36:             instance = std::shared_ptr<TokenizerSettings>(new TokenizerSettings()); 
        mov     dword [ebp-034h],00h
        lea     eax,[ebp-034h]
        push    eax
        push    byte 024h
        call    @.bnew.qui ; operator new(unsigned int)
        mov     edi,eax
        add     esp,byte 04h
        and     edi,edi
        je      L_134073
        mov     esi,edi
        push    edi
        push    ecx
        push    eax
        mov     edi,esi
        xor     eax,eax
        mov     ecx,09h
        cld
        rep stosd
        pop     eax
        pop     ecx
        pop     edi
        mov     eax,esi
        push    dword @TokenizerSettings@IsSymbolCharDefault.qpxc4bool ; TokenizerSettings::IsSymbolCharDefault(char const *, bool)
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qpqpxcn0.n0 ; std::function<(*)(char const *, bool)>::function<(*)(*)(char const *, bool), void, >((*)(*)(char const *, bool))
        add     esp,byte 08h
        mov     dword [ebp-058h+014h],01h
        mov     byte [esi+01ch],00h
        mov     dword [esi+020h],06h
L_134073:
        push    edi
        lea     eax,[ebp-030h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat ; std::shared_ptr<TokenizerSettings>::shared_ptr<TokenizerSettings, >(TokenizerSettings*, std::shared_ptr<TokenizerSettings>::__nat)
        add     esp,byte 0ch
        mov     dword [ebp-058h+014h],02h
        push    eax
        push    dword @TokenizerSettings@instance
        call    @std@#shared_ptr.17TokenizerSettings~@.basn.qR#shared_ptr.n0~ ; std::shared_ptr<TokenizerSettings>::operator =(shared_ptr<TokenizerSettings>&&)
        mov     dword [ebp-058h+014h],03h
        lea     eax,[ebp-030h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv ; std::shared_ptr<TokenizerSettings>::~shared_ptr()
        add     esp,dword 04h+08h
L_134103:
L_134016:
        mov     eax,dword [00h+@TokenizerSettings@instance]
        mov     dword [ebx],eax
        mov     eax,dword [04h+@TokenizerSettings@instance]
        mov     dword [ebx+04h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [ebx+04h],byte 00h
        je      L_134109
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [ebx+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_134156:
; Line 3478:     } 
L_134141:
L_134109:
; Line 4064: } 
        mov     dword [ebp-058h+014h],04h
        mov     eax,dword [ebp+08h]
; Line 38:     } 
L_134014:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@TokenizerSettings@Instance.qv virtual
        [bits 32]
@.xc@TokenizerSettings@Instance.qv:
        dd      00h
        dd      0ffffffa8h
        dd      0400h
        dd      @.xt@#shared_ptr.17TokenizerSettings~+0
        dd      0ffffffd0h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#function.qpxc4bool.n0~@.bctr.qrx#function.qpxcn0.n0~ virtual
        [bits 32]
; std::function<(*)(char const *, bool)>::function( const function<(*)(char const *, bool)>&)
@std@#function.qpxc4bool.n0~@.bctr.qrx#function.qpxcn0.n0~:
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_134180:
        mov     ecx,dword [esp+08h+010h]
        mov     ebx,dword [esp+04h+010h]
        mov     eax,ebx
        add     eax,byte 08h
        mov     edx,ecx
        add     edx,byte 08h
; Line 1794:         if (__f.__f_ == 0) 
        mov     ecx,edx
        cmp     dword [edx+010h],byte 00h
        jne     L_134238
; Line 1795:             __f_ = 0; 
        mov     dword [ebx+010h+08h],00h
        jmp     L_134241
L_134238:
; Line 1796:         else if ((void*)__f.__f_ == &__f.__buf_) 
        mov     esi,ecx
        cmp     dword [edx+010h],esi
        jne     L_134244
; Line 1797:         { 
; Line 1798:             __f_ = __as_base(&__buf_); 
; Line 1750:         return reinterpret_cast<__func*>(p); 
; Line 1751:     } 
        mov     dword [ebx+010h+08h],eax
; Line 1799:             __f.__f_->__clone(__f_); 
        push    eax
        mov     eax,dword [edx+010h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+08h]
        add     esp,byte 08h
; Line 1800:         } 
        jmp     L_134249
L_134244:
; Line 1801:         else 
; Line 1802:             __f_ = __f.__f_->__clone(); 
        mov     eax,dword [edx+010h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+04h]
        add     esp,byte 04h
        mov     dword [ebx+010h+08h],eax
L_134249:
L_134241:
; Line 1803:     } 
        mov     eax,ebx
L_134181:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#function.qpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::function<(*)(char const *, bool)>::~function()
@std@#function.qpxc4bool.n0~@.bdtr.qv:
L_134306:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        add     ecx,byte 08h
; Line 1825:         if ((void*)__f_ == &__buf_) 
        mov     edx,ecx
        cmp     dword [eax+010h+08h],edx
        jne     L_134312
; Line 1826:             __f_->destroy(); 
        mov     eax,dword [eax+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+0ch]
        add     esp,byte 04h
        jmp     L_134315
L_134312:
; Line 1827:         else if (__f_) 
        cmp     dword [eax+010h+08h],byte 00h
        je      L_134318
; Line 1828:             __f_->destroy_deallocate(); 
        mov     eax,dword [eax+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+010h]
        add     esp,byte 04h
L_134318:
L_134315:
; Line 1829:     } 
L_134350:
L_134337:
L_134378:
L_134365:
L_134393:
L_134307:
        ret
section code
section code
        section vsc@std@#shared_ptr.17TokenizerSettings~@.bdtr.qv virtual
        [bits 32]
; std::shared_ptr<TokenizerSettings>::~shared_ptr()
@std@#shared_ptr.17TokenizerSettings~@.bdtr.qv:
        push    ebx
L_134399:
        mov     ecx,dword [esp+04h+04h]
; Line 4209:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_134402
; Line 4210:         __cntrl_->__release_shared(); 
        mov     ebx,dword [ecx+04h]
; Line 3485:       if (__shared_count::__release_shared()) 
        push    ebx
        call    @std@__shared_count@__release_shared.qv ; std::__shared_count::__release_shared()
        add     esp,byte 04h
        and     al,al
        je      L_134410
; Line 3486:         __release_weak(); 
        push    ebx
        call    @std@__shared_weak_count@__release_weak.qv ; std::__shared_weak_count::__release_weak()
        add     esp,byte 04h
L_134410:
; Line 3487:     } 
L_134427:
L_134402:
; Line 4211: } 
L_134400:
        pop     ebx
        ret
section code
section code
        section vsc@std@__function@#__value_func.qpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::__function::__value_func<(*)(char const *, bool)>::~__value_func()
@std@__function@#__value_func.qpxc4bool.n0~@.bdtr.qv:
L_134433:
        mov     eax,dword [esp+04h]
; Line 1825:         if ((void*)__f_ == &__buf_) 
        mov     edx,eax
        cmp     dword [eax+010h],edx
        jne     L_134436
; Line 1826:             __f_->destroy(); 
        mov     eax,dword [eax+010h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+0ch]
        add     esp,byte 04h
        jmp     L_134439
L_134436:
; Line 1827:         else if (__f_) 
        cmp     dword [eax+010h],byte 00h
        je      L_134442
; Line 1828:             __f_->destroy_deallocate(); 
        mov     eax,dword [eax+010h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+010h]
        add     esp,byte 04h
L_134442:
L_134439:
; Line 1829:     } 
L_134462:
L_134434:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_134468:
; Line 2498:   template <bool _Dummy = true, 
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_134469:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<TemplatedIdentifierToken<kw>>&>(tuple<allocator<TemplatedIdentifierToken<kw>>&>&)
@std@#get.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_134628:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_134629:
        ret
section code
section code
        section vsc@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
; std::get<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&)
@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_134652:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_134653:
        ret
section code
section code
        section vsc@std@#get.ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
; std::get<unsigned int=1, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&)
@std@#get.ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ecx
L_134676:
        mov     eax,dword [esp+04h+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        and     eax,eax
        je      L_134681
        add     eax,byte 04h
        jmp     L_134682
L_134681:
L_134682:
        push    eax
        call    @std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
L_134677:
        pop     ecx
        ret
section code
section code
        section vsc@std@#get.ui?2?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
; std::get<unsigned int=2, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&)
@std@#get.ui?2?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ecx
L_134686:
        mov     eax,dword [esp+04h+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        and     eax,eax
        je      L_134691
        add     eax,byte 08h
        jmp     L_134692
L_134691:
L_134692:
        push    eax
        call    @std@#__tuple_leaf.ui?2?r4booln0?0?~@get.qv ; std::__tuple_leaf<unsigned int=2, bool&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
L_134687:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, >(allocator<TemplatedIdentifierToken<kw>>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
; Line 3569:     template <class ..._Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_134696:
        mov     eax,dword [ebp+018h]
        mov     dword [ebp-070h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-078h],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-074h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-058h],eax
        mov     dword [ebp-058h+04h],___cppexceptionhandle
        mov     dword [ebp-058h+08h],esp
        mov     dword [ebp-058h+0ch],ebp
        mov     dword [ebp-058h+010h],@.xc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1
        mov     dword [ebp-058h+014h],00h
        lea     eax,[ebp-058h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-058h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-058h+014h],02h
        mov     dword [ebp-058h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffff4h
        mov     esi,esp
        mov     eax,dword [ebp-070h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-078h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-074h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
        add     esp,byte 010h
        mov     dword [ebp-058h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&&)
        mov     dword [ebp-058h+014h],05h
L_134840:
L_134854:
L_134868:
L_134827:
L_134814:
        add     esp,byte 08h
        mov     dword [ebp-058h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~ ; std::forward_as_tuple<allocator<TemplatedIdentifierToken<kw>>&>(allocator<TemplatedIdentifierToken<kw>>&)
        add     esp,byte 08h
        mov     dword [ebp-058h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~ ; std::tuple<allocator<TemplatedIdentifierToken<kw>>&>::tuple(tuple<allocator<TemplatedIdentifierToken<kw>>&>&&)
        mov     dword [ebp-058h+014h],08h
L_134910:
L_134897:
L_134884:
        add     esp,byte 08h
        mov     dword [ebp-058h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ ; std::__compressed_pair<allocator<TemplatedIdentifierToken<kw>>, TemplatedIdentifierToken<kw>>::__compressed_pair<allocator<TemplatedIdentifierToken<kw>>&, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, >(std::piecewise_construct_t, tuple<allocator<TemplatedIdentifierToken<kw>>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>)
        add     esp,byte 018h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-058h+014h],0ah
L_134926:
        mov     eax,ebx
L_134697:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?2?r4booln0?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?2?r4booln0?0?~:
        dd      @std@#__tuple_leaf.ui?2?r4booln0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~+0
        dd      04h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?2?r4booln0?0?~+0
        dd      08h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~ virtual
        [bits 32]
@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~:
        dd      @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~:
        dd      @std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
        dd      00h
        dd      0ffffffa8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~+0
        dd      0fffffff0h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.#TemplatedIdentifierToken.2kw~~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.#TemplatedIdentifierToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~ virtual
        [bits 32]
; std::allocator<TemplatedIdentifierToken<kw>>::allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>, >( const allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>&)
@std@#allocator.#TemplatedIdentifierToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~:
; Line 1850:     template <class _Up> 
L_134932:
        mov     eax,dword [esp+04h]
L_134933:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_134942:
        mov     eax,dword [esp+04h]
L_134943:
        ret
section code
section code
        section vsc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~ virtual
        [bits 32]
; std::shared_ptr<TemplatedIdentifierToken<kw>>::__create_with_control_block<TemplatedIdentifierToken<kw>, __shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>(TemplatedIdentifierToken<kw>*, __shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*)
@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_134950:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@__enable_weak_this.qe ; std::shared_ptr<TemplatedIdentifierToken<kw>>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_134951:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@#__create_with_control_block.#TemplatedIdentifierToken.n0~#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~.qp#TemplatedIdentifierToken.n0~p#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_134996:
        mov     eax,dword [esp+04h]
L_134997:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~@.bdtr.qv:
L_135004:
L_135005:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~@.bdtr.qv:
L_135010:
L_135011:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~i?0?4bool?0?~@.bdtr.qv:
L_135016:
L_135017:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv:
L_135022:
L_135036:
L_135023:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv:
L_135042:
L_135069:
L_135056:
L_135084:
L_135043:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.n0~#allocator.#TemplatedIdentifierToken.n0~~~~~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffb8h
        push    ebx
L_135090:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_135096
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_135209
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_135210
L_135209:
        mov     eax,dword [esp-048h+04ch]
L_135210:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_135255:
L_135240:
L_135225:
L_135192:
L_135096:
; Line 2619:   } 
L_135113:
L_135347:
L_135334:
L_135362:
L_135321:
L_135091:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.#TemplatedIdentifierToken.2kw~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<TemplatedIdentifierToken<kw>>::~allocator()
@std@#allocator.#TemplatedIdentifierToken.2kw~~@.bdtr.qv:
L_135369:
L_135370:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_135375:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_135376:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~~.qr#tuple.r#allocator.#TemplatedKeywordToken.n0~~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<TemplatedKeywordToken<kw>>&>(tuple<allocator<TemplatedKeywordToken<kw>>&>&)
@std@#get.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~~.qr#tuple.r#allocator.#TemplatedKeywordToken.n0~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_135535:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_135536:
        ret
section code
section code
        section vsc@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
; std::get<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>&)
@std@#get.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_135559:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_135560:
        ret
section code
section code
        section vsc@std@#get.ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
; std::get<unsigned int=1, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>&)
@std@#get.ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ecx
L_135583:
        mov     eax,dword [esp+04h+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        and     eax,eax
        je      L_135588
        add     eax,byte 04h
        jmp     L_135589
L_135588:
L_135589:
        push    eax
        call    @std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
L_135584:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, >(allocator<TemplatedKeywordToken<kw>>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff94h
        push    ebx
        push    esi
        push    edi
L_135593:
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-06ch],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-068h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-054h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-054h+014h],02h
        mov     dword [ebp-054h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffff8h
        mov     esi,esp
        mov     eax,dword [ebp-06ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-0ch]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
        add     esp,byte 0ch
        mov     dword [ebp-054h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>&&)
        mov     dword [ebp-054h+014h],05h
L_135721:
L_135735:
L_135708:
L_135695:
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~ ; std::forward_as_tuple<allocator<TemplatedKeywordToken<kw>>&>(allocator<TemplatedKeywordToken<kw>>&)
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedKeywordToken.n0~~~ ; std::tuple<allocator<TemplatedKeywordToken<kw>>&>::tuple(tuple<allocator<TemplatedKeywordToken<kw>>&>&&)
        mov     dword [ebp-054h+014h],08h
L_135777:
L_135764:
L_135751:
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ ; std::__compressed_pair<allocator<TemplatedKeywordToken<kw>>, TemplatedKeywordToken<kw>>::__compressed_pair<allocator<TemplatedKeywordToken<kw>>&, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, >(std::piecewise_construct_t, tuple<allocator<TemplatedKeywordToken<kw>>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>)
        add     esp,byte 014h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-054h+014h],0ah
L_135793:
        mov     eax,ebx
L_135594:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
@.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
        dd      @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~:
        dd      @std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~+0
        dd      0fffffff4h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.#TemplatedKeywordToken.2kw~~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.#TemplatedKeywordToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~ virtual
        [bits 32]
; std::allocator<TemplatedKeywordToken<kw>>::allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>, >( const allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>&)
@std@#allocator.#TemplatedKeywordToken.2kw~~@.bctr.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qrx#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~:
; Line 1850:     template <class _Up> 
L_135799:
        mov     eax,dword [esp+04h]
L_135800:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_135809:
        mov     eax,dword [esp+04h]
L_135810:
        ret
section code
section code
        section vsc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~ virtual
        [bits 32]
; std::shared_ptr<TemplatedKeywordToken<kw>>::__create_with_control_block<TemplatedKeywordToken<kw>, __shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>(TemplatedKeywordToken<kw>*, __shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*)
@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~:
; Line 3858:     template<class _Yp, class _CntrlBlk> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_135817:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.#TemplatedKeywordToken.2kw~~@__enable_weak_this.qe ; std::shared_ptr<TemplatedKeywordToken<kw>>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_135818:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@#__create_with_control_block.#TemplatedKeywordToken.n0~#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~.qp#TemplatedKeywordToken.n0~p#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_135863:
        mov     eax,dword [esp+04h]
L_135864:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~@.bdtr.qv:
L_135871:
L_135872:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~@.bdtr.qv:
L_135877:
L_135878:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~i?0?4bool?0?~@.bdtr.qv:
L_135883:
L_135884:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@.bdtr.qv:
L_135889:
L_135903:
L_135890:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>*, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv:
L_135909:
L_135936:
L_135923:
L_135951:
L_135910:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>, __allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.n0~#allocator.#TemplatedKeywordToken.n0~~~~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
L_135957:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_135963
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_136076
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_136077
L_136076:
        mov     eax,dword [esp-048h+04ch]
L_136077:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_136122:
L_136107:
L_136092:
L_136059:
L_135963:
; Line 2619:   } 
L_135980:
L_136214:
L_136201:
L_136229:
L_136188:
L_135958:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.#TemplatedKeywordToken.2kw~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<TemplatedKeywordToken<kw>>::~allocator()
@std@#allocator.#TemplatedKeywordToken.2kw~~@.bdtr.qv:
L_136236:
L_136237:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~ virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>>::unique_ptr<bool=1, void, >(__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>&&)
@std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bctr.4bool?1?v~.qp#__shared_ptr_emplace.n0#allocator.n0~~R#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_136242:
; Line 2498:   template <bool _Dummy = true, 
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_136243:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#get.ui?0?r#allocator.10ErrorToken~~.qr#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<ErrorToken>&>(tuple<allocator<ErrorToken>&>&)
@std@#get.ui?0?r#allocator.10ErrorToken~~.qr#tuple.r#allocator.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_136402:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_136403:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>::__shared_ptr_emplace<basic_string<char, char_traits<char>, allocator<char>>&, >(allocator<ErrorToken>, basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
; Line 3569:     template <class ..._Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_136426:
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-060h],eax
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-050h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-050h+014h],02h
        mov     dword [ebp-050h+014h],03h
        mov     ecx,@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        add     esp,byte 0fffffffch
        mov     esi,esp
        mov     eax,dword [ebp-060h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ ; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    esi
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        mov     dword [ebp-050h+014h],05h
L_136538:
L_136525:
L_136512:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        add     esp,byte 0fffffffch
        mov     esi,esp
        lea     eax,[ebp+0ch]
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~ ; std::forward_as_tuple<allocator<ErrorToken>&>(allocator<ErrorToken>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],07h
        push    eax
        push    esi
        call    @std@#tuple.r#allocator.10ErrorToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<ErrorToken>&>::tuple(tuple<allocator<ErrorToken>&>&&)
        mov     dword [ebp-050h+014h],08h
L_136580:
L_136567:
L_136554:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],09h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::__compressed_pair<allocator<ErrorToken>, ErrorToken>::__compressed_pair<allocator<ErrorToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<ErrorToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],0ah
L_136596:
        mov     eax,ebx
L_136427:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~:
        dd      @std@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.r#allocator.10ErrorToken~~ virtual
        [bits 32]
@.xt@#tuple.r#allocator.10ErrorToken~~:
        dd      @std@#tuple.r#allocator.10ErrorToken~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~~.q#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.10ErrorToken~~+0
        dd      0fffffffch
        dd      07h
        dd      08h
        dd      0400h
        dd      @.xt@#allocator.10ErrorToken~+0
        dd      0ch
        dd      00h
        dd      0ah
        dd      00h
section code
section code
        section vsc@std@#allocator.10ErrorToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~ virtual
        [bits 32]
; std::allocator<ErrorToken>::allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>, >( const allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>&)
@std@#allocator.10ErrorToken~@.bctr.#__shared_ptr_emplace.n0#allocator.n0~~~.qrx#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~:
; Line 1850:     template <class _Up> 
L_136602:
        mov     eax,dword [esp+04h]
L_136603:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_136612:
        mov     eax,dword [esp+04h]
L_136613:
        ret
section code
section code
        section vsc@std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
; std::shared_ptr<ErrorToken>::__create_with_control_block<ErrorToken, __shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>(ErrorToken*, __shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*)
@std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
L_136620:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 3862:         shared_ptr<_Tp> __r; 
        mov     dword [ebp-08h],00h
        mov     dword [ebp+04h-08h],00h
; Line 3918: } 
        mov     dword [ebp-050h+014h],01h
; Line 3863:         __r.__ptr_ = __p; 
        mov     dword [ebp-08h],ecx
; Line 3864:         __r.__cntrl_ = __cntrl; 
        mov     dword [ebp-08h+04h],eax
; Line 3865:         __r.__enable_weak_this(__r.__ptr_, __r.__ptr_); 
        mov     eax,dword [ebp-08h]
        push    eax
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#shared_ptr.10ErrorToken~@__enable_weak_this.qe ; std::shared_ptr<ErrorToken>::__enable_weak_this(...)
        add     esp,byte 0ch
        mov     eax,dword [ebp-08h]
        mov     dword [ebx],eax
        mov     eax,dword [ebp+04h-08h]
        mov     dword [ebx+04h],eax
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [ebp-08h],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [ebp+04h-08h],00h
; Line 4089: } 
        mov     dword [ebp-050h+014h],02h
        mov     eax,dword [ebp+08h]
; Line 3867:     } 
L_136621:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~ virtual
        [bits 32]
@.xc@std@#shared_ptr.10ErrorToken~@#__create_with_control_block.n0#__shared_ptr_emplace.n0#allocator.n0~~~.qpn0p#__shared_ptr_emplace.n0#allocator.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_136666:
        mov     eax,dword [esp+04h]
L_136667:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~@.bdtr.qv:
L_136674:
L_136675:
        ret
section code
section code
        section vsc@std@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>::~allocator()
@std@#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~@.bdtr.qv:
L_136680:
L_136681:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~i?0?4bool?0?~@.bdtr.qv:
L_136686:
L_136687:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@.bdtr.qv:
L_136692:
L_136706:
L_136693:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>*, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
L_136712:
L_136739:
L_136726:
L_136754:
L_136713:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>, __allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>>::~unique_ptr()
@std@#unique_ptr.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~#__allocator_destructor.#allocator.#__shared_ptr_emplace.n0#allocator.n0~~~~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffb8h
        push    ebx
L_136760:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_136766
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_136879
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_136880
L_136879:
        mov     eax,dword [esp-048h+04ch]
L_136880:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__shared_ptr_emplace.10ErrorToken#allocator.n0~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_136925:
L_136910:
L_136895:
L_136862:
L_136766:
; Line 2619:   } 
L_136783:
L_137017:
L_137004:
L_137032:
L_136991:
L_136761:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#allocator.10ErrorToken~@.bdtr.qv virtual
        [bits 32]
; std::allocator<ErrorToken>::~allocator()
@std@#allocator.10ErrorToken~@.bdtr.qv:
L_137039:
L_137040:
        ret
section code
section code
        section vsc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~ virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>>::__destruct_at_begin(char**, integral_constant<bool, bool=1>)
@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_137045:
        mov     eax,dword [ebp+0ch]
        mov     ecx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 294:     __begin_ = __new_begin; 
        mov     dword [ecx+08h],eax
; Line 295: } 
        mov     dword [ebp-048h+014h],01h
L_137063:
L_137046:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~ virtual
        [bits 32]
@.xc@std@#__split_buffer.pc#allocator.pc~~@__destruct_at_begin.qppc#integral_constant.4booln0?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      010h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#move.ppcppc~.qppcppcppc virtual
        [bits 32]
; std::move<char**, char**>(char**, char**, char**)
@std@#move.ppcppc~.qppcppcppc:
; Line 1889: inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_137069:
        mov     eax,dword [esp+0ch+028h]
        mov     ebx,dword [esp+08h+028h]
        mov     ecx,dword [esp+04h+028h]
; Line 1893:     return _VSTD::__move(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1867:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     ecx,ebx
        je      L_137077
L_137075:
; Line 1868:         *__result = _VSTD::move(*__first); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
L_137078:
        add     ecx,byte 04h
        add     eax,byte 04h
L_137076:
        cmp     ecx,ebx
        jne     L_137075
L_137077:
; Line 1870: } 
; Line 1894: } 
L_137070:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::__construct_at_end<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
@std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
        push    esi
L_137165:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 273:     _ConstructTransaction __tx(&this->__end_, std::distance(__first, __last)); 
        mov     esi,ebx
        add     esi,byte 0ch
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator( const move_iterator<char**>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+0ch]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator( const move_iterator<char**>&)
        add     esp,byte 08h
        mov     dword [ebp-054h+014h],01h
        call    @std@#distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ ; std::distance<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
        add     esp,byte 08h
        mov     ecx,dword [esi]
        mov     dword [ebp-0ch],ecx
        shl     eax,02h
        add     eax,ecx
        mov     dword [ebp+04h-0ch],eax
        mov     dword [ebp+08h-0ch],esi
; Line 168:       } 
        mov     dword [ebp-054h+014h],02h
; Line 274:     for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, ++__first) { 
        mov     edx,dword [ebp-0ch+04h]
        lea     eax,[ebp-0ch]
        cmp     dword [ebp-0ch],edx
        je      L_137170
L_137168:
; Line 275:         __alloc_traits::construct(this->__alloc(), 
        mov     ecx,dword [ebp+0ch]
        push    ecx
        mov     eax,dword [eax]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-064h],eax
        and     eax,eax
        je      L_137262
        mov     eax,dword [ebp-064h]
        add     eax,byte 04h
        jmp     L_137263
L_137262:
        mov     eax,dword [ebp-064h]
L_137263:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
        add     esp,byte 0ch
; Line 277:     } 
L_137171:
        lea     eax,[ebp-0ch]
        add     dword [ebp-0ch],byte 04h
        add     dword [ebp+0ch],byte 04h
L_137169:
        mov     edx,dword [ebp-0ch+04h]
        cmp     dword [ebp-0ch],edx
        jne     L_137168
L_137170:
; Line 278: } 
        mov     dword [ebp-054h+014h],03h
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [ebp-0ch]
        mov     eax,dword [ebp+08h-0ch]
        mov     dword [eax],ecx
; Line 171:       } 
L_137295:
L_137309:
L_137323:
L_137166:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@61@std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction virtual
        [bits 32]
@.xt@61@std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction:
        dd      @std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      05fh
        db      043h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      054h
        db      072h
        db      061h
        db      06eh
        db      073h
        db      061h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ virtual
        [bits 32]
@.xc@std@#__split_buffer.pcr#allocator.pc~~@#__construct_at_end.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @.xt@61@std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction+0
        dd      0fffffff4h
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~ virtual
        [bits 32]
; std::move_iterator<char**>::move_iterator(move_iterator<char**>&&)
@std@#move_iterator.ppc~@.bctr.qR#move_iterator.ppc~:
L_137329:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_137330:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc virtual
        [bits 32]
; std::allocator_traits<allocator<char*>>::construct<char*, char*>(allocator<char*>&, char**, char*&&)
@std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_137337:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc ; std::allocator_traits<allocator<char*>>::__construct<char*, char*>(integral_constant<bool, bool=1>, allocator<char*>&, char**, char*&&)
        mov     dword [ebp-04ch+014h],03h
L_137416:
L_137403:
        add     esp,byte 010h
L_137338:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.pc~ppcpc~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.pc~ppcpc~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.pc~~@#construct.pcpc~.qr#allocator.pc~ppcRpc:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.pc~ppcpc~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#move_backward.ppcppc~.qppcppcppc virtual
        [bits 32]
; std::move_backward<char**, char**>(char**, char**, char**)
@std@#move_backward.ppcppc~.qppcppcppc:
; Line 1928: inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_137423:
        mov     eax,dword [esp+0ch+028h]
        mov     ebx,dword [esp+08h+028h]
        mov     ecx,dword [esp+04h+028h]
; Line 1933:     return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result)); 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1903:     while (__first != __last) 
        cmp     ecx,ebx
        je      L_137430
L_137429:
; Line 1904:         *--__result = _VSTD::move(*--__last); 
        sub     ebx,byte 04h
        mov     edx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        sub     eax,byte 04h
        mov     dword [eax],edx
L_137431:
        cmp     ecx,ebx
        jne     L_137429
L_137430:
; Line 1906: } 
; Line 1934: } 
L_137424:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv:
L_137518:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_137519:
        ret
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~ virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::__destruct_at_end(char**, integral_constant<bool, bool=0>)
@std@#__split_buffer.pcr#allocator.pc~~@__destruct_at_end.qppc#integral_constant.4booln0?0?~:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    esi
L_137526:
        mov     ebx,dword [esp+08h+034h]
        mov     esi,dword [esp+04h+034h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_137530
L_137529:
; Line 303:         __alloc_traits::destroy(__alloc(), __to_address(--__end_)); 
        sub     dword [esi+0ch],byte 04h
        mov     eax,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-02ch+038h],eax
        and     eax,eax
        je      L_137586
        mov     eax,dword [esp-02ch+038h]
        add     eax,byte 04h
        jmp     L_137587
L_137586:
        mov     eax,dword [esp-02ch+038h]
L_137587:
        push    eax
        call    @std@#__compressed_pair_elem.r#allocator.pc~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<char*>&, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#allocator_traits.#allocator.pc~~@#destroy.pc~.qr#allocator.pc~ppc ; std::allocator_traits<allocator<char*>>::destroy<char*>(allocator<char*>&, char**)
        add     esp,byte 08h
L_137531:
        cmp     ebx,dword [esi+0ch]
        jne     L_137529
L_137530:
; Line 304: } 
L_137601:
L_137527:
        pop     esi
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
L_137607:
        mov     esi,dword [ebp+018h]
        mov     ebx,dword [ebp+014h]
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
        mov     dword [ebp-04ch+014h],03h
L_137718:
L_137705:
        add     esp,byte 018h
L_137608:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator<shared_ptr<Token>>::destroy(shared_ptr<Token>*)
@std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_137725:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_137726:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator.#shared_ptr.5Token~~@destroy.qp#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>, shared_ptr<Token>&>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
L_137735:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-068h],ecx
        and     ecx,ecx
        je      L_137773
        mov     ecx,dword [ebp-068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
        mov     eax,dword [eax+04h]
        mov     dword [ecx+04h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [ecx+04h],byte 00h
        je      L_137793
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [ecx+04h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_137856:
; Line 3478:     } 
L_137841:
L_137793:
; Line 4064: } 
L_137773:
; Line 1877:         } 
L_137755:
        mov     dword [ebp-048h+014h],01h
L_137889:
L_137736:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~r#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~r#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__construct<shared_ptr<Token>, shared_ptr<Token>>(integral_constant<bool, bool=1>, allocator<shared_ptr<Token>>&, shared_ptr<Token>*, shared_ptr<Token>&&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_137895:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-064h],ecx
        and     ecx,ecx
        je      L_137933
        mov     ecx,dword [ebp-064h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
        mov     edx,dword [eax+04h]
        mov     dword [ecx+04h],edx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
L_137933:
; Line 1877:         } 
L_137915:
        mov     dword [ebp-048h+014h],01h
L_137996:
L_137896:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@#__construct.#shared_ptr.n0~#shared_ptr.n0~~.q#integral_constant.4booln1?1?~r#allocator.#shared_ptr.n0~~p#shared_ptr.n0~R#shared_ptr.n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc virtual
        [bits 32]
; std::allocator_traits<allocator<char>>::__destroy<char>(integral_constant<bool, bool=1>, allocator<char>&, char*)
@std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_138002:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
L_138022:
        mov     dword [ebp-048h+014h],01h
L_138036:
L_138003:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.c~~@#__destroy.c~.q#integral_constant.4booln0?1?~r#allocator.c~pc:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc virtual
        [bits 32]
; std::allocator_traits<allocator<char*>>::__destroy<char*>(integral_constant<bool, bool=1>, allocator<char*>&, char**)
@std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_138042:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
L_138062:
        mov     dword [ebp-048h+014h],01h
L_138076:
L_138043:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.pc~~@#__destroy.pc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppc:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qR#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ virtual
        [bits 32]
; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__move_assignment(__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&&)
@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qR#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    esi
        push    edi
L_138082:
        mov     eax,dword [esp+08h+028h]
        mov     esi,dword [esp+04h+028h]
        mov     ebx,esi
        mov     edi,eax
        mov     dword [esp-01ch+028h],00h
        push    dword [esp-01ch+028h]
        push    ebx
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base(std::__variant_detail::__valueless_t)
        add     esp,byte 08h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    edi
        push    ebx
        call    @std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.#__move_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~R#__move_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__generic_construct<__move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>>(__constructor<__traits<shared_ptr<Token>, unsigned long long>>&, __move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&&)
        add     esp,byte 08h
        mov     eax,esi
L_138083:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qrx#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~ virtual
        [bits 32]
; std::__variant_detail::__move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__move_assignment( const __move_assignment<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@#__move_assignment.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@.bctr.qrx#__move_assignment.#__traits.#shared_ptr.n0~uL~n1?1?~:
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_138139:
        mov     edi,dword [esp+08h+014h]
        mov     esi,dword [esp+04h+014h]
        mov     ebx,esi
        mov     dword [esp-08h+014h],00h
        push    dword [esp-08h+014h]
        push    ebx
        call    @std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t ; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base(std::__variant_detail::__valueless_t)
        add     esp,byte 08h
        push    edi
        push    ebx
        call    @std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~ ; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__generic_construct< const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(__constructor<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
        add     esp,byte 08h
        mov     eax,esi
L_138140:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~ virtual
        [bits 32]
; std::__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__compressed_pair(__compressed_pair<unsigned int, allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>&&)
@std@#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.qR#__compressed_pair.ui#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~:
L_138164:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     edx,dword [edx]
        mov     dword [ecx],edx
L_138165:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>&)
@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
; Line 1812:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_138220:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-048h+014h],02h
L_138254:
L_138268:
L_138221:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_138274:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-048h+014h],02h
L_138308:
L_138322:
L_138275:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@allocate.quipxv virtual
        [bits 32]
; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*>*>::allocate(unsigned int, void const *)
@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@allocate.quipxv:
        push    ecx
        push    ecx
        push    ebx
L_138328:
        mov     ebx,dword [esp+08h+0ch]
; Line 1861:         if (__n > max_size()) 
        mov     ecx,03fffffffh
        cmp     ebx,ecx
        jbe     L_138331
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_138331:
        mov     eax,ebx
        shl     eax,02h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
L_138329:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>>>::__construct_node_hash< const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&, ..._Rest>(unsigned int,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<_Rest>, allocator<shared_ptr<_Rest>>>>&, )
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff2ch
        push    ebx
        push    esi
        push    edi
L_138373:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0c4h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-0c0h],eax
        mov     ebx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2540:     static_assert(!__is_hash_value_type<_First, _Rest...>::value, 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0c8h],eax
        and     eax,eax
        je      L_138410
        mov     eax,dword [ebp-0c8h]
        add     eax,byte 04h
        jmp     L_138411
L_138410:
        mov     eax,dword [ebp-0c8h]
L_138411:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
        xor     cl,cl
        mov     dword [ebp-014h],eax
        mov     byte [ebp-014h+04h],cl
        lea     eax,[ebp-014h]
        mov     dword [ebp-05ch+014h],01h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,05555555h
        cmp     edi,ecx
        jbe     L_138448
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_138448:
        imul    eax,edi,byte 030h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-0ch]
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&&)
        mov     dword [ebp-05ch+014h],02h
L_138512:
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],03h
; Line 2544:     __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), 
        mov     eax,dword [ebp-0c0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        push    esi
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
        add     esp,byte 0ch
; Line 2547:     __h.get_deleter().__value_constructed = true; 
; Line 2595:     return __ptr_.second(); 
        lea     eax,[ebp-0ch]
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0cch],eax
        and     eax,eax
        je      L_138705
        mov     eax,dword [ebp-0cch]
        add     eax,byte 04h
        jmp     L_138706
L_138705:
        mov     eax,dword [ebp-0cch]
L_138706:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
        mov     byte [eax+04h],01h
; Line 2548:     __h->__hash_ = __hash; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax+04h],ebx
; Line 2549:     __h->__next_ = nullptr; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax],00h
; Line 2517:   template <class _Up, class _Ep, 
        mov     edi,dword [ebp-0c4h]
        mov     eax,edi
        lea     ebx,[ebp-0ch]
        mov     dword [ebp-0bch],eax
        mov     eax,ebx
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~~@release.qv ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>>::release()
        add     esp,byte 04h
        mov     dword [ebp-0d0h],eax
        lea     esi,[ebp-0d0h]
; Line 2595:     return __ptr_.second(); 
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d4h],eax
        and     eax,eax
        je      L_138884
        mov     eax,dword [ebp-0d4h]
        add     eax,byte 04h
        jmp     L_138885
L_138884:
        mov     eax,dword [ebp-0d4h]
L_138885:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [esi]
        mov     eax,dword [ebp-0bch]
        mov     dword [edi],edx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],04h
; Line 2206:     } 
; Line 2515:   } 
        mov     dword [ebp-05ch+014h],05h
        mov     eax,dword [ebp+08h]
; Line 2551: } 
L_138374:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~V:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~+0
        dd      0ffffffech
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&, tuple<>&&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_138994:
        mov     edx,dword [ebp+01ch]
        mov     ecx,dword [ebp+018h]
        mov     eax,dword [ebp+014h]
        mov     esi,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ebx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edi,ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-078h],esi
        and     esi,esi
        je      L_139064
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    eax
        call    @std@#tuple.~@.bctr.qR#tuple.~ ; std::tuple<>::tuple(tuple<>&&)
        add     esp,dword 08h+0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
        push    eax
        call    @std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,dword [ebp-078h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair<basic_string<char, char_traits<char>, allocator<char>>&&, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>)
        add     esp,byte 010h
L_139064:
; Line 1877:         } 
L_139014:
        mov     dword [ebp-048h+014h],02h
L_139141:
L_138995:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~.qr#__alt.ui?0?#shared_ptr.n0~~r#shared_ptr.n0~ virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt<unsigned int=0, shared_ptr<Token>, shared_ptr<Token>&>(__alt<unsigned int=0, shared_ptr<Token>>&, shared_ptr<Token>&)
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~.qr#__alt.ui?0?#shared_ptr.n0~~r#shared_ptr.n0~:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
L_139147:
        mov     eax,dword [esp+0ch+058h]
        mov     ecx,dword [esp+08h+058h]
        mov     edx,dword [esp+04h+058h]
; Line 911:     if (this->index() == _Ip) { 
        mov     ebx,edx
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [ebx+08h],byte 0ffffffffh
        jne     L_139179
        mov     ebx,0ffffffffh
        jmp     L_139180
L_139179:
        mov     ebx,dword [ebx+08h]
L_139180:
; Line 697:   } 
        and     ebx,ebx
        jne     L_139150
; Line 912:       __a.__value = _VSTD::forward<_Arg>(__arg); 
        mov     ebx,ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 4218:     shared_ptr(__r).swap(*this); 
        lea     esi,[esp-050h+058h]
        mov     ecx,dword [eax]
        mov     dword [esp-050h+058h],ecx
        mov     eax,dword [eax+04h]
        mov     dword [esp-050h+04h+058h],eax
; Line 4062:     if (__cntrl_) 
        cmp     dword [esp-050h+04h+058h],byte 00h
        je      L_139233
; Line 4063:         __cntrl_->__add_shared(); 
        mov     eax,dword [esp+04h-050h+058h]
; Line 3477:       __shared_count::__add_shared(); 
; Line 3438:       __libcpp_atomic_refcount_increment(__shared_owners_); 
        add     eax,byte 04h
; Line 3378:     return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED); 
        lock add dword [eax],byte 01h
; Line 3380:     return __t += 1; 
; Line 3439:     } 
L_139280:
; Line 3478:     } 
L_139265:
L_139233:
; Line 4064: } 
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        mov     eax,ebx
        push    eax
        push    esi
        call    @std@#swap.p5Token~.qrpn0rpn0 ; std::swap<Token*>(Token*&, Token*&)
        add     esp,byte 08h
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#swap.p24@std@__shared_weak_count~.qrpn0rpn0 ; std::swap<std::__shared_weak_count*>(std::__shared_weak_count*&, std::__shared_weak_count*&)
        add     esp,byte 08h
; Line 4338: } 
L_139228:
        lea     eax,[esp-050h+058h]
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
; Line 4220: } 
L_139197:
; Line 913:     } else { 
        jmp     L_139155
L_139150:
; Line 914:       struct { 
        mov     dword [esp-08h+04h+058h],00h
        mov     dword [esp-08h+058h],00h
        mov     dword [esp-08h+058h],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [esp-08h+04h+058h],eax
; Line 924:       __impl(bool_constant<is_nothrow_constructible_v<_Tp, _Arg> || 
        mov     dword [esp-0ch+058h],00h
        mov     byte [esp-0ch+058h],01h
        push    dword [esp-0ch+058h]
        lea     eax,[esp-08h+05ch]
        push    eax
        call    @std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~ ; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt__assign_alt<unsigned int=0, shared_ptr<Token>, shared_ptr<Token>&>::::operator ()(integral_constant<bool, std::piecewise_construct_t=1>) const 
        add     esp,byte 08h
; Line 926:     } 
L_139155:
; Line 927:   } 
L_139148:
        pop     esi
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_139322:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_139432:
L_139387:
; Line 493:     } 
L_139323:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_139440:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_139456:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_139470:
L_139441:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_139476:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_139492:
; Line 527:   } 
L_139506:
L_139477:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_139512:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_139622:
L_139577:
; Line 493:     } 
L_139513:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_139630:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_139646:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_139660:
L_139631:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_139666:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_139682:
; Line 527:   } 
L_139696:
L_139667:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_139702:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_139720:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_139703:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_139758:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_139791:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_139838:
L_139852:
; Line 536:   } 
L_139866:
L_139880:
L_139759:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_139886:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_139887:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_139894:
        mov     eax,dword [esp+04h]
L_139895:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_139902:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_139903:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure3__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_139942:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure3__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure3__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_140041
        mov     eax,0ffffffffh
        jmp     L_140042
L_140041:
        mov     eax,dword [esi+08h]
L_140042:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_139943:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long, ..._Args>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*, )
@std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_140080:
        mov     eax,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-054h],eax
        and     eax,eax
        je      L_140102
        mov     eax,dword [ebp-054h]
        mov     dword [eax],00h
        mov     dword [eax+04h],00h
L_140102:
; Line 1877:         } 
L_140100:
        mov     dword [ebp-048h+014h],01h
L_140131:
L_140081:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLe5_Args~.q#integral_constant.4booln1?1?~r#allocator.uL~puLV:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL virtual
        [bits 32]
; std::allocator_traits<allocator<unsigned long long>>::__construct<unsigned long long, unsigned long long>(integral_constant<bool, bool=1>, allocator<unsigned long long>&, unsigned long long*, unsigned long long&&)
@std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
L_140137:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-060h],ecx
        and     ecx,ecx
        je      L_140175
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     eax,dword [ebp-060h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
L_140175:
; Line 1877:         } 
L_140157:
        mov     dword [ebp-048h+014h],01h
L_140220:
L_140138:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.uL~~@#__construct.uLuL~.q#integral_constant.4booln0?1?~r#allocator.uL~puLRuL:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__assignment.#__traits.#shared_ptr.5Token~uL~~~.qr#__assignment.#__traits.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__variant_detail::__access::__base::__get_alt<unsigned int=1, __assignment<__traits<shared_ptr<Token>, unsigned long long>>&>(__assignment<__traits<shared_ptr<Token>, unsigned long long>>&)
@std@__variant_detail@__access@__base@#__get_alt.ui?1?r#__assignment.#__traits.#shared_ptr.5Token~uL~~~.qr#__assignment.#__traits.#shared_ptr.n0~uL~~:
; Line 413: struct __base { 
        push    ecx
L_140226:
        mov     eax,dword [esp+04h+04h]
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<bool>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
L_140227:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt__assign_alt<unsigned int=1, unsigned long long, unsigned long long&>::::operator ()(integral_constant<bool, bool=1>) const 
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
L_140250:
        mov     ecx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 916:           __this->__emplace<_Ip>(_VSTD::forward<_Arg>(__arg)); 
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 900:     this->__destroy(); 
        push    esi
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        mov     eax,esi
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_140352
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        push    dword [@std@in_place]
        mov     eax,dword [ebp-078h]
        push    eax
        call    @std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL ; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
        add     esp,byte 0ch
L_140352:
; Line 790:   } 
; Line 903:     this->__index = _Ip; 
        mov     dword [esi+08h],01h
; Line 905:   } 
; Line 917:         } 
        mov     dword [ebp-048h+014h],01h
L_140414:
L_140251:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~ virtual
        [bits 32]
@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?1?uLruL~@@.bcall.xq#integral_constant.4booln1?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0ch
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bctr.q21@std@__value_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<EndToken, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bctr.q21@std@__value_init_tag:
; Line 2195:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
        push    ebx
L_140420:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        mov     dword [eax+014h],00h
        mov     dword [eax+010h],00h
        mov     dword [eax+0ch],00h
        mov     dword [eax+08h],00h
        mov     dword [eax+04h],00h
        mov     dword [eax],00h
        mov     dword [ebx],@Token@_.vt+0ch
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebx],@EndToken@_.vt+0ch
; Line 855:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
L_140472:
        mov     eax,ebx
L_140421:
        pop     ebx
        ret
section code
section code
        section vsc@std@#shared_ptr.8EndToken~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<EndToken>::__enable_weak_this(...)
@std@#shared_ptr.8EndToken~@__enable_weak_this.qe:
; Line 3904:     _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {} 
L_140478:
L_140479:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::__compressed_pair<allocator<NumericToken>, NumericToken>::__compressed_pair<allocator<NumericToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<NumericToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_140486:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.12NumericToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<NumericToken>&>::tuple(tuple<allocator<NumericToken>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<NumericToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_140596:
L_140583:
L_140570:
        mov     dword [ebp-050h+014h],04h
L_140638:
L_140625:
L_140612:
L_140654:
        mov     eax,ebx
L_140487:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.12NumericToken~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        push    ecx
L_140660:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_140661:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&>(basic_string<char, char_traits<char>, allocator<char>>&)
@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_140700:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?r#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&>::__tuple_impl<..., unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&)
L_140815:
L_140829:
L_140843:
L_140857:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_140701:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~~.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.12NumericToken~~@.bctr.qR#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::tuple<allocator<NumericToken>&>::tuple(tuple<allocator<NumericToken>&>&&)
@std@#tuple.r#allocator.12NumericToken~~@.bctr.qR#tuple.r#allocator.n0~~:
        push    ecx
L_140864:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_140865:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<NumericToken>&>(allocator<NumericToken>&)
@std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_140904:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<NumericToken>&>::__tuple_impl<..., unsigned int=0, allocator<NumericToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
L_141019:
L_141033:
L_141047:
L_141061:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_140905:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.12NumericToken~~.qr#allocator.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#basic_string.c#char_traits.c~#allocator.c~~4bool?0?~@.bdtr.qv:
L_141068:
L_141069:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_141074:
L_141088:
L_141075:
        ret
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::~tuple()
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv:
L_141094:
L_141121:
L_141108:
L_141095:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<NumericToken>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.12NumericToken~4bool?0?~@.bdtr.qv:
L_141128:
L_141129:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<NumericToken>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bdtr.qv:
L_141134:
L_141148:
L_141135:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.12NumericToken~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<NumericToken>&>::~tuple()
@std@#tuple.r#allocator.12NumericToken~~@.bdtr.qv:
L_141154:
L_141181:
L_141168:
L_141155:
        ret
section code
section code
        section vsc@std@#shared_ptr.12NumericToken~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<NumericToken>::__enable_weak_this(...)
@std@#shared_ptr.12NumericToken~@__enable_weak_this.qe:
L_141188:
L_141189:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::__compressed_pair<allocator<CharacterToken>, CharacterToken>::__compressed_pair<allocator<CharacterToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<CharacterToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_141196:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.14CharacterToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<CharacterToken>&>::tuple(tuple<allocator<CharacterToken>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<CharacterToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_141306:
L_141293:
L_141280:
        mov     dword [ebp-050h+014h],04h
L_141348:
L_141335:
L_141322:
L_141364:
        mov     eax,ebx
L_141197:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.14CharacterToken~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.14CharacterToken~~@.bctr.qR#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::tuple<allocator<CharacterToken>&>::tuple(tuple<allocator<CharacterToken>&>&&)
@std@#tuple.r#allocator.14CharacterToken~~@.bctr.qR#tuple.r#allocator.n0~~:
        push    ecx
L_141370:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_141371:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<CharacterToken>&>(allocator<CharacterToken>&)
@std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_141410:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<CharacterToken>&>::__tuple_impl<..., unsigned int=0, allocator<CharacterToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
L_141525:
L_141539:
L_141553:
L_141567:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_141411:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.14CharacterToken~~.qr#allocator.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<CharacterToken>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.14CharacterToken~4bool?0?~@.bdtr.qv:
L_141574:
L_141575:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<CharacterToken>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bdtr.qv:
L_141580:
L_141594:
L_141581:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.14CharacterToken~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<CharacterToken>&>::~tuple()
@std@#tuple.r#allocator.14CharacterToken~~@.bdtr.qv:
L_141600:
L_141627:
L_141614:
L_141601:
        ret
section code
section code
        section vsc@std@#shared_ptr.14CharacterToken~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<CharacterToken>::__enable_weak_this(...)
@std@#shared_ptr.14CharacterToken~@__enable_weak_this.qe:
; Line 3904:     _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {} 
L_141634:
L_141635:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::__compressed_pair<allocator<StringToken>, StringToken>::__compressed_pair<allocator<StringToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<StringToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
@std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_141642:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.11StringToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<StringToken>&>::tuple(tuple<allocator<StringToken>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<StringToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<StringToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_141752:
L_141739:
L_141726:
        mov     dword [ebp-050h+014h],04h
L_141794:
L_141781:
L_141768:
L_141810:
        mov     eax,ebx
L_141643:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.11StringToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.11StringToken~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.11StringToken~~@.bctr.qR#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::tuple<allocator<StringToken>&>::tuple(tuple<allocator<StringToken>&>&&)
@std@#tuple.r#allocator.11StringToken~~@.bctr.qR#tuple.r#allocator.n0~~:
        push    ecx
L_141816:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_141817:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<StringToken>&>(allocator<StringToken>&)
@std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_141856:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<StringToken>&>::__tuple_impl<..., unsigned int=0, allocator<StringToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
L_141971:
L_141985:
L_141999:
L_142013:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_141857:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.11StringToken~~.qr#allocator.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<StringToken>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.11StringToken~4bool?0?~@.bdtr.qv:
L_142020:
L_142021:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<StringToken>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bdtr.qv:
L_142026:
L_142040:
L_142027:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.11StringToken~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<StringToken>&>::~tuple()
@std@#tuple.r#allocator.11StringToken~~@.bdtr.qv:
L_142046:
L_142073:
L_142060:
L_142047:
        ret
section code
section code
        section vsc@std@#shared_ptr.11StringToken~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<StringToken>::__enable_weak_this(...)
@std@#shared_ptr.11StringToken~@__enable_weak_this.qe:
L_142080:
L_142081:
        ret
section code
section code
        section vsc@std@#shared_ptr.17TokenizerSettings~@.basn.qR#shared_ptr.n0~ virtual
        [bits 32]
; std::shared_ptr<TokenizerSettings>::operator =(shared_ptr<TokenizerSettings>&&)
@std@#shared_ptr.17TokenizerSettings~@.basn.qR#shared_ptr.n0~:
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
L_142088:
        mov     eax,dword [esp+08h+080h]
        mov     ebx,dword [esp+04h+080h]
; Line 4243:     shared_ptr(_VSTD::move(__r)).swap(*this); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [esp-08h+080h],ecx
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+080h],ecx
; Line 4087:     __r.__ptr_ = 0; 
        mov     dword [eax],00h
; Line 4088:     __r.__cntrl_ = 0; 
        mov     dword [eax+04h],00h
; Line 4089: } 
        lea     esi,[esp-08h+080h]
        mov     edx,ebx
; Line 4336:     _VSTD::swap(__ptr_, __r.__ptr_); 
        lea     ecx,[esp-08h+080h]
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-04ch+080h],ecx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-08h+080h],ecx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04ch+080h]
        mov     dword [eax],ecx
; Line 3718: } 
L_142157:
; Line 4337:     _VSTD::swap(__cntrl_, __r.__cntrl_); 
        mov     eax,esi
        add     eax,byte 04h
        mov     ecx,edx
        add     ecx,byte 04h
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-068h+080h],edx
; Line 3716:     __x = _VSTD::move(__y); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 3717:     __y = _VSTD::move(__t); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-068h+080h]
        mov     dword [ecx],eax
; Line 3718: } 
L_142221:
; Line 4338: } 
L_142108:
        lea     eax,[esp-08h+080h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv ; std::shared_ptr<TokenizerSettings>::~shared_ptr()
        add     esp,byte 04h
        mov     eax,ebx
; Line 4245: } 
L_142089:
        pop     esi
        pop     ebx
        add     esp,byte 078h
        ret
section code
section code
        section vsc@std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat virtual
        [bits 32]
; std::shared_ptr<TokenizerSettings>::shared_ptr<TokenizerSettings, >(TokenizerSettings*, std::shared_ptr<TokenizerSettings>::__nat)
@std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat:
; Line 3934: { 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff6ch
        push    ebx
        push    esi
        push    edi
L_142276:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     eax,ebx
        mov     dword [esi],eax
; Line 3935:     unique_ptr<_Yp> __hold(__p); 
        lea     ecx,[ebp-08h]
        mov     eax,ebx
        mov     dword [ebp-060h],eax
        lea     edx,[ebp-060h]
        mov     dword [ebp-08ch],00h
        lea     eax,[ebp-08ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [ebp-08h],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_142413:
        mov     dword [ebp-05ch+014h],01h
; Line 3938:     __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), _AllocT()); 
        push    byte 018h
        call    @.bnew.qui ; operator new(unsigned int)
        mov     edi,eax
        add     esp,byte 04h
        and     edi,edi
        je      L_142417
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     dword [ebp-014h],00h
        lea     eax,[ebp-014h]
        mov     dword [ebp-05ch+014h],02h
        push    eax
        push    ecx
        call    @std@#allocator.17TokenizerSettings~@.bctr.qR#allocator.n0~ ; std::allocator<TokenizerSettings>::allocator(allocator<TokenizerSettings>&&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],03h
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     dword [ebp-010h],00h
        lea     eax,[ebp-010h]
        push    eax
        push    ecx
        call    @std@#default_delete.17TokenizerSettings~@.bctr.qR#default_delete.n0~ ; std::default_delete<TokenizerSettings>::default_delete(default_delete<TokenizerSettings>&&)
        add     esp,byte 08h
        mov     eax,ebx
        push    eax
        mov     eax,edi
        push    eax
        call    @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~ ; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::__shared_ptr_pointer(TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>)
        mov     dword [ebp-05ch+014h],04h
L_142463:
L_142477:
        add     esp,byte 010h
L_142417:
        mov     dword [esi+04h],edi
; Line 3939:     __hold.release(); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-08h],00h
; Line 2611:   } 
; Line 3940:     __enable_weak_this(__p, __p); 
        push    ebx
        push    ebx
        mov     eax,esi
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@__enable_weak_this.qe ; std::shared_ptr<TokenizerSettings>::__enable_weak_this(...)
        add     esp,byte 0ch
; Line 3941: } 
        mov     dword [ebp-05ch+014h],05h
        lea     ebx,[ebp-08h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edi,dword [ebp-08h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-08h],eax
        and     edi,edi
        je      L_142576
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-090h],eax
        and     eax,eax
        je      L_142689
        mov     eax,dword [ebp-090h]
        add     eax,byte 04h
        jmp     L_142690
L_142689:
        mov     eax,dword [ebp-090h]
L_142690:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [ebp-094h],edi
        and     edi,edi
        je      L_142692
        mov     eax,dword [ebp-094h]
        push    eax
        call    @TokenizerSettings@.bdtr.qv ; TokenizerSettings::~TokenizerSettings()
        add     esp,byte 04h
        mov     eax,dword [ebp-094h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_142692:
; Line 2364:   } 
L_142672:
L_142576:
; Line 2619:   } 
L_142593:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#default_delete.17TokenizerSettings~@.bdtr.qv ; std::default_delete<TokenizerSettings>::~default_delete()
        add     esp,byte 04h
L_142719:
L_142733:
L_142706:
L_142573:
L_142749:
        mov     eax,esi
L_142277:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#default_delete.17TokenizerSettings~ virtual
        [bits 32]
@.xt@#default_delete.17TokenizerSettings~:
        dd      @std@#default_delete.17TokenizerSettings~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p17TokenizerSettings#default_delete.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p17TokenizerSettings#default_delete.n0~~:
        dd      @std@#__compressed_pair.p17TokenizerSettings#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.17TokenizerSettings#default_delete.n0~~ virtual
        [bits 32]
@.xt@#unique_ptr.17TokenizerSettings#default_delete.n0~~:
        dd      @std@#unique_ptr.17TokenizerSettings#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.17TokenizerSettings~ virtual
        [bits 32]
@.xt@#allocator.17TokenizerSettings~:
        dd      @std@#allocator.17TokenizerSettings~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat virtual
        [bits 32]
@.xc@std@#shared_ptr.17TokenizerSettings~@.bctr.n0~.qpn026@std@#shared_ptr.n0~@__nat:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#unique_ptr.17TokenizerSettings#default_delete.n0~~+0
        dd      0fffffff8h
        dd      01h
        dd      05h
        dd      0400h
        dd      @.xt@#allocator.17TokenizerSettings~+0
        dd      0ffffffech
        dd      02h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#function.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qpqpxcn0.n0 virtual
        [bits 32]
; std::function<(*)(char const *, bool)>::function<(*)(*)(char const *, bool), void, >((*)(*)(char const *, bool))
@std@#function.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qpqpxcn0.n0:
        push    ecx
        push    ecx
        push    ebx
L_142755:
        mov     ebx,dword [esp+04h+0ch]
        lea     eax,[esp+08h+0ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0 ; std::__function::__value_func<(*)(char const *, bool)>::__value_func<(*)(*)(char const *, bool), void, >((*)(*)(char const *, bool)&&)
        add     esp,byte 08h
        mov     eax,ebx
L_142756:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@TokenizerSettings@IsSymbolCharDefault.qpxc4bool virtual
        [bits 32]
; TokenizerSettings::IsSymbolCharDefault(char const *, bool)
@TokenizerSettings@IsSymbolCharDefault.qpxc4bool:
; Line 20:   public: 
L_142829:
        mov     cl,byte [esp+08h]
        mov     eax,dword [esp+04h]
; Line 23:         switch (*data) 
        mov     edx,eax
        mov     dl,byte [edx]
        cmp     dl,byte 024h
        je      L_142837
        cmp     dl,byte 05fh
        je      L_142835
        jmp     L_142839
; Line 24:         { 
; Line 25:             case '_': 
L_142835:
L_142837:
        mov     al,01h
        jmp     L_142830
L_142839:
        and     cl,cl
        je      L_142844
        push    eax
        call    @UTF8@IsAlpha.qpxc ; UTF8::IsAlpha(char const *)
        add     esp,byte 04h
        and     eax,byte 01h
        jmp     L_142845
L_142844:
        push    eax
        call    @UTF8@IsAlnum.qpxc ; UTF8::IsAlnum(char const *)
        add     esp,byte 04h
        and     eax,byte 01h
L_142845:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 30:         } 
L_142832:
L_142830:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::get()
@std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv:
; Line 276:     _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return __value_;} 
L_142849:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_142850:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?2?r4booln0?0?~@get.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=2, bool&, bool=0>::get()
@std@#__tuple_leaf.ui?2?r4booln0?0?~@get.qv:
L_142857:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
L_142858:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
; std::__compressed_pair<allocator<TemplatedIdentifierToken<kw>>, TemplatedIdentifierToken<kw>>::__compressed_pair<allocator<TemplatedIdentifierToken<kw>>&, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, >(std::piecewise_construct_t, tuple<allocator<TemplatedIdentifierToken<kw>>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>)
@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
        push    ebx
L_142865:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~ ; std::tuple<allocator<TemplatedIdentifierToken<kw>>&>::tuple(tuple<allocator<TemplatedIdentifierToken<kw>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<TemplatedIdentifierToken<kw>>, int=0, bool=0>::__compressed_pair_elem<allocator<TemplatedIdentifierToken<bool>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<TemplatedIdentifierToken<std::piecewise_construct_t>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffff4h
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~ ; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, bool, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, bool>>>*&, bool&, ..., unsigned int=0, unsigned int=1, unsigned int=2, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t>>>*&, bool&>, __tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>)
        add     esp,byte 018h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_142975:
L_142989:
L_143003:
L_142962:
L_142949:
        mov     dword [ebp-050h+014h],04h
L_143045:
L_143032:
L_143019:
L_143061:
        mov     eax,ebx
L_142866:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~ virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>&&)
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~:
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_143067:
        mov     ecx,dword [esp+08h+010h]
        mov     eax,dword [esp+04h+010h]
        mov     edx,eax
        mov     ebx,ecx
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
        mov     ecx,ebx
        add     ecx,byte 04h
        mov     ecx,dword [ecx]
        mov     dword [edx+04h],ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        mov     ecx,dword [ecx]
        mov     dword [edx+08h],ecx
L_143068:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&)
@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff84h
        push    ebx
L_143139:
        mov     ecx,dword [ebp+08h]
        mov     ebx,dword [ebp+014h]
        mov     edx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-054h],eax
        mov     dword [ebp-054h+04h],___cppexceptionhandle
        mov     dword [ebp-054h+08h],esp
        mov     dword [ebp-054h+0ch],ebp
        mov     dword [ebp-054h+010h],@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1
        mov     dword [ebp-054h+014h],00h
        lea     eax,[ebp-054h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        push    edx
        push    eax
        mov     dword [ebp-070h],00h
        lea     eax,[ebp-070h]
        push    dword [eax]
        mov     dword [ebp-074h],00h
        lea     eax,[ebp-074h]
        push    dword [eax]
        mov     dword [ebp-078h],00h
        lea     eax,[ebp-078h]
        push    dword [eax]
        mov     dword [ebp-07ch],00h
        lea     eax,[ebp-07ch]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.eui?0?ui?1?ui?2?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~.q#__tuple_indices.eui?0?ui?1?ui?2?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::__tuple_impl<..., unsigned int=0, unsigned int=1, unsigned int=2, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, bool&, >(__tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, bool&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tp, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tp>>>*&, bool&)
L_143286:
L_143300:
L_143314:
L_143328:
        add     esp,byte 020h
        mov     dword [ebp-054h+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_143140:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
        dd      00h
        dd      0ffffffach
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~ virtual
        [bits 32]
; std::tuple<allocator<TemplatedIdentifierToken<kw>>&>::tuple(tuple<allocator<TemplatedIdentifierToken<kw>>&>&&)
@std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~:
        push    ecx
L_143335:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_143336:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<TemplatedIdentifierToken<kw>>&>(allocator<TemplatedIdentifierToken<kw>>&)
@std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_143375:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedIdentifierToken.n0~~ee3_Tlr#allocator.#TemplatedIdentifierToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedIdentifierToken.n0~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedIdentifierToken<kw>>&>::__tuple_impl<..., unsigned int=0, allocator<TemplatedIdentifierToken<kw>>&, ..., ..., _Tl, allocator<TemplatedIdentifierToken<_Tl>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<TemplatedIdentifierToken<_Tl>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<TemplatedIdentifierToken<_Tp>>&)
L_143490:
L_143504:
L_143518:
L_143532:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_143376:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~.qr#allocator.#TemplatedIdentifierToken.n0~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@.bdtr.qv:
L_143539:
L_143540:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?2?r4booln0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=2, bool&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?2?r4booln0?0?~@.bdtr.qv:
L_143545:
L_143546:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv:
L_143551:
L_143565:
L_143579:
L_143593:
L_143552:
        ret
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::~tuple()
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bdtr.qv:
L_143599:
L_143626:
L_143640:
L_143654:
L_143613:
L_143600:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<TemplatedIdentifierToken<kw>>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.#TemplatedIdentifierToken.2kw~~4bool?0?~@.bdtr.qv:
L_143661:
L_143662:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedIdentifierToken<kw>>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv:
L_143667:
L_143681:
L_143668:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<TemplatedIdentifierToken<kw>>&>::~tuple()
@std@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~@.bdtr.qv:
L_143687:
L_143714:
L_143701:
L_143688:
        ret
section code
section code
        section vsc@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<TemplatedIdentifierToken<kw>>::__enable_weak_this(...)
@std@#shared_ptr.#TemplatedIdentifierToken.2kw~~@__enable_weak_this.qe:
; Line 3904:     _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {} 
L_143721:
L_143722:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
; std::__compressed_pair<allocator<TemplatedKeywordToken<kw>>, TemplatedKeywordToken<kw>>::__compressed_pair<allocator<TemplatedKeywordToken<kw>>&, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, >(std::piecewise_construct_t, tuple<allocator<TemplatedKeywordToken<kw>>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>)
@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
        push    ebx
L_143729:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedKeywordToken.n0~~~ ; std::tuple<allocator<TemplatedKeywordToken<kw>>&>::tuple(tuple<allocator<TemplatedKeywordToken<kw>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<TemplatedKeywordToken<kw>>, int=0, bool=0>::__compressed_pair_elem<allocator<TemplatedKeywordToken<bool>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<TemplatedKeywordToken<std::piecewise_construct_t>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffff8h
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~ ; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, bool, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, bool>>>*&, ..., unsigned int=0, unsigned int=1, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t>>>*&>, __tuple_indices<...unsigned int=0, unsigned int=1>)
        add     esp,byte 014h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_143839:
L_143853:
L_143826:
L_143813:
        mov     dword [ebp-050h+014h],04h
L_143895:
L_143882:
L_143869:
L_143911:
        mov     eax,ebx
L_143730:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~ virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>&&)
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~:
        push    ecx
        push    ecx
        push    ebx
L_143917:
        mov     ecx,dword [esp+08h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     ebx,eax
        mov     edx,ecx
        mov     ecx,dword [ecx]
        mov     dword [ebx],ecx
        mov     ecx,edx
        add     ecx,byte 04h
        mov     ecx,dword [ecx]
        mov     dword [ebx+04h],ecx
L_143918:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
; std::forward_as_tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>(basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&)
@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff90h
L_143973:
        mov     ecx,dword [ebp+08h]
        mov     edx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    eax
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        mov     dword [ebp-068h],00h
        lea     eax,[ebp-068h]
        push    dword [eax]
        mov     dword [ebp-06ch],00h
        lea     eax,[ebp-06ch]
        push    dword [eax]
        mov     dword [ebp-070h],00h
        lea     eax,[ebp-070h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.eui?0?ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::__tuple_impl<..., unsigned int=0, unsigned int=1, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tp, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tp>>>*&)
L_144104:
L_144118:
L_144132:
L_144146:
        add     esp,byte 01ch
        mov     dword [ebp-050h+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_143974:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.qr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
        dd      00h
        dd      0ffffffb0h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedKeywordToken.n0~~~ virtual
        [bits 32]
; std::tuple<allocator<TemplatedKeywordToken<kw>>&>::tuple(tuple<allocator<TemplatedKeywordToken<kw>>&>&&)
@std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.qR#tuple.r#allocator.#TemplatedKeywordToken.n0~~~:
        push    ecx
L_144153:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_144154:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<TemplatedKeywordToken<kw>>&>(allocator<TemplatedKeywordToken<kw>>&)
@std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_144193:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedKeywordToken.n0~~ee3_Tlr#allocator.#TemplatedKeywordToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedKeywordToken.n0~~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedKeywordToken<kw>>&>::__tuple_impl<..., unsigned int=0, allocator<TemplatedKeywordToken<kw>>&, ..., ..., _Tl, allocator<TemplatedKeywordToken<_Tl>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<TemplatedKeywordToken<_Tl>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<TemplatedKeywordToken<_Tp>>&)
L_144308:
L_144322:
L_144336:
L_144350:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_144194:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.#TemplatedKeywordToken.2kw~~~.qr#allocator.#TemplatedKeywordToken.n0~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv:
L_144357:
L_144371:
L_144385:
L_144358:
        ret
section code
section code
        section vsc@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::~tuple()
@std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bdtr.qv:
L_144391:
L_144418:
L_144432:
L_144405:
L_144392:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<TemplatedKeywordToken<kw>>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.#TemplatedKeywordToken.2kw~~4bool?0?~@.bdtr.qv:
L_144439:
L_144440:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedKeywordToken<kw>>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv:
L_144445:
L_144459:
L_144446:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<TemplatedKeywordToken<kw>>&>::~tuple()
@std@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~@.bdtr.qv:
L_144465:
L_144492:
L_144479:
L_144466:
        ret
section code
section code
        section vsc@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<TemplatedKeywordToken<kw>>::__enable_weak_this(...)
@std@#shared_ptr.#TemplatedKeywordToken.2kw~~@__enable_weak_this.qe:
L_144499:
L_144500:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::__compressed_pair<allocator<ErrorToken>, ErrorToken>::__compressed_pair<allocator<ErrorToken>&, basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple<allocator<ErrorToken>&>, tuple<basic_string<char, char_traits<char>, allocator<char>>&>)
@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_144507:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#allocator.10ErrorToken~~@.bctr.qR#tuple.r#allocator.n0~~ ; std::tuple<allocator<ErrorToken>&>::tuple(tuple<allocator<ErrorToken>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<ErrorToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_144617:
L_144604:
L_144591:
        mov     dword [ebp-050h+014h],04h
L_144659:
L_144646:
L_144633:
L_144675:
        mov     eax,ebx
L_144508:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bctr.r#allocator.n0~r#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.10ErrorToken~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.r#allocator.10ErrorToken~~@.bctr.qR#tuple.r#allocator.n0~~ virtual
        [bits 32]
; std::tuple<allocator<ErrorToken>&>::tuple(tuple<allocator<ErrorToken>&>&&)
@std@#tuple.r#allocator.10ErrorToken~~@.bctr.qR#tuple.r#allocator.n0~~:
        push    ecx
L_144681:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_144682:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<ErrorToken>&>(allocator<ErrorToken>&)
@std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_144721:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<ErrorToken>&>::__tuple_impl<..., unsigned int=0, allocator<ErrorToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
L_144836:
L_144850:
L_144864:
L_144878:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_144722:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.r#allocator.10ErrorToken~~.qr#allocator.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<ErrorToken>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?r#allocator.10ErrorToken~4bool?0?~@.bdtr.qv:
L_144885:
L_144886:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<ErrorToken>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bdtr.qv:
L_144891:
L_144905:
L_144892:
        ret
section code
section code
        section vsc@std@#tuple.r#allocator.10ErrorToken~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<ErrorToken>&>::~tuple()
@std@#tuple.r#allocator.10ErrorToken~~@.bdtr.qv:
L_144911:
L_144938:
L_144925:
L_144912:
        ret
section code
section code
        section vsc@std@#shared_ptr.10ErrorToken~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<ErrorToken>::__enable_weak_this(...)
@std@#shared_ptr.10ErrorToken~@__enable_weak_this.qe:
; Line 3904:     _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {} 
L_144945:
L_144946:
        ret
section code
section code
        section vsc@std@#distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~ virtual
        [bits 32]
; std::distance<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>)
@std@#distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~:
; Line 696: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
L_144953:
; Line 700:     return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category()); 
        mov     dword [esp-04h+08h],00h
        lea     ebx,[esp-04h+08h]
        push    ebx
        call    @std@input_iterator_tag@.bctr.qv ; std::input_iterator_tag::input_iterator_tag()
        add     esp,byte 04h
        push    dword [ebx]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[esp+08h+010h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator( const move_iterator<char**>&)
        add     esp,dword 08h+0fffffffch
        mov     ecx,esp
        lea     eax,[esp+04h+014h]
        push    eax
        push    ecx
        call    @std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~ ; std::move_iterator<char**>::move_iterator( const move_iterator<char**>&)
        add     esp,byte 08h
        call    @std@#__distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~31@std@random_access_iterator_tag ; std::__distance<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>, std::random_access_iterator_tag)
        mov     ebx,eax
        lea     eax,[esp-04h+014h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_145043:
L_145030:
L_145017:
        add     esp,byte 0ch
L_145059:
L_145073:
        mov     eax,ebx
; Line 701: } 
L_145087:
L_145101:
L_144954:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~ virtual
        [bits 32]
; std::move_iterator<char**>::move_iterator( const move_iterator<char**>&)
@std@#move_iterator.ppc~@.bctr.qrx#move_iterator.ppc~:
L_145107:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_145108:
        ret
section code
section code
        section vsc@std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction@.bdtr.qv virtual
        [bits 32]
; std::__split_buffer<char*, allocator<char*>&>::_ConstructTransaction::~_ConstructTransaction()
@std@#__split_buffer.pcr#allocator.pc~~@_ConstructTransaction@.bdtr.qv:
L_145115:
        mov     eax,dword [esp+04h]
; Line 170:         *__dest_ = __pos_; 
        mov     ecx,dword [eax]
        mov     eax,dword [eax+08h]
        mov     dword [eax],ecx
; Line 171:       } 
L_145116:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc virtual
        [bits 32]
; std::allocator_traits<allocator<char*>>::__construct<char*, char*>(integral_constant<bool, bool=1>, allocator<char*>&, char**, char*&&)
@std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
L_145123:
        mov     eax,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-060h],ecx
        and     ecx,ecx
        je      L_145161
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [ebp-060h]
        mov     dword [eax],ecx
L_145161:
; Line 1877:         } 
L_145143:
        mov     dword [ebp-048h+014h],01h
L_145206:
L_145124:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.pc~~@#__construct.pcpc~.q#integral_constant.4booln0?1?~r#allocator.pc~ppcRpc:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const std::piecewise_construct_t&, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&, tuple<>&&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
        push    edi
L_145212:
        mov     edx,dword [ebp+01ch]
        mov     ecx,dword [ebp+018h]
        mov     eax,dword [ebp+014h]
        mov     esi,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ebx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edi,ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        mov     dword [ebp-078h],esi
        and     esi,esi
        je      L_145282
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    eax
        call    @std@#tuple.~@.bctr.qR#tuple.~ ; std::tuple<>::tuple(tuple<>&&)
        add     esp,dword 08h+0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
        push    eax
        call    @std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~ ; std::tuple< const basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,dword [ebp-078h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair< const basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>)
        add     esp,byte 010h
L_145282:
; Line 1877:         } 
L_145232:
        mov     dword [ebp-048h+014h],02h
L_145359:
L_145213:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~~.q#integral_constant.4booln2?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rxn1R#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~R#tuple.~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t virtual
        [bits 32]
; std::__variant_detail::__base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>::__base(std::__variant_detail::__valueless_t)
@std@__variant_detail@#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t:
        push    ebx
L_145365:
        mov     ebx,dword [esp+04h+04h]
        push    dword [esp+08h+04h]
        mov     eax,ebx
        push    eax
        call    @std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t ; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union(std::__variant_detail::__valueless_t)
        add     esp,byte 08h
        mov     dword [ebx+08h],0ffffffffh
L_145383:
        mov     eax,ebx
L_145366:
        pop     ebx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffb4h
        push    ebx
        push    esi
L_145389:
        mov     esi,dword [esp+0ch+054h]
        mov     eax,dword [esp+08h+054h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 800:             __construct_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [esp-04ch+054h],ebx
        and     ebx,ebx
        je      L_145567
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,dword [esp-04ch+05ch]
        push    eax
        call    @std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ ; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
        add     esp,byte 0ch
L_145567:
; Line 790:   } 
; Line 803:           }, 
L_145486:
; Line 493:     } 
L_145390:
        pop     esi
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_145622:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_145638:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_145652:
L_145623:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=0, LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_145658:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
L_145659:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffb4h
        push    ebx
        push    esi
L_145666:
        mov     esi,dword [esp+0ch+054h]
        mov     eax,dword [esp+08h+054h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 800:             __construct_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [esp-04ch+054h],ebx
        and     ebx,ebx
        je      L_145844
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,dword [esp-04ch+05ch]
        push    eax
        call    @std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL ; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
        add     esp,byte 0ch
L_145844:
; Line 790:   } 
; Line 803:           }, 
L_145763:
; Line 493:     } 
L_145667:
        pop     esi
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_145899:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_145915:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)
; Line 500:   } 
L_145929:
L_145900:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=1, LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_145935:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
L_145936:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_145943:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_145961:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_145944:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~:
; Line 510:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_145999:
        mov     esi,dword [esp+04h+03ch]
; Line 512:     return __base::__make_farray(__make_fdiagonal_impl<_Is, _Fp, _Vs...>()...); 
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-02ch+03ch],00h
        push    dword [esp-02ch+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-04h+03ch],eax
        lea     ebx,[esp-04h+03ch]
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-030h+03ch],00h
        push    dword [esp-030h+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-08h+03ch],eax
        lea     eax,[esp-08h+03ch]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_146064:
        lea     ecx,[esp-010h+03ch]
        mov     dword [esp-034h+03ch],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-034h+03ch]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-034h+03ch]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-010h+04h+03ch]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-010h+03ch]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+03ch]
L_146111:
; Line 513:   } 
L_146125:
L_146000:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv:
; Line 516:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_146131:
        mov     ebx,dword [esp+04h+010h]
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-04h+010h],00h
        push    dword [esp-04h+010h]
        lea     eax,[esp-0ch+014h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<bool>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+010h]
; Line 521:   } 
L_146132:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__constructor.#__traits.#shared_ptr.5Token~uL~~#__move_constructor.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__constructor.#__traits.#shared_ptr.n1~uL~~R#__move_constructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt_at<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __constructor<__traits<shared_ptr<Token>, unsigned long long>>&, __move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>>(unsigned int, LambdaClosure4__ppEmbed_cpp__e1e322b3&, __constructor<__traits<shared_ptr<Token>, unsigned long long>>&, __move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&&)
@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__constructor.#__traits.#shared_ptr.5Token~uL~~#__move_constructor.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__constructor.#__traits.#shared_ptr.n1~uL~~R#__move_constructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 432: namespace __visitation { 
        add     esp,byte 0ffffffc0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_146139:
        mov     ebp,dword [esp+010h+050h]
        mov     edi,dword [esp+0ch+050h]
        mov     esi,dword [esp+08h+050h]
        mov     ebx,dword [esp+04h+050h]
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-038h+050h],00h
        push    dword [esp-038h+050h]
        lea     eax,[esp-040h+054h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+050h],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+050h],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    dword [esp+ebx*4-08h+05ch]
        add     esp,byte 0ch
; Line 444:   } 
L_146140:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 040h
        ret
section code
section code
        section vsc@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.#__move_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~R#__move_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~ virtual
        [bits 32]
; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__generic_construct<__move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>>(__constructor<__traits<shared_ptr<Token>, unsigned long long>>&, __move_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&&)
@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.#__move_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~R#__move_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~:
        add     esp,byte 0ffffffa8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_146275:
        mov     eax,dword [esp+08h+068h]
        mov     dword [esp-04ch+068h],eax
        mov     eax,dword [esp+04h+068h]
        mov     dword [esp-048h+068h],eax
; Line 795:     __lhs.__destroy(); 
        mov     eax,dword [esp-048h+068h]
        push    eax
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        mov     ebp,dword [esp-04ch+068h]
        mov     eax,ebp
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_146318
        mov     eax,0ffffffffh
        jmp     L_146319
L_146318:
        mov     eax,dword [eax+08h]
L_146319:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
        and     al,al
        jne     L_146278
; Line 797:       __visitation::__base::__visit_alt_at( 
        mov     eax,ebp
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_146352
        mov     esi,0ffffffffh
        jmp     L_146353
L_146352:
        mov     esi,dword [eax+08h]
L_146353:
; Line 697:   } 
        mov     edi,dword [esp-048h+068h]
        mov     dword [esp-04h+068h],edi
        lea     ebx,[esp-04h+068h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-050h+068h],00h
        push    dword [esp-050h+068h]
        lea     eax,[esp-058h+06ch]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure4__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure4__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-01ch+04h+068h],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-01ch+068h],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        call    dword [esp+esi*4-01ch+074h]
        add     esp,byte 0ch
; Line 444:   } 
; Line 805:       __lhs.__index = __rhs.index(); 
        mov     eax,dword [esp-04ch+068h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_146515
        mov     ecx,0ffffffffh
        jmp     L_146516
L_146515:
        mov     ecx,dword [eax+08h]
L_146516:
; Line 697:   } 
        mov     eax,dword [esp-048h+068h]
        mov     dword [eax+08h],ecx
; Line 806:     } 
L_146529:
L_146278:
; Line 807:   } 
L_146276:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 058h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffb4h
        push    ebx
        push    esi
L_146535:
        mov     esi,dword [esp+0ch+054h]
        mov     eax,dword [esp+08h+054h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 800:             __construct_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [esp-04ch+054h],ebx
        and     ebx,ebx
        je      L_146713
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,dword [esp-04ch+05ch]
        push    eax
        call    @std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ ; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
        add     esp,byte 0ch
L_146713:
; Line 790:   } 
; Line 803:           }, 
L_146632:
; Line 493:     } 
L_146536:
        pop     esi
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_146768:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_146784:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?ui?0?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0, unsigned int=0>::__dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_146798:
L_146769:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=0, LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?0?r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_146804:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
L_146805:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffb4h
        push    ebx
        push    esi
L_146812:
        mov     esi,dword [esp+0ch+054h]
        mov     eax,dword [esp+08h+054h]
; Line 490:         return __invoke_constexpr( 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        mov     ebx,eax
        add     esp,byte 08h
; Line 419:   } 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 800:             __construct_alt( 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [esp-04ch+054h],ebx
        and     ebx,ebx
        je      L_146990
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    dword [@std@in_place]
        mov     eax,dword [esp-04ch+05ch]
        push    eax
        call    @std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL ; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
        add     esp,byte 0ch
L_146990:
; Line 790:   } 
; Line 803:           }, 
L_146909:
; Line 493:     } 
L_146813:
        pop     esi
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_147045:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_147061:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?ui?1?~@#__dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1, unsigned int=1>::__dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_147075:
L_147046:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<unsigned int=1, LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.ui?1?r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 503:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
L_147081:
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-034h+034h],00h
        push    dword [esp-034h+034h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
L_147082:
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_147089:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_147107:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_147090:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~:
; Line 510:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_147145:
        mov     esi,dword [esp+04h+03ch]
; Line 512:     return __base::__make_farray(__make_fdiagonal_impl<_Is, _Fp, _Vs...>()...); 
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-02ch+03ch],00h
        push    dword [esp-02ch+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?0?~.q#integer_sequence.uieui?0?ui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=0>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-04h+03ch],eax
        lea     ebx,[esp-04h+03ch]
; Line 505:     return __make_dispatch<_Fp, _Vs...>( 
        mov     dword [esp-030h+03ch],00h
        push    dword [esp-030h+03ch]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?1?ui?1?~.q#integer_sequence.uieui?1?ui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=1, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1, unsigned int=1>)
        add     esp,byte 04h
; Line 507:   } 
        mov     dword [esp-08h+03ch],eax
        lea     eax,[esp-08h+03ch]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_147210:
        lea     ecx,[esp-010h+03ch]
        mov     dword [esp-034h+03ch],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-034h+03ch]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-034h+03ch]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-010h+04h+03ch]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-010h+03ch]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+03ch]
L_147257:
; Line 513:   } 
L_147271:
L_147146:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fdiagonal<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fdiagonal.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~~.qv:
; Line 516:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_147277:
        mov     ebx,dword [esp+04h+010h]
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-04h+010h],00h
        push    dword [esp-04h+010h]
        lea     eax,[esp-0ch+014h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+010h]
; Line 521:   } 
L_147278:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__constructor.#__traits.#shared_ptr.5Token~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__constructor.#__traits.#shared_ptr.n1~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt_at<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __constructor<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(unsigned int, LambdaClosure5__ppEmbed_cpp__e1e322b3&, __constructor<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt_at.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__constructor.#__traits.#shared_ptr.5Token~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n1~uL~28@std@__variant_detail@_Trait?1?~~.quirn0r#__constructor.#__traits.#shared_ptr.n1~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 432: namespace __visitation { 
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_147285:
        mov     ebp,dword [esp+010h+03ch]
        mov     edi,dword [esp+0ch+03ch]
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-024h+03ch],00h
        push    dword [esp-024h+03ch]
        lea     eax,[esp-02ch+040h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    dword [esp+ebx*4-08h+048h]
        add     esp,byte 0ch
; Line 444:   } 
L_147286:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~ virtual
        [bits 32]
; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__generic_construct< const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(__constructor<__traits<shared_ptr<Token>, unsigned long long>>&,  const __copy_constructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__generic_construct.rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~28@std@__variant_detail@_Trait?1?~~.qr#__constructor.#__traits.#shared_ptr.n0~uL~~rx#__copy_constructor.#__traits.#shared_ptr.n0~uL~n1?1?~:
        add     esp,byte 0ffffffc0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_147405:
        mov     eax,dword [esp+08h+050h]
        mov     dword [esp-034h+050h],eax
        mov     eax,dword [esp+04h+050h]
        mov     dword [esp-030h+050h],eax
; Line 795:     __lhs.__destroy(); 
        mov     eax,dword [esp-030h+050h]
        push    eax
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        mov     ebp,dword [esp-034h+050h]
        mov     eax,ebp
; Line 691:     return index() == variant_npos; 
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_147448
        mov     eax,0ffffffffh
        jmp     L_147449
L_147448:
        mov     eax,dword [eax+08h]
L_147449:
; Line 697:   } 
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
; Line 692:   } 
        and     al,al
        jne     L_147408
; Line 797:       __visitation::__base::__visit_alt_at( 
        mov     eax,ebp
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_147482
        mov     esi,0ffffffffh
        jmp     L_147483
L_147482:
        mov     esi,dword [eax+08h]
L_147483:
; Line 697:   } 
        mov     edi,dword [esp-030h+050h]
        mov     dword [esp-04h+050h],edi
        lea     ebx,[esp-04h+050h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 439:     constexpr auto __fdiagonal = 
; Line 518:     constexpr size_t _Np = __uncvref_t<_Vp>::__size(); 
        mov     dword [esp-038h+050h],00h
        push    dword [esp-038h+050h]
        lea     eax,[esp-040h+054h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fdiagonal_impl.r38@LambdaClosure5__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~r#__base.n1?1?#shared_ptr.n2~uL~eui?0?ui?1?~.q#integer_sequence.uieui?0?ui?1?~ ; std::__variant_detail::__visitation::__base::__make_fdiagonal_impl<LambdaClosure5__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, ...unsigned int=0, unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>)
        add     esp,byte 08h
        mov     ecx,dword [eax+04h]
        mov     dword [esp-01ch+04h+050h],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-01ch+050h],ecx
; Line 521:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        call    dword [esp+esi*4-01ch+05ch]
        add     esp,byte 0ch
; Line 444:   } 
; Line 805:       __lhs.__index = __rhs.index(); 
        mov     eax,dword [esp-034h+050h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [eax+08h],byte 0ffffffffh
        jne     L_147629
        mov     ecx,0ffffffffh
        jmp     L_147630
L_147629:
        mov     ecx,dword [eax+08h]
L_147630:
; Line 697:   } 
        mov     eax,dword [esp-030h+050h]
        mov     dword [eax+08h],ecx
; Line 806:     } 
L_147643:
L_147408:
; Line 807:   } 
L_147406:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 040h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_147649:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
        mov     dword [ebp-04ch+014h],03h
L_147728:
L_147715:
        add     esp,byte 010h
L_147650:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair<basic_string<char, char_traits<char>, allocator<char>>&&, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>, tuple<>)
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~:
; Line 507:         : pair(__pc, __first_args, __second_args, 
        add     esp,byte 0ffffffd4h
        push    ebx
L_147735:
        mov     ebx,dword [esp+04h+030h]
        mov     dword [esp-08h+030h],00h
        lea     eax,[esp-08h+030h]
        push    dword [eax]
        mov     dword [esp-04h+034h],00h
        lea     eax,[esp-04h+034h]
        push    dword [eax]
        lea     eax,[esp+010h+038h]
        push    eax
        lea     eax,[esp+0ch+03ch]
        push    eax
        push    dword [esp+08h+040h]
        mov     eax,ebx
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~ ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair<basic_string<char, char_traits<char>, allocator<char>>&&, ..., unsigned int=0, ..., >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&, tuple<>&, __tuple_indices<...unsigned int=0>, __tuple_indices<...>)
        add     esp,byte 018h
L_147785:
L_147825:
L_147812:
L_147799:
L_147841:
        mov     eax,ebx
L_147736:
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@std@#tuple.~@.bctr.qR#tuple.~ virtual
        [bits 32]
; std::tuple<>::tuple(tuple<>&&)
@std@#tuple.~@.bctr.qR#tuple.~:
L_147847:
        mov     eax,dword [esp+04h]
L_147848:
        ret
section code
section code
        section vsc@std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::tuple<basic_string<char, char_traits<char>, allocator<char>>&&>::tuple(tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&&)
@std@#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~:
        push    ecx
L_147855:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_147856:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__access@__base@#__get_alt.ui?0?r#__assignment.#__traits.#shared_ptr.5Token~uL~~~.qr#__assignment.#__traits.#shared_ptr.n0~uL~~ virtual
        [bits 32]
; std::__variant_detail::__access::__base::__get_alt<unsigned int=0, __assignment<__traits<shared_ptr<Token>, unsigned long long>>&>(__assignment<__traits<shared_ptr<Token>, unsigned long long>>&)
@std@__variant_detail@__access@__base@#__get_alt.ui?0?r#__assignment.#__traits.#shared_ptr.5Token~uL~~~.qr#__assignment.#__traits.#shared_ptr.n0~uL~~:
; Line 413: struct __base { 
        push    ecx
L_147895:
        mov     eax,dword [esp+04h+04h]
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::piecewise_construct_t>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
L_147896:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~ virtual
        [bits 32]
; std::__variant_detail::__assignment<__traits<shared_ptr<Token>, unsigned long long>>::__assign_alt__assign_alt<unsigned int=0, shared_ptr<Token>, shared_ptr<Token>&>::::operator ()(integral_constant<bool, std::piecewise_construct_t=1>) const 
@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~:
; Line 915:         void operator()(true_type) const { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff88h
        push    ebx
        push    esi
L_147919:
        mov     ecx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 916:           __this->__emplace<_Ip>(_VSTD::forward<_Arg>(__arg)); 
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 900:     this->__destroy(); 
        push    esi
        call    @std@__variant_detail@#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~@__destroy.qv ; std::__variant_detail::__destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>::__destroy()
        add     esp,byte 04h
        mov     eax,esi
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_148021
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        push    dword [@std@in_place]
        mov     eax,dword [ebp-078h]
        push    eax
        call    @std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ ; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
        add     esp,byte 0ch
L_148021:
; Line 790:   } 
; Line 903:     this->__index = _Ip; 
        mov     dword [esi+08h],00h
; Line 905:   } 
; Line 917:         } 
        mov     dword [ebp-048h+014h],01h
L_148083:
L_147920:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~ virtual
        [bits 32]
@.xc@std@__variant_detail@#__assignment.#__traits.#shared_ptr.5Token~uL~~@__assign_alt#__assign_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~@@.bcall.xq#integral_constant.4booln1?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      0ch
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_148089:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_148199:
L_148154:
; Line 493:     } 
L_148090:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_148207:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_148223:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_148237:
L_148208:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_148243:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_148259:
; Line 527:   } 
L_148273:
L_148244:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_148279:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_148389:
L_148344:
; Line 493:     } 
L_148280:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_148397:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_148413:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_148427:
L_148398:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_148433:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_148449:
; Line 527:   } 
L_148463:
L_148434:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_148469:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_148487:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_148470:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_148525:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_148558:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_148605:
L_148619:
; Line 536:   } 
L_148633:
L_148647:
L_148526:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_148653:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_148654:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_148661:
        mov     eax,dword [esp+04h]
L_148662:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_148669:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_148670:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure6__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_148709:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure6__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure6__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_148808
        mov     eax,0ffffffffh
        jmp     L_148809
L_148808:
        mov     eax,dword [esi+08h]
L_148809:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_148710:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__construct_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL virtual
        [bits 32]
; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__construct_alt<unsigned int=1, unsigned long long, unsigned long long&>(__alt<unsigned int=1, unsigned long long>&, unsigned long long&)
@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__construct_alt.ui?1?uLruL~.qr#__alt.ui?1?uL~ruL:
        add     esp,byte 0fffffff0h
        push    ebx
L_148847:
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
        mov     eax,ebx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        and     eax,eax
        je      L_148852
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    dword [@std@in_place]
        push    eax
        call    @std@__variant_detail@#__alt.ui?1?uL~@.bctr.ruL~.q15@std@in_place_truL ; std::__variant_detail::__alt<unsigned int=1, unsigned long long>::__alt<unsigned long long&, >(std::in_place_t, unsigned long long&)
        add     esp,byte 0ch
L_148852:
        mov     eax,ebx
; Line 790:   } 
L_148848:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
@std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv:
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_148904:
        mov     ebx,dword [esp+04h+024h]
        mov     eax,ebx
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [esp-04h+024h],00h
        lea     eax,[esp-04h+024h]
        mov     dword [esp-08h+024h],00h
        lea     esi,[esp-08h+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_149004:
L_149018:
        mov     eax,ebx
; Line 1727:     __get_db()->__insert_c(this); 
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     eax,ebx
L_148905:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<NumericToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_149024:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_149108:
        mov     dword [ebp-048h+014h],02h
L_149148:
L_149135:
L_149122:
L_149164:
L_149025:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.12NumericToken~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
        push    edi
L_149170:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     esi,ebx
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     edi,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx],@Token@_.vt+0ch
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     dword [ebx],@NumericToken@_.vt+0ch
        mov     byte [ebx+018h],00h
        mov     dword [ebx+020h],00h
        mov     dword [ebx+020h+04h],00h
        mov     eax,esi
        add     eax,byte 028h
        push    byte 00h
        push    eax
        call    @FPF@SetZero.qi ; FPF::SetZero(int)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],03h
        mov     dword [ebx+038h],00h
        push    edi
        push    esi
        mov     eax,dword [ebx]
        call    dword [eax+044h]
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],04h
L_149290:
        mov     dword [ebp-048h+014h],05h
L_149330:
L_149317:
L_149304:
L_149346:
        mov     eax,ebx
L_149171:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@5Token virtual
        [bits 32]
@.xt@5Token:
        dd      @Token@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@3FPF virtual
        [bits 32]
@.xt@3FPF:
        dd      @FPF@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      046h
        db      050h
        db      046h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      010h
        dd      00h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?r#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, basic_string<char, char_traits<char>, allocator<char>>&>::__tuple_impl<..., unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.eui?0?r#basic_string.c#char_traits.c~#allocator.c~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~:
        push    ecx
        push    ecx
        push    ecx
L_149352:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_149420:
L_149434:
L_149448:
L_149462:
L_149353:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<NumericToken>&>::__tuple_impl<..., unsigned int=0, allocator<NumericToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.12NumericToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_149468:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_149536:
L_149550:
L_149564:
L_149578:
L_149469:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<CharacterToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_149584:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_149668:
        mov     dword [ebp-048h+014h],02h
L_149708:
L_149695:
L_149682:
L_149724:
L_149585:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.14CharacterToken~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
        push    edi
L_149730:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     esi,ebx
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     edi,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx],@Token@_.vt+0ch
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     dword [ebx],@CharacterToken@_.vt+0ch
        mov     dword [ebx+018h],00h
        mov     dword [ebx+018h+04h],00h
        push    edi
        push    esi
        mov     eax,dword [ebx]
        call    dword [eax+044h]
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],03h
L_149832:
        mov     dword [ebp-048h+014h],04h
L_149872:
L_149859:
L_149846:
L_149888:
        mov     eax,ebx
L_149731:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<CharacterToken>&>::__tuple_impl<..., unsigned int=0, allocator<CharacterToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.14CharacterToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_149894:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_149962:
L_149976:
L_149990:
L_150004:
L_149895:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<StringToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_150010:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_150094:
        mov     dword [ebp-048h+014h],02h
L_150134:
L_150121:
L_150108:
L_150150:
L_150011:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.11StringToken~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<StringToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff6ch
        push    ebx
        push    esi
        push    edi
L_150156:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-090h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     eax,dword [ebp-090h]
        mov     dword [ebp-08ch],eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-094h],eax
        mov     eax,dword [ebp-08ch]
        mov     edx,@Token@_.vt+0ch
        mov     ecx,dword [ebp-090h]
        mov     dword [ecx],edx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     ecx,@StringToken@_.vt+0ch
        mov     eax,dword [ebp-090h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-090h]
        mov     byte [eax+018h],00h
        mov     eax,dword [ebp-090h]
        mov     byte [eax+019h],01h
        mov     edi,dword [ebp-08ch]
        add     edi,byte 01ch
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-07ch],00h
        lea     eax,[ebp-07ch]
        mov     dword [ebp-080h],00h
        lea     ebx,[ebp-080h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_150356:
L_150370:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__zero.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-048h+014h],03h
        mov     edi,dword [ebp-08ch]
        add     edi,byte 030h
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-084h],00h
        lea     eax,[ebp-084h]
        mov     dword [ebp-088h],00h
        lea     ebx,[ebp-088h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_150484:
L_150498:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__zero.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-048h+014h],04h
; Line 855:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-094h]
        push    eax
        mov     eax,dword [ebp-08ch]
        push    eax
        mov     eax,dword [ebp-090h]
        mov     eax,dword [eax]
        call    dword [eax+044h]
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],05h
L_150514:
        mov     dword [ebp-048h+014h],06h
L_150554:
L_150541:
L_150528:
L_150570:
        mov     eax,dword [ebp-090h]
L_150157:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@56@std@#basic_string.C#char_traits.C~#allocator.C~~@__long virtual
        [bits 32]
@.xt@56@std@#basic_string.C#char_traits.C~#allocator.C~~@__long:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      06ch
        db      06fh
        db      06eh
        db      067h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@57@std@#basic_string.C#char_traits.C~#allocator.C~~@__short virtual
        [bits 32]
@.xt@57@std@#basic_string.C#char_traits.C~#allocator.C~~@__short:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      06fh
        db      072h
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@55@std@#basic_string.C#char_traits.C~#allocator.C~~@__raw virtual
        [bits 32]
@.xt@55@std@#basic_string.C#char_traits.C~#allocator.C~~@__raw:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      072h
        db      061h
        db      077h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep virtual
        [bits 32]
@.xt@55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep:
        dd      00h
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      05fh
        db      05fh
        db      072h
        db      065h
        db      070h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.C~ virtual
        [bits 32]
@.xt@#allocator.C~:
        dd      @std@#allocator.C~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep#allocator.C~~ virtual
        [bits 32]
@.xt@#__compressed_pair.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep#allocator.C~~:
        dd      @std@#__compressed_pair.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep#allocator.C~~@.bdtr.qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~+0
        dd      0ch
        dd      00h
section code
section code
        section vsc@.xt@#basic_string.C#char_traits.C~#allocator.C~~ virtual
        [bits 32]
@.xt@#basic_string.C#char_traits.C~#allocator.C~~:
        dd      @std@#basic_string.C#char_traits.C~#allocator.C~~@.bdtr.qv+0
        dd      014h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      073h
        db      069h
        db      063h
        db      05fh
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      00h
        dd      0800h
        dd      @.xt@#__basic_string_common.4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      010h
        dd      00h
        dd      06h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<StringToken>&>::__tuple_impl<..., unsigned int=0, allocator<StringToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.11StringToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_150576:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_150644:
L_150658:
L_150672:
L_150686:
L_150577:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_150692:
        mov     eax,dword [esp+04h]
L_150726:
L_150693:
        ret
section code
section code
        section vsc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~ virtual
        [bits 32]
; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::__shared_ptr_pointer(TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>)
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff78h
        push    ebx
        push    esi
        push    edi
L_150732:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ebx
        xor     edx,edx
        mov     ecx,edx
        mov     dword [esi],@std@__shared_count@_.vt+0ch
        mov     dword [edi+04h],ecx
        mov     dword [ebp-050h+014h],01h
        mov     dword [esi],@std@__shared_weak_count@_.vt+0ch
        mov     dword [edi+08h],edx
        mov     dword [ebp-050h+014h],02h
        mov     dword [ebp-050h+014h],03h
        mov     ecx,@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@_.vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        lea     eax,[ebp+0ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ebp-08h],eax
; Line 2206:     } 
        lea     eax,[ebp-08h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-088h],eax
; Line 2206:     } 
        lea     eax,[ebp-08h]
        push    eax
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bctr.#__compressed_pair.pn0#default_delete.n0~~#allocator.n0~~.qR#__compressed_pair.pn0#default_delete.n0~~R#allocator.n0~ ; std::__compressed_pair<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, allocator<TokenizerSettings>>::__compressed_pair<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, allocator<TokenizerSettings>, >(__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>&&, allocator<TokenizerSettings>&&)
L_150962:
L_150949:
L_150977:
L_150936:
        add     esp,byte 0ch
        mov     dword [ebp-050h+014h],04h
L_150992:
L_151006:
        mov     eax,ebx
L_150733:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~ virtual
        [bits 32]
@.xc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bctr.qpn0#default_delete.n0~#allocator.n0~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#allocator.17TokenizerSettings~+0
        dd      014h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#allocator.17TokenizerSettings~@.bctr.qR#allocator.n0~ virtual
        [bits 32]
; std::allocator<TokenizerSettings>::allocator(allocator<TokenizerSettings>&&)
@std@#allocator.17TokenizerSettings~@.bctr.qR#allocator.n0~:
L_151012:
        mov     eax,dword [esp+04h]
L_151013:
        ret
section code
section code
        section vsc@std@#default_delete.17TokenizerSettings~@.bctr.qR#default_delete.n0~ virtual
        [bits 32]
; std::default_delete<TokenizerSettings>::default_delete(default_delete<TokenizerSettings>&&)
@std@#default_delete.17TokenizerSettings~@.bctr.qR#default_delete.n0~:
L_151020:
        mov     eax,dword [esp+04h]
L_151021:
        ret
section code
section code
        section vsc@std@#shared_ptr.17TokenizerSettings~@__enable_weak_this.qe virtual
        [bits 32]
; std::shared_ptr<TokenizerSettings>::__enable_weak_this(...)
@std@#shared_ptr.17TokenizerSettings~@__enable_weak_this.qe:
L_151028:
L_151029:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_151036:
        mov     eax,dword [esp+04h]
L_151037:
        ret
section code
section code
        section vsc@TokenizerSettings@.bdtr.qv virtual
        [bits 32]
; TokenizerSettings::~TokenizerSettings()
@TokenizerSettings@.bdtr.qv:
L_151044:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
L_151045:
        ret
section code
section code
        section vsc@std@#default_delete.17TokenizerSettings~@.bdtr.qv virtual
        [bits 32]
; std::default_delete<TokenizerSettings>::~default_delete()
@std@#default_delete.17TokenizerSettings~@.bdtr.qv:
L_151050:
L_151051:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<TokenizerSettings*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~@.bdtr.qv:
L_151056:
L_151057:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv:
L_151062:
L_151076:
L_151063:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p17TokenizerSettings#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>::~__compressed_pair()
@std@#__compressed_pair.p17TokenizerSettings#default_delete.n0~~@.bdtr.qv:
L_151082:
L_151109:
L_151096:
L_151124:
L_151083:
        ret
section code
section code
        section vsc@std@#unique_ptr.17TokenizerSettings#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<TokenizerSettings, default_delete<TokenizerSettings>>::~unique_ptr()
@std@#unique_ptr.17TokenizerSettings#default_delete.n0~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_151130:
        mov     edx,dword [esp+04h+018h]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_151136
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+018h],eax
        and     eax,eax
        je      L_151249
        mov     eax,dword [esp-010h+018h]
        add     eax,byte 04h
        jmp     L_151250
L_151249:
        mov     eax,dword [esp-010h+018h]
L_151250:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-014h+018h],ebx
        and     ebx,ebx
        je      L_151252
        mov     eax,dword [esp-014h+018h]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
L_151264:
        mov     eax,dword [esp-014h+018h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_151252:
; Line 2364:   } 
L_151232:
L_151136:
; Line 2619:   } 
L_151153:
L_151306:
L_151293:
L_151321:
L_151280:
L_151131:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@#allocator.17TokenizerSettings~@.bdtr.qv virtual
        [bits 32]
; std::allocator<TokenizerSettings>::~allocator()
@std@#allocator.17TokenizerSettings~@.bdtr.qv:
L_151328:
L_151329:
        ret
section code
section code
        section vsc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0 virtual
        [bits 32]
; std::__function::__value_func<(*)(char const *, bool)>::__value_func<(*)(*)(char const *, bool), void, >((*)(*)(char const *, bool)&&)
@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0:
; Line 1786:     template <class _Fp, 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
        push    ebx
L_151334:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-04h],00h
        lea     ecx,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~ ; std::__function::__value_func<(*)(char const *, bool)>::__value_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, >((*)(*)(char const *, bool)&&,  const allocator<(*)(*)(char const *, bool)>&)
        add     esp,byte 0ch
        mov     dword [ebp-04ch+014h],02h
        mov     eax,ebx
L_151335:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.pqpxc4bool.n0~ virtual
        [bits 32]
@.xt@#allocator.pqpxc4bool.n0~:
        dd      @std@#allocator.pqpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0 virtual
        [bits 32]
@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0v~.qRpqpxcn0.n0:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TemplatedIdentifierToken<kw>>, int=0, bool=0>::__compressed_pair_elem<allocator<TemplatedIdentifierToken<bool>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<TemplatedIdentifierToken<std::piecewise_construct_t>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_151378:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_151462:
        mov     dword [ebp-048h+014h],02h
L_151502:
L_151489:
L_151476:
L_151518:
L_151379:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedIdentifierToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedIdentifierToken.2kw~~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~ virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, bool, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, bool>>>*&, std::__variant_detail::_Trait&, ..., unsigned int=0, unsigned int=1, unsigned int=2, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t>>>*&, std::__variant_detail::_Trait&>, __tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>)
@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff58h
        push    ebx
        push    esi
        push    edi
L_151524:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-09ch],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     eax,dword [ebp-09ch]
        mov     dword [ebp-0a8h],eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-0a4h],eax
        lea     eax,[ebp+010h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     dword [ebp-08ch],eax
        and     eax,eax
        je      L_151628
        mov     eax,dword [ebp-08ch]
        add     eax,byte 04h
        jmp     L_151629
L_151628:
        mov     eax,dword [ebp-08ch]
L_151629:
        push    eax
        call    @std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ebx,dword [eax]
        lea     eax,[ebp+010h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     dword [ebp-090h],eax
        and     eax,eax
        je      L_151662
        mov     eax,dword [ebp-090h]
        add     eax,byte 08h
        jmp     L_151663
L_151662:
        mov     eax,dword [ebp-090h]
L_151663:
        push    eax
        call    @std@#__tuple_leaf.ui?2?r4booln0?0?~@get.qv ; std::__tuple_leaf<unsigned int=2, bool&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     al,byte [eax]
        mov     byte [ebp-09dh],al
        mov     eax,dword [ebp-0a8h]
        mov     edx,@Token@_.vt+0ch
        mov     ecx,dword [ebp-09ch]
        mov     dword [ecx],edx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     ecx,@#TemplatedIdentifierToken.2kw~@_.vt+0ch
        mov     eax,dword [ebp-09ch]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-09ch]
        mov     dword [eax+018h],0ffffffffh
        mov     eax,dword [ebp-09ch]
        mov     byte [eax+01ch],01h
        mov     eax,dword [ebp-09ch]
        mov     dword [eax+020h],ebx
        mov     edi,dword [ebp-0a8h]
        add     edi,byte 024h
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [ebp-094h],00h
        lea     eax,[ebp-094h]
        mov     dword [ebp-098h],00h
        lea     ebx,[ebp-098h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_151792:
L_151806:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
        mov     dword [ebp-048h+014h],03h
        mov     al,byte [ebp-09dh]
        mov     ecx,dword [ebp-09ch]
        mov     byte [ecx+038h],al
; Line 63:         Parse(line); 
        mov     eax,dword [ebp-0a4h]
        push    eax
        mov     eax,dword [ebp-0a8h]
        push    eax
        mov     eax,dword [ebp-09ch]
        mov     eax,dword [eax]
        call    dword [eax+044h]
        add     esp,byte 08h
; Line 64:     } 
        mov     dword [ebp-048h+014h],04h
L_151822:
        mov     dword [ebp-048h+014h],05h
L_151862:
L_151876:
L_151890:
L_151849:
L_151836:
L_151906:
        mov     eax,dword [ebp-09ch]
L_151525:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1eui?0?ui?1?ui?2?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.eui?0?ui?1?ui?2?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~+0
        dd      010h
        dd      00h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.eui?0?ui?1?ui?2?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~.q#__tuple_indices.eui?0?ui?1?ui?2?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1 virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&>::__tuple_impl<..., unsigned int=0, unsigned int=1, unsigned int=2, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, bool&, >(__tuple_indices<...unsigned int=0, unsigned int=1, unsigned int=2>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, bool&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tp, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tp>>>*&, bool&)
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?ui?2?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~r4bool~@.bctr.eui?0?ui?1?ui?2?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~.q#__tuple_indices.eui?0?ui?1?ui?2?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~rn1:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        add     esp,byte 0ffffffdch
        push    ebx
        push    esi
L_151912:
        mov     ecx,dword [esp+020h+02ch]
        mov     edx,dword [esp+01ch+02ch]
        mov     ebx,dword [esp+018h+02ch]
        mov     eax,dword [esp+04h+02ch]
        mov     esi,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [esi],ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 232:             : __value_(_VSTD::forward<_Tp>(__t)) 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [eax+04h],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [eax+08h],ecx
L_152080:
L_152094:
L_152108:
L_152122:
L_151913:
        pop     esi
        pop     ebx
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedIdentifierToken.n0~~ee3_Tlr#allocator.#TemplatedIdentifierToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedIdentifierToken.n0~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedIdentifierToken<kw>>&>::__tuple_impl<..., unsigned int=0, allocator<TemplatedIdentifierToken<kw>>&, ..., ..., _Tl, allocator<TemplatedIdentifierToken<_Tl>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<TemplatedIdentifierToken<_Tl>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<TemplatedIdentifierToken<_Tp>>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedIdentifierToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedIdentifierToken.n0~~ee3_Tlr#allocator.#TemplatedIdentifierToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedIdentifierToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedIdentifierToken.n0~~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_152128:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_152196:
L_152210:
L_152224:
L_152238:
L_152129:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TemplatedKeywordToken<kw>>, int=0, bool=0>::__compressed_pair_elem<allocator<TemplatedKeywordToken<bool>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<TemplatedKeywordToken<std::piecewise_construct_t>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_152244:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_152328:
        mov     dword [ebp-048h+014h],02h
L_152368:
L_152355:
L_152342:
L_152384:
L_152245:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bctr.r#allocator.#TemplatedKeywordToken.n0~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.#TemplatedKeywordToken.2kw~~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~ virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, bool, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, bool>>>*&, ..., unsigned int=0, unsigned int=1, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, std::piecewise_construct_t>>>*&>, __tuple_indices<...unsigned int=0, unsigned int=1>)
@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff90h
        push    ebx
        push    esi
        push    edi
L_152390:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     esi,ebx
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-070h],eax
        lea     eax,[ebp+010h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     dword [ebp-06ch],eax
        and     eax,eax
        je      L_152494
        mov     eax,dword [ebp-06ch]
        add     eax,byte 04h
        jmp     L_152495
L_152494:
        mov     eax,dword [ebp-06ch]
L_152495:
        push    eax
        call    @std@#__tuple_leaf.ui?1?rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~4bool?0?~@get.qv ; std::__tuple_leaf<unsigned int=1, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, bool=0>::get()
        add     esp,byte 04h
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edi,dword [eax]
        mov     dword [ebx],@Token@_.vt+0ch
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     dword [ebx],@#TemplatedKeywordToken.2kw~@_.vt+0ch
        mov     dword [ebx+018h],0ffffffffh
        mov     dword [ebx+01ch],edi
        mov     eax,dword [ebp-070h]
        push    eax
        push    esi
        mov     eax,dword [ebx]
        call    dword [eax+044h]
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],03h
L_152526:
        mov     dword [ebp-048h+014h],04h
L_152566:
L_152580:
L_152553:
L_152540:
L_152596:
        mov     eax,ebx
L_152391:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~eui?0?ui?1?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.eui?0?ui?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.eui?0?ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0, unsigned int=1>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&>::__tuple_impl<..., unsigned int=0, unsigned int=1, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>*&, ..., ..., _Tl, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&, >(__tuple_indices<...unsigned int=0, unsigned int=1>, __tuple_types<basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tl, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tl>>>*&>, __tuple_indices<...>, __tuple_types<..._Tp>, basic_string<char, char_traits<char>, allocator<char>>&, unordered_map<basic_string<char, char_traits<char>, allocator<char>>, _Tp, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, _Tp>>>*&)
@std@#__tuple_impl.#__tuple_indices.eui?0?ui?1?~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~@.bctr.eui?0?ui?1?r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~ee3_Tlr#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~.q#__tuple_indices.eui?0?ui?1?~#__tuple_types.r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#basic_string.c#char_traits.c~#allocator.c~~rp#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~n0#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        add     esp,byte 0ffffffe8h
        push    ebx
L_152602:
        mov     ecx,dword [esp+01ch+01ch]
        mov     edx,dword [esp+018h+01ch]
        mov     eax,dword [esp+04h+01ch]
        mov     ebx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 232:             : __value_(_VSTD::forward<_Tp>(__t)) 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [eax+04h],ecx
L_152720:
L_152734:
L_152748:
L_152762:
L_152603:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedKeywordToken.n0~~ee3_Tlr#allocator.#TemplatedKeywordToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedKeywordToken.n0~~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<TemplatedKeywordToken<kw>>&>::__tuple_impl<..., unsigned int=0, allocator<TemplatedKeywordToken<kw>>&, ..., ..., _Tl, allocator<TemplatedKeywordToken<_Tl>>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<TemplatedKeywordToken<_Tl>>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<TemplatedKeywordToken<_Tp>>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.#TemplatedKeywordToken.2kw~~~@.bctr.eui?0?r#allocator.#TemplatedKeywordToken.n0~~ee3_Tlr#allocator.#TemplatedKeywordToken.n0~~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.#TemplatedKeywordToken.n0~~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.#TemplatedKeywordToken.n0~~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_152768:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_152836:
L_152850:
L_152864:
L_152878:
L_152769:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<ErrorToken>, int=0, bool=0>::__compressed_pair_elem<allocator<bool>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<std::piecewise_construct_t>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_152884:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_152968:
        mov     dword [ebp-048h+014h],02h
L_153008:
L_152995:
L_152982:
L_153024:
L_152885:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bctr.r#allocator.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.r#allocator.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#allocator.10ErrorToken~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::__compressed_pair_elem<basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
        push    edi
L_153030:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     esi,ebx
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     edi,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebx],@Token@_.vt+0ch
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string()
        add     esp,byte 04h
        mov     dword [ebp-048h+014h],01h
        mov     dword [ebp-048h+014h],02h
        mov     dword [ebx],@ErrorToken@_.vt+0ch
        push    edi
        push    esi
        mov     eax,dword [ebx]
        call    dword [eax+044h]
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],03h
L_153132:
        mov     dword [ebp-048h+014h],04h
L_153172:
L_153159:
L_153146:
L_153188:
        mov     eax,ebx
L_153031:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bctr.r#basic_string.c#char_traits.c~#allocator.c~~eui?0?~.q26@std@piecewise_construct_t#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.r#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<ErrorToken>&>::__tuple_impl<..., unsigned int=0, allocator<ErrorToken>&, ..., ..., _Tl, allocator<_Tl>&, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<_Tl>&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<_Tp>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~r#allocator.10ErrorToken~~@.bctr.eui?0?r#allocator.n0~ee3_Tlr#allocator.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.r#allocator.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~r#allocator.n0~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_153194:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_153262:
L_153276:
L_153290:
L_153304:
L_153195:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~31@std@random_access_iterator_tag virtual
        [bits 32]
; std::__distance<move_iterator<char**>>(move_iterator<char**>, move_iterator<char**>, std::random_access_iterator_tag)
@std@#__distance.#move_iterator.ppc~~.q#move_iterator.ppc~#move_iterator.ppc~31@std@random_access_iterator_tag:
; Line 688: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ebx
L_153310:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 692:     return __last - __first; 
; Line 1295:     return __x.base() - __y.base(); 
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        mov     ebx,eax
        sar     ebx,02h
; Line 1296: } 
        lea     eax,[esp+0ch+04h]
        push    eax
        call    @std@input_iterator_tag@.bdtr.qv ; std::input_iterator_tag::~input_iterator_tag()
        add     esp,byte 04h
L_153400:
L_153387:
L_153374:
L_153416:
L_153430:
        mov     eax,ebx
; Line 693: } 
L_153470:
L_153457:
L_153444:
L_153486:
L_153500:
L_153311:
        pop     ebx
        ret
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair< const basic_string<char, char_traits<char>, allocator<char>>&, >(std::piecewise_construct_t, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>, tuple<>)
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~:
; Line 507:         : pair(__pc, __first_args, __second_args, 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
        push    ebx
L_153506:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        lea     eax,[ebp+014h]
        push    eax
        lea     eax,[ebp+010h]
        push    eax
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~ ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair< const basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, ..., >(std::piecewise_construct_t, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&, tuple<>&, __tuple_indices<...unsigned int=0>, __tuple_indices<...>)
        add     esp,byte 018h
L_153556:
        mov     dword [ebp-050h+014h],01h
L_153596:
L_153583:
L_153570:
L_153612:
        mov     eax,ebx
L_153507:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ virtual
        [bits 32]
@.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~ virtual
        [bits 32]
@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~:
        dd      @.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~~.q26@std@piecewise_construct_t#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~#tuple.~+0
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~+0
        dd      010h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::tuple< const basic_string<char, char_traits<char>, allocator<char>>&>::tuple(tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&&)
@std@#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~@.bctr.qR#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~:
        push    ecx
L_153618:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_153619:
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t virtual
        [bits 32]
; std::__variant_detail::__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>::__union(std::__variant_detail::__valueless_t)
@std@__variant_detail@#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~@.bctr.q35@std@__variant_detail@__valueless_t:
L_153658:
        mov     eax,dword [esp+04h]
        mov     byte [eax],00h
L_153676:
L_153659:
        ret
section code
section code
        section vsc@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__construct_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~.qr#__alt.ui?0?#shared_ptr.n0~~r#shared_ptr.n0~ virtual
        [bits 32]
; std::__variant_detail::__constructor<__traits<shared_ptr<Token>, unsigned long long>>::__construct_alt<unsigned int=0, shared_ptr<Token>, shared_ptr<Token>&>(__alt<unsigned int=0, shared_ptr<Token>>&, shared_ptr<Token>&)
@std@__variant_detail@#__constructor.#__traits.#shared_ptr.5Token~uL~~@#__construct_alt.ui?0?#shared_ptr.n0~r#shared_ptr.n0~~.qr#__alt.ui?0?#shared_ptr.n0~~r#shared_ptr.n0~:
        add     esp,byte 0fffffff0h
        push    ebx
L_153682:
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
; Line 787:     ::new ((void*)_VSTD::addressof(__a)) 
        mov     eax,ebx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        and     eax,eax
        je      L_153687
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    dword [@std@in_place]
        push    eax
        call    @std@__variant_detail@#__alt.ui?0?#shared_ptr.5Token~~@.bctr.r#shared_ptr.n0~~.q15@std@in_place_tr#shared_ptr.n0~ ; std::__variant_detail::__alt<unsigned int=0, shared_ptr<Token>>::__alt<shared_ptr<Token>&, >(std::in_place_t, shared_ptr<Token>&)
        add     esp,byte 0ch
L_153687:
        mov     eax,ebx
; Line 790:   } 
L_153683:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_153739:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_153849:
L_153804:
; Line 493:     } 
L_153740:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_153857:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_153873:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_153887:
L_153858:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_153893:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_153909:
; Line 527:   } 
L_153923:
L_153894:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_153929:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_154039:
L_153994:
; Line 493:     } 
L_153930:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_154047:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_154063:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_154077:
L_154048:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_154083:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_154099:
; Line 527:   } 
L_154113:
L_154084:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_154119:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_154137:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_154120:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_154175:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_154208:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_154255:
L_154269:
; Line 536:   } 
L_154283:
L_154297:
L_154176:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_154303:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_154304:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_154311:
        mov     eax,dword [esp+04h]
L_154312:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_154319:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_154320:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure7__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_154359:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure7__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure7__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_154458
        mov     eax,0ffffffffh
        jmp     L_154459
L_154458:
        mov     eax,dword [esi+08h]
L_154459:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_154360:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_154497:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_154607:
L_154562:
; Line 493:     } 
L_154498:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_154615:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_154631:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_154645:
L_154616:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_154651:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_154667:
; Line 527:   } 
L_154681:
L_154652:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_154687:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_154797:
L_154752:
; Line 493:     } 
L_154688:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_154805:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_154821:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_154835:
L_154806:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_154841:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_154857:
; Line 527:   } 
L_154871:
L_154842:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_154877:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_154895:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_154878:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_154933:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_154966:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_155013:
L_155027:
; Line 536:   } 
L_155041:
L_155055:
L_154934:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_155061:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_155062:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_155069:
        mov     eax,dword [esp+04h]
L_155070:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_155077:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_155078:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure8__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_155117:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure8__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure8__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_155216
        mov     eax,0ffffffffh
        jmp     L_155217
L_155216:
        mov     eax,dword [esi+08h]
L_155217:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_155118:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_155255:
        mov     edx,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        call    @std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ ; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
        add     esp,byte 0ch
        mov     dword [ebp-048h+014h],01h
L_155289:
L_155256:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~ virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair<basic_string<char, char_traits<char>, allocator<char>>&&, ..., unsigned int=0, ..., >(std::piecewise_construct_t, tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&, tuple<>&, __tuple_indices<...unsigned int=0>, __tuple_indices<...>)
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.R#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~:
        add     esp,byte 0ffffffc4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_155295:
        mov     eax,dword [esp+0ch+04ch]
        mov     ebx,dword [esp+04h+04ch]
        mov     esi,ebx
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     ebp,dword [eax]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,esi
        add     edi,byte 04h
        mov     esi,ebp
        add     esi,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,esi
        push    eax
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep ; std::basic_string<char, char_traits<char>, allocator<char>>::__rep::__rep(std::basic_string<char, char_traits<char>, allocator<char>>::__rep&&)
        add     esp,byte 08h
        mov     ecx,edi
        add     ecx,byte 0ch
        mov     eax,esi
        add     eax,dword 0ch
        push    eax
        push    ecx
        call    @std@#allocator.c~@.bctr.qR#allocator.c~ ; std::allocator<char>::allocator(allocator<char>&&)
        add     esp,byte 08h
; Line 1872:     __str.__zero(); 
        push    ebp
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1874:     __get_db()->__insert_c(this); 
        mov     eax,ebx
        add     eax,byte 014h
        mov     dword [ebx+04h+014h],00h
        mov     dword [ebx+08h+014h],00h
        mov     edi,eax
        add     edi,byte 0ch
        xor     eax,eax
        mov     dword [esp-038h+04ch],eax
        lea     eax,[esp-038h+04ch]
        mov     dword [esp-03ch+04ch],00h
        lea     esi,[esp-03ch+04ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    edi
        call    @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(std::__variant_detail::_Trait&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_155561:
; Line 438: } 
; Line 498:             __get_db()->__insert_c(this); 
; Line 1403: } 
L_155577:
L_155591:
L_155605:
        mov     eax,ebx
L_155296:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
        add     esp,byte 0ffffffdch
L_155611:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?0?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?0?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=0>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@#shared_ptr.5Token~@.bdtr.qv ; std::shared_ptr<Token>::~shared_ptr()
        add     esp,byte 04h
L_155721:
L_155676:
; Line 493:     } 
L_155612:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_155729:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_155745:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?0?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=0>::__dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_155759:
L_155730:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_155765:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
L_155781:
; Line 527:   } 
L_155795:
L_155766:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 486:   struct __dispatcher { 
        add     esp,byte 0ffffffdch
L_155801:
        mov     eax,dword [esp+08h+024h]
; Line 490:         return __invoke_constexpr( 
; Line 3421:          class _DecayFp = typename decay<_Fp>::type, 
; Line 417:     return __union::__get_alt(_VSTD::forward<_Vp>(__v).__data, 
        push    dword [@std@#in_place_index.ui?1?~]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        call    @std@__variant_detail@__access@__union@#__get_alt.r#__union.28@std@__variant_detail@_Trait?1?ui?0?#shared_ptr.5Token~uL~ui?1?~.qr#__union.n0?1?ui?0?#shared_ptr.n1~uL~#in_place_index_t.ui?1?~ ; std::__variant_detail::__access::__union::__get_alt<__union<std::__variant_detail::_Trait=1, unsigned int=0, shared_ptr<Token>, unsigned long long>&, unsigned int=1>(__union<Token=1, unsigned int=0, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&, in_place_index_t<unsigned int=1>)
        add     esp,byte 08h
; Line 419:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
L_155911:
L_155866:
; Line 493:     } 
L_155802:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 497:   inline _LIBCPP_INLINE_VISIBILITY 
L_155919:
; Line 499:     return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>; 
L_155935:
        mov     eax,@std@__variant_detail@__visitation@__base@#__dispatcher.eui?1?~@#__dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__dispatcher<...unsigned int=1>::__dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)
; Line 500:   } 
L_155949:
L_155920:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 524:   inline _LIBCPP_INLINE_VISIBILITY 
L_155955:
; Line 526:     return __make_dispatch<_Fp, _Vs...>(__is); 
        push    dword [esp+04h]
        call    @std@__variant_detail@__visitation@__base@#__make_dispatch.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_dispatch<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
L_155971:
; Line 527:   } 
L_155985:
L_155956:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_farray<(*)(*)(LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)>((*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&, (*)(*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&&)
@std@__variant_detail@__visitation@__base@#__make_farray.pqr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v~.qRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.vRpqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v:
; Line 478:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_155991:
        mov     edx,dword [esp+04h+018h]
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_156009:
        mov     ebx,edx
        mov     dword [ebx+04h],00h
        mov     dword [ebx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [edx+04h],eax
        mov     eax,dword [esp+04h+018h]
; Line 483:   } 
L_155992:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
@std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V:
; Line 530:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffc8h
        push    ebx
        push    esi
L_156047:
        mov     esi,dword [esp+04h+040h]
; Line 534:     return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-08h+040h],00h
        push    dword [esp-08h+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?0?~.q#integer_sequence.uieui?0?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=0>(integer_sequence<unsigned int, ...unsigned int=0>)
        add     esp,byte 04h
        mov     dword [esp-010h+040h],eax
        lea     ebx,[esp-010h+040h]
        mov     dword [esp-0ch+040h],00h
        push    dword [esp-0ch+040h]
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eui?1?~.q#integer_sequence.uieui?1?~.pqrn0r#__base.n1?1?#shared_ptr.n2~uL~ ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ...unsigned int=1>(integer_sequence<unsigned int, ...unsigned int=1>)
        add     esp,byte 04h
        mov     dword [esp-014h+040h],eax
        lea     eax,[esp-014h+040h]
; Line 480:     __std_visit_visitor_return_type_check<__uncvref_t<_Fs>...>(); 
; Line 472:     static_assert( 
; Line 475:   } 
L_156080:
        lea     ecx,[esp-01ch+040h]
        mov     dword [esp-038h+040h],ecx
        mov     dword [ecx+04h],00h
        mov     dword [ecx],00h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ebx]
        mov     ecx,dword [esp-038h+040h]
        mov     dword [ecx],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [eax]
        mov     eax,dword [esp-038h+040h]
        mov     dword [eax+04h],ecx
; Line 483:   } 
        mov     eax,dword [esp-01ch+04h+040h]
        mov     dword [esi+04h],eax
        mov     eax,dword [esp-01ch+040h]
        mov     dword [esi],eax
        mov     eax,dword [esp+04h+040h]
L_156127:
L_156141:
; Line 536:   } 
L_156155:
L_156169:
L_156048:
        pop     esi
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__make_fmatrix<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&>()
@std@__variant_detail@__visitation@__base@#__make_fmatrix.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~~.qv:
; Line 539:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffech
        push    ebx
L_156175:
        mov     ebx,dword [esp+04h+018h]
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-0ch+018h],00h
        push    dword [esp-0ch+018h]
        mov     dword [esp-04h+01ch],00h
        push    dword [esp-04h+01ch]
        lea     eax,[esp-014h+020h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [ebx+04h],ecx
        mov     ecx,dword [eax]
        mov     dword [ebx],ecx
        mov     eax,dword [esp+04h+018h]
; Line 543:   } 
L_156176:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&)>( const (*)(Token&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&)&)
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.v~.qrxqrn0r#__base.n1?1?#shared_ptr.n2~uL~.v.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 459:   template <class _Tp> 
L_156183:
        mov     eax,dword [esp+04h]
L_156184:
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__at<(*)(LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&), unsigned int=2, ..._Indices>( const array<(*)(_Indices&, __base<std::__variant_detail::_Trait=1, shared_ptr<std::__variant_detail::_Trait>, unsigned long long>&), unsigned int=2>&, unsigned int, )
@std@__variant_detail@__visitation@__base@#__at.qr38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~.vui?2?e8_Indices~.qrx#array.qrn0r#__base.n1?1?#shared_ptr.n2~uL~.vui?2?~uiV.rxqrn0r#__base.n1?1?#shared_ptr.n2~uL~:
; Line 464:   inline _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ecx
L_156191:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
L_156192:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~ virtual
        [bits 32]
; std::__variant_detail::__visitation::__base::__visit_alt<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&>(LambdaClosure9__ppEmbed_cpp__e1e322b3&, __destructor<__traits<shared_ptr<Token>, unsigned long long>, std::__variant_detail::_Trait=1>&)
@std@__variant_detail@__visitation@__base@#__visit_alt.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__destructor.#__traits.#shared_ptr.5Token~uL~28@std@__variant_detail@_Trait?1?~~.qrn0r#__destructor.#__traits.#shared_ptr.n1~uL~n2?1?~:
; Line 447:   inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_156231:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
; Line 450:     constexpr auto __fmatrix = 
; Line 541:     return __make_fmatrix_impl<_Fp, _Vs...>( 
        mov     dword [esp-028h+03ch],00h
        push    dword [esp-028h+03ch]
        mov     dword [esp-02ch+040h],00h
        push    dword [esp-02ch+040h]
        lea     eax,[esp-034h+044h]
        push    eax
        call    @std@__variant_detail@__visitation@__base@#__make_fmatrix_impl.r38@LambdaClosure9__ppEmbed_cpp__e1e322b3r#__base.28@std@__variant_detail@_Trait?1?#shared_ptr.5Token~uL~eeui?0?ui?1?e3_Ls~.q#integer_sequence.uie~#integer_sequence.uieui?0?ui?1?~V ; std::__variant_detail::__visitation::__base::__make_fmatrix_impl<LambdaClosure9__ppEmbed_cpp__e1e322b3&, __base<std::__variant_detail::_Trait=1, shared_ptr<Token>, unsigned long long>&, ......, unsigned int=0, unsigned int=1, ..._Ls>(integer_sequence<unsigned int, ...>, integer_sequence<unsigned int, ...unsigned int=0, unsigned int=1>, )
        add     esp,byte 0ch
        mov     ecx,dword [eax+04h]
        mov     dword [esp-08h+04h+03ch],ecx
        mov     ecx,dword [eax]
        mov     dword [esp-08h+03ch],ecx
; Line 543:   } 
        mov     eax,esi
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ebx
        lea     ecx,[esp-08h+044h]
; Line 696:     return __index == __variant_npos<__index_t> ? variant_npos : __index; 
        cmp     dword [esi+08h],byte 0ffffffffh
        jne     L_156330
        mov     eax,0ffffffffh
        jmp     L_156331
L_156330:
        mov     eax,dword [esi+08h]
L_156331:
; Line 697:   } 
; Line 467:     return __at(__elems[__index], __indices...); 
        shl     eax,02h
        add     eax,ecx
; Line 468:   } 
        call    dword [eax]
        add     esp,byte 08h
; Line 456:   } 
L_156232:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@FPF@.bdtr.qv virtual
        [bits 32]
; FPF::~FPF()
@FPF@.bdtr.qv:
; Line 114:     ~FPF() {} 
L_156369:
L_156370:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag:
        push    ebx
L_156377:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__rep@.bctr.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep::__rep()
        add     esp,byte 04h
L_156395:
        mov     eax,ebx
L_156378:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_156401:
        mov     eax,dword [esp+04h]
L_156437:
L_156402:
        ret
section code
section code
        section vsc@std@#basic_string.C#char_traits.C~#allocator.C~~@__zero.qv virtual
        [bits 32]
; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__zero()
@std@#basic_string.C#char_traits.C~#allocator.C~~@__zero.qv:
; Line 1518:         { 
L_156443:
        mov     eax,dword [esp+04h]
; Line 1519:             size_type (&__a)[__n_words] = __r_.first().__r.__words; 
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     edx,eax
; Line 1520:             for (unsigned __i = 0; __i < __n_words; ++__i) 
        xor     eax,eax
        cmp     eax,byte 03h
        jnc     L_156448
L_156446:
; Line 1521:                 __a[__i] = 0; 
        mov     ecx,eax
        mov     dword [edx+eax*4],00h
L_156449:
        mov     eax,ecx
        inc     eax
L_156447:
        cmp     eax,byte 03h
        jc      L_156446
L_156448:
; Line 1522:         } 
L_156444:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bdtr.qv:
L_156493:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__rep@.bdtr.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep::~__rep()
        add     esp,byte 04h
L_156494:
        ret
section code
section code
        section vsc@std@#allocator.C~@.bdtr.qv virtual
        [bits 32]
; std::allocator<wchar_t>::~allocator()
@std@#allocator.C~@.bdtr.qv:
L_156499:
L_156500:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bdtr.qv:
L_156505:
L_156519:
L_156506:
        ret
section code
section code
        section vsc@std@#__compressed_pair.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep#allocator.C~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, allocator<wchar_t>>::~__compressed_pair()
@std@#__compressed_pair.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__rep#allocator.C~~@.bdtr.qv:
L_156525:
        mov     eax,dword [esp+04h]
L_156552:
L_156539:
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__rep@.bdtr.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep::~__rep()
        add     esp,byte 04h
L_156567:
L_156526:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bctr.#__compressed_pair.pn0#default_delete.n0~~#allocator.n0~~.qR#__compressed_pair.pn0#default_delete.n0~~R#allocator.n0~ virtual
        [bits 32]
; std::__compressed_pair<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, allocator<TokenizerSettings>>::__compressed_pair<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, allocator<TokenizerSettings>, >(__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>&&, allocator<TokenizerSettings>&&)
@std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bctr.#__compressed_pair.pn0#default_delete.n0~~#allocator.n0~~.qR#__compressed_pair.pn0#default_delete.n0~~R#allocator.n0~:
; Line 2286:   template <class _U1, class _U2> 
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
L_156573:
        mov     esi,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     edx,ebx
        mov     eax,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     ecx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
        mov     eax,esi
; Line 2270: } 
        mov     esi,dword [esi]
        mov     dword [edx],esi
        add     ecx,byte 04h
        add     eax,dword 04h
        push    eax
        push    ecx
        call    @std@#default_delete.17TokenizerSettings~@.bctr.qR#default_delete.n0~ ; std::default_delete<TokenizerSettings>::default_delete(default_delete<TokenizerSettings>&&)
        add     esp,byte 08h
; Line 2206:     } 
        mov     eax,ebx
        add     eax,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [esp-018h+020h],eax
; Line 2206:     } 
        mov     eax,ebx
L_156574:
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__value_func<(*)(char const *, bool)>::__value_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, >((*)(*)(char const *, bool)&&,  const allocator<(*)(*)(char const *, bool)>&)
@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~:
; Line 1757:     template <class _Fp, class _Alloc> 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff18h
        push    ebx
        push    esi
L_156715:
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-070h],eax
        mov     dword [ebp-070h+04h],___cppexceptionhandle
        mov     dword [ebp-070h+08h],esp
        mov     dword [ebp-070h+0ch],ebp
        mov     dword [ebp-070h+010h],@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~
        mov     dword [ebp-070h+014h],00h
        lea     eax,[ebp-070h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebx+010h],00h
; Line 1761:         typedef allocator_traits<_Alloc> __alloc_traits; 
        mov     ecx,dword [eax]
        and     ecx,ecx
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_156720
; Line 1767:         { 
; Line 1768:             _FunAlloc __af(__a); 
        mov     dword [ebp-070h+014h],01h
; Line 1772:             { 
; Line 1773:                 __f_ = 
        mov     esi,ebx
        and     esi,esi
        je      L_156793
        lea     ecx,[ebp-04ch]
        mov     dword [ebp-070h+014h],02h
        push    ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~ ; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__func((*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&)
        mov     dword [ebp-070h+014h],03h
L_156855:
        add     esp,byte 0ch
L_156793:
        mov     dword [ebx+010h],esi
; Line 1775:             } 
; Line 1776:             else 
; Line 1777:             { 
; Line 1778:                 typedef __allocator_destructor<_FunAlloc> _Dp; 
; Line 2498:   template <bool _Dummy = true, 
; Line 1861:         if (__n > max_size()) 
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
; Line 1780:                 ::new ((void*)__hold.get()) _Fun(_VSTD::move(__f), _Alloc(__a)); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 2592:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 1781:                 __f_ = __hold.release(); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2611:   } 
; Line 1782:             } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2618:       __ptr_.second()(__tmp); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
; Line 2619:   } 
L_156729:
; Line 1783:         } 
        mov     dword [ebp-070h+014h],0ah
L_157418:
L_156720:
; Line 1784:     } 
        mov     eax,ebx
L_156724:
L_156877:
L_156940:
L_157051:
L_156943:
L_157263:
L_157264:
L_157309:
L_157294:
L_157279:
L_157246:
L_157150:
L_157167:
L_157388:
L_157402:
L_157375:
L_157147:
L_156716:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~ virtual
        [bits 32]
@.xt@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~:
        dd      @std@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~ virtual
        [bits 32]
@.xt@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~:
        dd      @std@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~:
        dd      @std@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~:
        dd      @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~:
        dd      @std@#__compressed_pair.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~:
        dd      @std@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@__function@#__value_func.qpxc4bool.n0~@.bctr.pqpxcn0.n0#allocator.pqpxcn0.n0~~.qRpqpxcn0.n0rx#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffff90h
        dd      0400h
        dd      @.xt@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~+0
        dd      0ffffffd8h
        dd      01h
        dd      0ah
        dd      0400h
        dd      @.xt@#allocator.pqpxc4bool.n0~+0
        dd      0ffffffb4h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~+0
        dd      0ffffffc4h
        dd      04h
        dd      05h
        dd      0400h
        dd      @.xt@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~+0
        dd      0ffffffcch
        dd      06h
        dd      09h
        dd      0400h
        dd      @.xt@#allocator.pqpxc4bool.n0~+0
        dd      0ffffffbch
        dd      07h
        dd      08h
        dd      00h
section code
section code
        section vsc@std@#allocator.pqpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::allocator<(*)(*)(char const *, bool)>::~allocator()
@std@#allocator.pqpxc4bool.n0~@.bdtr.qv:
L_157424:
L_157425:
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::Parse(basic_string<char, char_traits<char>, allocator<char>>&)
@#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffd70h
        push    ebx
        push    esi
        push    edi
L_157430:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0248h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0254h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-021ch],eax
        mov     dword [ebp-021ch+04h],___cppexceptionhandle
        mov     dword [ebp-021ch+08h],esp
        mov     dword [ebp-021ch+0ch],ebp
        mov     dword [ebp-021ch+010h],@.xc@#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-021ch+014h],00h
        lea     eax,[ebp-021ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 155:     char buf[256], *p = buf; 
        lea     eax,[ebp-0100h]
        mov     dword [ebp-0244h],eax
; Line 157:     for (i = 0; (p == buf || p - buf - 1 < sizeof(buf)) && p - buf < line.size() && 
        xor     eax,eax
        mov     dword [ebp-0250h],eax
        xor     eax,eax
        mov     byte [ebp-025ah],al
        mov     eax,dword [ebp-0244h]
        lea     ecx,[ebp-0100h]
        mov     edx,eax
        sub     edx,ecx
        lea     ecx,[ebp-0100h]
        cmp     eax,ecx
        je      L_157493
        mov     eax,dword [ebp-0244h]
        lea     ecx,[ebp-0100h]
        mov     edx,eax
        sub     edx,ecx
        mov     ecx,edx
        dec     ecx
        mov     ebx,dword [ebp-0250h]
        cmp     ecx,dword 0100h
        jge     L_157490
L_157493:
        mov     ecx,dword [ebp-0248h]
        mov     ebx,ecx
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_157509
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+04h+04h]
        jmp     L_157510
L_157509:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        shr     eax,01h
L_157510:
        mov     dword [ebp-0259h],eax
        mov     dword [ebp-026eh],edx
        mov     ebx,dword [ebp-0250h]
        mov     edx,dword [ebp-0259h]
        cmp     dword [ebp-026eh],edx
        jnc     L_157490
        or      byte [ebp-025ah],byte 02h
        push    byte 00h
        mov     dword [ebp-025eh],ecx
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-025eh]
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_157716
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax+08h+04h]
        jmp     L_157717
L_157716:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ecx,eax
L_157717:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     eax,dword [ebp-0250h]
        add     ecx,eax
        mov     ebx,eax
        push    ecx
        lea     eax,[ebp-0170h]
        push    eax
        call    @TokenizerSettings@Instance.qv ; TokenizerSettings::Instance()
        add     esp,byte 04h
        mov     dword [ebp-021ch+014h],01h
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-018ch]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bctr.qrx#function.qpxcn0.n0~ ; std::function<(*)(char const *, bool)>::function( const function<(*)(char const *, bool)>&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],02h
        lea     eax,[ebp-018ch]
        mov     dword [ebp-021ch+014h],03h
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bcall.xqpxcn0 ; std::function<(*)(char const *, bool)>::operator ()(char const *, bool) const 
        add     esp,byte 0ch
        and     al,al
        je      L_157490
        or      byte [ebp-025ah],byte 01h
L_157490:
        test    byte [ebp-025ah],02h
        je      L_157492
        mov     dword [ebp-021ch+014h],04h
        lea     eax,[ebp-018ch]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
        mov     dword [ebp-021ch+014h],05h
        lea     eax,[ebp-0170h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv ; std::shared_ptr<TokenizerSettings>::~shared_ptr()
        add     esp,byte 04h
L_157492:
        test    byte [ebp-025ah],01h
        je      L_157435
L_157433:
; Line 159:     { 
; Line 160:         n = UTF8::CharSpan(line.c_str() + i); 
        mov     eax,dword [ebp-0248h]
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_157990
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_157991
L_157990:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_157991:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        add     eax,ebx
        push    eax
        call    @UTF8@CharSpan.qpxc ; UTF8::CharSpan(char const *)
        add     esp,byte 04h
        mov     dword [ebp-0240h],eax
; Line 161:         for (int j = 0; j < n && i < line.size(); j++) 
        xor     eax,eax
        mov     dword [ebp-0278h],eax
        mov     ecx,dword [ebp-0240h]
        cmp     dword [ebp-0278h],ecx
        jge     L_157443
        mov     ecx,dword [ebp-0248h]
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_158187
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax+04h+04h]
        jmp     L_158188
L_158187:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        shr     eax,01h
        mov     ecx,eax
L_158188:
        cmp     ebx,ecx
        jnc     L_157443
L_157441:
; Line 162:             *p++ = line[i++]; 
        mov     eax,ebx
        push    eax
        mov     esi,ebx
        inc     esi
        mov     eax,dword [ebp-0248h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.barray.qui ; std::basic_string<char, char_traits<char>, allocator<char>>::operator [](unsigned int)
        add     esp,byte 08h
        mov     cl,byte [eax]
        mov     eax,dword [ebp-0244h]
        mov     byte [eax],cl
        inc     dword [ebp-0244h]
L_157444:
        mov     eax,dword [ebp-0278h]
        mov     dword [ebp-026ah],eax
        inc     eax
        mov     dword [ebp-0278h],eax
L_157442:
        mov     ecx,dword [ebp-0240h]
        mov     eax,dword [ebp-0278h]
        mov     ebx,esi
        cmp     eax,ecx
        jge     L_158334
        mov     ecx,dword [ebp-0248h]
        mov     eax,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_158350
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax+04h+04h]
        jmp     L_158351
L_158350:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        shr     eax,01h
L_158351:
        mov     ebx,esi
        cmp     esi,eax
        jc      L_157441
L_158334:
L_157443:
; Line 163:     } 
L_157436:
L_157434:
        xor     eax,eax
        mov     byte [ebp-0274h],al
        mov     ecx,dword [ebp-0244h]
        lea     eax,[ebp-0100h]
        sub     eax,ecx
        neg     eax
        lea     edx,[ebp-0100h]
        cmp     ecx,edx
        je      L_158500
        mov     eax,dword [ebp-0244h]
        lea     ecx,[ebp-0100h]
        sub     eax,ecx
        mov     ecx,eax
        dec     ecx
        cmp     ecx,dword 0100h
        jge     L_158497
L_158500:
        mov     edx,dword [ebp-0248h]
        mov     dword [ebp-0273h],edx
        mov     ecx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        mov     byte [ebp-0255h],dl
        mov     dl,byte [ebp-0255h]
        mov     byte [ebp-026fh],dl
        and     dl,dl
        je      L_158516
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+04h+04h]
        jmp     L_158517
L_158516:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
L_158517:
        cmp     eax,ecx
        jnc     L_158497
        or      byte [ebp-0274h],byte 02h
        push    byte 00h
        mov     eax,dword [ebp-0273h]
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_158723
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+08h+04h]
        jmp     L_158724
L_158723:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_158724:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        add     eax,ebx
        push    eax
        lea     eax,[ebp-0170h]
        push    eax
        call    @TokenizerSettings@Instance.qv ; TokenizerSettings::Instance()
        add     esp,byte 04h
        mov     dword [ebp-021ch+014h],06h
        mov     eax,dword [eax]
        push    eax
        lea     eax,[ebp-018ch]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bctr.qrx#function.qpxcn0.n0~ ; std::function<(*)(char const *, bool)>::function( const function<(*)(char const *, bool)>&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],07h
        lea     eax,[ebp-018ch]
        mov     dword [ebp-021ch+014h],08h
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bcall.xqpxcn0 ; std::function<(*)(char const *, bool)>::operator ()(char const *, bool) const 
        add     esp,byte 0ch
        and     al,al
        jne     L_158498
L_158497:
        or      byte [ebp-0274h],byte 01h
L_158498:
        test    byte [ebp-0274h],02h
        je      L_158499
        mov     dword [ebp-021ch+014h],09h
        lea     eax,[ebp-018ch]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
        mov     dword [ebp-021ch+014h],0ah
        lea     eax,[ebp-0170h]
        push    eax
        call    @std@#shared_ptr.17TokenizerSettings~@.bdtr.qv ; std::shared_ptr<TokenizerSettings>::~shared_ptr()
        add     esp,byte 04h
L_158499:
        test    byte [ebp-0274h],01h
        je      L_157433
L_157435:
; Line 164:     *p = 0; 
        mov     eax,dword [ebp-0244h]
        mov     byte [eax],00h
; Line 165:     SetChars(line.substr(0, i)); 
        add     esp,byte 0ffffffech
        mov     esi,esp
        mov     eax,ebx
        push    eax
        push    byte 00h
        mov     eax,dword [ebp-0248h]
        push    eax
        lea     eax,[ebp-0114h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui ; std::basic_string<char, char_traits<char>, allocator<char>>::substr(unsigned int, unsigned int) const 
        add     esp,byte 010h
        mov     dword [ebp-021ch+014h],0bh
        push    eax
        push    esi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-021ch+014h],0ch
        lea     eax,[ebp-0114h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+08h
        mov     dword [ebp-021ch+014h],0dh
        mov     eax,dword [ebp-0254h]
        push    eax
        call    @Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~ ; Token::SetChars( const basic_string<char, char_traits<char>, allocator<char>>)
        add     esp,byte 018h
; Line 166:     line.erase(0, i); 
        push    ebx
        push    byte 00h
        mov     eax,dword [ebp-0248h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui ; std::basic_string<char, char_traits<char>, allocator<char>>::erase(unsigned int, unsigned int)
        add     esp,byte 0ch
; Line 167:     id = buf; 
        mov     ecx,dword [ebp-0254h]
        add     ecx,byte 024h
        lea     eax,[ebp-0100h]
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc ; std::basic_string<char, char_traits<char>, allocator<char>>::assign(char const *)
        add     esp,byte 08h
        mov     eax,dword [ebp-0254h]
        cmp     dword [eax+020h],byte 00h
        je      L_157455
; Line 169:     { 
; Line 170:         typename KeywordTable<T>::const_iterator it; 
        mov     dword [ebp-013ch],00h
; Line 408:         _LIBCPP_DEBUG_MODE(__get_db()->__insert_i(this)); 
; Line 409:     } 
        mov     dword [ebp-021ch+014h],0eh
        mov     dword [ebp-021ch+014h],0fh
        mov     eax,dword [ebp-0254h]
        cmp     byte [eax+038h],byte 00h
        je      L_157459
; Line 172:         { 
; Line 173:             p = buf; 
        lea     ebx,[ebp-0100h]
        mov     dword [ebp-027ch],ebx
        cmp     byte [ebp-0100h],byte 00h
        je      L_157464
L_157463:
; Line 175:                 *p = toupper(*p), p++; 
        mov     eax,dword [ebp-027ch]
        mov     al,byte [eax]
        cbw
        cwde
        push    eax
        call    _toupper ; toupper
        add     esp,byte 04h
        mov     ecx,eax
        mov     dword [ebp-0266h],ebx
        mov     eax,ebx
        mov     byte [eax],cl
        inc     ebx
L_157465:
; Line 174:             while (*p) 
        mov     dword [ebp-027ch],ebx
        mov     eax,ebx
        cmp     byte [eax],byte 00h
        jne     L_157463
L_157464:
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     eax,[ebp-0160h]
        mov     dword [ebp-024ch],eax
        lea     ebx,[ebp-0100h]
        mov     eax,dword [ebp-024ch]
        push    eax
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,dword [ebp-024ch]
        add     edi,byte 04h
        mov     dword [ebp-0280h],00h
        lea     eax,[ebp-0280h]
        mov     dword [ebp-0284h],00h
        lea     esi,[ebp-0284h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_159099:
L_159113:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     dword [ebp-0262h],ebx
        mov     eax,ebx
        push    eax
        mov     eax,dword [ebp-024ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-021ch+014h],010h
; Line 177:             it = keywordTable->find(id1); 
        add     esp,byte 0fffffffch
        mov     ebx,esp
        mov     eax,dword [ebp-0254h]
        mov     ecx,dword [eax+020h]
        lea     eax,[ebp-0160h]
        add     esp,byte 0fffffffch
        mov     esi,esp
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-0288h],eax
        add     esp,byte 08h
        lea     eax,[ebp-0288h]
        push    eax
        push    esi
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],011h
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],012h
        lea     eax,[ebp-0164h]
        mov     dword [ebp-021ch+014h],013h
        push    eax
        push    ebx
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qR#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
        mov     dword [ebp-021ch+014h],014h
L_159173:
L_159160:
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],015h
        lea     eax,[ebp-0168h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_const_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],016h
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.basn.qRx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::operator =( const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
        mov     dword [ebp-021ch+014h],017h
L_159201:
L_159188:
        add     esp,byte 08h
; Line 178:         } 
        mov     dword [ebp-021ch+014h],018h
        lea     eax,[ebp-0160h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        jmp     L_157471
L_157459:
; Line 179:         else 
; Line 180:         { 
; Line 181:             it = keywordTable->find(id); 
        add     esp,byte 0fffffffch
        mov     ebx,esp
        mov     eax,dword [ebp-0254h]
        mov     ecx,dword [ebp-0254h]
        mov     ecx,dword [ecx+020h]
        add     eax,byte 024h
        add     esp,byte 0fffffffch
        mov     esi,esp
        push    eax
        push    ecx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-028ch],eax
        add     esp,byte 08h
        lea     eax,[ebp-028ch]
        push    eax
        push    esi
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],019h
        lea     eax,[ebp-0148h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],01ah
        lea     eax,[ebp-0148h]
        mov     dword [ebp-021ch+014h],01bh
        push    eax
        push    ebx
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qR#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
        mov     dword [ebp-021ch+014h],01ch
L_159245:
L_159232:
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],01dh
        lea     eax,[ebp-014ch]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_const_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],01eh
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.basn.qRx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::operator =( const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
        mov     dword [ebp-021ch+014h],01fh
L_159273:
L_159260:
        add     esp,byte 08h
; Line 182:         } 
L_157471:
        add     esp,byte 0fffffffch
        mov     ebx,esp
        add     esp,byte 0fffffffch
        mov     ecx,esp
; Line 1816:     return iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-0290h],eax
        mov     dword [ebp-021ch+014h],020h
; Line 1820: } 
        lea     eax,[ebp-0290h]
        push    eax
        push    ecx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],021h
        lea     eax,[ebp-0140h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],022h
        lea     eax,[ebp-0140h]
        mov     dword [ebp-021ch+014h],023h
        push    eax
        push    ebx
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qR#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],024h
        lea     eax,[ebp-0144h]
        push    eax
        call    @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_const_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>)
        add     esp,byte 08h
        mov     dword [ebp-021ch+014h],025h
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        call    @.bneq.qrx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~rx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; operator !=( const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&,  const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&)
        mov     dword [ebp-021ch+014h],026h
L_159353:
L_159340:
        mov     dword [ebp-021ch+014h],027h
L_159381:
L_159368:
        add     esp,byte 08h
        and     al,al
        je      L_157478
; Line 184:             keyValue = (int)it->second; 
; Line 453:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container const_iterator"); 
        mov     eax,dword [ebp-013ch]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 455:     } 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ecx,dword [eax+014h]
        mov     eax,dword [ebp-0254h]
        mov     dword [eax+018h],ecx
L_157478:
; Line 185:     } 
        mov     dword [ebp-021ch+014h],028h
L_159617:
L_159604:
L_157455:
; Line 186: } 
L_157431:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~ virtual
        [bits 32]
@.xt@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~:
        dd      @std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~ virtual
        [bits 32]
@.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~:
        dd      @std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~ virtual
        [bits 32]
@.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~:
        dd      @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~ virtual
        [bits 32]
@.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~:
        dd      @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06dh
        db      061h
        db      070h
        db      05fh
        db      069h
        db      074h
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0fffffde4h
        dd      0400h
        dd      @.xt@#shared_ptr.17TokenizerSettings~+0
        dd      0fffffe90h
        dd      06h
        dd      0ah
        dd      0400h
        dd      @.xt@#function.qpxc4bool.n0~+0
        dd      0fffffe74h
        dd      08h
        dd      09h
        dd      0400h
        dd      @.xt@#shared_ptr.17TokenizerSettings~+0
        dd      0fffffe90h
        dd      06h
        dd      0ah
        dd      0400h
        dd      @.xt@#function.qpxc4bool.n0~+0
        dd      0fffffe74h
        dd      08h
        dd      09h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffeech
        dd      0bh
        dd      0ch
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffec4h
        dd      0fh
        dd      028h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffea0h
        dd      010h
        dd      018h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffe9ch
        dd      013h
        dd      014h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffe98h
        dd      016h
        dd      017h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffeb8h
        dd      01bh
        dd      01ch
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffeb4h
        dd      01eh
        dd      01fh
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffec0h
        dd      023h
        dd      027h
        dd      0400h
        dd      @.xt@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffebch
        dd      025h
        dd      026h
        dd      00h
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; TemplatedKeywordToken<kw>::Parse(basic_string<char, char_traits<char>, allocator<char>>&)
@#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffdfch
        push    ebx
        push    esi
        push    edi
L_159624:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-01f0h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-01e8h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-0190h],eax
        mov     dword [ebp-0190h+04h],___cppexceptionhandle
        mov     dword [ebp-0190h+08h],esp
        mov     dword [ebp-0190h+0ch],ebp
        mov     dword [ebp-0190h+010h],@.xc@#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-0190h+014h],00h
        lea     eax,[ebp-0190h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 115:     char buf[256], *p = buf; 
        lea     eax,[ebp-0100h]
        mov     dword [ebp-01f4h],eax
; Line 117:     for (i = 0; i < line.size(); i++) 
        xor     eax,eax
        mov     edx,dword [ebp-01f0h]
        mov     dword [ebp-01f8h],edx
        mov     ecx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_159697
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ecx+04h+04h]
        jmp     L_159698
L_159697:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
        mov     edx,ecx
L_159698:
        mov     esi,eax
        cmp     eax,edx
        jnc     L_159629
L_159627:
        mov     edx,dword [ebp-01f8h]
        mov     eax,edx
        mov     ecx,esi
        mov     ebx,esi
; Line 3221:     _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds"); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_159874
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_159875
L_159874:
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_159875:
; Line 3223: } 
        mov     al,byte [eax+ecx]
        cbw
        cwde
        push    eax
        call    _ispunct ; ispunct
        add     esp,byte 04h
        and     eax,eax
        je      L_159629
; Line 119:             *p++ = line[i]; 
        mov     ecx,dword [ebp-01f0h]
        mov     dword [ebp-01f8h],ecx
        mov     eax,ecx
; Line 3221:     _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds"); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_160084
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+08h+04h]
        jmp     L_160085
L_160084:
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_160085:
; Line 3223: } 
        mov     cl,byte [eax+ebx]
        mov     eax,dword [ebp-01f4h]
        mov     byte [eax],cl
        inc     dword [ebp-01f4h]
        jmp     L_159637
L_159634:
; Line 120:         else 
; Line 121:             break; 
        jmp     L_159629
L_159637:
L_159630:
        mov     eax,esi
        inc     eax
L_159628:
        mov     edx,dword [ebp-01f8h]
        mov     ecx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_160279
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ecx+04h+04h]
        jmp     L_160280
L_160279:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        shr     ecx,01h
        mov     edx,ecx
L_160280:
        mov     esi,eax
        cmp     eax,edx
        jc      L_159627
L_159629:
; Line 122:     *p = 0; 
        mov     eax,dword [ebp-01f4h]
        mov     byte [eax],00h
        mov     eax,dword [ebp-01e8h]
        cmp     dword [eax+01ch],byte 00h
        je      L_159645
; Line 124:     { 
; Line 125:         bool found = false; 
        xor     al,al
        mov     byte [ebp-01e9h],al
; Line 126:         for (int j = i; j > 0; j--) 
        mov     eax,esi
        and     esi,esi
        jle     L_159651
L_159649:
; Line 127:         { 
; Line 128:             buf[j] = 0; 
        mov     ecx,eax
        mov     dword [ebp-01e4h],ecx
        mov     byte [eax+ebp-0100h],00h
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        lea     ebx,[ebp-0150h]
        lea     eax,[ebp-0100h]
        mov     dword [ebp-01e0h],eax
        push    ebx
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     edi,ebx
        add     edi,byte 04h
        mov     dword [ebp-01fch],00h
        lea     eax,[ebp-01fch]
        mov     dword [ebp-0200h],00h
        lea     esi,[ebp-0200h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    edi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_160536:
L_160550:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,dword [ebp-01e0h]
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        mov     eax,dword [ebp-01e0h]
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-0190h+014h],01h
        push    ebx
        mov     eax,dword [ebp-01e8h]
        mov     eax,dword [eax+01ch]
        push    eax
        lea     eax,[ebp-013ch]
        push    eax
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-0190h+014h],02h
        lea     eax,[ebp-0150h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+0ch
        mov     dword [ebp-0190h+014h],03h
        mov     eax,dword [ebp-01e8h]
        mov     eax,dword [eax+01ch]
        add     esp,byte 0fffffffch
        mov     ebx,esp
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::end()
        mov     dword [ebp-0204h],eax
        add     esp,byte 04h
        lea     eax,[ebp-0204h]
        push    eax
        push    ebx
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        mov     dword [ebp-0190h+014h],04h
        lea     eax,[ebp-0158h]
        push    eax
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
        add     esp,byte 08h
        mov     dword [ebp-0190h+014h],05h
        mov     dword [ebp-0190h+014h],06h
; Line 360:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [ebp-013ch]
        mov     eax,dword [ebp-0158h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 361:     } 
        and     al,al
        sete    al
        and     eax,byte 01h
        mov     dword [ebp-0190h+014h],07h
L_160658:
L_160645:
        and     al,al
        je      L_159657
; Line 131:             { 
; Line 132:                 SetChars(line.substr(0, j)); 
        add     esp,byte 0ffffffech
        mov     ebx,esp
        mov     eax,dword [ebp-01e4h]
        push    eax
        push    byte 00h
        mov     eax,dword [ebp-01f0h]
        push    eax
        lea     eax,[ebp-016ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui ; std::basic_string<char, char_traits<char>, allocator<char>>::substr(unsigned int, unsigned int) const 
        add     esp,byte 010h
        mov     dword [ebp-0190h+014h],08h
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-0190h+014h],09h
        lea     eax,[ebp-016ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+08h
        mov     dword [ebp-0190h+014h],0ah
        mov     eax,dword [ebp-01e8h]
        push    eax
        call    @Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~ ; Token::SetChars( const basic_string<char, char_traits<char>, allocator<char>>)
        add     esp,byte 018h
; Line 133:                 line.erase(0, j); 
        mov     eax,dword [ebp-01e4h]
        push    eax
        push    byte 00h
        mov     eax,dword [ebp-01f0h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui ; std::basic_string<char, char_traits<char>, allocator<char>>::erase(unsigned int, unsigned int)
        add     esp,byte 0ch
; Line 134:                 keyValue = (int)it->second; 
; Line 337:         _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),                             "Attempted to dereference a non-dereferenceable unordered container iterator"); 
        mov     eax,dword [ebp-013ch]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 339:     } 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ecx,dword [eax+014h]
        mov     eax,dword [ebp-01e8h]
        mov     dword [eax+018h],ecx
; Line 135:                 found = true; 
        mov     byte [ebp-01e9h],01h
; Line 136:                 break; 
        mov     dword [ebp-0190h+014h],0bh
L_160894:
L_160881:
        jmp     L_159651
; Line 137:             } 
L_159657:
; Line 138:         } 
        mov     dword [ebp-0190h+014h],0ch
L_160922:
L_160909:
L_159652:
        mov     eax,dword [ebp-01e4h]
        dec     eax
L_159650:
        and     eax,eax
        jg      L_159649
L_159651:
        cmp     byte [ebp-01e9h],byte 00h
        jne     L_159668
; Line 140:         { 
; Line 141:             SetChars(line.substr(0, 1)); 
        add     esp,byte 0ffffffech
        mov     ebx,esp
        mov     eax,01h
        push    eax
        push    byte 00h
        mov     eax,dword [ebp-01f0h]
        push    eax
        lea     eax,[ebp-0138h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@substr.xquiui ; std::basic_string<char, char_traits<char>, allocator<char>>::substr(unsigned int, unsigned int) const 
        add     esp,byte 010h
        mov     dword [ebp-0190h+014h],0dh
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [ebp-0190h+014h],0eh
        lea     eax,[ebp-0138h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,dword 04h+08h
        mov     dword [ebp-0190h+014h],0fh
        mov     eax,dword [ebp-01e8h]
        push    eax
        call    @Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~ ; Token::SetChars( const basic_string<char, char_traits<char>, allocator<char>>)
        add     esp,byte 018h
; Line 142:             line.erase(0, 1); 
        mov     eax,01h
        push    eax
        push    byte 00h
        mov     eax,dword [ebp-01f0h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui ; std::basic_string<char, char_traits<char>, allocator<char>>::erase(unsigned int, unsigned int)
        add     esp,byte 0ch
; Line 143:             keyValue = (int)-1; 
        mov     eax,dword [ebp-01e8h]
        mov     dword [eax+018h],0ffffffffh
; Line 144:         } 
L_159668:
; Line 145:     } 
L_159645:
; Line 146: } 
L_159625:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0fffffe70h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffeb0h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffec4h
        dd      03h
        dd      0ch
        dd      0400h
        dd      @.xt@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0fffffea8h
        dd      06h
        dd      07h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffe94h
        dd      08h
        dd      09h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0fffffec8h
        dd      0dh
        dd      0eh
        dd      00h
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~ virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>::pair< const basic_string<char, char_traits<char>, allocator<char>>&, ..., unsigned int=0, ..., >(std::piecewise_construct_t, tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&, tuple<>&, __tuple_indices<...unsigned int=0>, __tuple_indices<...>)
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~@.bctr.rx#basic_string.c#char_traits.c~#allocator.c~~eui?0?e~.q26@std@piecewise_construct_tr#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~r#tuple.~#__tuple_indices.eui?0?~#__tuple_indices.e~:
        add     esp,byte 0ffffffdch
        push    ebx
        push    esi
        push    edi
L_160929:
        mov     eax,dword [esp+0ch+030h]
        mov     ebx,dword [esp+04h+030h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     eax,ebx
        add     eax,byte 014h
        mov     dword [ebx+04h+014h],00h
        mov     dword [ebx+08h+014h],00h
        mov     edi,eax
        add     edi,byte 0ch
        xor     eax,eax
        mov     dword [esp-020h+030h],eax
        lea     eax,[esp-020h+030h]
        mov     dword [esp-024h+030h],00h
        lea     esi,[esp-024h+030h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    edi
        call    @std@#__compressed_pair_elem.p#shared_ptr.5Token~i?0?4bool?0?~@.bctr.9nullptr_tv~.qRn2 ; std::__compressed_pair_elem<shared_ptr<Token>*, int=0, bool=0>::__compressed_pair_elem<nullptr_t, void, >(std::__variant_detail::_Trait&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [esi]
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_161113:
; Line 438: } 
; Line 498:             __get_db()->__insert_c(this); 
; Line 1403: } 
L_161129:
L_161143:
L_161157:
        mov     eax,ebx
L_160930:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>, void*>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&>(pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>>&)
@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
        push    ebx
        push    esi
L_161163:
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        and     ebx,ebx
        je      L_161170
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,esi
        push    eax
        push    ebx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,esi
        add     eax,byte 014h
        push    eax
        mov     eax,ebx
        add     eax,byte 014h
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::vector( const vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],02h
L_161170:
; Line 1877:         } 
L_161164:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~ virtual
        [bits 32]
@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#get.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::get<unsigned int=0, basic_string<char, char_traits<char>, allocator<char>>&&>(tuple<basic_string<char, char_traits<char>, allocator<char>>&&>&)
@std@#get.ui?0?R#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.R#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_161222:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_161223:
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__func((*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&)
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~:
        add     esp,byte 0fffffff0h
        push    ebx
        push    esi
L_161246:
        mov     eax,dword [esp+0ch+018h]
        mov     ecx,dword [esp+08h+018h]
        mov     ebx,dword [esp+04h+018h]
        mov     edx,ebx
        mov     dword [edx],@std@__function@#__base.qpxc4bool.n0~@_.vt+0ch
        mov     esi,@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@_.vt+0ch
        mov     edx,ebx
        mov     dword [edx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~ ; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func((*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&)
        add     esp,byte 0ch
        mov     eax,ebx
L_161247:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bctr.n0?1?v~.qp#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~R#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~ virtual
        [bits 32]
; std::unique_ptr<__base<(*)(char const *, bool)>, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::unique_ptr<bool=1, void, >(__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>*, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>&&)
@std@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bctr.n0?1?v~.qp#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~R#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_161306:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_161307:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_161466:
        mov     eax,dword [esp+04h]
L_161467:
        ret
section code
section code
        section vsc@std@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>::~__allocator_destructor()
@std@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~@.bdtr.qv:
L_161474:
L_161475:
        ret
section code
section code
        section vsc@std@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>::~allocator()
@std@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~@.bdtr.qv:
L_161480:
L_161481:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~i?0?n0?0?~@.bdtr.qv:
L_161486:
L_161487:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@.bdtr.qv:
L_161492:
L_161506:
L_161493:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>*, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv:
L_161512:
L_161539:
L_161526:
L_161554:
L_161513:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__base<(*)(char const *, bool)>, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::~unique_ptr()
@std@#unique_ptr.#__base.qpxc4bool.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
L_161560:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_161566
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_161679
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_161680
L_161679:
        mov     eax,dword [esp-048h+04ch]
L_161680:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_161725:
L_161710:
L_161695:
L_161662:
L_161566:
; Line 2619:   } 
L_161583:
L_161817:
L_161804:
L_161832:
L_161791:
L_161561:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#basic_string.c#char_traits.c~#allocator.c~~@.barray.qui virtual
        [bits 32]
; std::basic_string<char, char_traits<char>, allocator<char>>::operator [](unsigned int)
@std@#basic_string.c#char_traits.c~#allocator.c~~@.barray.qui:
        push    ecx
        push    ecx
L_161839:
        mov     eax,dword [esp+08h+08h]
        mov     edx,dword [esp+04h+08h]
; Line 3221:     _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds"); 
        mov     ecx,edx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_161859
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ecx+08h+04h]
        jmp     L_161860
L_161859:
        add     ecx,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_161860:
        add     eax,ecx
; Line 3223: } 
L_161840:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; Token::SetChars( const basic_string<char, char_traits<char>, allocator<char>>)
@Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~:
; Line 71:     void SetChars(const std::string str) { chars = std::move(str); } 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
L_162041:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        lea     ecx,[ebp+0ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        add     eax,byte 04h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.basn.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::operator =( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
        lea     eax,[ebp+0ch]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_162042:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@Token@SetChars.qx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#basic_string.c#char_traits.c~#allocator.c~~+0
        dd      0ch
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.basn.qRx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::operator =( const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.basn.qRx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
L_162067:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     edx,dword [edx]
        mov     dword [ecx],edx
L_162068:
        ret
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_const_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>)
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
; Line 804:     _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffdch
L_162087:
        mov     eax,dword [esp+04h+024h]
        mov     ecx,dword [esp+08h+024h]
        mov     dword [eax],ecx
; Line 415:         _LIBCPP_DEBUG_MODE(__get_db()->__iterator_copy(this, &__x)); 
; Line 416:     } 
L_162138:
L_162125:
L_162088:
        add     esp,byte 024h
        ret
section code
section code
        section vsc@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qR#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&&)
@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qR#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
L_162145:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     edx,dword [edx]
        mov     dword [ecx],edx
L_162146:
        ret
section code
section code
        section vsc@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ virtual
        [bits 32]
; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~:
; Line 753:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffdch
L_162169:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        mov     dword [eax],ecx
L_162205:
L_162170:
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ virtual
        [bits 32]
; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~:
L_162211:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_162212:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff14h
        push    ebx
        push    esi
        push    edi
L_162219:
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0d0h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2458:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d8h],eax
        and     eax,eax
        je      L_162302
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        jmp     L_162303
L_162302:
        mov     eax,dword [ebp-0d8h]
L_162303:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     ecx,dword [ebp-0d4h]
        mov     eax,ecx
        mov     edx,ecx
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_162381
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_162382
L_162381:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,ecx
L_162382:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ecx,byte [ecx+04h]
        and     ecx,byte 01h
        setne   cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_162607
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [edx+08h+04h]
        jmp     L_162608
L_162607:
        mov     ecx,edx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     edx,ecx
L_162608:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_162803
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ecx+04h+04h]
        jmp     L_162804
L_162803:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [ecx+04h]
        shr     eax,01h
L_162804:
        add     eax,edx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ebx
        push    eax
        push    ebx
        mov     dword [ebp-0dch],00h
        lea     eax,[ebp-0dch]
        mov     dword [ebp-0e0h],eax
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0dch]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_162334:
        mov     dword [ebp-0c0h],ebx
        mov     eax,dword [ebp-0d0h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0e4h],eax
        and     eax,eax
        je      L_163013
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 04h
        jmp     L_163014
L_163013:
        mov     eax,dword [ebp-0e4h]
L_163014:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
        and     ecx,ecx
        je      L_162222
; Line 2461:     { 
; Line 2462:         size_t __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0c0h]
        mov     dword [ebp-0cch],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_163066
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_163067
L_163066:
        cmp     eax,ecx
        jc      L_163069
L_163068:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_163069:
L_163067:
; Line 119: } 
        mov     dword [ebp-0c4h],eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0d0h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_162226
; Line 2465:         { 
; Line 2466:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     edi,dword [eax]
        and     edi,edi
        je      L_162232
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_163119
        mov     ebx,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,esi
        mov     dword [ebp-0c8h],ecx
        and     ecx,ecx
        jne     L_163167
        mov     ecx,esi
        dec     ecx
        and     eax,ecx
        jmp     L_163168
L_163167:
        cmp     eax,edx
        jc      L_163170
L_163169:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_163170:
L_163168:
; Line 119: } 
        cmp     eax,ebx
        jne     L_162232
L_163119:
L_162230:
; Line 2470:             { 
; Line 2471:                 if ((__nd->__hash() == __hash) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        jne     L_162238
        mov     eax,dword [ebp-0d0h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0e8h],eax
        and     eax,eax
        je      L_163233
        mov     eax,dword [ebp-0e8h]
        add     eax,byte 04h
        jmp     L_163234
L_163233:
        mov     eax,dword [ebp-0e8h]
L_163234:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,edi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-0d4h]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_162238
        mov     eax,edi
        mov     dword [ebp-04ch+014h],01h
        jmp     L_162220
L_162238:
; Line 2478:             } 
L_162233:
        mov     edi,dword [edi]
L_162231:
        and     edi,edi
        je      L_163384
        mov     ecx,dword [ebp-0c0h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [edi+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_162230
        mov     esi,dword [ebp-0c4h]
        mov     eax,edi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0cch]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,ebx
        jne     L_163432
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_163433
L_163432:
        cmp     eax,edx
        jc      L_163435
L_163434:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_163435:
L_163433:
; Line 119: } 
        cmp     eax,esi
        je      L_162230
L_163384:
L_162232:
; Line 2479:         } 
L_162226:
; Line 2480:     } 
L_162222:
        mov     eax,dword [ebp-0d0h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::end()
        mov     dword [ebp-0ech],eax
        add     esp,byte 04h
        mov     eax,dword [ebp-0ech]
        mov     dword [ebp-04ch+014h],02h
; Line 2482: } 
L_162220:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@.bneq.qrx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~rx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; operator !=( const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&,  const __hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>&)
@.bneq.qrx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~rx#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
L_163456:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
; Line 476:         return __x.__node_ == __y.__node_; 
        mov     ecx,dword [eax]
        mov     eax,dword [edx]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
; Line 477:     } 
        and     al,al
        sete    al
        and     eax,byte 01h
L_163457:
        ret
section code
section code
        section vsc@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::~__hash_const_iterator()
@std@#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv:
L_163496:
L_163497:
        ret
section code
section code
        section vsc@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_map_const_iterator<__hash_const_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::~__hash_map_const_iterator()
@std@#__hash_map_const_iterator.#__hash_const_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv:
L_163502:
L_163516:
L_163503:
        ret
section code
section code
        section vsc@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::~__hash_iterator()
@std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv:
L_163522:
L_163523:
        ret
section code
section code
        section vsc@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::~__hash_map_iterator()
@std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv:
L_163528:
L_163542:
L_163529:
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find( const basic_string<char, char_traits<char>, allocator<char>>&)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@find.qrx#basic_string.c#char_traits.c~#allocator.c~~:
        push    ecx
        push    ebx
        push    esi
L_163548:
        mov     ebx,dword [esp+04h+0ch]
        mov     ecx,dword [esp+0ch+0ch]
        mov     eax,dword [esp+08h+0ch]
        add     esp,byte 0fffffffch
        mov     esi,esp
        push    ecx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#find.#basic_string.c#char_traits.c~#allocator.c~~~.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::find<basic_string<char, char_traits<char>, allocator<char>>>( const basic_string<char, char_traits<char>, allocator<char>>&)
        mov     dword [esp-04h+018h],eax
        add     esp,byte 08h
        lea     eax,[esp-04h+010h]
        push    eax
        push    esi
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        push    ebx
        call    @std@#__hash_map_iterator.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.q#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>>::__hash_map_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>)
        add     esp,byte 08h
        mov     eax,dword [esp+04h+0ch]
L_163549:
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::end()
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_163556:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1816:     return iterator(nullptr, this); 
        xor     eax,eax
        mov     dword [ebp-04ch+014h],01h
; Line 1820: } 
L_163557:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@end.qv:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#get.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~ virtual
        [bits 32]
; std::get<unsigned int=0,  const basic_string<char, char_traits<char>, allocator<char>>&>(tuple< const basic_string<char, char_traits<char>, allocator<char>>&>&)
@std@#get.ui?0?rx#basic_string.c#char_traits.c~#allocator.c~~~.qr#tuple.rx#basic_string.c#char_traits.c~#allocator.c~~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_163584:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_163585:
        ret
section code
section code
        section vsc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::vector( const vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>&)
@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~:
; Line 1250: { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
        push    edi
L_163608:
        mov     ecx,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        mov     edi,ebx
        mov     esi,ecx
        mov     eax,ecx
        add     eax,byte 0ch
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-078h],eax
        and     eax,eax
        je      L_163671
        mov     eax,dword [ebp-078h]
        add     eax,byte 04h
        jmp     L_163672
L_163671:
        mov     eax,dword [ebp-078h]
L_163672:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        push    eax
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::select_on_container_copy_construction( const allocator<shared_ptr<Token>>&)
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,edi
        mov     dword [edi+04h],00h
        mov     dword [edi+08h],00h
        add     eax,byte 0ch
        xor     ecx,ecx
        mov     dword [ebp-07ch],ecx
        lea     ecx,[ebp-07ch]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [edi+0ch],ecx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-080h],eax
; Line 2206:     } 
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     dword [ebp-04ch+014h],02h
L_163823:
        mov     dword [ebp-04ch+014h],03h
; Line 1252:     __get_db()->__insert_c(this); 
        mov     eax,esi
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax+08h]
        sub     eax,ecx
        mov     edi,eax
        sar     edi,03h
        cmp     edi,byte 00h
        jbe     L_163613
; Line 1256:     { 
; Line 1257:         __vallocate(__n); 
        mov     eax,edi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@__vallocate.qui ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__vallocate(unsigned int)
        add     esp,byte 08h
; Line 1258:         __construct_at_end(__x.__begin_, __x.__end_, __n); 
        push    edi
        mov     eax,dword [esi+08h]
        push    eax
        mov     eax,dword [esi+04h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@#__construct_at_end.p#shared_ptr.n0~~.qp#shared_ptr.n0~p#shared_ptr.n0~ui ; std::vector<shared_ptr<Token>, allocator<shared_ptr<Token>>>::__construct_at_end<shared_ptr<Token>*>(shared_ptr<Token>*, shared_ptr<Token>*, unsigned int)
        add     esp,byte 010h
; Line 1259:     } 
L_163613:
; Line 1260: } 
        mov     eax,ebx
L_163609:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~ virtual
        [bits 32]
@.xc@std@#vector.#shared_ptr.5Token~#allocator.#shared_ptr.n0~~~@.bctr.qrx#vector.#shared_ptr.n0~#allocator.#shared_ptr.n0~~~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#allocator.#shared_ptr.5Token~~+0
        dd      0fffffffch
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#get.ui?0?Rpqpxc4bool.n0~.qr#tuple.Rpqpxcn0.n0~.rpqpxcn0 virtual
        [bits 32]
; std::get<unsigned int=0, (*)(*)(char const *, bool)&&>(tuple<(*)(*)(char const *, bool)&&>&)
@std@#get.ui?0?Rpqpxc4bool.n0~.qr#tuple.Rpqpxcn0.n0~.rpqpxcn0:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_163845:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_163846:
        ret
section code
section code
        section vsc@std@#get.ui?0?R#allocator.pqpxc4bool.n0~~.qr#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0, allocator<(*)(*)(char const *, bool)>&&>(tuple<allocator<(*)(*)(char const *, bool)>&&>&)
@std@#get.ui?0?R#allocator.pqpxc4bool.n0~~.qr#tuple.R#allocator.pqpxcn0.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_163869:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_163870:
        ret
section code
section code
        section vsc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func((*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&)
@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~:
; Line 1532:                _VSTD::forward_as_tuple(_VSTD::move(__a))) 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
        push    esi
        push    edi
L_163893:
        mov     eax,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        add     esp,byte 0fffffffch
        mov     edi,esp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~ ; std::forward_as_tuple<allocator<(*)(*)(char const *, bool)>>(allocator<(*)(*)(char const *, bool)>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    eax
        push    edi
        call    @std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~ ; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::tuple(tuple<allocator<(*)(*)(char const *, bool)>&&>&&)
        mov     dword [ebp-050h+014h],02h
L_163955:
L_163942:
L_163929:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],03h
        add     esp,byte 0fffffffch
        mov     edi,esp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    esi
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0 ; std::forward_as_tuple<(*)(*)(char const *, bool)>((*)(*)(char const *, bool)&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    edi
        call    @std@#tuple.Rpqpxc4bool.n0~@.bctr.qR#tuple.Rpqpxcn0.n0~ ; std::tuple<(*)(*)(char const *, bool)&&>::tuple(tuple<(*)(*)(char const *, bool)&&>&&)
        mov     dword [ebp-050h+014h],05h
L_164013:
L_164000:
L_163987:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ ; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair<(*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&, >(std::piecewise_construct_t, tuple<(*)(*)(char const *, bool)&&>, tuple<allocator<(*)(*)(char const *, bool)>&&>)
        add     esp,byte 010h
; Line 1534:     } 
        mov     eax,ebx
L_163894:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~:
        dd      @std@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.R#allocator.pqpxc4bool.n0~~ virtual
        [bits 32]
@.xt@#tuple.R#allocator.pqpxc4bool.n0~~:
        dd      @std@#tuple.R#allocator.pqpxc4bool.n0~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~:
        dd      @std@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.Rpqpxc4bool.n0~ virtual
        [bits 32]
@.xt@#tuple.Rpqpxc4bool.n0~:
        dd      @std@#tuple.Rpqpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qRpqpxcn0.n0R#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.R#allocator.pqpxc4bool.n0~~+0
        dd      0fffffff8h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#tuple.Rpqpxc4bool.n0~+0
        dd      0fffffffch
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv:
L_164021:
        mov     eax,dword [esp+04h]
L_164022:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_164029:
        mov     eax,dword [esp+04h]
L_164030:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv:
L_164037:
        mov     eax,dword [esp+04h]
L_164038:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::select_on_container_copy_construction( const allocator<shared_ptr<Token>>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~:
; Line 1636:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_164045:
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-050h+014h],01h
        mov     dword [ebp-050h+014h],02h
        push    dword [eax]
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~ ; std::allocator_traits<allocator<shared_ptr<Token>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<shared_ptr<Token>>&)
        mov     dword [ebp-050h+014h],03h
L_164123:
L_164110:
        add     esp,byte 0ch
        mov     dword [ebp-050h+014h],04h
        mov     dword [ebp-050h+014h],05h
L_164139:
        mov     dword [ebp-050h+014h],06h
        mov     eax,dword [ebp+08h]
L_164046:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_select_on_container_copy_construction.x#allocator.#shared_ptr.5Token~~~ virtual
        [bits 32]
@.xt@#__has_select_on_container_copy_construction.x#allocator.#shared_ptr.5Token~~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      073h
        db      065h
        db      06ch
        db      065h
        db      063h
        db      074h
        db      05fh
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      074h
        db      061h
        db      069h
        db      06eh
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      070h
        db      079h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@select_on_container_copy_construction.qrx#allocator.#shared_ptr.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#__has_select_on_container_copy_construction.x#allocator.#shared_ptr.5Token~~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#allocator.#shared_ptr.5Token~~+0
        dd      0fffffff8h
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<shared_ptr<Token>>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#allocator.#shared_ptr.5Token~~i?1?4bool?0?~@__get.xqv:
L_164145:
        mov     eax,dword [esp+04h]
L_164146:
        ret
section code
section code
        section vsc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair<(*)(*)(char const *, bool)&&, allocator<(*)(*)(char const *, bool)>&&, >(std::piecewise_construct_t, tuple<(*)(*)(char const *, bool)&&>, tuple<allocator<(*)(*)(char const *, bool)>&&>)
@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_164153:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.Rpqpxc4bool.n0~@.bctr.qR#tuple.Rpqpxcn0.n0~ ; std::tuple<(*)(*)(char const *, bool)&&>::tuple(tuple<(*)(*)(char const *, bool)&&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::__compressed_pair_elem<(*)(*)(char const *, bool)&&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<(*)(*)(char const *, std::piecewise_construct_t)&&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~ ; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::tuple(tuple<allocator<(*)(*)(char const *, bool)>&&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>&&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<(*)(*)(char const *, std::piecewise_construct_t)>&&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_164263:
L_164250:
L_164237:
        mov     dword [ebp-050h+014h],04h
L_164305:
L_164292:
L_164279:
L_164321:
        mov     eax,ebx
L_164154:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.Rpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.R#allocator.pqpxc4bool.n0~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.Rpqpxc4bool.n0~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::tuple(tuple<allocator<(*)(*)(char const *, bool)>&&>&&)
@std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~:
        push    ecx
L_164327:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_164328:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::forward_as_tuple<allocator<(*)(*)(char const *, bool)>>(allocator<(*)(*)(char const *, bool)>&&)
@std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
L_164367:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        mov     dword [ebp-068h],00h
        lea     eax,[ebp-068h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bctr.eui?0?R#allocator.pqpxcn0.n0~ee3_Tl#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.R#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#allocator.pqpxcn0.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<(*)(*)(char const *, bool)>&&>::__tuple_impl<..., unsigned int=0, allocator<(*)(*)(char const *, bool)>&&, ..., ..., _Tl, allocator<(*)(*)(char const *, _Tl)>, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<(*)(*)(char const *, _Tl)>&&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<(*)(*)(char const *, _Tp)>&&)
L_164498:
L_164512:
L_164526:
L_164540:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_164368:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#tuple.Rpqpxc4bool.n0~@.bctr.qR#tuple.Rpqpxcn0.n0~ virtual
        [bits 32]
; std::tuple<(*)(*)(char const *, bool)&&>::tuple(tuple<(*)(*)(char const *, bool)&&>&&)
@std@#tuple.Rpqpxc4bool.n0~@.bctr.qR#tuple.Rpqpxcn0.n0~:
        push    ecx
L_164547:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_164548:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0 virtual
        [bits 32]
; std::forward_as_tuple<(*)(*)(char const *, bool)>((*)(*)(char const *, bool)&&)
@std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff98h
L_164587:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        mov     dword [ebp-068h],00h
        lea     eax,[ebp-068h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bctr.eui?0?Rpqpxcn0.n0ee3_Tlpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.Rpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~Rpqpxcn0.n0 ; std::__tuple_impl<__tuple_indices<...unsigned int=0>, (*)(*)(char const *, bool)&&>::__tuple_impl<..., unsigned int=0, (*)(*)(char const *, bool)&&, ..., ..., _Tl, (*)(*)(char const *, _Tl), >(__tuple_indices<...unsigned int=0>, __tuple_types<(*)(*)(char const *, _Tl)&&>, __tuple_indices<...>, __tuple_types<..._Tp>, (*)(*)(char const *, _Tp)&&)
L_164718:
L_164732:
L_164746:
L_164760:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_164588:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0 virtual
        [bits 32]
@.xc@std@#forward_as_tuple.pqpxc4bool.n0~.qRpqpxcn0.n0:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, allocator<(*)(*)(char const *, bool)>&&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?R#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv:
L_164767:
L_164768:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<(*)(*)(char const *, bool)>&&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bdtr.qv:
L_164773:
L_164787:
L_164774:
        ret
section code
section code
        section vsc@std@#tuple.R#allocator.pqpxc4bool.n0~~@.bdtr.qv virtual
        [bits 32]
; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::~tuple()
@std@#tuple.R#allocator.pqpxc4bool.n0~~@.bdtr.qv:
L_164793:
L_164820:
L_164807:
L_164794:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0, (*)(*)(char const *, bool)&&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?Rpqpxc4bool.n0n0?0?~@.bdtr.qv:
L_164827:
L_164828:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, (*)(*)(char const *, bool)&&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bdtr.qv:
L_164833:
L_164847:
L_164834:
        ret
section code
section code
        section vsc@std@#tuple.Rpqpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::tuple<(*)(*)(char const *, bool)&&>::~tuple()
@std@#tuple.Rpqpxc4bool.n0~@.bdtr.qv:
L_164853:
L_164880:
L_164867:
L_164854:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
; std::allocator_traits<allocator<shared_ptr<Token>>>::__select_on_container_copy_construction(integral_constant<bool, bool=0>,  const allocator<shared_ptr<Token>>&)
@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~:
; Line 1812:     _LIBCPP_INLINE_VISIBILITY 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_164887:
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        mov     dword [ebp-048h+014h],01h
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-048h+014h],02h
L_164921:
L_164935:
L_164888:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#shared_ptr.5Token~~~@__select_on_container_copy_construction.q#integral_constant.4booln1?0?~rx#allocator.#shared_ptr.n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      02h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      0ch
        dd      00h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::__compressed_pair_elem<(*)(*)(char const *, bool)&&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<(*)(*)(char const *, std::piecewise_construct_t)&&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_164941:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     ecx,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_165009:
        mov     dword [ebp-048h+014h],01h
L_165049:
L_165036:
L_165023:
L_165065:
L_164942:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.Rpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.Rpqpxcn0.n0~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.Rpqpxc4bool.n0~+0
        dd      010h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>&&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<(*)(*)(char const *, std::piecewise_construct_t)>&&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_165071:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_165155:
        mov     dword [ebp-048h+014h],02h
L_165195:
L_165182:
L_165169:
L_165211:
L_165072:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.R#allocator.pqpxc4bool.n0~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bctr.eui?0?R#allocator.pqpxcn0.n0~ee3_Tl#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.R#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, allocator<(*)(*)(char const *, bool)>&&>::__tuple_impl<..., unsigned int=0, allocator<(*)(*)(char const *, bool)>&&, ..., ..., _Tl, allocator<(*)(*)(char const *, _Tl)>, >(__tuple_indices<...unsigned int=0>, __tuple_types<allocator<(*)(*)(char const *, _Tl)>&&>, __tuple_indices<...>, __tuple_types<..._Tp>, allocator<(*)(*)(char const *, _Tp)>&&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~R#allocator.pqpxc4bool.n0~~@.bctr.eui?0?R#allocator.pqpxcn0.n0~ee3_Tl#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.R#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~R#allocator.pqpxcn0.n0~:
        push    ecx
        push    ecx
        push    ecx
L_165217:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_165285:
L_165299:
L_165313:
L_165327:
L_165218:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bctr.eui?0?Rpqpxcn0.n0ee3_Tlpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.Rpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~Rpqpxcn0.n0 virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>, (*)(*)(char const *, bool)&&>::__tuple_impl<..., unsigned int=0, (*)(*)(char const *, bool)&&, ..., ..., _Tl, (*)(*)(char const *, _Tl), >(__tuple_indices<...unsigned int=0>, __tuple_types<(*)(*)(char const *, _Tl)&&>, __tuple_indices<...>, __tuple_types<..._Tp>, (*)(*)(char const *, _Tp)&&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~Rpqpxc4bool.n0~@.bctr.eui?0?Rpqpxcn0.n0ee3_Tlpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.Rpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~Rpqpxcn0.n0:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_165333:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_165401:
L_165415:
L_165429:
L_165443:
L_165334:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
section data
        section vsd@std@bad_function_call@_.vt virtual
        [bits 32]
@std@bad_function_call@_.vt:
        dd      @.xt@22@std@bad_function_call+0
        dd      00h
        dd      00h
        dd      @std@bad_function_call@.bdtr.qv+0
        dd      @std@exception@what.xqv+0
section data
section data
        section vsd@std@bad_variant_access@_.vt virtual
        [bits 32]
@std@bad_variant_access@_.vt:
        dd      @.xt@23@std@bad_variant_access+0
        dd      00h
        dd      00h
        dd      @std@bad_variant_access@.bdtr.qv+0
        dd      @std@bad_variant_access@what.xqv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#default_delete.5Token~ virtual
        [bits 32]
@.xt@#default_delete.5Token~:
        dd      @std@#default_delete.5Token~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p5Token#default_delete.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p5Token#default_delete.n0~~:
        dd      @std@#__compressed_pair.p5Token#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.5Token#default_delete.n0~~ virtual
        [bits 32]
@.xt@#unique_ptr.5Token#default_delete.n0~~:
        dd      @std@#unique_ptr.5Token#default_delete.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@9Tokenizer virtual
        [bits 32]
@.xt@9Tokenizer:
        dd      @Tokenizer@.bdtr.qv+0
        dd      028h
        dd      0400h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      069h
        db      07ah
        db      065h
        db      072h
        db      00h
        dd      00h
section code
section code
section data
        section vsd@Tokenizer@_.vt virtual
        [bits 32]
@Tokenizer@_.vt:
        dd      @.xt@9Tokenizer+0
        dd      00h
        dd      00h
        dd      @Tokenizer@.bdtr.qv+0
section data
section data
        section vsd@std@ios_base@_.vt virtual
        [bits 32]
@std@ios_base@_.vt:
        dd      @.xt@13@std@ios_base+0
        dd      00h
        dd      00h
        dd      @std@ios_base@.bdtr.qv+0
section data
section data
        section vsd@std@strstream@_.vt virtual
        [bits 32]
@std@strstream@_.vt:
        dd      @.xt@14@std@strstream+0
        dd      00h
        dd      00h
        dd      @std@strstream@.bdtr.qv+0
        dd      0ch
        dd      0ch
        dd      @std@strstream_@A0+0
section data
section data
section code
        section vsc@std@strstream_@A0 virtual
        [bits 32]
; std::strstream_::A0
@std@strstream_@A0:
        add     dword [esp+04h],byte 0fffffff4h
        jmp     @std@strstream@.bdtr.qv ; std::strstream::~strstream()
section code
section code
section data
        section vsd@Token@_.vt virtual
        [bits 32]
@Token@_.vt:
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @Token@.bdtr.qv+0
        dd      @Token@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@std@exception@_.vt virtual
        [bits 32]
@std@exception@_.vt:
        dd      @.xt@14@std@exception+0
        dd      00h
        dd      00h
        dd      @std@exception@.bdtr.qv+0
        dd      @std@exception@what.xqv+0
section data
section data
        section vsd@std@length_error@_.vt virtual
        [bits 32]
@std@length_error@_.vt:
        dd      @.xt@17@std@length_error+0
        dd      00h
        dd      00h
        dd      @std@length_error@.bdtr.qv+0
        dd      @std@logic_error@what.xqv+0
section data
section data
        section vsd@std@__shared_count@_.vt virtual
        [bits 32]
@std@__shared_count@_.vt:
        dd      @.xt@19@std@__shared_count+0
        dd      00h
        dd      00h
        dd      @std@__shared_count@.bdtr.qv+0
        dd      00h
section data
section data
        section vsd@std@__shared_weak_count@_.vt virtual
        [bits 32]
@std@__shared_weak_count@_.vt:
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
        dd      @std@__shared_weak_count@.bdtr.qv+0
        dd      00h
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      00h
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@8EndToken virtual
        [bits 32]
@.xt@8EndToken:
        dd      @EndToken@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      045h
        db      06eh
        db      064h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.8EndToken~n0~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.8EndToken~n0~:
        dd      @std@#__compressed_pair.#allocator.8EndToken~n0~@.bdtr.qv+0
        dd      01ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.8EndToken#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.8EndToken#allocator.n0~~:
        dd      @std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bdtr.qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.8EndToken#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@12NumericToken virtual
        [bits 32]
@.xt@12NumericToken:
        dd      @NumericToken@.bdtr.qv+0
        dd      040h
        dd      0400h
        db      04eh
        db      075h
        db      06dh
        db      065h
        db      072h
        db      069h
        db      063h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bdtr.qv+0
        dd      040h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.12NumericToken~n0~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.12NumericToken~n0~:
        dd      @std@#__compressed_pair.#allocator.12NumericToken~n0~@.bdtr.qv+0
        dd      048h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~+0
        dd      08h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.12NumericToken#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.12NumericToken#allocator.n0~~:
        dd      @std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bdtr.qv+0
        dd      058h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.12NumericToken#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@14CharacterToken virtual
        [bits 32]
@.xt@14CharacterToken:
        dd      @CharacterToken@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      043h
        db      068h
        db      061h
        db      072h
        db      061h
        db      063h
        db      074h
        db      065h
        db      072h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.14CharacterToken~n0~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.14CharacterToken~n0~:
        dd      @std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bdtr.qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~+0
        dd      08h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~:
        dd      @std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bdtr.qv+0
        dd      038h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@11StringToken virtual
        [bits 32]
@.xt@11StringToken:
        dd      @StringToken@.bdtr.qv+0
        dd      044h
        dd      0400h
        db      053h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bdtr.qv+0
        dd      044h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.11StringToken~n0~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.11StringToken~n0~:
        dd      @std@#__compressed_pair.#allocator.11StringToken~n0~@.bdtr.qv+0
        dd      048h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.11StringToken#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.11StringToken#allocator.n0~~:
        dd      @std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bdtr.qv+0
        dd      054h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.11StringToken#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#TemplatedIdentifierToken.2kw~ virtual
        [bits 32]
@.xt@#TemplatedIdentifierToken.2kw~:
        dd      @#TemplatedIdentifierToken.2kw~@.bdtr.qv+0
        dd      03ch
        dd      0400h
        db      054h
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      074h
        db      065h
        db      064h
        db      049h
        db      064h
        db      065h
        db      06eh
        db      074h
        db      069h
        db      066h
        db      069h
        db      065h
        db      072h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bdtr.qv+0
        dd      03ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~:
        dd      @std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bdtr.qv+0
        dd      040h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~:
        dd      @std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bdtr.qv+0
        dd      04ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#TemplatedKeywordToken.2kw~ virtual
        [bits 32]
@.xt@#TemplatedKeywordToken.2kw~:
        dd      @#TemplatedKeywordToken.2kw~@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      054h
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      074h
        db      065h
        db      064h
        db      04bh
        db      065h
        db      079h
        db      077h
        db      06fh
        db      072h
        db      064h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~:
        dd      @std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bdtr.qv+0
        dd      024h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~:
        dd      @std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bdtr.qv+0
        dd      030h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared_weak.qv+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@10ErrorToken virtual
        [bits 32]
@.xt@10ErrorToken:
        dd      @ErrorToken@.bdtr.qv+0
        dd      01ch
        dd      0400h
        db      045h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      054h
        db      06fh
        db      06bh
        db      065h
        db      06eh
        db      00h
        dd      0800h
        dd      @.xt@5Token+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bdtr.qv+0
        dd      01ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#allocator.10ErrorToken~n0~ virtual
        [bits 32]
@.xt@#__compressed_pair.#allocator.10ErrorToken~n0~:
        dd      @std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bdtr.qv+0
        dd      020h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~:
        dd      @std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bdtr.qv+0
        dd      02ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      065h
        db      06dh
        db      070h
        db      06ch
        db      061h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
        section vsd@EndToken@_.vt virtual
        [bits 32]
@EndToken@_.vt:
        dd      @.xt@8EndToken+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @EndToken@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @EndToken@.bdtr.qv+0
        dd      @Token@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@NumericToken@_.vt virtual
        [bits 32]
@NumericToken@_.vt:
        dd      @.xt@12NumericToken+0
        dd      00h
        dd      00h
        dd      @NumericToken@IsNumeric.xqv+0
        dd      @NumericToken@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @NumericToken@GetInteger.xqv+0
        dd      @NumericToken@GetNumericType.xqv+0
        dd      @NumericToken@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @NumericToken@.bdtr.qv+0
        dd      @NumericToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@CharacterToken@_.vt virtual
        [bits 32]
@CharacterToken@_.vt:
        dd      @.xt@14CharacterToken+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @CharacterToken@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @CharacterToken@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @CharacterToken@.bdtr.qv+0
        dd      @CharacterToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@StringToken@_.vt virtual
        [bits 32]
@StringToken@_.vt:
        dd      @.xt@11StringToken+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @StringToken@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @StringToken@IsWide.xqv+0
        dd      @StringToken@GetString.xqv+0
        dd      @StringToken@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @StringToken@.bdtr.qv+0
        dd      @StringToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~:
        dd      @std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~+0
        dd      08h
        dd      00h
section code
section code
        section vsc@.xt@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~ virtual
        [bits 32]
@.xt@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~:
        dd      @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bdtr.qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      068h
        db      061h
        db      072h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      05fh
        db      070h
        db      06fh
        db      069h
        db      06eh
        db      074h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@24@std@__shared_weak_count+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@_.vt virtual
        [bits 32]
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@_.vt:
        dd      @.xt@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~+0
        dd      00h
        dd      00h
        dd      @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bdtr.qv+0
        dd      @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared.qv+0
        dd      @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__get_deleter.xqrx14@std@type_info+0
        dd      @std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared_weak.qv+0
section data
section data
        section vsd@#TemplatedIdentifierToken.2kw~@_.vt virtual
        [bits 32]
@#TemplatedIdentifierToken.2kw~@_.vt:
        dd      @.xt@#TemplatedIdentifierToken.2kw~+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @#TemplatedIdentifierToken.2kw~@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @#TemplatedIdentifierToken.2kw~@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @Token@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @#TemplatedIdentifierToken.2kw~@GetKeyword.xqv+0
        dd      @#TemplatedIdentifierToken.2kw~@GetId.xqv+0
        dd      @#TemplatedIdentifierToken.2kw~@.bdtr.qv+0
        dd      @#TemplatedIdentifierToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@#TemplatedKeywordToken.2kw~@_.vt virtual
        [bits 32]
@#TemplatedKeywordToken.2kw~@_.vt:
        dd      @.xt@#TemplatedKeywordToken.2kw~+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @#TemplatedKeywordToken.2kw~@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @#TemplatedKeywordToken.2kw~@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @#TemplatedKeywordToken.2kw~@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @#TemplatedKeywordToken.2kw~@.bdtr.qv+0
        dd      @#TemplatedKeywordToken.2kw~@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
        section vsd@ErrorToken@_.vt virtual
        [bits 32]
@ErrorToken@_.vt:
        dd      @.xt@10ErrorToken+0
        dd      00h
        dd      00h
        dd      @Token@IsNumeric.xqv+0
        dd      @Token@IsFloating.xqv+0
        dd      @Token@IsKeyword.xqv+0
        dd      @Token@IsCharacter.xqv+0
        dd      @Token@IsString.xqv+0
        dd      @Token@IsIdentifier.xqv+0
        dd      @Token@IsEnd.xqv+0
        dd      @ErrorToken@IsError.xqv+0
        dd      @Token@IsWide.xqv+0
        dd      @Token@GetString.xqv+0
        dd      @Token@GetRawString.xqv+0
        dd      @Token@GetInteger.xqv+0
        dd      @Token@GetNumericType.xqv+0
        dd      @Token@GetFloat.xqv+0
        dd      @Token@GetKeyword.xqv+0
        dd      @Token@GetId.xqv+0
        dd      @ErrorToken@.bdtr.qv+0
        dd      @ErrorToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~+0
section data
section data
section code
        section vsc@.xt@#__base.qpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__base.qpxc4bool.n0~:
        dd      @std@__function@#__base.qpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      00h
section code
section code
section data
        section vsd@std@__function@#__base.qpxc4bool.n0~@_.vt virtual
        [bits 32]
@std@__function@#__base.qpxc4bool.n0~@_.vt:
        dd      @.xt@#__base.qpxc4bool.n0~+0
        dd      00h
        dd      00h
        dd      @std@__function@#__base.qpxc4bool.n0~@.bdtr.qv+0
        dd      00h
        dd      00h
        dd      00h
        dd      00h
        dd      00h
        dd      00h
        dd      00h
section data
section data
section code
        section vsc@.xt@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~:
        dd      @std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~:
        dd      @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
@.xt@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~:
        dd      @std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~ virtual
        [bits 32]
@.xt@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~:
        dd      @std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~ virtual
        [bits 32]
@.xt@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~:
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      00h
        dd      0800h
        dd      @.xt@#__base.qpxc4bool.n0~+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@_.vt virtual
        [bits 32]
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@_.vt:
        dd      @.xt@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~+0
        dd      00h
        dd      00h
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqp#__base.qpxcn0.n0~+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy.qv+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy_deallocate.qv+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bcall.qRpxcRn0+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target.xqrx14@std@type_info+0
        dd      @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target_type.xqv+0
section data
section data
section code
        section vsc@_@Token@GetId.xqv_aa_89126_dest virtual
        [bits 32]
; @Token@GetId.xqv_aa_89126_dest
_@Token@GetId.xqv_aa_89126_dest:
        push    ecx
        push    ecx
        push    ecx
L_165449:
        push    dword @Token@GetId.xqv_aa_89126
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_165450:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@exception@what.xqv virtual
        [bits 32]
; std::exception::what() const 
@std@exception@what.xqv:
; Line 40:     virtual ~exception ()  __NOTHROW; 
L_165451:
; Line 44:       return __dls::__dls_NoNamedException; 
        mov     eax,dword [@__dls@__dls_NoNamedException]
; Line 45:     } 
L_165452:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<Token*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p5Tokeni?0?4bool?0?~@.bdtr.qv:
L_165459:
L_165460:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<Token>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@.bdtr.qv:
L_165465:
L_165479:
L_165466:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p5Token#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<Token*, default_delete<Token>>::~__compressed_pair()
@std@#__compressed_pair.p5Token#default_delete.n0~~@.bdtr.qv:
L_165485:
L_165512:
L_165499:
L_165527:
L_165486:
        ret
section code
section code
        section vsc@std@#unique_ptr.5Token#default_delete.n0~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<Token, default_delete<Token>>::~unique_ptr()
@std@#unique_ptr.5Token#default_delete.n0~~@.bdtr.qv:
        add     esp,byte 0ffffffech
        push    ebx
L_165533:
        mov     edx,dword [esp+04h+018h]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_165539
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+018h],eax
        and     eax,eax
        je      L_165652
        mov     eax,dword [esp-010h+018h]
        add     eax,byte 04h
        jmp     L_165653
L_165652:
        mov     eax,dword [esp-010h+018h]
L_165653:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.5Token~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<Token>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-014h+018h],ebx
        and     ebx,ebx
        je      L_165655
        mov     eax,dword [esp-014h+018h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+040h]
        add     esp,byte 04h
        mov     eax,dword [esp-014h+018h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_165655:
; Line 2364:   } 
L_165635:
L_165539:
; Line 2619:   } 
L_165556:
L_165695:
L_165682:
L_165710:
L_165669:
L_165534:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@Token@IsNumeric.xqv virtual
        [bits 32]
; Token::IsNumeric() const 
@Token@IsNumeric.xqv:
; Line 49:     }; 
L_165717:
        xor     al,al
L_165718:
        ret
section code
section code
        section vsc@Token@IsFloating.xqv virtual
        [bits 32]
; Token::IsFloating() const 
@Token@IsFloating.xqv:
; Line 51:     virtual bool IsFloating() const { return false; } 
L_165725:
        xor     al,al
L_165726:
        ret
section code
section code
        section vsc@Token@IsCharacter.xqv virtual
        [bits 32]
; Token::IsCharacter() const 
@Token@IsCharacter.xqv:
; Line 53:     virtual bool IsCharacter() const { return false; } 
L_165733:
        xor     al,al
L_165734:
        ret
section code
section code
        section vsc@Token@IsString.xqv virtual
        [bits 32]
; Token::IsString() const 
@Token@IsString.xqv:
; Line 54:     virtual bool IsString() const { return false; } 
L_165741:
        xor     al,al
L_165742:
        ret
section code
section code
        section vsc@Token@IsError.xqv virtual
        [bits 32]
; Token::IsError() const 
@Token@IsError.xqv:
; Line 57:     virtual bool IsError() const { return false; } 
L_165749:
        xor     al,al
L_165750:
        ret
section code
section code
        section vsc@Token@IsWide.xqv virtual
        [bits 32]
; Token::IsWide() const 
@Token@IsWide.xqv:
; Line 58:     virtual bool IsWide() const { return false; } 
L_165757:
        xor     al,al
L_165758:
        ret
section code
section code
        section vsc@Token@GetString.xqv virtual
        [bits 32]
; Token::GetString() const 
@Token@GetString.xqv:
; Line 59:     virtual std::wstring GetString() const { return L""; } 
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_165766:
        mov     esi,dword [esp+04h+02ch]
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        mov     ebx,L_165765
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     ebp,esi
        add     ebp,byte 04h
        mov     dword [esp-018h+02ch],00h
        lea     eax,[esp-018h+02ch]
        mov     dword [esp-01ch+02ch],00h
        lea     edi,[esp-01ch+02ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    ebp
        call    @std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,ebp
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_165881:
L_165895:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    @std@#char_traits.C~@length.qpxC ; std::char_traits<wchar_t>::length(wchar_t const *)
        add     esp,byte 04h
        push    eax
        push    ebx
        push    esi
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__init.qpxCui ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__init(wchar_t const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     eax,dword [esp+04h+02ch]
L_165767:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@Token@GetRawString.xqv virtual
        [bits 32]
; Token::GetRawString() const 
@Token@GetRawString.xqv:
; Line 60:     virtual std::wstring GetRawString() const { return L""; } 
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_165902:
        mov     esi,dword [esp+04h+02ch]
; Line 815:     template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type> 
        mov     ebx,L_165765
        push    esi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     ebp,esi
        add     ebp,byte 04h
        mov     dword [esp-018h+02ch],00h
        lea     eax,[esp-018h+02ch]
        mov     dword [esp-01ch+02ch],00h
        lea     edi,[esp-01ch+02ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    ebp
        call    @std@#__compressed_pair_elem.55@std@#basic_string.C#char_traits.C~#allocator.C~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,ebp
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.C~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<wchar_t>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_166017:
L_166031:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    @std@#char_traits.C~@length.qpxC ; std::char_traits<wchar_t>::length(wchar_t const *)
        add     esp,byte 04h
        push    eax
        push    ebx
        push    esi
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@__init.qpxCui ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::__init(wchar_t const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     eax,dword [esp+04h+02ch]
L_165903:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@Token@GetInteger.xqv virtual
        [bits 32]
; Token::GetInteger() const 
@Token@GetInteger.xqv:
; Line 61:     virtual long long GetInteger() const { return 0; } 
L_166038:
        xor     eax,eax
        xor     edx,edx
L_166039:
        ret
section code
section code
        section vsc@Token@GetNumericType.xqv virtual
        [bits 32]
; Token::GetNumericType() const 
@Token@GetNumericType.xqv:
; Line 62:     virtual Type GetNumericType() const { return t_int; } 
L_166046:
        xor     eax,eax
L_166047:
        ret
section code
section code
        section vsc@Token@GetFloat.xqv virtual
        [bits 32]
; Token::GetFloat() const 
@Token@GetFloat.xqv:
; Line 63:     virtual const FPF* GetFloat() const { return 0; } 
L_166054:
        xor     eax,eax
L_166055:
        ret
section code
section code
        section vsc@Token@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~ virtual
        [bits 32]
; Token::Parse(basic_string<char, char_traits<char>, allocator<char>>&)
@Token@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~:
; Line 75:   protected: 
L_166062:
L_166063:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<EndToken>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.8EndToken~i?0?4bool?0?~@.bdtr.qv:
L_166070:
L_166084:
L_166071:
        ret
section code
section code
        section vsc@EndToken@.bdtr.qv virtual
        [bits 32]
; EndToken::~EndToken()
@EndToken@.bdtr.qv:
L_166090:
        mov     eax,dword [esp+04h]
        push    eax
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_166091:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<EndToken, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@.bdtr.qv:
L_166096:
        mov     eax,dword [esp+04h]
        push    eax
        call    @EndToken@.bdtr.qv ; EndToken::~EndToken()
        add     esp,byte 04h
L_166097:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.8EndToken~n0~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<EndToken>, EndToken>::~__compressed_pair()
@std@#__compressed_pair.#allocator.8EndToken~n0~@.bdtr.qv:
L_166102:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @EndToken@.bdtr.qv ; EndToken::~EndToken()
        add     esp,byte 04h
L_166116:
L_166143:
L_166130:
L_166103:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<EndToken, allocator<EndToken>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@.bdtr.qv:
        push    ebx
L_166150:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+04h
        push    eax
        call    @EndToken@.bdtr.qv ; EndToken::~EndToken()
        add     esp,byte 04h
L_166177:
L_166204:
L_166191:
L_166164:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_166151:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<EndToken, allocator<EndToken>>::__on_zero_shared()
@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_166212:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_166234
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 04h
        jmp     L_166235
L_166234:
        mov     eax,dword [esp-028h+028h]
L_166235:
        push    eax
        call    @std@#__compressed_pair_elem.8EndTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<EndToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @EndToken@.bdtr.qv ; EndToken::~EndToken()
        add     esp,byte 04h
; Line 3606: } 
L_166213:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<EndToken, allocator<EndToken>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.8EndToken#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_166240:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_166308:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_166403:
L_166356:
; Line 3618: } 
L_166466:
L_166241:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<NumericToken>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.12NumericToken~i?0?4bool?0?~@.bdtr.qv:
L_166472:
L_166486:
L_166473:
        ret
section code
section code
        section vsc@NumericToken@.bdtr.qv virtual
        [bits 32]
; NumericToken::~NumericToken()
@NumericToken@.bdtr.qv:
L_166492:
        mov     eax,dword [esp+04h]
L_166508:
        push    eax
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_166493:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@.bdtr.qv:
L_166514:
        mov     eax,dword [esp+04h]
        push    eax
        call    @NumericToken@.bdtr.qv ; NumericToken::~NumericToken()
        add     esp,byte 04h
L_166515:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<NumericToken>, NumericToken>::~__compressed_pair()
@std@#__compressed_pair.#allocator.12NumericToken~n0~@.bdtr.qv:
L_166520:
        mov     eax,dword [esp+04h]
        add     eax,byte 08h
        push    eax
        call    @NumericToken@.bdtr.qv ; NumericToken::~NumericToken()
        add     esp,byte 04h
L_166534:
L_166561:
L_166548:
L_166521:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<NumericToken, allocator<NumericToken>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@.bdtr.qv:
        push    ebx
L_166568:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+08h
        push    eax
        call    @NumericToken@.bdtr.qv ; NumericToken::~NumericToken()
        add     esp,byte 04h
L_166595:
L_166622:
L_166609:
L_166582:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_166569:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<NumericToken, allocator<NumericToken>>::__on_zero_shared()
@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_166630:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_166652
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 08h
        jmp     L_166653
L_166652:
        mov     eax,dword [esp-028h+028h]
L_166653:
        push    eax
        call    @std@#__compressed_pair_elem.12NumericTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<NumericToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @NumericToken@.bdtr.qv ; NumericToken::~NumericToken()
        add     esp,byte 04h
; Line 3606: } 
L_166631:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<NumericToken, allocator<NumericToken>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.12NumericToken#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_166658:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_166726:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_166821:
L_166774:
; Line 3618: } 
L_166884:
L_166659:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<CharacterToken>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.14CharacterToken~i?0?4bool?0?~@.bdtr.qv:
L_166890:
L_166904:
L_166891:
        ret
section code
section code
        section vsc@CharacterToken@.bdtr.qv virtual
        [bits 32]
; CharacterToken::~CharacterToken()
@CharacterToken@.bdtr.qv:
L_166910:
        mov     eax,dword [esp+04h]
        push    eax
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_166911:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@.bdtr.qv:
L_166916:
        mov     eax,dword [esp+04h]
        push    eax
        call    @CharacterToken@.bdtr.qv ; CharacterToken::~CharacterToken()
        add     esp,byte 04h
L_166917:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<CharacterToken>, CharacterToken>::~__compressed_pair()
@std@#__compressed_pair.#allocator.14CharacterToken~n0~@.bdtr.qv:
L_166922:
        mov     eax,dword [esp+04h]
        add     eax,byte 08h
        push    eax
        call    @CharacterToken@.bdtr.qv ; CharacterToken::~CharacterToken()
        add     esp,byte 04h
L_166936:
L_166963:
L_166950:
L_166923:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@.bdtr.qv:
        push    ebx
L_166970:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+08h
        push    eax
        call    @CharacterToken@.bdtr.qv ; CharacterToken::~CharacterToken()
        add     esp,byte 04h
L_166997:
L_167024:
L_167011:
L_166984:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_166971:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>::__on_zero_shared()
@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_167032:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_167054
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 08h
        jmp     L_167055
L_167054:
        mov     eax,dword [esp-028h+028h]
L_167055:
        push    eax
        call    @std@#__compressed_pair_elem.14CharacterTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<CharacterToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @CharacterToken@.bdtr.qv ; CharacterToken::~CharacterToken()
        add     esp,byte 04h
; Line 3606: } 
L_167033:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<CharacterToken, allocator<CharacterToken>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.14CharacterToken#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_167060:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_167128:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_167223:
L_167176:
; Line 3618: } 
L_167286:
L_167061:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<StringToken>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.11StringToken~i?0?4bool?0?~@.bdtr.qv:
L_167292:
L_167306:
L_167293:
        ret
section code
section code
        section vsc@StringToken@.bdtr.qv virtual
        [bits 32]
; StringToken::~StringToken()
@StringToken@.bdtr.qv:
        push    ebx
L_167312:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,byte 030h
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@.bdtr.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::~basic_string()
        add     esp,byte 04h
        mov     eax,ebx
        add     eax,byte 01ch
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@.bdtr.qv ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::~basic_string()
        add     esp,byte 04h
        push    ebx
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_167313:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<StringToken, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@.bdtr.qv:
L_167318:
        mov     eax,dword [esp+04h]
        push    eax
        call    @StringToken@.bdtr.qv ; StringToken::~StringToken()
        add     esp,byte 04h
L_167319:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.11StringToken~n0~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<StringToken>, StringToken>::~__compressed_pair()
@std@#__compressed_pair.#allocator.11StringToken~n0~@.bdtr.qv:
L_167324:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @StringToken@.bdtr.qv ; StringToken::~StringToken()
        add     esp,byte 04h
L_167338:
L_167365:
L_167352:
L_167325:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<StringToken, allocator<StringToken>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@.bdtr.qv:
        push    ebx
L_167372:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+04h
        push    eax
        call    @StringToken@.bdtr.qv ; StringToken::~StringToken()
        add     esp,byte 04h
L_167399:
L_167426:
L_167413:
L_167386:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_167373:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<StringToken, allocator<StringToken>>::__on_zero_shared()
@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_167434:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_167456
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 04h
        jmp     L_167457
L_167456:
        mov     eax,dword [esp-028h+028h]
L_167457:
        push    eax
        call    @std@#__compressed_pair_elem.11StringTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<StringToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @StringToken@.bdtr.qv ; StringToken::~StringToken()
        add     esp,byte 04h
; Line 3606: } 
L_167435:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<StringToken, allocator<StringToken>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.11StringToken#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_167462:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_167530:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_167625:
L_167578:
; Line 3618: } 
L_167688:
L_167463:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TemplatedIdentifierToken<kw>>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.#TemplatedIdentifierToken.2kw~~i?0?4bool?0?~@.bdtr.qv:
L_167694:
L_167708:
L_167695:
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@.bdtr.qv virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::~TemplatedIdentifierToken()
@#TemplatedIdentifierToken.2kw~@.bdtr.qv:
        push    ebx
L_167714:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,byte 024h
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
        push    ebx
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_167715:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@.bdtr.qv:
L_167720:
        mov     eax,dword [esp+04h]
        push    eax
        call    @#TemplatedIdentifierToken.2kw~@.bdtr.qv ; TemplatedIdentifierToken<kw>::~TemplatedIdentifierToken()
        add     esp,byte 04h
L_167721:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<TemplatedIdentifierToken<kw>>, TemplatedIdentifierToken<kw>>::~__compressed_pair()
@std@#__compressed_pair.#allocator.#TemplatedIdentifierToken.2kw~~#TemplatedIdentifierToken.n0~~@.bdtr.qv:
L_167726:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @#TemplatedIdentifierToken.2kw~@.bdtr.qv ; TemplatedIdentifierToken<kw>::~TemplatedIdentifierToken()
        add     esp,byte 04h
L_167740:
L_167767:
L_167754:
L_167727:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@.bdtr.qv:
        push    ebx
L_167774:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+04h
        push    eax
        call    @#TemplatedIdentifierToken.2kw~@.bdtr.qv ; TemplatedIdentifierToken<kw>::~TemplatedIdentifierToken()
        add     esp,byte 04h
L_167801:
L_167828:
L_167815:
L_167788:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_167775:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>::__on_zero_shared()
@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_167836:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_167858
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 04h
        jmp     L_167859
L_167858:
        mov     eax,dword [esp-028h+028h]
L_167859:
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedIdentifierToken.2kw~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<TemplatedIdentifierToken<kw>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @#TemplatedIdentifierToken.2kw~@.bdtr.qv ; TemplatedIdentifierToken<kw>::~TemplatedIdentifierToken()
        add     esp,byte 04h
; Line 3606: } 
L_167837:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedIdentifierToken<kw>, allocator<TemplatedIdentifierToken<kw>>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.#TemplatedIdentifierToken.2kw~#allocator.#TemplatedIdentifierToken.n0~~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_167864:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_167932:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_168027:
L_167980:
; Line 3618: } 
L_168090:
L_167865:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TemplatedKeywordToken<kw>>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.#TemplatedKeywordToken.2kw~~i?0?4bool?0?~@.bdtr.qv:
L_168096:
L_168110:
L_168097:
        ret
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@.bdtr.qv virtual
        [bits 32]
; TemplatedKeywordToken<kw>::~TemplatedKeywordToken()
@#TemplatedKeywordToken.2kw~@.bdtr.qv:
L_168116:
        mov     eax,dword [esp+04h]
        push    eax
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_168117:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@.bdtr.qv:
L_168122:
        mov     eax,dword [esp+04h]
        push    eax
        call    @#TemplatedKeywordToken.2kw~@.bdtr.qv ; TemplatedKeywordToken<kw>::~TemplatedKeywordToken()
        add     esp,byte 04h
L_168123:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<TemplatedKeywordToken<kw>>, TemplatedKeywordToken<kw>>::~__compressed_pair()
@std@#__compressed_pair.#allocator.#TemplatedKeywordToken.2kw~~#TemplatedKeywordToken.n0~~@.bdtr.qv:
L_168128:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @#TemplatedKeywordToken.2kw~@.bdtr.qv ; TemplatedKeywordToken<kw>::~TemplatedKeywordToken()
        add     esp,byte 04h
L_168142:
L_168169:
L_168156:
L_168129:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@.bdtr.qv:
        push    ebx
L_168176:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+04h
        push    eax
        call    @#TemplatedKeywordToken.2kw~@.bdtr.qv ; TemplatedKeywordToken<kw>::~TemplatedKeywordToken()
        add     esp,byte 04h
L_168203:
L_168230:
L_168217:
L_168190:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_168177:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>::__on_zero_shared()
@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_168238:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_168260
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 04h
        jmp     L_168261
L_168260:
        mov     eax,dword [esp-028h+028h]
L_168261:
        push    eax
        call    @std@#__compressed_pair_elem.#TemplatedKeywordToken.2kw~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<TemplatedKeywordToken<kw>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @#TemplatedKeywordToken.2kw~@.bdtr.qv ; TemplatedKeywordToken<kw>::~TemplatedKeywordToken()
        add     esp,byte 04h
; Line 3606: } 
L_168239:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<TemplatedKeywordToken<kw>, allocator<TemplatedKeywordToken<kw>>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.#TemplatedKeywordToken.2kw~#allocator.#TemplatedKeywordToken.n0~~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_168266:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_168334:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_168429:
L_168382:
; Line 3618: } 
L_168492:
L_168267:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<ErrorToken>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.10ErrorToken~i?0?4bool?0?~@.bdtr.qv:
L_168498:
L_168512:
L_168499:
        ret
section code
section code
        section vsc@ErrorToken@.bdtr.qv virtual
        [bits 32]
; ErrorToken::~ErrorToken()
@ErrorToken@.bdtr.qv:
L_168518:
        mov     eax,dword [esp+04h]
        push    eax
        call    @Token@.bdtr.qv ; Token::~Token()
        add     esp,byte 04h
L_168519:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@.bdtr.qv:
L_168524:
        mov     eax,dword [esp+04h]
        push    eax
        call    @ErrorToken@.bdtr.qv ; ErrorToken::~ErrorToken()
        add     esp,byte 04h
L_168525:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<allocator<ErrorToken>, ErrorToken>::~__compressed_pair()
@std@#__compressed_pair.#allocator.10ErrorToken~n0~@.bdtr.qv:
L_168530:
        mov     eax,dword [esp+04h]
        add     eax,byte 04h
        push    eax
        call    @ErrorToken@.bdtr.qv ; ErrorToken::~ErrorToken()
        add     esp,byte 04h
L_168544:
L_168571:
L_168558:
L_168531:
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>::~__shared_ptr_emplace()
@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@.bdtr.qv:
        push    ebx
L_168578:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 0ch+04h
        push    eax
        call    @ErrorToken@.bdtr.qv ; ErrorToken::~ErrorToken()
        add     esp,byte 04h
L_168605:
L_168632:
L_168619:
L_168592:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_168579:
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>::__on_zero_shared()
@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0ffffffd8h
L_168640:
        mov     eax,dword [esp+04h+028h]
; Line 3605:     __data_.second().~_Tp(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-028h+028h],eax
        and     eax,eax
        je      L_168662
        mov     eax,dword [esp-028h+028h]
        add     eax,byte 04h
        jmp     L_168663
L_168662:
        mov     eax,dword [esp-028h+028h]
L_168663:
        push    eax
        call    @std@#__compressed_pair_elem.10ErrorTokeni?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<ErrorToken, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @ErrorToken@.bdtr.qv ; ErrorToken::~ErrorToken()
        add     esp,byte 04h
; Line 3606: } 
L_168641:
        add     esp,byte 028h
        ret
section code
section code
        section vsc@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_emplace<ErrorToken, allocator<ErrorToken>>::__on_zero_shared_weak()
@std@#__shared_ptr_emplace.10ErrorToken#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffffa4h
L_168668:
        mov     eax,dword [esp+04h+05ch]
; Line 3612:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 3616:     __data_.first().~_Alloc(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_168736:
; Line 3617:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_168831:
L_168784:
; Line 3618: } 
L_168894:
L_168669:
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@EndToken@IsEnd.xqv virtual
        [bits 32]
; EndToken::IsEnd() const 
@EndToken@IsEnd.xqv:
; Line 194:     virtual bool IsEnd() const { return true; } 
L_168900:
        mov     al,01h
L_168901:
        ret
section code
section code
        section vsc@NumericToken@IsNumeric.xqv virtual
        [bits 32]
; NumericToken::IsNumeric() const 
@NumericToken@IsNumeric.xqv:
; Line 124:     virtual bool IsNumeric() const { return true; } 
L_168908:
        mov     al,01h
L_168909:
        ret
section code
section code
        section vsc@NumericToken@IsFloating.xqv virtual
        [bits 32]
; NumericToken::IsFloating() const 
@NumericToken@IsFloating.xqv:
; Line 125:     virtual bool IsFloating() const { return parsedAsFloat; } 
L_168916:
        mov     eax,dword [esp+04h]
        mov     al,byte [eax+018h]
L_168917:
        ret
section code
section code
        section vsc@NumericToken@GetNumericType.xqv virtual
        [bits 32]
; NumericToken::GetNumericType() const 
@NumericToken@GetNumericType.xqv:
; Line 128:     virtual Type GetNumericType() const { return type; } 
L_168924:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+038h]
L_168925:
        ret
section code
section code
        section vsc@CharacterToken@IsCharacter.xqv virtual
        [bits 32]
; CharacterToken::IsCharacter() const 
@CharacterToken@IsCharacter.xqv:
; Line 107:     virtual bool IsCharacter() const { return true; } 
L_168932:
        mov     al,01h
L_168933:
        ret
section code
section code
        section vsc@CharacterToken@GetInteger.xqv virtual
        [bits 32]
; CharacterToken::GetInteger() const 
@CharacterToken@GetInteger.xqv:
; Line 108:     virtual long long GetInteger() const { return value; } 
L_168940:
        mov     eax,dword [esp+04h]
        mov     edx,dword [eax+018h+04h]
        mov     eax,dword [eax+018h]
L_168941:
        ret
section code
section code
        section vsc@StringToken@IsString.xqv virtual
        [bits 32]
; StringToken::IsString() const 
@StringToken@IsString.xqv:
; Line 88:     virtual bool IsString() const { return true; } 
L_168948:
        mov     al,01h
L_168949:
        ret
section code
section code
        section vsc@StringToken@IsWide.xqv virtual
        [bits 32]
; StringToken::IsWide() const 
@StringToken@IsWide.xqv:
; Line 89:     virtual bool IsWide() const { return wide; } 
L_168956:
        mov     eax,dword [esp+04h]
        mov     al,byte [eax+018h]
L_168957:
        ret
section code
section code
        section vsc@StringToken@GetString.xqv virtual
        [bits 32]
; StringToken::GetString() const 
@StringToken@GetString.xqv:
; Line 86:     virtual std::wstring GetString() const { return str; } 
L_168964:
        mov     eax,dword [esp+04h]
        mov     ecx,dword [esp+08h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     ecx,byte 01ch
        push    ecx
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@.bctr.qrx#basic_string.C#char_traits.C~#allocator.C~~ ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::basic_string( const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>&)
        add     esp,byte 08h
        mov     eax,dword [esp+04h]
L_168965:
        ret
section code
section code
        section vsc@StringToken@GetRawString.xqv virtual
        [bits 32]
; StringToken::GetRawString() const 
@StringToken@GetRawString.xqv:
; Line 87:     virtual std::wstring GetRawString() const { return raw; } 
L_168972:
        mov     eax,dword [esp+04h]
        mov     ecx,dword [esp+08h]
; Line 862:     template<class _InputIterator, class = typename enable_if<__is_cpp17_input_iterator<_InputIterator>::value>::type> 
        add     ecx,byte 030h
        push    ecx
        push    eax
        call    @std@#basic_string.C#char_traits.C~#allocator.C~~@.bctr.qrx#basic_string.C#char_traits.C~#allocator.C~~ ; std::basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>::basic_string( const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>&)
        add     esp,byte 08h
        mov     eax,dword [esp+04h]
L_168973:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~i?0?4bool?0?~@.bdtr.qv:
L_168980:
L_169020:
L_169007:
L_169035:
L_168994:
L_168981:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TokenizerSettings>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv:
L_169042:
L_169056:
L_169043:
        ret
section code
section code
        section vsc@std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__compressed_pair<TokenizerSettings*, default_delete<TokenizerSettings>>, allocator<TokenizerSettings>>::~__compressed_pair()
@std@#__compressed_pair.#__compressed_pair.p17TokenizerSettings#default_delete.n0~~#allocator.n0~~@.bdtr.qv:
L_169062:
        mov     eax,dword [esp+04h]
L_169089:
L_169076:
        add     eax,byte 04h
        push    eax
        call    @std@#default_delete.17TokenizerSettings~@.bdtr.qv ; std::default_delete<TokenizerSettings>::~default_delete()
        add     esp,byte 04h
L_169130:
L_169144:
L_169117:
L_169104:
L_169063:
        ret
section code
section code
        section vsc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::~__shared_ptr_pointer()
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@.bdtr.qv:
        push    ebx
        push    esi
L_169152:
        mov     ebx,dword [esp+04h+08h]
        mov     esi,ebx
        add     esi,byte 0ch
L_169192:
L_169179:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
        push    esi
        call    @std@#__compressed_pair_elem.p17TokenizerSettingsi?0?4bool?0?~@.bdtr.qv ; std::__compressed_pair_elem<TokenizerSettings*, int=0, bool=0>::~__compressed_pair_elem()
        add     esp,byte 04h
L_169220:
L_169207:
L_169166:
        push    ebx
        call    @std@__shared_weak_count@.bdtr.qv ; std::__shared_weak_count::~__shared_weak_count()
        add     esp,byte 04h
L_169153:
        pop     esi
        pop     ebx
        ret
section code
section code
        section vsc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared.qv virtual
        [bits 32]
; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::__on_zero_shared()
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared.qv:
        add     esp,byte 0fffffff0h
        push    ebx
L_169228:
        mov     ebx,dword [esp+04h+014h]
; Line 3539:     __data_.first().second()(__data_.first().first()); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08h+014h],eax
        and     eax,eax
        je      L_169295
        mov     eax,dword [esp-08h+014h]
        add     eax,byte 04h
        jmp     L_169296
L_169295:
        mov     eax,dword [esp-08h+014h]
L_169296:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebx+0ch]
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
; Line 2363:     delete __ptr; 
        mov     dword [esp-0ch+014h],eax
        and     eax,eax
        je      L_169362
        mov     eax,dword [esp-0ch+014h]
        push    eax
        call    @std@#function.qpxc4bool.n0~@.bdtr.qv ; std::function<(*)(char const *, bool)>::~function()
        add     esp,byte 04h
L_169374:
        mov     eax,dword [esp-0ch+014h]
        push    eax
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
L_169362:
; Line 2364:   } 
L_169246:
; Line 3540:     __data_.first().second().~_Dp(); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-010h+014h],eax
        and     eax,eax
        je      L_169438
        mov     eax,dword [esp-010h+014h]
        add     eax,byte 04h
        jmp     L_169439
L_169438:
        mov     eax,dword [esp-010h+014h]
L_169439:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
L_169389:
; Line 3541: } 
L_169229:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__get_deleter.xqrx14@std@type_info virtual
        [bits 32]
; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::__get_deleter( const std::type_info&) const 
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__get_deleter.xqrx14@std@type_info:
        add     esp,byte 0fffffff0h
        push    ebx
        push    esi
L_169445:
        mov     esi,dword [esp+08h+018h]
        mov     ebx,dword [esp+04h+018h]
; Line 3530:     return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr; 
        push    dword @.xt@#default_delete.17TokenizerSettings~
        lea     eax,[esp-08h+01ch]
        push    eax
        call    @__GetTypeInfo.qpvpv ; __GetTypeInfo(void*, void*)
        add     esp,byte 08h
        push    eax
        push    esi
        call    @std@type_info@.bequ.xqrx14@std@type_info ; std::type_info::operator ==( const std::type_info&) const 
        add     esp,byte 08h
        and     al,al
        je      L_169450
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-010h+018h],eax
        and     eax,eax
        je      L_169514
        mov     eax,dword [esp-010h+018h]
        add     eax,byte 04h
        jmp     L_169515
L_169514:
        mov     eax,dword [esp-010h+018h]
L_169515:
        push    eax
        call    @std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        jmp     L_169451
L_169450:
        xor     eax,eax
L_169451:
; Line 3531: } 
L_169446:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared_weak.qv virtual
        [bits 32]
; std::__shared_ptr_pointer<TokenizerSettings*, default_delete<TokenizerSettings>, allocator<TokenizerSettings>>::__on_zero_shared_weak()
@std@#__shared_ptr_pointer.p17TokenizerSettings#default_delete.n0~#allocator.n0~~@__on_zero_shared_weak.qv:
        add     esp,byte 0ffffff9ch
        push    ebx
L_169521:
        mov     ebx,dword [esp+04h+068h]
; Line 3547:     typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al; 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-060h+068h],eax
        and     eax,eax
        je      L_169560
        mov     eax,dword [esp-060h+068h]
        add     eax,byte 08h
        jmp     L_169561
L_169560:
        mov     eax,dword [esp-060h+068h]
L_169561:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 3552:     __data_.second().~_Alloc(); 
        mov     eax,ebx
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-064h+068h],eax
        and     eax,eax
        je      L_169592
        mov     eax,dword [esp-064h+068h]
        add     eax,byte 08h
        jmp     L_169593
L_169592:
        mov     eax,dword [esp-064h+068h]
L_169593:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<TokenizerSettings>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
L_169575:
; Line 3553:     __a.deallocate(_PTraits::pointer_to(*this), 1); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_169656:
L_169609:
; Line 3554: } 
L_169719:
L_169522:
        pop     ebx
        add     esp,byte 064h
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@IsKeyword.xqv virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::IsKeyword() const 
@#TemplatedIdentifierToken.2kw~@IsKeyword.xqv:
L_169725:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
        cmp     eax,byte 0ffffffffh
        setne   al
        and     eax,byte 01h
L_169726:
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@IsIdentifier.xqv virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::IsIdentifier() const 
@#TemplatedIdentifierToken.2kw~@IsIdentifier.xqv:
L_169733:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
L_169734:
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@GetKeyword.xqv virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::GetKeyword() const 
@#TemplatedIdentifierToken.2kw~@GetKeyword.xqv:
L_169741:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
L_169742:
        ret
section code
section code
        section vsc@#TemplatedIdentifierToken.2kw~@GetId.xqv virtual
        [bits 32]
; TemplatedIdentifierToken<kw>::GetId() const 
@#TemplatedIdentifierToken.2kw~@GetId.xqv:
L_169749:
        mov     eax,dword [esp+04h]
        add     eax,byte 024h
L_169750:
        ret
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@IsKeyword.xqv virtual
        [bits 32]
; TemplatedKeywordToken<kw>::IsKeyword() const 
@#TemplatedKeywordToken.2kw~@IsKeyword.xqv:
L_169757:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
        cmp     eax,byte 0ffffffffh
        setne   al
        and     eax,byte 01h
L_169758:
        ret
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@IsError.xqv virtual
        [bits 32]
; TemplatedKeywordToken<kw>::IsError() const 
@#TemplatedKeywordToken.2kw~@IsError.xqv:
L_169765:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
        cmp     eax,byte 0ffffffffh
        sete    al
        and     eax,byte 01h
L_169766:
        ret
section code
section code
        section vsc@#TemplatedKeywordToken.2kw~@GetKeyword.xqv virtual
        [bits 32]
; TemplatedKeywordToken<kw>::GetKeyword() const 
@#TemplatedKeywordToken.2kw~@GetKeyword.xqv:
L_169773:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax+018h]
L_169774:
        ret
section code
section code
        section vsc@ErrorToken@IsError.xqv virtual
        [bits 32]
; ErrorToken::IsError() const 
@ErrorToken@IsError.xqv:
; Line 200:     virtual bool IsError() const { return true; } 
L_169781:
        mov     al,01h
L_169782:
        ret
section code
section code
        section vsc@std@__function@#__base.qpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::__function::__base<(*)(char const *, bool)>::~__base()
@std@__function@#__base.qpxc4bool.n0~@.bdtr.qv:
; Line 1623:     _LIBCPP_INLINE_VISIBILITY virtual ~__base() {} 
L_169789:
L_169790:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bdtr.qv:
L_169797:
L_169798:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bdtr.qv:
L_169803:
L_169817:
L_169804:
        ret
section code
section code
        section vsc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::~__compressed_pair()
@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bdtr.qv:
L_169823:
L_169850:
L_169837:
L_169865:
L_169824:
        ret
section code
section code
        section vsc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv virtual
        [bits 32]
; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::~__alloc_func()
@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv:
L_169871:
L_169911:
L_169898:
L_169926:
L_169885:
L_169872:
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::~__func()
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bdtr.qv:
        push    ebx
L_169933:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        add     eax,dword 04h+04h
        push    eax
        call    @std@#allocator.pqpxc4bool.n0~@.bdtr.qv ; std::allocator<(*)(*)(char const *, bool)>::~allocator()
        add     esp,byte 04h
L_169973:
L_169987:
L_169960:
L_169947:
        push    ebx
        call    @std@__function@#__base.qpxc4bool.n0~@.bdtr.qv ; std::__function::__base<(*)(char const *, bool)>::~__base()
        add     esp,byte 04h
L_169934:
        pop     ebx
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__clone() const 
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffef0h
        push    ebx
        push    esi
        push    edi
L_169995:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-068h],eax
        mov     dword [ebp-068h+04h],___cppexceptionhandle
        mov     dword [ebp-068h+08h],esp
        mov     dword [ebp-068h+0ch],ebp
        mov     dword [ebp-068h+010h],@.xc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv
        mov     dword [ebp-068h+014h],00h
        lea     eax,[ebp-068h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1676:     typedef allocator_traits<_Alloc> __alloc_traits; 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-010ch],eax
        and     eax,eax
        je      L_170049
        mov     eax,dword [ebp-010ch]
        add     eax,byte 04h
        jmp     L_170050
L_170049:
        mov     eax,dword [ebp-010ch]
L_170050:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        mov     dword [ebp-068h+014h],01h
; Line 2498:   template <bool _Dummy = true, 
        lea     ecx,[ebp-04h]
        mov     eax,01h
        mov     dword [ebp-018h],ecx
        mov     dword [ebp-018h+04h],eax
        lea     eax,[ebp-018h]
        mov     dword [ebp-068h+014h],02h
        push    eax
        mov     esi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,015555555h
        cmp     esi,ecx
        jbe     L_170073
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_170073:
        imul    eax,esi,byte 0ch
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-010h]
        push    eax
        call    @std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bctr.n0?1?v~.qp#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~R#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~ ; std::unique_ptr<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::unique_ptr<bool=1, void, >(__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>*, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>&&)
        mov     dword [ebp-068h+014h],03h
L_170136:
        add     esp,byte 0ch
        mov     dword [ebp-068h+014h],04h
; Line 1681:     ::new ((void*)__hold.get()) __func(__f_.__target(), _Alloc(__a)); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-010h]
; Line 2592:   } 
        and     eax,eax
        je      L_170139
        lea     ecx,[ebp-020h]
        mov     dword [ebp-068h+014h],05h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        push    ecx
        push    eax
        call    @std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~ ; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__func( const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&)
        mov     dword [ebp-068h+014h],06h
L_170281:
        add     esp,byte 0ch
L_170139:
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-010h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],00h
; Line 2611:   } 
        mov     dword [ebp-068h+014h],07h
        lea     edi,[ebp-010h]
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     esi,dword [ebp-010h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-010h],eax
        and     esi,esi
        je      L_170380
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,edi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0110h],eax
        and     eax,eax
        je      L_170493
        mov     eax,dword [ebp-0110h]
        add     eax,byte 04h
        jmp     L_170494
L_170493:
        mov     eax,dword [ebp-0110h]
L_170494:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_170539:
L_170524:
L_170509:
L_170476:
L_170380:
; Line 2619:   } 
L_170397:
        mov     eax,edi
        add     eax,byte 04h
        push    eax
        call    @std@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~@.bdtr.qv ; std::__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>::~__allocator_destructor()
        add     esp,byte 04h
L_170618:
L_170632:
L_170605:
L_170377:
        mov     dword [ebp-068h+014h],08h
L_170648:
        mov     eax,ebx
; Line 1683: } 
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
L_170780:
L_170781:
L_170826:
L_170811:
L_170796:
L_170763:
L_170667:
L_170684:
L_170905:
L_170919:
L_170892:
L_170664:
L_170935:
L_169996:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~:
        dd      @std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv virtual
        [bits 32]
@.xc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqv:
        dd      00h
        dd      0ffffff98h
        dd      0400h
        dd      @.xt@#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~+0
        dd      0fffffffch
        dd      01h
        dd      0ah
        dd      0400h
        dd      @.xt@#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~+0
        dd      0ffffffe8h
        dd      02h
        dd      03h
        dd      0400h
        dd      @.xt@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~+0
        dd      0fffffff0h
        dd      04h
        dd      09h
        dd      0400h
        dd      @.xt@#allocator.pqpxc4bool.n0~+0
        dd      0ffffffe0h
        dd      05h
        dd      06h
        dd      00h
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqp#__base.qpxcn0.n0~ virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__clone(__base<(*)(char const *, bool)>*) const 
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@__clone.xqp#__base.qpxcn0.n0~:
        add     esp,byte 0ffffffech
        push    ebx
        push    esi
L_170941:
        mov     esi,dword [esp+08h+01ch]
        mov     eax,dword [esp+04h+01ch]
; Line 1689:     ::new (__p) __func(__f_.__target(), __f_.__get_allocator()); 
        and     esi,esi
        je      L_170946
        mov     ecx,eax
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     ebx,ecx
; Line 2310:   } 
        add     eax,byte 04h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-014h+01ch],eax
        and     eax,eax
        je      L_171058
        mov     eax,dword [esp-014h+01ch]
        add     eax,byte 04h
        jmp     L_171059
L_171058:
        mov     eax,dword [esp-014h+01ch]
L_171059:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
        mov     edx,@std@__function@#__base.qpxc4bool.n0~@_.vt+0ch
        mov     ecx,esi
        mov     dword [esi],edx
        mov     dword [esi],@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@_.vt+0ch
        push    eax
        push    ebx
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~ ; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func( const (*)(*)(char const *, bool)&,  const allocator<(*)(*)(char const *, bool)>&)
        add     esp,byte 0ch
L_170946:
; Line 1690: } 
L_170942:
        pop     esi
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy.qv virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::destroy()
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy.qv:
L_171084:
        mov     eax,dword [esp+04h]
; Line 1696:     __f_.destroy(); 
        add     eax,byte 04h
        add     eax,byte 04h
        push    eax
        call    @std@#allocator.pqpxc4bool.n0~@.bdtr.qv ; std::allocator<(*)(*)(char const *, bool)>::~allocator()
        add     esp,byte 04h
L_171128:
L_171142:
L_171115:
L_171102:
; Line 1697: } 
L_171085:
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy_deallocate.qv virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::destroy_deallocate()
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@destroy_deallocate.qv:
        add     esp,byte 0ffffffa8h
        push    ebx
L_171150:
        mov     ebx,dword [esp+04h+05ch]
; Line 1703:     typedef allocator_traits<_Alloc> __alloc_traits; 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-058h+05ch],eax
        and     eax,eax
        je      L_171204
        mov     eax,dword [esp-058h+05ch]
        add     eax,byte 04h
        jmp     L_171205
L_171204:
        mov     eax,dword [esp-058h+05ch]
L_171205:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@__get.xqv ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 1706:     __f_.destroy(); 
        mov     eax,ebx
        add     eax,byte 04h
        add     eax,byte 04h
        push    eax
        call    @std@#allocator.pqpxc4bool.n0~@.bdtr.qv ; std::allocator<(*)(*)(char const *, bool)>::~allocator()
        add     esp,byte 04h
L_171248:
L_171262:
L_171235:
L_171222:
; Line 1707:     __a.deallocate(this, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_171295:
L_171280:
; Line 1708: } 
L_171358:
L_171151:
        pop     ebx
        add     esp,byte 058h
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bcall.qRpxcRn0 virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::operator ()(char const *&&, bool&&)
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bcall.qRpxcRn0:
        add     esp,byte 0ffffffb4h
L_171364:
        mov     edx,dword [esp+0ch+04ch]
        mov     ecx,dword [esp+08h+04ch]
        mov     eax,dword [esp+04h+04ch]
; Line 1714:     return __f_(_VSTD::forward<_ArgTypes>(__arg)...); 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 1539:         typedef __invoke_void_return_wrapper<_Rp> _Invoker; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 317:         return __invoke(_VSTD::forward<_Args>(__args)...); 
; Line 3391:          class _DecayFp = typename decay<_Fp>::type, 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dl,byte [edx]
        and     edx,byte 01h
        push    edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        push    ecx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        call    dword [eax]
        add     esp,byte 08h
; Line 318:     } 
; Line 1542:     } 
; Line 1715: } 
L_171365:
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target.xqrx14@std@type_info virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::target( const std::type_info&) const 
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target.xqrx14@std@type_info:
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_171612:
        mov     esi,dword [esp+08h+010h]
        mov     ebx,dword [esp+04h+010h]
; Line 1723:     if (__ti == typeid(_Fp)) 
        push    dword @.xt@pqpxc4bool.n0
        lea     eax,[esp-08h+014h]
        push    eax
        call    @__GetTypeInfo.qpvpv ; __GetTypeInfo(void*, void*)
        add     esp,byte 08h
        push    eax
        push    esi
        call    @std@type_info@.bequ.xqrx14@std@type_info ; std::type_info::operator ==( const std::type_info&) const 
        add     esp,byte 08h
        and     al,al
        je      L_171615
        mov     eax,ebx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        jmp     L_171613
L_171615:
        xor     eax,eax
; Line 1726: } 
L_171613:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target_type.xqv virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::target_type() const 
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@target_type.xqv:
        push    ecx
        push    ecx
L_171673:
; Line 1732:     return typeid(_Fp); 
        push    dword @.xt@pqpxc4bool.n0
        lea     eax,[esp-08h+0ch]
        push    eax
        call    @__GetTypeInfo.qpvpv ; __GetTypeInfo(void*, void*)
        add     esp,byte 08h
; Line 1733: } 
L_171674:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#char_traits.C~@eq.qCC virtual
        [bits 32]
; std::char_traits<wchar_t>::eq(wchar_t, wchar_t)
@std@#char_traits.C~@eq.qCC:
L_171681:
        mov     dx,word [esp+08h]
        mov     ax,word [esp+04h]
        movzx   ecx,ax
        movzx   eax,dx
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
L_171682:
        ret
section code
section code
        section vsc@std@#char_traits.C~@length.qpxC virtual
        [bits 32]
; std::char_traits<wchar_t>::length(wchar_t const *)
@std@#char_traits.C~@length.qpxC:
; Line 428: size_t 
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_171689:
        mov     edx,dword [esp+04h+010h]
; Line 432:     return __builtin_wcslen(__s); 
        xor     eax,eax
; Line 437:     for (; !eq(*__s, char_type(0)); ++__s) 
        mov     cx,word [edx]
        xor     esi,esi
        movzx   ebx,cx
        movzx   ecx,si
        cmp     ebx,ecx
        sete    cl
        and     ecx,byte 01h
        and     cl,cl
        jne     L_171694
L_171692:
; Line 438:         ++__len; 
        inc     eax
L_171695:
        add     edx,byte 02h
L_171693:
        mov     cx,word [edx]
        xor     esi,esi
        movzx   ebx,cx
        movzx   ecx,si
        cmp     ebx,ecx
        sete    cl
        and     ecx,byte 01h
        and     cl,cl
        je      L_171692
L_171694:
; Line 441: } 
L_171690:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#char_traits.C~@assign.qrCrxC virtual
        [bits 32]
; std::char_traits<wchar_t>::assign(wchar_t&,  const wchar_t&)
@std@#char_traits.C~@assign.qrCrxC:
L_171737:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     cx,word [ecx]
        mov     word [eax],cx
L_171738:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<default_delete<TokenizerSettings>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#default_delete.17TokenizerSettings~i?1?4bool?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_171745:
        mov     eax,dword [esp+04h]
L_171746:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<TokenizerSettings>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.17TokenizerSettings~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_171753:
        mov     eax,dword [esp+04h]
L_171754:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@__get.xqv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__get() const 
@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@__get.xqv:
; Line 2219:   _LIBCPP_INLINE_VISIBILITY 
L_171761:
        mov     eax,dword [esp+04h]
L_171762:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bctr.n0?1?v~.qp#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~R#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~ virtual
        [bits 32]
; std::unique_ptr<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::unique_ptr<bool=1, void, >(__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>*, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>&&)
@std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bctr.n0?1?v~.qp#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~R#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_171769:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     ecx,dword [ecx+04h]
        mov     dword [eax+04h+04h],ecx
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_171770:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__func( const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&)
@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~:
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_171929:
        mov     eax,dword [esp+0ch+010h]
        mov     ecx,dword [esp+08h+010h]
        mov     ebx,dword [esp+04h+010h]
        mov     edx,ebx
        mov     dword [edx],@std@__function@#__base.qpxc4bool.n0~@_.vt+0ch
        mov     esi,@std@__function@#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@_.vt+0ch
        mov     edx,ebx
        mov     dword [edx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~ ; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func( const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&)
        add     esp,byte 0ch
        mov     eax,ebx
L_171930:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>, __allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>>::~unique_ptr()
@std@#unique_ptr.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~#__allocator_destructor.#allocator.#__func.pqpxcn0.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~~@.bdtr.qv:
; Line 2571:   _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffffb8h
        push    ebx
L_171973:
        mov     edx,dword [esp+04h+04ch]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_171979
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_172092
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 04h
        jmp     L_172093
L_172092:
        mov     eax,dword [esp-048h+04ch]
L_172093:
        push    eax
        call    @std@#__compressed_pair_elem.#__allocator_destructor.#allocator.#__func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~~~i?1?n0?0?~@__get.qv ; std::__compressed_pair_elem<__allocator_destructor<allocator<__func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_172138:
L_172123:
L_172108:
L_172075:
L_171979:
; Line 2619:   } 
L_171996:
L_172230:
L_172217:
L_172245:
L_172204:
L_171974:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#get.ui?0?rxpqpxc4bool.n0~.qr#tuple.rxpqpxcn0.n0~.rxpqpxcn0 virtual
        [bits 32]
; std::get<unsigned int=0,  const (*)(*)(char const *, bool)&>(tuple< const (*)(*)(char const *, bool)&>&)
@std@#get.ui?0?rxpqpxc4bool.n0~.qr#tuple.rxpqpxcn0.n0~.rxpqpxcn0:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_172252:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_172253:
        ret
section code
section code
        section vsc@std@#get.ui?0?rx#allocator.pqpxc4bool.n0~~.qr#tuple.rx#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::get<unsigned int=0,  const allocator<(*)(*)(char const *, bool)>&>(tuple< const allocator<(*)(*)(char const *, bool)>&>&)
@std@#get.ui?0?rx#allocator.pqpxc4bool.n0~~.qr#tuple.rx#allocator.pqpxcn0.n0~~:
; Line 1006: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
L_172276:
        mov     eax,dword [esp+04h]
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     eax,dword [eax]
; Line 1012: } 
L_172277:
        ret
section code
section code
        section vsc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func( const (*)(*)(char const *, bool)&,  const allocator<(*)(*)(char const *, bool)>&)
@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~:
; Line 1518:                _VSTD::forward_as_tuple(__a)) 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
        push    edi
L_172300:
        mov     eax,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        add     esp,byte 0fffffffch
        mov     edi,esp
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~ ; std::forward_as_tuple< const allocator<(*)(*)(char const *, bool)>&>( const allocator<(*)(*)(char const *, bool)>&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    eax
        push    edi
        call    @std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.rx#allocator.pqpxcn0.n0~~ ; std::tuple< const allocator<(*)(*)(char const *, bool)>&>::tuple(tuple< const allocator<(*)(*)(char const *, bool)>&>&&)
        mov     dword [ebp-050h+014h],02h
L_172346:
L_172333:
L_172320:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],03h
        add     esp,byte 0fffffffch
        mov     edi,esp
        push    esi
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0 ; std::forward_as_tuple< const (*)(*)(char const *, bool)&>( const (*)(*)(char const *, bool)&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    edi
        call    @std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~ ; std::tuple< const (*)(*)(char const *, bool)&>::tuple(tuple< const (*)(*)(char const *, bool)&>&&)
        mov     dword [ebp-050h+014h],05h
L_172388:
L_172375:
L_172362:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~ ; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair< const (*)(*)(char const *, bool)&,  const allocator<(*)(*)(char const *, bool)>&, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, bool)&>, tuple< const allocator<(*)(*)(char const *, bool)>&>)
        add     esp,byte 010h
; Line 1520:     } 
        mov     eax,ebx
L_172301:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~:
        dd      @std@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.rx#allocator.pqpxc4bool.n0~~ virtual
        [bits 32]
@.xt@#tuple.rx#allocator.pqpxc4bool.n0~~:
        dd      @std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~ virtual
        [bits 32]
@.xt@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~:
        dd      @std@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      06ch
        db      065h
        db      061h
        db      066h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~ virtual
        [bits 32]
@.xt@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~:
        dd      @std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      05fh
        db      069h
        db      06dh
        db      070h
        db      06ch
        db      00h
        dd      0800h
        dd      @.xt@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xt@#tuple.rxpqpxc4bool.n0~ virtual
        [bits 32]
@.xt@#tuple.rxpqpxc4bool.n0~:
        dd      @std@#tuple.rxpqpxc4bool.n0~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      074h
        db      075h
        db      070h
        db      06ch
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0rx#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.rx#allocator.pqpxc4bool.n0~~+0
        dd      0fffffff8h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#tuple.rxpqpxc4bool.n0~+0
        dd      0fffffffch
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__function::__alloc_func<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>, (*)(char const *, bool)>::__alloc_func( const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&)
@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~:
; Line 1525:                _VSTD::forward_as_tuple(_VSTD::move(__a))) 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
        push    edi
L_172396:
        mov     eax,dword [ebp+010h]
        mov     esi,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
        add     esp,byte 0fffffffch
        mov     edi,esp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        lea     eax,[ebp-08h]
        push    eax
        call    @std@#forward_as_tuple.#allocator.pqpxc4bool.n0~~.qR#allocator.pqpxcn0.n0~ ; std::forward_as_tuple<allocator<(*)(*)(char const *, bool)>>(allocator<(*)(*)(char const *, bool)>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    eax
        push    edi
        call    @std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~ ; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::tuple(tuple<allocator<(*)(*)(char const *, bool)>&&>&&)
        mov     dword [ebp-050h+014h],02h
L_172458:
L_172445:
L_172432:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],03h
        add     esp,byte 0fffffffch
        mov     edi,esp
        push    esi
        lea     eax,[ebp-04h]
        push    eax
        call    @std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0 ; std::forward_as_tuple< const (*)(*)(char const *, bool)&>( const (*)(*)(char const *, bool)&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],04h
        push    eax
        push    edi
        call    @std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~ ; std::tuple< const (*)(*)(char const *, bool)&>::tuple(tuple< const (*)(*)(char const *, bool)&>&&)
        mov     dword [ebp-050h+014h],05h
L_172500:
L_172487:
L_172474:
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],06h
        push    dword [@std@piecewise_construct]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ ; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair< const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, bool)&>, tuple<allocator<(*)(*)(char const *, bool)>&&>)
        add     esp,byte 010h
; Line 1527:     } 
        mov     eax,ebx
L_172397:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@__function@#__alloc_func.pqpxc4bool.n0#allocator.pqpxcn0.n0~qpxcn0.n0~@.bctr.qrxpqpxcn0.n0R#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.R#allocator.pqpxc4bool.n0~~+0
        dd      0fffffff8h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#tuple.rxpqpxc4bool.n0~+0
        dd      0fffffffch
        dd      04h
        dd      05h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair< const (*)(*)(char const *, bool)&,  const allocator<(*)(*)(char const *, bool)>&, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, bool)&>, tuple< const allocator<(*)(*)(char const *, bool)>&>)
@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_172508:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~ ; std::tuple< const (*)(*)(char const *, bool)&>::tuple(tuple< const (*)(*)(char const *, bool)&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::__compressed_pair_elem< const (*)(*)(char const *, bool)&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, std::piecewise_construct_t)&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.rx#allocator.pqpxcn0.n0~~ ; std::tuple< const allocator<(*)(*)(char const *, bool)>&>::tuple(tuple< const allocator<(*)(*)(char const *, bool)>&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__compressed_pair_elem< const allocator<(*)(*)(char const *, bool)>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple< const allocator<(*)(*)(char const *, std::piecewise_construct_t)>&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_172618:
L_172605:
L_172592:
        mov     dword [ebp-050h+014h],04h
L_172660:
L_172647:
L_172634:
L_172676:
        mov     eax,ebx
L_172509:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0rx#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.rx#allocator.pqpxcn0.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.rx#allocator.pqpxc4bool.n0~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.rxpqpxc4bool.n0~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.rx#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::tuple< const allocator<(*)(*)(char const *, bool)>&>::tuple(tuple< const allocator<(*)(*)(char const *, bool)>&>&&)
@std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.rx#allocator.pqpxcn0.n0~~:
        push    ecx
L_172682:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_172683:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::forward_as_tuple< const allocator<(*)(*)(char const *, bool)>&>( const allocator<(*)(*)(char const *, bool)>&)
@std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_172722:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bctr.eui?0?rx#allocator.pqpxcn0.n0~ee3_Tlrx#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#allocator.pqpxcn0.n0~ ; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const allocator<(*)(*)(char const *, bool)>&>::__tuple_impl<..., unsigned int=0,  const allocator<(*)(*)(char const *, bool)>&, ..., ..., _Tl,  const allocator<(*)(*)(char const *, _Tl)>&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const allocator<(*)(*)(char const *, _Tl)>&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const allocator<(*)(*)(char const *, _Tp)>&)
L_172837:
L_172851:
L_172865:
L_172879:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_172723:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
@.xc@std@#forward_as_tuple.rx#allocator.pqpxc4bool.n0~~.qrx#allocator.pqpxcn0.n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~ virtual
        [bits 32]
; std::tuple< const (*)(*)(char const *, bool)&>::tuple(tuple< const (*)(*)(char const *, bool)&>&&)
@std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~:
        push    ecx
L_172886:
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
        mov     edx,eax
        mov     ecx,dword [ecx]
        mov     dword [edx],ecx
L_172887:
        pop     ecx
        ret
section code
section code
        section vsc@std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0 virtual
        [bits 32]
; std::forward_as_tuple< const (*)(*)(char const *, bool)&>( const (*)(*)(char const *, bool)&)
@std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0:
; Line 1144: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff9ch
L_172926:
        mov     ecx,dword [ebp+08h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1148:     return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...); 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     dword [ebp-058h],00h
        lea     eax,[ebp-058h]
        push    dword [eax]
        mov     dword [ebp-05ch],00h
        lea     eax,[ebp-05ch]
        push    dword [eax]
        mov     dword [ebp-060h],00h
        lea     eax,[ebp-060h]
        push    dword [eax]
        mov     dword [ebp-064h],00h
        lea     eax,[ebp-064h]
        push    dword [eax]
        push    ecx
        call    @std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bctr.eui?0?rxpqpxcn0.n0ee3_Tlrxpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.rxpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~rxpqpxcn0.n0 ; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const (*)(*)(char const *, bool)&>::__tuple_impl<..., unsigned int=0,  const (*)(*)(char const *, bool)&, ..., ..., _Tl,  const (*)(*)(char const *, _Tl)&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const (*)(*)(char const *, _Tl)&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const (*)(*)(char const *, _Tp)&)
L_173041:
L_173055:
L_173069:
L_173083:
        add     esp,byte 018h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 1149: } 
L_172927:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0 virtual
        [bits 32]
@.xc@std@#forward_as_tuple.rxpqpxc4bool.n0~.qrxpqpxcn0.n0:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0,  const allocator<(*)(*)(char const *, bool)>&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?rx#allocator.pqpxc4bool.n0~n0?0?~@.bdtr.qv:
L_173090:
L_173091:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const allocator<(*)(*)(char const *, bool)>&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bdtr.qv:
L_173096:
L_173110:
L_173097:
        ret
section code
section code
        section vsc@std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bdtr.qv virtual
        [bits 32]
; std::tuple< const allocator<(*)(*)(char const *, bool)>&>::~tuple()
@std@#tuple.rx#allocator.pqpxc4bool.n0~~@.bdtr.qv:
L_173116:
L_173143:
L_173130:
L_173117:
        ret
section code
section code
        section vsc@std@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_leaf<unsigned int=0,  const (*)(*)(char const *, bool)&, bool=0>::~__tuple_leaf()
@std@#__tuple_leaf.ui?0?rxpqpxc4bool.n0n0?0?~@.bdtr.qv:
L_173150:
L_173151:
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const (*)(*)(char const *, bool)&>::~__tuple_impl()
@std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bdtr.qv:
L_173156:
L_173170:
L_173157:
        ret
section code
section code
        section vsc@std@#tuple.rxpqpxc4bool.n0~@.bdtr.qv virtual
        [bits 32]
; std::tuple< const (*)(*)(char const *, bool)&>::~tuple()
@std@#tuple.rxpqpxc4bool.n0~@.bdtr.qv:
L_173176:
L_173203:
L_173190:
L_173177:
        ret
section code
section code
        section vsc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
; std::__compressed_pair<(*)(*)(char const *, bool), allocator<(*)(*)(char const *, bool)>>::__compressed_pair< const (*)(*)(char const *, bool)&, allocator<(*)(*)(char const *, bool)>&&, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, bool)&>, tuple<allocator<(*)(*)(char const *, bool)>&&>)
@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~:
; Line 2292:   template <class... _Args1, class... _Args2> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa0h
        push    ebx
L_173210:
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-050h],eax
        mov     dword [ebp-050h+04h],___cppexceptionhandle
        mov     dword [ebp-050h+08h],esp
        mov     dword [ebp-050h+0ch],ebp
        mov     dword [ebp-050h+010h],@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~
        mov     dword [ebp-050h+014h],00h
        lea     eax,[ebp-050h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2292:   template <class... _Args1, class... _Args2> 
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+010h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.rxpqpxc4bool.n0~@.bctr.qR#tuple.rxpqpxcn0.n0~ ; std::tuple< const (*)(*)(char const *, bool)&>::tuple(tuple< const (*)(*)(char const *, bool)&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],01h
        push    dword [ebp+0ch]
        mov     eax,ebx
        push    eax
        call    @std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::__compressed_pair_elem< const (*)(*)(char const *, bool)&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, std::piecewise_construct_t)&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
        mov     dword [ebp-08h],00h
        lea     eax,[ebp-08h]
        push    dword [eax]
        add     esp,byte 0fffffffch
        mov     ecx,esp
        lea     eax,[ebp+014h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    eax
        push    ecx
        call    @std@#tuple.R#allocator.pqpxc4bool.n0~~@.bctr.qR#tuple.R#allocator.pqpxcn0.n0~~ ; std::tuple<allocator<(*)(*)(char const *, bool)>&&>::tuple(tuple<allocator<(*)(*)(char const *, bool)>&&>&&)
        add     esp,byte 08h
        mov     dword [ebp-050h+014h],02h
        push    dword [ebp+0ch]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.R#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.R#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ ; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>&&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple<allocator<(*)(*)(char const *, std::piecewise_construct_t)>&&>, __tuple_indices<...unsigned int=0>)
        add     esp,byte 010h
; Line 222:     template <class _Tp, 
        mov     dword [ebp-050h+014h],03h
L_173320:
L_173307:
L_173294:
        mov     dword [ebp-050h+014h],04h
L_173362:
L_173349:
L_173336:
L_173378:
        mov     eax,ebx
L_173211:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~ virtual
        [bits 32]
@.xc@std@#__compressed_pair.pqpxc4bool.n0#allocator.pqpxcn0.n0~~@.bctr.rxpqpxcn0.n0R#allocator.pqpxcn0.n0~~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#tuple.R#allocator.pqpxcn0.n0~~:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @.xt@#tuple.R#allocator.pqpxc4bool.n0~~+0
        dd      014h
        dd      00h
        dd      03h
        dd      0400h
        dd      @.xt@#tuple.rxpqpxc4bool.n0~+0
        dd      010h
        dd      00h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<(*)(*)(char const *, bool), int=0, bool=0>::__compressed_pair_elem< const (*)(*)(char const *, bool)&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple< const (*)(*)(char const *, std::piecewise_construct_t)&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_173384:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
        mov     ecx,dword [ebp+010h]
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
L_173452:
        mov     dword [ebp-048h+014h],01h
L_173492:
L_173479:
L_173466:
L_173508:
L_173385:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.pqpxc4bool.n0i?0?n0?0?~@.bctr.rxpqpxcn0.n0eui?0?~.q26@std@piecewise_construct_t#tuple.rxpqpxcn0.n0~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.rxpqpxc4bool.n0~+0
        dd      010h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<(*)(*)(char const *, bool)>, int=1, bool=0>::__compressed_pair_elem< const allocator<(*)(*)(char const *, bool)>&, ..., unsigned int=0, >(std::piecewise_construct_t, tuple< const allocator<(*)(*)(char const *, std::piecewise_construct_t)>&>, __tuple_indices<...unsigned int=0>)
@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~:
; Line 2210:   template <class... _Args, size_t... _Indexes> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffach
L_173514:
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1010:     typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type; 
; Line 1012: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [ebp-048h+014h],01h
L_173598:
        mov     dword [ebp-048h+014h],02h
L_173638:
L_173625:
L_173612:
L_173654:
L_173515:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~ virtual
        [bits 32]
@.xc@std@#__compressed_pair_elem.#allocator.pqpxc4bool.n0~i?1?n0?0?~@.bctr.rx#allocator.pqpxcn0.n0~eui?0?~.q26@std@piecewise_construct_t#tuple.rx#allocator.pqpxcn0.n0~~#__tuple_indices.eui?0?~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#tuple.rx#allocator.pqpxc4bool.n0~~+0
        dd      010h
        dd      00h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bctr.eui?0?rx#allocator.pqpxcn0.n0~ee3_Tlrx#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#allocator.pqpxcn0.n0~ virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const allocator<(*)(*)(char const *, bool)>&>::__tuple_impl<..., unsigned int=0,  const allocator<(*)(*)(char const *, bool)>&, ..., ..., _Tl,  const allocator<(*)(*)(char const *, _Tl)>&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const allocator<(*)(*)(char const *, _Tl)>&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const allocator<(*)(*)(char const *, _Tp)>&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~rx#allocator.pqpxc4bool.n0~~@.bctr.eui?0?rx#allocator.pqpxcn0.n0~ee3_Tlrx#allocator.pqpxcn0.n0~~.q#__tuple_indices.eui?0?~#__tuple_types.rx#allocator.pqpxcn0.n0~~#__tuple_indices.e~#__tuple_types.e3_Tp~rx#allocator.pqpxcn0.n0~:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_173660:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_173728:
L_173742:
L_173756:
L_173770:
L_173661:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bctr.eui?0?rxpqpxcn0.n0ee3_Tlrxpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.rxpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~rxpqpxcn0.n0 virtual
        [bits 32]
; std::__tuple_impl<__tuple_indices<...unsigned int=0>,  const (*)(*)(char const *, bool)&>::__tuple_impl<..., unsigned int=0,  const (*)(*)(char const *, bool)&, ..., ..., _Tl,  const (*)(*)(char const *, _Tl)&, >(__tuple_indices<...unsigned int=0>, __tuple_types< const (*)(*)(char const *, _Tl)&>, __tuple_indices<...>, __tuple_types<..._Tp>,  const (*)(*)(char const *, _Tp)&)
@std@#__tuple_impl.#__tuple_indices.eui?0?~rxpqpxc4bool.n0~@.bctr.eui?0?rxpqpxcn0.n0ee3_Tlrxpqpxcn0.n0~.q#__tuple_indices.eui?0?~#__tuple_types.rxpqpxcn0.n0~#__tuple_indices.e~#__tuple_types.e3_Tp~rxpqpxcn0.n0:
; Line 388:             __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))..., 
        push    ecx
        push    ecx
        push    ecx
L_173776:
        mov     ecx,dword [esp+018h+0ch]
        mov     eax,dword [esp+04h+0ch]
        mov     edx,eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     dword [edx],ecx
L_173844:
L_173858:
L_173872:
L_173886:
L_173777:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@.xt@qpxc4bool.n0 virtual
        [bits 32]
; .xt:qpxc4bool<_Tp>
@.xt@qpxc4bool.n0:
        dd      00h
        dd      04h
        dd      00h
        db      062h
        db      06fh
        db      06fh
        db      06ch
        db      028h
        db      02ah
        db      029h
        db      028h
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      020h
        db      063h
        db      068h
        db      061h
        db      072h
        db      02ah
        db      020h
        db      02ch
        db      020h
        db      062h
        db      06fh
        db      06fh
        db      06ch
        db      029h
        db      00h
section code
section code
        section vsc@.xt@pqpxc4bool.n0 virtual
        [bits 32]
@.xt@pqpxc4bool.n0:
        dd      @.xt@qpxc4bool.n0+0
        dd      04h
        dd      080h
        db      062h
        db      06fh
        db      06fh
        db      06ch
        db      028h
        db      02ah
        db      029h
        db      028h
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      020h
        db      063h
        db      068h
        db      061h
        db      072h
        db      02ah
        db      020h
        db      02ch
        db      020h
        db      062h
        db      06fh
        db      06fh
        db      06ch
        db      029h
        db      02ah
        db      020h
        db      00h
section code
section code
        section vsd@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_copy_constructible.3_Tp~#is_copy_constructible.n1~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_copy_constructible.3_Tp~#is_copy_constructible.n1~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.uL#is_trivially_copy_constructible.3_Tp~#is_copy_constructible.n0~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.uL#is_trivially_copy_constructible.3_Tp~#is_copy_constructible.n0~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_move_constructible.3_Tp~#is_move_constructible.n1~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_move_constructible.3_Tp~#is_move_constructible.n1~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.uL#is_trivially_move_constructible.3_Tp~#is_move_constructible.n0~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.uL#is_trivially_move_constructible.3_Tp~#is_move_constructible.n0~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_copy_assignable.3_Tp~#is_copy_assignable.n1~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_copy_assignable.3_Tp~#is_copy_assignable.n1~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.uL#is_trivially_copy_assignable.3_Tp~#is_copy_assignable.n0~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.uL#is_trivially_copy_assignable.3_Tp~#is_copy_assignable.n0~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_move_assignable.3_Tp~#is_move_assignable.n1~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_move_assignable.3_Tp~#is_move_assignable.n1~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.uL#is_trivially_move_assignable.3_Tp~#is_move_assignable.n0~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.uL#is_trivially_move_assignable.3_Tp~#is_move_assignable.n0~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_destructible.3_Tp~#is_destructible.n1~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.#shared_ptr.5Token~#is_trivially_destructible.3_Tp~#is_destructible.n1~~:
        dd      01h
section data
section data
        section vsd@std@__variant_detail@#__trait.uL#is_trivially_destructible.3_Tp~#is_destructible.n0~~ virtual
        [bits 32]
@std@__variant_detail@#__trait.uL#is_trivially_destructible.3_Tp~#is_destructible.n0~~:
        dd      00h
section data
section data
        section vsb@std@#in_place_index.ui?0?~ virtual
        [bits 32]
@std@#in_place_index.ui?0?~:
        resb    04h
section bss
section data
        section vsb@std@#in_place_index.ui?1?~ virtual
        [bits 32]
@std@#in_place_index.ui?1?~:
        resb    04h
section bss
section data
        section vsd@std@__find_detail@#__find_exactly_one_checked.uL#shared_ptr.5Token~uL~@__matches virtual
        [bits 32]
@std@__find_detail@#__find_exactly_one_checked.uL#shared_ptr.5Token~uL~@__matches:
        db      00h
        db      01h
section data
section data
        section vsd@Token@GetId.xqv_aa_89126 virtual
        [bits 32]
@Token@GetId.xqv_aa_89126:
        resb    014h
section data
section data
section code
        section vsc@initializer@aa_89126.q virtual
        [bits 32]
; initializer::aa_89126()
@initializer@aa_89126.q:
        add     esp,byte 0ffffffe8h
        push    ebx
        push    esi
        push    edi
L_173893:
        mov     edi,@Token@GetId.xqv_aa_89126
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-014h+024h],00h
        lea     eax,[esp-014h+024h]
        mov     dword [esp-018h+024h],00h
        lea     ebx,[esp-018h+024h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebx]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174006:
L_174020:
; Line 1727:     __get_db()->__insert_c(this); 
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__zero.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::__zero()
        add     esp,byte 04h
; Line 1730: } 
L_173894:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
section cstartup
        section vss@initializer@aa_89126_startup virtual
        [bits 32]
@initializer@aa_89126_startup:
        db      0,99
        dd      @initializer@aa_89126.q
section cstartup
section data
        section vsd@std@#__deque_base.c#allocator.c~~@__block_size virtual
        [bits 32]
@std@#__deque_base.c#allocator.c~~@__block_size:
        dd      01000h
section data
section data
        section vsd@std@#__deque_iterator.cpcrcppcii?4096?~@__block_size virtual
        [bits 32]
@std@#__deque_iterator.cpcrcppcii?4096?~@__block_size:
        dd      01000h
section data
section data
section code
        section vsc@destructor@aa_@Token@GetId.xqv_aa_89126.q virtual
        [bits 32]
; destructor::aa_::Token::GetId() const a_89126()
@destructor@aa_@Token@GetId.xqv_aa_89126.q:
        add     esp,byte 0ffffffe8h
L_174029:
        push    dword @Token@GetId.xqv_aa_89126
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_174030:
        add     esp,byte 018h
        ret
section code
section code
section crundown
        section vsr@destructor@aa_@Token@GetId.xqv_aa_89126_rundown virtual
        [bits 32]
@destructor@aa_@Token@GetId.xqv_aa_89126_rundown:
        db      0,99
        dd      @destructor@aa_@Token@GetId.xqv_aa_89126.q
section crundown
section data

@std@piecewise_construct resb 04h
section bss

@std@in_place resb 04h
section data

@std@allocator_arg resb 04h
section const
@std@__find_detail@__not_found:
        dd      0ffffffffh
@std@__find_detail@__ambiguous:
        dd      0fffffffeh
section data

@std@__ppEmbed_cpp__e1e322b3@ignore resb 04h
section bss

@std@placeholders@_1 resb 04h

@std@placeholders@_2 resb 04h

@std@placeholders@_3 resb 04h

@std@placeholders@_4 resb 04h

@std@placeholders@_5 resb 04h

@std@placeholders@_6 resb 04h

@std@placeholders@_7 resb 04h

@std@placeholders@_8 resb 04h

@std@placeholders@_9 resb 04h

@std@placeholders@_10 resb 04h

@std@nullopt resb 04h
section const
@std@variant_npos:
        dd      0ffffffffh
section data

@std@defer_lock resb 04h

@std@try_to_lock resb 04h

@std@adopt_lock resb 04h
section bss
[global @embeder@embed_elements]

@embeder@embed_elements resb 01ch
section data
[global _hasher]

_hasher resb    024h
[global _ourKnownValues]

_ourKnownValues resb 014h
        resb    014h
        resb    014h
        resb    014h
        resb    014h
[global _leftTokens]

_leftTokens db  028h
        db      07bh
        db      05bh
[global _rightTokens]

_rightTokens db 05dh
        db      07dh
        db      029h
section bss

_$anontemp659 resb 04h

@@LambdaClosure1__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure2__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure3__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure4__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure5__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure6__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure7__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure8__ppEmbed_cpp__e1e322b3@___self resb 04h

@@LambdaClosure9__ppEmbed_cpp__e1e322b3@___self resb 04h
section code
; __DYNAMIC_STARTUP___0_e1e322b3()
@__DYNAMIC_STARTUP___0_e1e322b3.q:
        add     esp,0fffff70ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_174037:
        mov     edi,_ourKnownValues+050h
        mov     ebx,L_31
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0800h+0904h],00h
        lea     eax,[esp-0800h+0904h]
        mov     dword [esp-0804h+0904h],00h
        lea     ebp,[esp-0804h+0904h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174150:
L_174164:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     edi,_ourKnownValues+03ch
        mov     ebx,L_30
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0808h+0904h],00h
        lea     eax,[esp-0808h+0904h]
        mov     dword [esp-080ch+0904h],00h
        lea     ebp,[esp-080ch+0904h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174294:
L_174308:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     edi,_ourKnownValues+028h
        mov     ebx,L_29
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0810h+0904h],00h
        lea     eax,[esp-0810h+0904h]
        mov     dword [esp-0814h+0904h],00h
        lea     ebp,[esp-0814h+0904h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174438:
L_174452:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     edi,_ourKnownValues+014h
        mov     ebx,L_28
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0818h+0904h],00h
        lea     eax,[esp-0818h+0904h]
        mov     dword [esp-081ch+0904h],00h
        lea     ebp,[esp-081ch+0904h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174582:
L_174596:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     edi,_ourKnownValues
        mov     ebx,L_27
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0820h+0904h],00h
        lea     eax,[esp-0820h+0904h]
        mov     dword [esp-0824h+0904h],00h
        lea     ebp,[esp-0824h+0904h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_174726:
L_174740:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [esp-02ech+0904h],00h
        lea     eax,[esp-02ech+0904h]
        mov     dword [esp-02f0h+0904h],eax
        mov     eax,dword [esp-02ech+0904h]
        mov     dword [@std@piecewise_construct],eax
        mov     dword [esp-02f4h+0904h],00h
        lea     eax,[esp-02f4h+0904h]
        mov     dword [esp-02f8h+0904h],eax
        mov     eax,dword [esp-02f4h+0904h]
        mov     dword [@std@allocator_arg],eax
        mov     dword [esp-02fch+0904h],00h
        lea     eax,[esp-02fch+0904h]
        mov     dword [esp-0300h+0904h],eax
        mov     eax,dword [esp-02fch+0904h]
        mov     dword [@std@__ppEmbed_cpp__e1e322b3@ignore],eax
        push    dword [esp-0304h+0904h]
        push    dword [esp-0308h+0908h]
        push    dword @std@nullopt
        call    @std@nullopt_t@.bctr.q27@std@nullopt_t@__secret_tagn0 ; std::nullopt_t::nullopt_t(std::nullopt_t::__secret_tag, std::nullopt_t::__secret_tag)
        add     esp,byte 0ch
        mov     dword [esp-030ch+0904h],00h
        lea     eax,[esp-030ch+0904h]
        mov     ecx,dword [eax]
        mov     dword [@std@defer_lock],ecx
        mov     dword [esp-0310h+0904h],00h
        lea     eax,[esp-0310h+0904h]
        mov     ecx,dword [eax]
        mov     dword [@std@try_to_lock],ecx
        mov     dword [esp-0314h+0904h],00h
        lea     eax,[esp-0314h+0904h]
        mov     ecx,dword [eax]
        mov     dword [@std@adopt_lock],ecx
        mov     dword [010h+@embeder@embed_elements+08h],00h
        mov     dword [esp-0318h+0904h],00h
        lea     eax,[esp-0318h+0904h]
        push    eax
        lea     edi,[esp-032ch+0908h]
        mov     ebx,L_1
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0828h+0908h],00h
        lea     eax,[esp-0828h+0908h]
        mov     dword [esp-082ch+0908h],00h
        lea     ebp,[esp-082ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175018:
L_175032:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-05a0h+0904h],01h
        lea     eax,[esp-05a0h+0904h]
        push    eax
        lea     edi,[esp-05b4h+0908h]
        mov     ebx,L_2
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0830h+0908h],00h
        lea     eax,[esp-0830h+0908h]
        mov     dword [esp-0834h+0908h],00h
        lea     ebp,[esp-0834h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175162:
L_175176:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+018h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-05b8h+0904h],02h
        lea     eax,[esp-05b8h+0904h]
        push    eax
        lea     edi,[esp-05cch+0908h]
        mov     ebx,L_3
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0838h+0908h],00h
        lea     eax,[esp-0838h+0908h]
        mov     dword [esp-083ch+0908h],00h
        lea     ebp,[esp-083ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175306:
L_175320:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+030h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-05d0h+0904h],03h
        lea     eax,[esp-05d0h+0904h]
        push    eax
        lea     edi,[esp-05e4h+0908h]
        mov     ebx,L_4
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0840h+0908h],00h
        lea     eax,[esp-0840h+0908h]
        mov     dword [esp-0844h+0908h],00h
        lea     ebp,[esp-0844h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175450:
L_175464:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+048h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-05e8h+0904h],04h
        lea     eax,[esp-05e8h+0904h]
        push    eax
        lea     edi,[esp-05fch+0908h]
        mov     ebx,L_5
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0848h+0908h],00h
        lea     eax,[esp-0848h+0908h]
        mov     dword [esp-084ch+0908h],00h
        lea     ebp,[esp-084ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175594:
L_175608:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+060h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0600h+0904h],05h
        lea     eax,[esp-0600h+0904h]
        push    eax
        lea     edi,[esp-0614h+0908h]
        mov     ebx,L_6
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0850h+0908h],00h
        lea     eax,[esp-0850h+0908h]
        mov     dword [esp-0854h+0908h],00h
        lea     ebp,[esp-0854h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175738:
L_175752:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+078h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0618h+0904h],06h
        lea     eax,[esp-0618h+0904h]
        push    eax
        lea     edi,[esp-062ch+0908h]
        mov     ebx,L_7
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0858h+0908h],00h
        lea     eax,[esp-0858h+0908h]
        mov     dword [esp-085ch+0908h],00h
        lea     ebp,[esp-085ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_175882:
L_175896:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+090h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0630h+0904h],07h
        lea     eax,[esp-0630h+0904h]
        push    eax
        lea     edi,[esp-0644h+0908h]
        mov     ebx,L_8
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0860h+0908h],00h
        lea     eax,[esp-0860h+0908h]
        mov     dword [esp-0864h+0908h],00h
        lea     ebp,[esp-0864h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176026:
L_176040:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0a8h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0648h+0904h],08h
        lea     eax,[esp-0648h+0904h]
        push    eax
        lea     edi,[esp-065ch+0908h]
        mov     ebx,L_9
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0868h+0908h],00h
        lea     eax,[esp-0868h+0908h]
        mov     dword [esp-086ch+0908h],00h
        lea     ebp,[esp-086ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176170:
L_176184:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0c0h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0660h+0904h],09h
        lea     eax,[esp-0660h+0904h]
        push    eax
        lea     edi,[esp-0674h+0908h]
        mov     ebx,L_10
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0870h+0908h],00h
        lea     eax,[esp-0870h+0908h]
        mov     dword [esp-0874h+0908h],00h
        lea     ebp,[esp-0874h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176314:
L_176328:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0d8h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0678h+0904h],0ah
        lea     eax,[esp-0678h+0904h]
        push    eax
        lea     edi,[esp-068ch+0908h]
        mov     ebx,L_11
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0878h+0908h],00h
        lea     eax,[esp-0878h+0908h]
        mov     dword [esp-087ch+0908h],00h
        lea     ebp,[esp-087ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176458:
L_176472:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0f0h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0690h+0904h],0bh
        lea     eax,[esp-0690h+0904h]
        push    eax
        lea     edi,[esp-06a4h+0908h]
        mov     ebx,L_12
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0880h+0908h],00h
        lea     eax,[esp-0880h+0908h]
        mov     dword [esp-0884h+0908h],00h
        lea     ebp,[esp-0884h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176602:
L_176616:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0108h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-06a8h+0904h],0ch
        lea     eax,[esp-06a8h+0904h]
        push    eax
        lea     edi,[esp-06bch+0908h]
        mov     ebx,L_13
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0888h+0908h],00h
        lea     eax,[esp-0888h+0908h]
        mov     dword [esp-088ch+0908h],00h
        lea     ebp,[esp-088ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176746:
L_176760:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0120h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-06c0h+0904h],0dh
        lea     eax,[esp-06c0h+0904h]
        push    eax
        lea     edi,[esp-06d4h+0908h]
        mov     ebx,L_14
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0890h+0908h],00h
        lea     eax,[esp-0890h+0908h]
        mov     dword [esp-0894h+0908h],00h
        lea     ebp,[esp-0894h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_176890:
L_176904:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0138h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-06d8h+0904h],0eh
        lea     eax,[esp-06d8h+0904h]
        push    eax
        lea     edi,[esp-06ech+0908h]
        mov     ebx,L_15
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-0898h+0908h],00h
        lea     eax,[esp-0898h+0908h]
        mov     dword [esp-089ch+0908h],00h
        lea     ebp,[esp-089ch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177034:
L_177048:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0150h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-06f0h+0904h],0fh
        lea     eax,[esp-06f0h+0904h]
        push    eax
        lea     edi,[esp-0704h+0908h]
        mov     ebx,L_16
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08a0h+0908h],00h
        lea     eax,[esp-08a0h+0908h]
        mov     dword [esp-08a4h+0908h],00h
        lea     ebp,[esp-08a4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177178:
L_177192:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0168h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0708h+0904h],010h
        lea     eax,[esp-0708h+0904h]
        push    eax
        lea     edi,[esp-071ch+0908h]
        mov     ebx,L_17
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08a8h+0908h],00h
        lea     eax,[esp-08a8h+0908h]
        mov     dword [esp-08ach+0908h],00h
        lea     ebp,[esp-08ach+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177322:
L_177336:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0180h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0720h+0904h],011h
        lea     eax,[esp-0720h+0904h]
        push    eax
        lea     edi,[esp-0734h+0908h]
        mov     ebx,L_18
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08b0h+0908h],00h
        lea     eax,[esp-08b0h+0908h]
        mov     dword [esp-08b4h+0908h],00h
        lea     ebp,[esp-08b4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177466:
L_177480:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0198h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0738h+0904h],013h
        lea     eax,[esp-0738h+0904h]
        push    eax
        lea     edi,[esp-074ch+0908h]
        mov     ebx,L_19
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08b8h+0908h],00h
        lea     eax,[esp-08b8h+0908h]
        mov     dword [esp-08bch+0908h],00h
        lea     ebp,[esp-08bch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177610:
L_177624:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+01b0h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0750h+0904h],012h
        lea     eax,[esp-0750h+0904h]
        push    eax
        lea     edi,[esp-0764h+0908h]
        mov     ebx,L_20
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08c0h+0908h],00h
        lea     eax,[esp-08c0h+0908h]
        mov     dword [esp-08c4h+0908h],00h
        lea     ebp,[esp-08c4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177754:
L_177768:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+01c8h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0768h+0904h],015h
        lea     eax,[esp-0768h+0904h]
        push    eax
        lea     edi,[esp-077ch+0908h]
        mov     ebx,L_21
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08c8h+0908h],00h
        lea     eax,[esp-08c8h+0908h]
        mov     dword [esp-08cch+0908h],00h
        lea     ebp,[esp-08cch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_177898:
L_177912:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+01e0h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0780h+0904h],014h
        lea     eax,[esp-0780h+0904h]
        push    eax
        lea     edi,[esp-0794h+0908h]
        mov     ebx,L_22
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08d0h+0908h],00h
        lea     eax,[esp-08d0h+0908h]
        mov     dword [esp-08d4h+0908h],00h
        lea     ebp,[esp-08d4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178042:
L_178056:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+01f8h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-0798h+0904h],016h
        lea     eax,[esp-0798h+0904h]
        push    eax
        lea     edi,[esp-07ach+0908h]
        mov     ebx,L_23
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08d8h+0908h],00h
        lea     eax,[esp-08d8h+0908h]
        mov     dword [esp-08dch+0908h],00h
        lea     ebp,[esp-08dch+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178186:
L_178200:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0210h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-07b0h+0904h],017h
        lea     eax,[esp-07b0h+0904h]
        push    eax
        lea     edi,[esp-07c4h+0908h]
        mov     ebx,L_24
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08e0h+0908h],00h
        lea     eax,[esp-08e0h+0908h]
        mov     dword [esp-08e4h+0908h],00h
        lea     ebp,[esp-08e4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178330:
L_178344:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0228h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-07c8h+0904h],018h
        lea     eax,[esp-07c8h+0904h]
        push    eax
        lea     edi,[esp-07dch+0908h]
        mov     ebx,L_25
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08e8h+0908h],00h
        lea     eax,[esp-08e8h+0908h]
        mov     dword [esp-08ech+0908h],00h
        lea     ebp,[esp-08ech+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178474:
L_178488:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0240h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        mov     dword [esp-07e0h+0904h],019h
        lea     eax,[esp-07e0h+0904h]
        push    eax
        lea     edi,[esp-07f4h+0908h]
        mov     ebx,L_26
        push    edi
        call    @std@#__basic_string_common.4bool?1?~@.bctr.qv ; std::__basic_string_common<bool=1>::__basic_string_common()
        add     esp,byte 04h
        mov     esi,edi
        add     esi,byte 04h
        mov     dword [esp-08f0h+0908h],00h
        lea     eax,[esp-08f0h+0908h]
        mov     dword [esp-08f4h+0908h],00h
        lea     ebp,[esp-08f4h+0908h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.55@std@#basic_string.c#char_traits.c~#allocator.c~~@__repi?0?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<std::basic_string<char, char_traits<char>, allocator<char>>::__rep, int=0, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [ebp]
        mov     eax,esi
        add     eax,byte 0ch
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.c~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<char>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178618:
L_178632:
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 819:       __init(__s, traits_type::length(__s)); 
        mov     eax,ebx
        push    eax
        call    _strlen ; strlen
        add     esp,byte 04h
        push    eax
        push    ebx
        push    edi
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui ; std::basic_string<char, char_traits<char>, allocator<char>>::__init(char const *, unsigned int)
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        push    edi
        lea     eax,[esp-059ch+090ch+0258h]
        push    eax
        call    @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
        add     esp,byte 0ch
        lea     eax,[esp-059ch+0904h]
        mov     dword [esp-07fch+0904h],eax
        mov     dword [esp-07fch+04h+0904h],01ah
        push    dword [esp-07fch+04h+0904h]
        push    dword [esp-07fch+0908h]
        push    dword _hasher
        call    @std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bctr.q#initializer_list.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~ ; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>::unordered_map(initializer_list<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>)
        push    byte 018h
        push    byte 01ah
        push    dword @std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bdtr.qv ; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::~pair()
        push    byte 00h
        lea     eax,[esp-059ch+0920h]
        push    eax
        call    @__arrCall.qpvpvpvii ; __arrCall(void*, void*, void*, int, int)
        add     esp,dword 014h+0ch
L_174038:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,08f4h
        ret
section cstartup
        db      0,99
        dd      @__DYNAMIC_STARTUP___0_e1e322b3.q
section code
; __DYNAMIC_RUNDOWN___0_e1e322b3()
@__DYNAMIC_RUNDOWN___0_e1e322b3.q:
        add     esp,0fffff70ch
L_178657:
        mov     eax,_hasher
; Line 969:         static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), ""); 
; Line 970:     } 
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bdtr.qv ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::~__hash_table()
        add     esp,byte 04h
L_178673:
        push    dword @embeder@embed_elements
        call    @std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bdtr.qv ; std::function<(*)(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)>::~function()
        add     esp,byte 04h
L_178687:
L_178658:
        add     esp,08f4h
        ret
section crundown
        db      0,99
        dd      @__DYNAMIC_RUNDOWN___0_e1e322b3.q
section code
section data
section code
        section vsc@std@nullopt_t@.bctr.q27@std@nullopt_t@__secret_tagn0 virtual
        [bits 32]
; std::nullopt_t::nullopt_t(std::nullopt_t::__secret_tag, std::nullopt_t::__secret_tag)
@std@nullopt_t@.bctr.q27@std@nullopt_t@__secret_tagn0:
; Line 200:     _LIBCPP_INLINE_VISIBILITY constexpr explicit nullopt_t(__secret_tag, __secret_tag) noexcept {} 
L_178694:
        mov     eax,dword [esp+04h]
L_178712:
L_178726:
L_178695:
        ret
section code
section code
        section vsc@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bctr.q#initializer_list.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~ virtual
        [bits 32]
; std::unordered_map<basic_string<char, char_traits<char>, allocator<char>>, kw, hash<basic_string<char, char_traits<char>, allocator<char>>>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, allocator<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>>::unordered_map(initializer_list<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>)
@std@#unordered_map.#basic_string.c#char_traits.c~#allocator.c~~2kw#hash.#basic_string.c#char_traits.c~#allocator.c~~~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~#allocator.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bctr.q#initializer_list.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~:
        add     esp,0ffffff74h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_178732:
        mov     eax,dword [esp+04h+09ch]
        mov     dword [esp-05ch+09ch],eax
        mov     ebx,dword [esp-05ch+09ch]
        mov     esi,ebx
        xor     eax,eax
        mov     dword [esp-060h+09ch],eax
        lea     eax,[esp-060h+09ch]
        mov     dword [esp-064h+09ch],00h
        lea     edi,[esp-064h+09ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        push    esi
        call    @std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~v~.qRpp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>**, int=0, bool=0>::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, bool>, void*>*>**, void, >(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, bool>, void*>*>**&&)
        add     esp,byte 08h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [edi]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_178850:
        mov     esi,ebx
        add     esi,byte 0ch
        mov     dword [esp-068h+09ch],00h
        lea     eax,[esp-068h+09ch]
        push    dword [eax]
        push    esi
        call    @std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag ; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__value_init_tag)
        add     esp,byte 08h
        mov     dword [esp-06ch+09ch],00h
        lea     eax,[esp-06ch+09ch]
        push    dword [eax]
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
        add     esp,byte 08h
        mov     ecx,ebx
        add     ecx,byte 014h
        mov     dword [esp-070h+09ch],00h
        lea     edx,[esp-070h+09ch]
        mov     dword [esp-074h+09ch],00h
        lea     eax,[esp-074h+09ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [ebx+014h],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_179015:
        mov     edx,ebx
        add     edx,byte 01ch
        movss   xmm0,[L_187484]
        movss   [esp-078h+09ch],xmm0
        lea     ecx,[esp-078h+09ch]
        mov     dword [esp-07ch+09ch],00h
        lea     eax,[esp-07ch+09ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        movss   xmm0,[ecx]
        movss   [ebx+01ch],xmm0
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,edx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_179129:
; Line 1424: } 
; Line 1563:     __get_db()->__insert_c(this); 
        mov     edx,dword [esp-05ch+09ch]
        mov     edi,dword [esp+08h+09ch]
        mov     ecx,dword [esp+08h+09ch]
        mov     eax,dword [esp+08h+04h+09ch]
        imul    eax,byte 018h
        mov     esi,ecx
        add     esi,eax
; Line 1623:     for (; __first != __last; ++__first) 
        mov     ecx,esi
        mov     eax,edi
        mov     dword [esp-058h+09ch],edx
        cmp     eax,ecx
        je      L_179136
L_179134:
; Line 1624:         __table_.__insert_unique(*__first); 
        mov     ecx,dword [esp-058h+09ch]
        mov     eax,edi
; Line 1165:         return __emplace_unique_key_args(_NodeTypes::__get_key(__x), __x); 
; Line 493:     template<class _Tuple, _EnableB< 
        lea     ebp,[esp-08ch+09ch]
        push    eax
; Line 177:     return __v.first; 
; Line 178:   } 
        push    eax
        push    ecx
        lea     eax,[esp-084h+0a8h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>( const basic_string<char, char_traits<char>, allocator<char>>&,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
        mov     ebx,eax
        add     esp,byte 010h
        mov     eax,ebx
        push    eax
        push    ebp
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bctr.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::__hash_iterator(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&)
        add     esp,byte 08h
        mov     al,byte [ebx+04h]
        mov     byte [esp+04h-08ch+09ch],al
        lea     eax,[esp-084h+09ch]
        push    eax
        call    @std@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv ; std::__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>::~__hash_iterator()
        add     esp,byte 04h
L_179246:
; Line 1166:     } 
L_179274:
L_179261:
L_179137:
        add     edi,byte 018h
L_179135:
        cmp     edi,esi
        jne     L_179134
L_179136:
; Line 1625: } 
L_179154:
; Line 1566: } 
L_179290:
        mov     eax,dword [esp-05ch+09ch]
L_178733:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,08ch
        ret
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::pair<bool=1, bool=0, >( const basic_string<char, char_traits<char>, allocator<char>>&,  const kw&)
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_179296:
        mov     esi,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        mov     ebx,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-048h+014h],01h
        mov     eax,dword [esi]
        mov     dword [ebx+014h],eax
        mov     eax,ebx
L_179297:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 virtual
        [bits 32]
@.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0:
        dd      02h
        dd      00h
section code
section code
        section vsc@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0 virtual
        [bits 32]
@.xc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0:
        dd      @.xct@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bctr.4bool?1?n1?0?~.qrx#basic_string.c#char_traits.c~#allocator.c~~rxn0+0
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bdtr.qv virtual
        [bits 32]
; std::pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>::~pair()
@std@#pair.x#basic_string.c#char_traits.c~#allocator.c~~2kw~@.bdtr.qv:
L_179308:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_179309:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::~__hash_table()
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@.bdtr.qv:
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_179314:
        mov     ebx,dword [esp+04h+050h]
; Line 1535:     static_assert((is_copy_constructible<key_equal>::value), 
        mov     eax,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ecx,dword [ebx+0ch]
        push    ecx
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__deallocate_node(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*)
        add     esp,byte 08h
; Line 1543:     __get_db()->__erase_c(this); 
        mov     eax,ebx
        add     eax,dword 01ch+04h
        push    eax
        call    @std@#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv ; std::equal_to<basic_string<char, char_traits<char>, allocator<char>>>::~equal_to()
        add     esp,byte 04h
L_179388:
L_179375:
L_179403:
L_179362:
        mov     eax,ebx
        add     eax,dword 014h+04h
        push    eax
        call    @std@#hash.#basic_string.c#char_traits.c~#allocator.c~~~@.bdtr.qv ; std::hash<basic_string<char, char_traits<char>, allocator<char>>>::~hash()
        add     esp,byte 04h
L_179444:
L_179431:
L_179459:
L_179418:
L_179500:
L_179487:
L_179528:
L_179515:
L_179474:
        mov     ecx,ebx
; Line 2848:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     esi,dword [ebx]
; Line 2849:     __ptr_.first() = nullptr; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
        and     esi,esi
        je      L_179549
; Line 2851:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+050h],eax
        and     eax,eax
        je      L_179662
        mov     eax,dword [esp-044h+050h]
        add     eax,byte 04h
        jmp     L_179663
L_179662:
        mov     eax,dword [esp-044h+050h]
L_179663:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 809:         __alloc_traits::deallocate(__alloc(), __p, size()); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+050h],eax
        and     eax,eax
        je      L_179710
        mov     eax,dword [esp-048h+050h]
        add     eax,byte 04h
        jmp     L_179711
L_179710:
        mov     eax,dword [esp-048h+050h]
L_179711:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_179790:
L_179775:
L_179678:
; Line 810:     } 
L_179645:
        mov     ecx,ebx
L_179549:
; Line 2852:   } 
L_179566:
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~@.bdtr.qv ; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>::~__bucket_list_deallocator()
        add     esp,byte 04h
L_179869:
L_179883:
L_179856:
L_179546:
L_179315:
        pop     esi
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bdtr.qv virtual
        [bits 32]
; std::function<(*)(vector<variant<shared_ptr<Token>, unsigned long long>, allocator<variant<shared_ptr<Token>, unsigned long long>>>&)>::~function()
@std@#function.qr#vector.#variant.#shared_ptr.5Token~uL~#allocator.#variant.#shared_ptr.n0~uL~~~.v~@.bdtr.qv:
L_179891:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        add     ecx,byte 08h
; Line 1825:         if ((void*)__f_ == &__buf_) 
        mov     edx,ecx
        cmp     dword [eax+010h+08h],edx
        jne     L_179897
; Line 1826:             __f_->destroy(); 
        mov     eax,dword [eax+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+0ch]
        add     esp,byte 04h
        jmp     L_179900
L_179897:
; Line 1827:         else if (__f_) 
        cmp     dword [eax+010h+08h],byte 00h
        je      L_179903
; Line 1828:             __f_->destroy_deallocate(); 
        mov     eax,dword [eax+010h+08h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+010h]
        add     esp,byte 04h
L_179903:
L_179900:
; Line 1829:     } 
L_179935:
L_179922:
L_179950:
L_179977:
L_179964:
L_179892:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~v~.qRpp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>**, int=0, bool=0>::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, bool>, void*>*>**, void, >(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, bool>, void*>*>**&&)
@std@#__compressed_pair_elem.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.pp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~v~.qRpp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~:
; Line 2198:   template <class _Up, class = typename enable_if< 
        push    ecx
L_179984:
; Line 2198:   template <class _Up, class = typename enable_if< 
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2206:     } 
L_179985:
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
        add     esp,byte 0ffffffe0h
        push    ebx
        push    esi
L_180010:
        mov     ebx,dword [esp+04h+028h]
        mov     esi,ebx
        mov     eax,ebx
        mov     ecx,eax
        mov     dword [esp-01ch+028h],00h
        lea     edx,[esp-01ch+028h]
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [esi],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    dword [eax]
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
        add     esp,byte 08h
L_180145:
; Line 2198:   template <class _Up, class = typename enable_if< 
L_180160:
        mov     eax,ebx
L_180011:
        pop     esi
        pop     ebx
        add     esp,byte 020h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, int=0, bool=0>::__compressed_pair_elem(std::__value_init_tag)
@std@#__compressed_pair_elem.#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?0?4bool?0?~@.bctr.q21@std@__value_init_tag:
L_180166:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        xor     edx,edx
        mov     dword [ecx],edx
        mov     dword [eax],00h
L_180202:
L_180167:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>, int=1, bool=0>::__compressed_pair_elem(std::__value_init_tag)
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@.bctr.q21@std@__value_init_tag:
; Line 2195:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_180208:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
L_180244:
L_180209:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag:
L_180250:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
        mov     dword [ecx],00h
L_180318:
L_180251:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@.bctr.q23@std@__default_init_tag:
L_180324:
        mov     eax,dword [esp+04h]
        mov     ecx,eax
        mov     dword [ecx],00h
        mov     dword [ecx],00h
L_180392:
L_180325:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__emplace_unique_key_args<basic_string<char, char_traits<char>, allocator<char>>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>( const basic_string<char, char_traits<char>, allocator<char>>&,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe90h
        push    ebx
        push    esi
        push    edi
L_180398:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0170h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-016ch],eax
        mov     eax,dword [ebp+010h]
        mov     dword [ebp-0168h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0164h],eax
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-07ch],eax
        mov     dword [ebp-07ch+04h],___cppexceptionhandle
        mov     dword [ebp-07ch+08h],esp
        mov     dword [ebp-07ch+0ch],ebp
        mov     dword [ebp-07ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-07ch+014h],00h
        lea     eax,[ebp-07ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2105:     size_t __hash = hash_function()(__k); 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 014h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0124h],eax
        and     eax,eax
        je      L_180508
        mov     eax,dword [ebp-0124h]
        add     eax,byte 04h
        jmp     L_180509
L_180508:
        mov     eax,dword [ebp-0124h]
L_180509:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,dword [ebp-0168h]
        mov     edx,eax
        mov     ecx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   edx,byte [edx+04h]
        and     edx,byte 01h
        setne   dl
        and     edx,byte 01h
        and     dl,dl
        je      L_180587
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ecx+08h+04h]
        jmp     L_180588
L_180587:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_180588:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ebx,eax
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   ebx,byte [ebx+04h]
        and     ebx,byte 01h
        setne   bl
        and     ebx,byte 01h
        and     bl,bl
        je      L_180813
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ebx,dword [edx+08h+04h]
        jmp     L_180814
L_180813:
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        inc     edx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     ebx,edx
L_180814:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     edx,eax
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [eax+04h]
        and     eax,byte 01h
        setne   al
        and     eax,byte 01h
        and     al,al
        je      L_181009
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [edx+04h+04h]
        jmp     L_181010
L_181009:
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        movzx   eax,byte [edx+04h]
        shr     eax,01h
L_181010:
        add     eax,ebx
; Line 1040:     typedef typename iterator_traits<_Ptr>::value_type value_type; 
        sub     eax,ecx
        push    eax
        push    ecx
        mov     dword [ebp-0128h],00h
        lea     eax,[ebp-0128h]
        mov     dword [ebp-012ch],eax
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bcall.qpxvui ; std::__murmur2_or_cityhash<unsigned int, int=32>::operator ()(void const *, unsigned int)
        mov     ebx,eax
        add     esp,byte 0ch
        lea     eax,[ebp-0128h]
        push    eax
        call    @std@#__murmur2_or_cityhash.uii?32?~@.bdtr.qv ; std::__murmur2_or_cityhash<unsigned int, int=32>::~__murmur2_or_cityhash()
        add     esp,byte 04h
; Line 1042: } 
L_180540:
        mov     dword [ebp-0150h],ebx
        mov     eax,dword [ebp-0164h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-0130h],eax
        and     eax,eax
        je      L_181219
        mov     eax,dword [ebp-0130h]
        add     eax,byte 04h
        jmp     L_181220
L_181219:
        mov     eax,dword [ebp-0130h]
L_181220:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 1207:     } 
        mov     dword [ebp-0154h],eax
        mov     byte [ebp-01h],00h
        mov     eax,dword [ebp-0154h]
        mov     dword [ebp-0158h],eax
        and     eax,eax
        je      L_180401
; Line 2111:     { 
; Line 2112:         __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0150h]
        mov     ecx,dword [ebp-0154h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_181272
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_181273
L_181272:
        cmp     eax,ecx
        jc      L_181275
L_181274:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_181275:
L_181273:
; Line 119: } 
        mov     dword [ebp-015ch],eax
; Line 2113:         __nd = __bucket_list_[__chash]; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [ebp-0164h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        and     eax,eax
        je      L_180405
; Line 2115:         { 
; Line 2116:             for (__nd = __nd->__next_; __nd != nullptr && 
        mov     ebx,dword [eax]
        and     ebx,ebx
        je      L_180411
        mov     ecx,dword [ebp-0150h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_181325
        mov     eax,dword [ebp-015ch]
        mov     dword [ebp-0160h],eax
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,ecx
        mov     edx,ecx
        dec     edx
        and     edx,esi
        jne     L_181373
        mov     ecx,esi
        dec     ecx
        and     eax,ecx
        jmp     L_181374
L_181373:
        cmp     eax,ecx
        jc      L_181376
L_181375:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_181376:
L_181374:
; Line 119: } 
        cmp     eax,dword [ebp-0160h]
        jne     L_180411
L_181325:
L_180409:
; Line 2119:             { 
; Line 2120:                 if (key_eq()(__nd->__upcast()->__value_, __k)) 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0134h],eax
        and     eax,eax
        je      L_181423
        mov     eax,dword [ebp-0134h]
        add     eax,byte 04h
        jmp     L_181424
L_181423:
        mov     eax,dword [ebp-0134h]
L_181424:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,ebx
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp-0168h]
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_180420
L_180417:
; Line 2122:             } 
L_180412:
        mov     ebx,dword [ebx]
L_180410:
        and     ebx,ebx
        je      L_181556
        mov     ecx,dword [ebp-0150h]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [ebx+04h]
; Line 88:     } 
        cmp     eax,ecx
        je      L_180409
        mov     esi,dword [ebp-015ch]
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     edi,edx
        mov     ecx,edx
        dec     ecx
        and     ecx,edi
        jne     L_181604
        mov     ecx,edi
        dec     ecx
        and     eax,ecx
        jmp     L_181605
L_181604:
        cmp     eax,edx
        jc      L_181607
L_181606:
        sub     edx,edx
        xor     edx,edx
        div     edi
        mov     eax,edx
L_181607:
L_181605:
; Line 119: } 
        cmp     eax,esi
        je      L_180409
L_181556:
L_180411:
; Line 2123:         } 
L_180405:
; Line 2124:     } 
L_180401:
; Line 2125:     { 
; Line 2127:         __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...); 
        mov     eax,dword [ebp-016ch]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
        mov     eax,dword [ebp-0150h]
        push    eax
        mov     eax,dword [ebp-0164h]
        push    eax
        lea     eax,[ebp-040h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__construct_node_hash< const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&, ..._Rest>(unsigned int,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, _Rest>&, )
        add     esp,byte 010h
        mov     dword [ebp-07ch+014h],01h
        mov     eax,dword [ebp-0158h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
        mov     eax,dword [ebp-0164h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mulss   xmm0,[eax+01ch]
        movss   [ebp-014ch],xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [eax+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm1,xmm0
        movss   xmm0,[ebp-014ch]
        comiss  xmm0,xmm1
        jb      L_181625
        cmp     dword [ebp-0154h],byte 00h
        jne     L_180434
L_181625:
; Line 2132:         { 
; Line 2133:             rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc), 
        mov     ecx,dword [ebp-0158h]
        shl     ecx,01h
        mov     eax,dword [ebp-0158h]
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_181754
        mov     edx,eax
        dec     edx
        and     eax,edx
        je      L_181752
L_181754:
        xor     eax,eax
        jmp     L_181753
L_181752:
        mov     eax,01h
L_181753:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        sete    al
        and     eax,byte 01h
        add     eax,ecx
        mov     dword [ebp-054h],eax
        lea     ebx,[ebp-054h]
        mov     esi,dword [ebp-0164h]
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esi+014h]
        inc     eax
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[esi+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [ebp-0148h]
        movss   xmm0,[ebp-0148h]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        mov     dword [ebp-058h],eax
        lea     eax,[ebp-058h]
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [ebp-0138h],00h
        lea     ecx,[ebp-0138h]
        push    dword [ecx]
        push    eax
        push    ebx
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_181895:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        push    eax
        mov     eax,dword [ebp-0164h]
        push    eax
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::rehash(unsigned int)
        add     esp,byte 08h
; Line 2135:             __bc = bucket_count(); 
        mov     eax,dword [ebp-0164h]
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-013ch],eax
        and     eax,eax
        je      L_181959
        mov     eax,dword [ebp-013ch]
        add     eax,byte 04h
        jmp     L_181960
L_181959:
        mov     eax,dword [ebp-013ch]
L_181960:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [eax]
; Line 1207:     } 
; Line 2136:             __chash = __constrain_hash(__hash, __bc); 
        mov     eax,dword [ebp-0150h]
        mov     dword [ebp-0158h],ecx
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_182012
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_182013
L_182012:
        cmp     eax,ecx
        jc      L_182015
L_182014:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_182015:
L_182013:
; Line 119: } 
        mov     dword [ebp-015ch],eax
; Line 2137:         } 
L_180434:
        mov     ecx,dword [ebp-015ch]
        mov     eax,ecx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0164h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     ecx,dword [edx+ecx*4]
        and     ecx,ecx
        jne     L_180441
; Line 2141:         { 
; Line 2142:             __pn = __p1_.first().__ptr(); 
        mov     ecx,dword [ebp-0164h]
        add     ecx,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2143:             __h->__next_ = __pn->__next_; 
        mov     ebx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [edx],ebx
; Line 2144:             __pn->__next_ = __h.get()->__ptr(); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     dword [ecx],edx
; Line 2146:             __bucket_list_[__chash] = __pn; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [ebp-0164h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+eax*4],ecx
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        cmp     dword [eax],byte 00h
        je      L_180451
; Line 2148:                 __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)] 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [ebp-040h]
; Line 2592:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     eax,dword [eax]
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [ebp-0158h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_182575
        mov     ecx,ebx
        dec     ecx
        and     ecx,eax
        jmp     L_182576
L_182575:
        cmp     eax,ecx
        jc      L_182578
L_182577:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_182578:
        mov     ecx,eax
L_182576:
; Line 119: } 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0164h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     dword [eax+ecx*4],esi
L_180445:
; Line 2150:         } 
        jmp     L_180451
L_180441:
; Line 2151:         else 
; Line 2152:         { 
; Line 2153:             __h->__next_ = __pn->__next_; 
        mov     edx,dword [ecx]
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2588:   } 
        mov     dword [eax],edx
; Line 2154:             __pn->__next_ = static_cast<__next_pointer>(__h.get()); 
; Line 2591:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-040h]
; Line 2592:   } 
        mov     dword [ecx],eax
; Line 2155:         } 
L_180451:
; Line 2156:         __nd = static_cast<__next_pointer>(__h.release()); 
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [ebp-040h]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],00h
; Line 2611:   } 
; Line 2158:         ++size(); 
        mov     eax,dword [ebp-0164h]
        add     eax,byte 014h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-050h],eax
        mov     ecx,dword [eax]
        inc     ecx
        mov     eax,dword [ebp-050h]
        mov     dword [eax],ecx
; Line 2159:         __inserted = true; 
        mov     byte [ebp-01h],01h
; Line 2160:     } 
        mov     dword [ebp-07ch+014h],02h
        lea     esi,[ebp-040h]
        xor     ecx,ecx
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp-040h]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ebp-040h],ecx
        and     eax,eax
        je      L_182853
; Line 2618:       __ptr_.second()(__tmp); 
        push    eax
        mov     eax,esi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0140h],eax
        and     eax,eax
        je      L_182951
        mov     eax,dword [ebp-0140h]
        add     eax,byte 04h
        jmp     L_182952
L_182951:
        mov     eax,dword [ebp-0140h]
L_182952:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*)
        add     esp,byte 08h
L_182853:
; Line 2619:   } 
L_182870:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::~__hash_node_destructor()
        add     esp,byte 04h
L_182979:
L_182993:
L_182966:
L_182850:
L_180420:
; Line 440:     template<class _U1, class _U2, _EnableB< 
        lea     eax,[ebp-01h]
        push    eax
        mov     dword [ebp-08h],ebx
        lea     eax,[ebp-08h]
        mov     dword [ebp-07ch+014h],03h
        push    eax
        mov     eax,dword [ebp-0170h]
        push    eax
        call    @std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1 ; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&, bool&)
        mov     dword [ebp-07ch+014h],04h
L_183027:
        add     esp,byte 0ch
        mov     eax,dword [ebp+08h]
; Line 2167: } 
L_180399:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~:
        dd      @std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~ virtual
        [bits 32]
@.xt@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~:
        dd      @std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~ virtual
        [bits 32]
@.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~:
        dd      @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv+0
        dd      05h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      068h
        db      05fh
        db      06eh
        db      06fh
        db      064h
        db      065h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~ virtual
        [bits 32]
@.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~:
        dd      @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bdtr.qv+0
        dd      05h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@.xt@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~ virtual
        [bits 32]
@.xt@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~:
        dd      @std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @.xt@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~ virtual
        [bits 32]
@.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~:
        dd      @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv+0
        dd      0ch
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__emplace_unique_key_args.#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffff84h
        dd      0400h
        dd      @.xt@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~+0
        dd      0ffffffc0h
        dd      01h
        dd      02h
        dd      0400h
        dd      @.xt@#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~+0
        dd      0fffffff8h
        dd      03h
        dd      04h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~ virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__deallocate_node(__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__deallocate_node.qp#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~:
        add     esp,byte 0ffffffb0h
        push    ebx
        push    esi
        push    edi
L_183033:
        mov     ebx,dword [esp+08h+05ch]
        mov     eax,dword [esp+04h+05ch]
; Line 1582:     __node_allocator& __na = __node_alloc(); 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-050h+05ch],eax
        and     eax,eax
        je      L_183077
        mov     eax,dword [esp-050h+05ch]
        add     eax,byte 04h
        jmp     L_183078
L_183077:
        mov     eax,dword [esp-050h+05ch]
L_183078:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        and     ebx,ebx
        je      L_183037
L_183036:
; Line 1584:     { 
; Line 1585:         __next_pointer __next = __np->__next_; 
        mov     edi,dword [ebx]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
; Line 1602:         __node_traits::destroy(__na, _NodeTypes::__get_ptr(__real_np->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,esi
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
        add     esp,byte 08h
; Line 1603:         __node_traits::deallocate(__na, __real_np, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_183268:
L_183253:
L_183238:
; Line 1604:         __np = __next; 
        mov     ebx,edi
; Line 1605:     } 
L_183038:
; Line 1583:     while (__np != nullptr) 
        and     ebx,ebx
        jne     L_183036
L_183037:
; Line 1606: } 
L_183034:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 050h
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_183324:
        mov     eax,dword [esp+04h]
L_183325:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_183332:
        mov     eax,dword [esp+04h]
L_183333:
        ret
section code
section code
        section vsc@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>::~__bucket_list_deallocator()
@std@#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~@.bdtr.qv:
L_183340:
L_183380:
L_183367:
L_183395:
L_183354:
L_183341:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__compressed_pair_elem(std::__default_init_tag)
@std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bctr.q23@std@__default_init_tag:
; Line 2193:   _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR 
L_183402:
        mov     eax,dword [esp+04h]
L_183438:
L_183403:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__construct_node_hash< const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&, ..._Rest>(unsigned int,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, _Rest>&, )
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V:
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff2ch
        push    ebx
        push    esi
        push    edi
L_183444:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0c4h],eax
        mov     eax,dword [ebp+014h]
        mov     dword [ebp-0c0h],eax
        mov     ebx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-05ch],eax
        mov     dword [ebp-05ch+04h],___cppexceptionhandle
        mov     dword [ebp-05ch+08h],esp
        mov     dword [ebp-05ch+0ch],ebp
        mov     dword [ebp-05ch+010h],@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V
        mov     dword [ebp-05ch+014h],00h
        lea     eax,[ebp-05ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2540:     static_assert(!__is_hash_value_type<_First, _Rest...>::value, 
        add     eax,byte 0ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0c8h],eax
        and     eax,eax
        je      L_183481
        mov     eax,dword [ebp-0c8h]
        add     eax,byte 04h
        jmp     L_183482
L_183481:
        mov     eax,dword [ebp-0c8h]
L_183482:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>, int=1, bool=0>::__get()
        mov     esi,eax
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
        xor     cl,cl
        mov     dword [ebp-014h],eax
        mov     byte [ebp-014h+04h],cl
        lea     eax,[ebp-014h]
        mov     dword [ebp-05ch+014h],01h
        push    eax
        mov     edi,01h
; Line 1861:         if (__n > max_size()) 
        mov     ecx,07ffffffh
        cmp     edi,ecx
        jbe     L_183519
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_183519:
        mov     eax,edi
        shl     eax,05h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
        push    eax
        lea     eax,[ebp-0ch]
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>&&)
        mov     dword [ebp-05ch+014h],02h
L_183583:
        add     esp,byte 0ch
        mov     dword [ebp-05ch+014h],03h
; Line 2544:     __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), 
        mov     eax,dword [ebp-0c0h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    eax
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        push    esi
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
        add     esp,byte 0ch
; Line 2547:     __h.get_deleter().__value_constructed = true; 
; Line 2595:     return __ptr_.second(); 
        lea     eax,[ebp-0ch]
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0cch],eax
        and     eax,eax
        je      L_183776
        mov     eax,dword [ebp-0cch]
        add     eax,byte 04h
        jmp     L_183777
L_183776:
        mov     eax,dword [ebp-0cch]
L_183777:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
        mov     byte [eax+04h],01h
; Line 2548:     __h->__hash_ = __hash; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax+04h],ebx
; Line 2549:     __h->__next_ = nullptr; 
; Line 2587:     return __ptr_.first(); 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [ebp-0ch]
; Line 2588:   } 
        mov     dword [eax],00h
        mov     edi,dword [ebp-0c4h]
        mov     eax,edi
        lea     ebx,[ebp-0ch]
        mov     dword [ebp-0bch],eax
        mov     eax,ebx
        push    eax
        call    @std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@release.qv ; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::release()
        add     esp,byte 04h
        mov     dword [ebp-0d0h],eax
        lea     esi,[ebp-0d0h]
; Line 2595:     return __ptr_.second(); 
        mov     eax,ebx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-0d4h],eax
        and     eax,eax
        je      L_183955
        mov     eax,dword [ebp-0d4h]
        add     eax,byte 04h
        jmp     L_183956
L_183955:
        mov     eax,dword [ebp-0d4h]
L_183956:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2596:   } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [esi]
        mov     eax,dword [ebp-0bch]
        mov     dword [edi],edx
; Line 2206:     } 
        add     eax,byte 04h
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    ecx
        push    eax
        call    @std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ ; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>&)
        add     esp,byte 08h
        mov     dword [ebp-05ch+014h],04h
; Line 2206:     } 
; Line 2515:   } 
        mov     dword [ebp-05ch+014h],05h
        mov     eax,dword [ebp+08h]
; Line 2551: } 
L_183445:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V virtual
        [bits 32]
@.xc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@#__construct_node_hash.rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~e5_Rest~.quirx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~V:
        dd      00h
        dd      0ffffffa4h
        dd      0400h
        dd      @.xt@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~+0
        dd      0ffffffech
        dd      01h
        dd      02h
        dd      00h
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@rehash.qui virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::rehash(unsigned int)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@rehash.qui:
        add     esp,byte 0ffffffc8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_184065:
        mov     ebx,dword [esp+04h+048h]
; Line 2378:     if (__n == 1) 
        cmp     dword [esp+08h+048h],byte 01h
        jne     L_184068
; Line 2379:         __n = 2; 
        mov     dword [esp+08h+048h],02h
        jmp     L_184071
L_184068:
; Line 2380:     else if (__n & (__n - 1)) 
        mov     ecx,dword [esp+08h+048h]
        mov     eax,ecx
        dec     eax
        and     eax,ecx
        je      L_184074
; Line 2381:         __n = __next_prime(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        call    @std@__next_prime.qui ; std::__next_prime(unsigned int)
        add     esp,byte 04h
        mov     dword [esp+08h+048h],eax
L_184074:
L_184071:
        mov     eax,ebx
; Line 1206:         return __bucket_list_.get_deleter().size(); 
; Line 2820:     return __ptr_.second(); 
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [esp-034h+048h],eax
        and     eax,eax
        je      L_184163
        mov     eax,dword [esp-034h+048h]
        add     eax,byte 04h
        jmp     L_184164
L_184163:
        mov     eax,dword [esp-034h+048h]
L_184164:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.xqv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get() const 
        add     esp,byte 04h
; Line 2320:   } 
; Line 2821:   } 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edi,dword [eax]
; Line 1207:     } 
        mov     eax,edi
        cmp     dword [esp+08h+048h],eax
        jbe     L_184081
; Line 2384:         __rehash(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        push    ebx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__rehash(unsigned int)
        add     esp,byte 08h
        jmp     L_184084
L_184081:
; Line 2385:     else if (__n < __bc) 
        mov     eax,edi
        cmp     dword [esp+08h+048h],eax
        jnc     L_184087
; Line 2386:     { 
; Line 2387:         __n = _VSTD::max<size_type> 
        lea     esi,[esp+08h+048h]
        mov     eax,edi
; Line 109: { 
; Line 110:     return __bc > 2 && !(__bc & (__bc - 1)); 
        cmp     eax,byte 02h
        jbe     L_184235
        mov     ecx,eax
        dec     ecx
        and     eax,ecx
        je      L_184233
L_184235:
        xor     eax,eax
        jmp     L_184234
L_184233:
        mov     eax,01h
L_184234:
        and     eax,eax
        setne   al
        and     eax,byte 01h
; Line 111: } 
        and     al,al
        je      L_184216
        mov     ebp,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+014h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[ebp+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [esp-030h+04ch]
        movss   xmm0,[esp-030h+04ch]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
; Line 124: { 
; Line 125:     return __n < 2 ? __n : (size_t(1) << (std::numeric_limits<size_t>::digits - __libcpp_clz(__n-1))); 
        cmp     eax,byte 02h
        jc      L_184365
L_184364:
        mov     ecx,eax
        dec     ecx
        bsr     eax,ecx
        xor     eax,byte 01fh
        mov     ecx,020h
        sub     ecx,eax
        mov     eax,01h
        shl     eax,cl
L_184365:
; Line 126: } 
        mov     dword [esp-04h+048h],eax
        lea     eax,[esp-04h+048h]
        jmp     L_184217
L_184216:
        mov     ebp,ebx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ebp+014h]
        push    eax
        call    __ultof ; _ultof
        cvtsd2ss xmm0,xmm0
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        divss   xmm0,[ebp+01ch]
        push    ecx
        movss   [esp],xmm0
        call    _ceilf ; ceilf
        fstp    dword [esp-030h+04ch]
        movss   xmm0,[esp-030h+04ch]
        add     esp,byte 04h
        push    byte 04h
        cvtss2sd xmm0,xmm0
        sub     esp,byte 08h
        movsd   [esp],xmm0
        call    __ftoi ; _ftoi
        push    eax
        call    @std@__next_prime.qui ; std::__next_prime(unsigned int)
        add     esp,byte 04h
        mov     dword [esp-08h+048h],eax
        lea     eax,[esp-08h+048h]
L_184217:
; Line 2635:     return _VSTD::max(__a, __b, __less<_Tp>()); 
        mov     dword [esp-038h+048h],00h
        lea     ecx,[esp-038h+048h]
        push    dword [ecx]
        push    eax
        push    esi
        call    @std@#max.ui#__less.uiui~~.qrxuirxui#__less.uiui~ ; std::max<unsigned int, __less<unsigned int, unsigned int>>( const unsigned int&,  const unsigned int&, __less<unsigned int, unsigned int>)
L_184522:
        add     esp,byte 0ch
; Line 2636: } 
        mov     eax,dword [eax]
        mov     dword [esp+08h+048h],eax
        cmp     dword [esp+08h+048h],edi
        jnc     L_184091
; Line 2394:             __rehash(__n); 
        mov     eax,dword [esp+08h+048h]
        push    eax
        push    ebx
        call    @std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__rehash.qui ; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__rehash(unsigned int)
        add     esp,byte 08h
L_184091:
; Line 2395:     } 
L_184087:
L_184084:
; Line 2396: } 
L_184066:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~ virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::operator ()(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*)
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bcall.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~:
        add     esp,byte 0ffffffb4h
        push    ebx
L_184529:
        mov     ebx,dword [esp+08h+050h]
        mov     ecx,dword [esp+04h+050h]
; Line 845:         if (__value_constructed) 
        cmp     byte [ecx+04h],byte 00h
        je      L_184532
; Line 846:             __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ecx]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
        add     esp,byte 08h
L_184532:
        and     ebx,ebx
        je      L_184537
; Line 848:             __alloc_traits::deallocate(__na_, __p, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_184683:
L_184668:
L_184653:
L_184537:
; Line 849:     } 
L_184530:
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_184739:
        mov     eax,dword [esp+04h]
L_184740:
        ret
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::~__hash_node_destructor()
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bdtr.qv:
L_184747:
L_184748:
        ret
section code
section code
        section vsc@std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1 virtual
        [bits 32]
; std::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, bool>::pair<__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>, bool&, bool=0, >(__hash_iterator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>&&, bool&)
@std@#pair.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~4bool~@.bctr.#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1n1?0?~.qR#__hash_iterator.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~rn1:
; Line 447:         : first(_VSTD::forward<_U1>(__u1)), second(_VSTD::forward<_U2>(__u2)) {} 
        push    ecx
        push    ecx
L_184753:
        mov     ecx,dword [esp+0ch+08h]
        mov     edx,dword [esp+08h+08h]
        mov     eax,dword [esp+04h+08h]
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     cl,byte [ecx]
        mov     byte [eax+04h],cl
L_184754:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*, int=0, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~i?0?4bool?0?~@.bdtr.qv:
L_184811:
L_184812:
        ret
section code
section code
        section vsc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv virtual
        [bits 32]
; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>::~allocator()
@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@.bdtr.qv:
L_184817:
L_184818:
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::~__compressed_pair_elem()
@std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@.bdtr.qv:
L_184823:
L_184837:
L_184824:
        ret
section code
section code
        section vsc@std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::__compressed_pair<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::~__compressed_pair()
@std@#__compressed_pair.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv:
L_184843:
L_184870:
L_184857:
L_184885:
L_184844:
        ret
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::~unique_ptr()
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bdtr.qv:
        add     esp,byte 0ffffffa4h
        push    ebx
L_184891:
        mov     edx,dword [esp+04h+060h]
        mov     ecx,edx
        xor     eax,eax
; Line 2615:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     ebx,dword [edx]
; Line 2616:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],eax
        and     ebx,ebx
        je      L_184897
; Line 2618:       __ptr_.second()(__tmp); 
        mov     eax,ecx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-05ch+060h],eax
        and     eax,eax
        je      L_185020
        mov     eax,dword [esp-05ch+060h]
        add     eax,byte 04h
        jmp     L_185021
L_185020:
        mov     eax,dword [esp-05ch+060h]
L_185021:
        push    eax
        call    @std@#__compressed_pair_elem.#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 845:         if (__value_constructed) 
        cmp     byte [ecx+04h],byte 00h
        je      L_184981
; Line 846:             __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_)); 
        mov     eax,ebx
        add     eax,byte 08h
; Line 198:     return _VSTD::addressof(__n.__get_value()); 
; Line 645:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 647:         return __cc; 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 199:   } 
        push    eax
        mov     eax,dword [ecx]
        push    eax
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
        add     esp,byte 08h
L_184981:
        and     ebx,ebx
        je      L_184986
; Line 848:             __alloc_traits::deallocate(__na_, __p, 1); 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    ebx
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_185162:
L_185147:
L_185132:
L_184986:
; Line 849:     } 
L_185003:
L_184897:
; Line 2619:   } 
L_184914:
L_185254:
L_185241:
L_185269:
L_185228:
L_184892:
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@__get.qv virtual
        [bits 32]
; std::__compressed_pair_elem<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>, int=1, bool=0>::__get()
@std@#__compressed_pair_elem.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~i?1?4bool?0?~@__get.qv:
; Line 2218:   _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; } 
L_185276:
        mov     eax,dword [esp+04h]
L_185277:
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
; Line 1627:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_185284:
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(integral_constant<bool, bool=0>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
        mov     dword [ebp-04ch+014h],03h
L_185347:
L_185334:
        add     esp,byte 0ch
L_185285:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~ virtual
        [bits 32]
@.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      064h
        db      065h
        db      073h
        db      074h
        db      072h
        db      06fh
        db      079h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_destroy.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::unique_ptr<bool=1, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, >(__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>&&)
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@.bctr.4bool?1?#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~R#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
; Line 2498:   template <bool _Dummy = true, 
        add     esp,byte 0ffffffd0h
L_185354:
        mov     ecx,dword [esp+0ch+030h]
        mov     eax,dword [esp+04h+030h]
        lea     edx,[esp+08h+030h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2198:   template <class _Up, class = typename enable_if< 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [edx]
        mov     dword [eax],edx
; Line 2206:     } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     edx,dword [ecx]
        mov     dword [eax+04h],edx
        mov     cl,byte [ecx+04h]
        mov     byte [eax+04h+04h],cl
; Line 2206:     } 
; Line 2503:     static_assert(!is_reference<deleter_type>::value, 
; Line 2505:   } 
L_185355:
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
; Line 1592:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb0h
L_185514:
        mov     edx,dword [ebp+010h]
        mov     ecx,dword [ebp+0ch]
        mov     eax,dword [ebp+08h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        mov     dword [ebp-04h],00h
        lea     eax,[ebp-04h]
        mov     dword [ebp-04ch+014h],01h
        mov     dword [ebp-04ch+014h],02h
        push    dword [eax]
        call    @std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
        mov     dword [ebp-04ch+014h],03h
L_185593:
L_185580:
        add     esp,byte 010h
L_185515:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~ virtual
        [bits 32]
@.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      068h
        db      061h
        db      073h
        db      05fh
        db      063h
        db      06fh
        db      06eh
        db      073h
        db      074h
        db      072h
        db      075h
        db      063h
        db      074h
        db      00h
        dd      0800h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qr#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffffb4h
        dd      0400h
        dd      @.xt@#__has_construct.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~+0
        dd      0fffffffch
        dd      02h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@release.qv virtual
        [bits 32]
; std::unique_ptr<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>, __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>>::release()
@std@#unique_ptr.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~~@release.qv:
L_185600:
        mov     ecx,dword [esp+04h]
; Line 2608:     pointer __t = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [ecx]
; Line 2609:     __ptr_.first() = pointer(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     dword [ecx],00h
; Line 2611:   } 
L_185601:
        ret
section code
section code
        section vsc@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~ virtual
        [bits 32]
; std::__hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__hash_node_destructor( const __hash_node_destructor<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>&)
@std@#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@.bctr.qrx#__hash_node_destructor.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~~:
L_185672:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [edx]
        mov     dword [eax],ecx
        mov     cl,byte [edx+04h]
        mov     byte [eax+04h],cl
L_185673:
        ret
section code
section code
        section vsc@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__rehash.qui virtual
        [bits 32]
; std::__hash_table<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, __unordered_map_hasher<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, hash<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, __unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, allocator<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>>>::__rehash(unsigned int)
@std@#__hash_table.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#__unordered_map_hasher.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#hash.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~n1?0?~#allocator.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~~~@__rehash.qui:
        add     esp,0ffffff18h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_185680:
        mov     ebx,dword [esp+08h+0f8h]
        mov     eax,dword [esp+04h+0f8h]
        mov     dword [esp-0c8h+0f8h],eax
; Line 2403:     __get_db()->__invalidate_all(this); 
        mov     eax,dword [esp-0c8h+0f8h]
; Line 2815:     return __ptr_.second(); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d4h+0f8h],eax
        and     eax,eax
        je      L_185796
        mov     eax,dword [esp-0d4h+0f8h]
        add     eax,byte 04h
        jmp     L_185797
L_185796:
        mov     eax,dword [esp-0d4h+0f8h]
L_185797:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0d8h+0f8h],eax
        and     eax,eax
        je      L_185815
        mov     eax,dword [esp-0d8h+0f8h]
        add     eax,byte 04h
        jmp     L_185816
L_185815:
        mov     eax,dword [esp-0d8h+0f8h]
L_185816:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2406:     __bucket_list_.reset(__nbc > 0 ? 
        mov     edi,dword [esp-0c8h+0f8h]
        cmp     ebx,byte 00h
        jbe     L_185839
        mov     eax,ebx
        mov     dword [esp-0d0h+0f8h],eax
        push    byte 00h
        push    eax
        push    ecx
        call    @std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@allocate.quipxv ; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>::allocate(unsigned int, void const *)
        mov     ecx,eax
        add     esp,byte 0ch
        jmp     L_185840
L_185839:
        mov     eax,ebx
        mov     dword [esp-0d0h+0f8h],eax
        xor     ecx,ecx
L_185840:
; Line 2840:     pointer __tmp = __ptr_.first(); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     esi,dword [eax]
; Line 2841:     __ptr_.first() = __p; 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     dword [eax],ecx
        and     esi,esi
        je      L_185820
; Line 2843:       __ptr_.second()(__tmp); 
        mov     eax,edi
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0dch+0f8h],eax
        and     eax,eax
        je      L_185951
        mov     eax,dword [esp-0dch+0f8h]
        add     eax,byte 04h
        jmp     L_185952
L_185951:
        mov     eax,dword [esp-0dch+0f8h]
L_185952:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 809:         __alloc_traits::deallocate(__alloc(), __p, size()); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e0h+0f8h],eax
        and     eax,eax
        je      L_185999
        mov     eax,dword [esp-0e0h+0f8h]
        add     eax,byte 04h
        jmp     L_186000
L_185999:
        mov     eax,dword [esp-0e0h+0f8h]
L_186000:
        push    eax
        call    @std@#__compressed_pair_elem.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    esi
        call    @.bdel.qpv ; operator delete(void*)
        add     esp,byte 04h
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 341: } 
L_186079:
L_186064:
L_185967:
; Line 810:     } 
L_185934:
L_185820:
; Line 2844:   } 
L_185837:
; Line 2408:     __bucket_list_.get_deleter().size() = __nbc; 
        mov     eax,dword [esp-0c8h+0f8h]
; Line 2815:     return __ptr_.second(); 
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e4h+0f8h],eax
        and     eax,eax
        je      L_186179
        mov     eax,dword [esp-0e4h+0f8h]
        add     eax,byte 04h
        jmp     L_186180
L_186179:
        mov     eax,dword [esp-0e4h+0f8h]
L_186180:
        push    eax
        call    @std@#__compressed_pair_elem.#__bucket_list_deallocator.#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~~i?1?4bool?0?~@__get.qv ; std::__compressed_pair_elem<__bucket_list_deallocator<allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>>, int=1, bool=0>::__get()
        mov     ecx,eax
        add     esp,byte 04h
; Line 2315:   } 
; Line 2816:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
        mov     eax,dword [esp-0d0h+0f8h]
        mov     dword [ecx],eax
        cmp     ebx,byte 00h
        jbe     L_185683
; Line 2410:     { 
; Line 2411:         for (size_type __i = 0; __i < __nbc; ++__i) 
        xor     eax,eax
        cmp     eax,ebx
        jnc     L_185689
L_185687:
; Line 2412:             __bucket_list_[__i] = nullptr; 
        mov     ecx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [esp-0c8h+0f8h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+ecx*4],00h
L_185690:
        inc     eax
L_185688:
        cmp     eax,ebx
        jc      L_185687
L_185689:
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 0ch
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     ecx,eax
; Line 2305:   } 
; Line 75:         return static_cast<__next_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 77:     } 
        mov     ebx,dword [ecx]
        and     ebx,ebx
        je      L_185697
; Line 2416:         { 
; Line 2417:             size_type __chash = __constrain_hash(__cp->__hash(), __nbc); 
        mov     eax,ebx
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     edx,dword [esp-0d0h+0f8h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     esi,edx
        mov     edi,edx
        dec     edi
        and     edi,esi
        jne     L_186375
        mov     edx,esi
        dec     edx
        and     eax,edx
        jmp     L_186376
L_186375:
        cmp     eax,edx
        jc      L_186378
L_186377:
        sub     edx,edx
        xor     edx,edx
        div     esi
        mov     eax,edx
L_186378:
L_186376:
; Line 119: } 
; Line 2418:             __bucket_list_[__chash] = __pp; 
        mov     edx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     esi,dword [esp-0c8h+0f8h]
        mov     esi,dword [esi]
; Line 2807:   } 
        mov     dword [esi+edx*4],ecx
        mov     dword [esp-0cch+0f8h],eax
; Line 2420:             for (__pp = __cp, __cp = __cp->__next_; __cp != nullptr; 
        mov     edi,ebx
        mov     esi,dword [ebx]
        and     esi,esi
        je      L_185703
L_185701:
; Line 2422:             { 
; Line 2423:                 __chash = __constrain_hash(__cp->__hash(), __nbc); 
        mov     eax,esi
; Line 87:         return static_cast<__node_type const&>(*this).__hash_; 
        mov     eax,dword [eax+04h]
; Line 88:     } 
        mov     ecx,dword [esp-0d0h+0f8h]
; Line 116: { 
; Line 117:     return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : 
        mov     ebx,ecx
        mov     edx,ecx
        dec     edx
        and     edx,ebx
        jne     L_186459
        mov     ecx,ebx
        dec     ecx
        and     eax,ecx
        jmp     L_186460
L_186459:
        cmp     eax,ecx
        jc      L_186462
L_186461:
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
L_186462:
L_186460:
; Line 119: } 
        cmp     eax,dword [esp-0cch+0f8h]
        jne     L_185709
; Line 2425:                     __pp = __cp; 
        mov     edi,esi
        jmp     L_185712
L_185709:
; Line 2426:                 else 
; Line 2427:                 { 
; Line 2428:                     if (__bucket_list_[__chash] == nullptr) 
        mov     ebx,eax
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [esp-0c8h+0f8h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        cmp     dword [ecx+eax*4],byte 00h
        jne     L_185716
; Line 2429:                     { 
; Line 2430:                         __bucket_list_[__chash] = __pp; 
        mov     eax,edi
        mov     ecx,ebx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     edx,dword [esp-0c8h+0f8h]
        mov     edx,dword [edx]
; Line 2807:   } 
        mov     dword [edx+ecx*4],eax
; Line 2431:                         __pp = __cp; 
        mov     edi,esi
; Line 2432:                         __phash = __chash; 
        mov     eax,ebx
        mov     dword [esp-0cch+0f8h],eax
; Line 2433:                     } 
        jmp     L_185721
L_185716:
; Line 2434:                     else 
; Line 2435:                     { 
; Line 2436:                         __next_pointer __np = __cp; 
        mov     ebp,esi
; Line 2437:                         for (; __np->__next_ != nullptr && 
        cmp     dword [ebp],byte 00h
        je      L_185727
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e8h+0f8h],eax
        and     eax,eax
        je      L_186605
        mov     eax,dword [esp-0e8h+0f8h]
        add     eax,byte 04h
        jmp     L_186606
L_186605:
        mov     eax,dword [esp-0e8h+0f8h]
L_186606:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     ecx,byte 08h
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        je      L_185727
L_185725:
L_185728:
        mov     ebp,dword [ebp]
L_185726:
        cmp     dword [ebp],byte 00h
        je      L_186850
        mov     eax,dword [esp-0c8h+0f8h]
        add     eax,byte 01ch
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0e8h+0f8h],eax
        and     eax,eax
        je      L_186896
        mov     eax,dword [esp-0e8h+0f8h]
        add     eax,byte 04h
        jmp     L_186897
L_186896:
        mov     eax,dword [esp-0e8h+0f8h]
L_186897:
        push    eax
        call    @std@#__compressed_pair_elem.#__unordered_map_equal.#basic_string.c#char_traits.c~#allocator.c~~#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~#equal_to.#basic_string.c#char_traits.c~#allocator.c~~~4bool?0?~i?1?n1?0?~@__get.qv ; std::__compressed_pair_elem<__unordered_map_equal<basic_string<char, char_traits<char>, allocator<char>>, __hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, equal_to<basic_string<char, char_traits<char>, allocator<char>>>, bool=0>, int=1, bool=0>::__get()
        add     esp,byte 04h
; Line 2315:   } 
        mov     eax,esi
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     eax,byte 08h
        mov     ecx,dword [ebp]
; Line 81:         return static_cast<__node_pointer>( 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 83:     } 
        add     ecx,byte 08h
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
; Line 655:         return *_VSTD::launder(_VSTD::addressof(__cc)); 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 366:     return _VSTD::__launder(__p); 
; Line 351:     static_assert (!(is_function<_Tp>::value), "can't launder functions" ); 
; Line 358: } 
; Line 367: } 
; Line 657:         return __cc; 
        push    ecx
        push    eax
        call    @std@#.bequ.#allocator.c~~.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~ ; std::operator ==<allocator<char>>( const basic_string<char, char_traits<char>, allocator<char>>&,  const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        and     al,al
        jne     L_185725
L_186850:
L_185727:
; Line 2442:                         __pp->__next_ = __np->__next_; 
        mov     eax,dword [ebp]
        mov     dword [edi],eax
; Line 2443:                         __np->__next_ = __bucket_list_[__chash]->__next_; 
        mov     eax,ebx
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     ecx,dword [esp-0c8h+0f8h]
        mov     ecx,dword [ecx]
; Line 2807:   } 
        mov     eax,dword [ecx+eax*4]
        mov     eax,dword [eax]
        mov     dword [ebp],eax
; Line 2444:                         __bucket_list_[__chash]->__next_ = __cp; 
; Line 2806:     return __ptr_.first()[__i]; 
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
; Line 2310:   } 
        mov     eax,dword [esp-0c8h+0f8h]
        mov     eax,dword [eax]
; Line 2807:   } 
        mov     eax,dword [eax+ebx*4]
        mov     dword [eax],esi
; Line 2446:                     } 
L_185721:
; Line 2447:                 } 
L_185712:
; Line 2448:             } 
L_185704:
        mov     eax,edi
        mov     esi,dword [eax]
L_185702:
        and     esi,esi
        jne     L_185701
L_185703:
; Line 2449:         } 
L_185697:
; Line 2450:     } 
L_185683:
; Line 2451: } 
L_185681:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0e8h
        ret
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__destroy<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>>(integral_constant<bool, bool=0>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
; Line 1794:     template <class _Tp> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
L_187240:
        mov     eax,dword [ebp+010h]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1798:                 __p->~_Tp(); 
        push    eax
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv ; std::basic_string<char, char_traits<char>, allocator<char>>::~basic_string()
        add     esp,byte 04h
L_187258:
; Line 1799:             } 
        mov     dword [ebp-048h+014h],01h
L_187272:
L_187241:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__destroy.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?0?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?0?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::allocator_traits<allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>>::__construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(integral_constant<bool, bool=1>, allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>&, pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
; Line 1765:     template <class _Tp, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb4h
L_187278:
        mov     edx,dword [ebp+014h]
        mov     ecx,dword [ebp+010h]
        mov     eax,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-048h],eax
        mov     dword [ebp-048h+04h],___cppexceptionhandle
        mov     dword [ebp-048h+08h],esp
        mov     dword [ebp-048h+0ch],ebp
        mov     dword [ebp-048h+010h],@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-048h+014h],00h
        lea     eax,[ebp-048h]
        mov     dword [fs:00h],eax
        pop     eax
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edx
        push    ecx
        push    eax
        call    @std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ ; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
        add     esp,byte 0ch
        mov     dword [ebp-048h+014h],01h
L_187312:
L_187279:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#allocator_traits.#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@#__construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.q#integral_constant.4booln1?1?~r#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~n0~pv~~p#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffffb8h
        dd      0400h
        dd      @.xt@#integral_constant.4booln0?1?~+0
        dd      08h
        dd      00h
        dd      01h
        dd      00h
section code
section code
        section vsc@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@allocate.quipxv virtual
        [bits 32]
; std::allocator<__hash_node_base<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>*>*>::allocate(unsigned int, void const *)
@std@#allocator.p#__hash_node_base.p#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~~@allocate.quipxv:
        push    ecx
        push    ecx
        push    ebx
L_187318:
        mov     ebx,dword [esp+08h+0ch]
; Line 1861:         if (__n > max_size()) 
        mov     ecx,03fffffffh
        cmp     ebx,ecx
        jbe     L_187321
; Line 1862:             __throw_length_error("allocator<T>::allocate(size_t n)" 
        push    dword L_75201
        call    @std@__throw_length_error.qpxc ; std::__throw_length_error(char const *)
        add     esp,byte 04h
L_187321:
        mov     eax,ebx
        shl     eax,02h
; Line 239:   if (__is_overaligned_for_new(__align)) { 
; Line 240:     const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 242:     return ::operator new(__size, __align_val); 
        push    eax
        call    @.bnew.qui ; operator new(unsigned int)
        add     esp,byte 04h
; Line 253:   return __builtin_operator_new(__size); 
; Line 1865:         } 
L_187319:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
; std::allocator<__hash_node<__hash_value_type<basic_string<char, char_traits<char>, allocator<char>>, kw>, void*>>::construct<pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&>(pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>*,  const pair< const basic_string<char, char_traits<char>, allocator<char>>, kw>&)
@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
; Line 1871:     template <class _Up, class... _Args> 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
        push    esi
L_187363:
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    eax
        mov     eax,dword [fs:00h]
        mov     dword [ebp-04ch],eax
        mov     dword [ebp-04ch+04h],___cppexceptionhandle
        mov     dword [ebp-04ch+08h],esp
        mov     dword [ebp-04ch+0ch],ebp
        mov     dword [ebp-04ch+010h],@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~
        mov     dword [ebp-04ch+014h],00h
        lea     eax,[ebp-04ch]
        mov     dword [fs:00h],eax
        pop     eax
; Line 1876:             ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...); 
        and     ebx,ebx
        je      L_187370
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,esi
        push    eax
        push    ecx
        call    @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~ ; std::basic_string<char, char_traits<char>, allocator<char>>::basic_string( const basic_string<char, char_traits<char>, allocator<char>>&)
        add     esp,byte 08h
        mov     dword [ebp-04ch+014h],01h
        mov     eax,dword [esi+014h]
        mov     dword [ebx+014h],eax
L_187370:
; Line 1877:         } 
L_187364:
        mov     ecx,dword [fs:00h]
        mov     ecx,dword [ecx]
        mov     dword [fs:00h],ecx
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~ virtual
        [bits 32]
@.xc@std@#allocator.#__hash_node.#__hash_value_type.#basic_string.c#char_traits.c~#allocator.c~~2kw~pv~~@#construct.#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~~.qp#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~rx#pair.x#basic_string.c#char_traits.c~#allocator.c~~n0~:
        dd      00h
        dd      0ffffffb4h
        dd      00h
section code
section code
section string
L_1:
        db "("
        db      00h
L_2:
        db ")"
        db      00h
L_3:
        db "+"
        db      00h
L_4:
        db "-"
        db      00h
L_5:
        db "!"
        db      00h
L_6:
        db "~"
        db      00h
L_7:
        db "*"
        db      00h
L_8:
        db "/"
        db      00h
L_9:
        db "%"
        db      00h
L_10:
        db "<<"
        db      00h
L_11:
        db ">>"
        db      00h
L_12:
        db ">"
        db      00h
L_13:
        db "<"
        db      00h
L_14:
        db ">="
        db      00h
L_15:
        db "<="
        db      00h
L_16:
        db "=="
        db      00h
L_17:
        db "!="
        db      00h
L_18:
        db "|"
        db      00h
L_19:
        db "&"
        db      00h
L_20:
        db "^"
        db      00h
L_21:
        db "||"
        db      00h
L_22:
        db "&&"
        db      00h
L_23:
        db "?"
        db      00h
L_24:
        db ":"
        db      00h
L_25:
        db ","
        db      00h
L_26:
        db "::"
        db      00h
L_27:
        db "prefix"
        db      00h
L_28:
        db "suffix"
        db      00h
L_29:
        db "limit"
        db      00h
L_30:
        db "if_empty"
        db      00h
L_31:
        db "offset"
        db      00h
L_32:
        db      00h
L_33:
        db " "
        db      00h
L_34:
        db "rb"
        db      00h
L_35:
        db "The embedded file was not found"
        db      00h
L_36:
        db "File I/O error while reading the embedded file"
        db      00h
L_37:
        db "__"
        db      00h
L_38:
        db      022h
        db ">"
        db      00h
L_39:
        db "Syntax error: Incorrect value for a keyword in this context"
        db      00h
L_40:
        db "Attempted to set the same identifier twice"
        db      00h
L_41:
        db "Expected a new identifier or more :: extensions"
        db      00h
L_42:
        db "Unexpected Keyword after identifier extension"
        db      00h
L_75201:
        db "allocator<T>::allocate(size_t n) "
        db      027h
        db "n"
        db      027h
        db " exceeds maximum supported size"
        db      00h
L_87480:
        db      09h
        db " "
        db      0bh
        db      00h
        db      00h
L_165765:
        dw      00h
section data
section const

        times $$-$ & 7 nop
L_187484:
        db      000H,000H,080H,03FH

[extern @std@__libcpp_thread_get_current_id.qv]
[extern @std@#__basic_string_common.4bool?1?~@.bctr.qv]
[extern _strlen]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.qpxcui]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxc]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@append.qpxcui]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@.bdtr.qv]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qR55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep]
[extern @std@#__basic_string_common.4bool?1?~@.bdtr.qv]
[extern @ppInclude@FindFile.q4boolrx#basic_string.c#char_traits.c~#allocator.c~~n0rirn0rn0]
[extern @Utils@FileExists.qpxc]
[extern __stat64i32]
[extern @ppExpr@Eval.qr#basic_string.c#char_traits.c~#allocator.c~~4bool]
[extern _fopen]
[extern _fseek]
[extern _fread]
[extern @std@#__vector_base_common.4bool?1?~@.bdtr.qv]
[extern @Errors@GetErrorLine.qv]
[extern @Errors@GetFileName.qv]
[extern @std@strstreambuf@str.qv]
[extern @Errors@ErrorWithLine.qrx#basic_string.c#char_traits.c~#allocator.c~~rx#basic_string.c#char_traits.c~#allocator.c~~i]
[extern @std@ios_base@clear.qui]
[extern @std@strstream@.bdtr.qv]
[extern @std@ios_base@.bdtr.qv]
[extern @std@#basic_ios.c#char_traits.c~~@.bdtr.qv]
[extern @std@#basic_istream.c#char_traits.c~~@.bdtr.qv]
[extern @std@#basic_ostream.c#char_traits.c~~@.bdtr.qv]
[extern @std@#basic_iostream.c#char_traits.c~~@.bdtr.qv]
[extern @std@locale@.bdtr.qv]
[extern @std@#basic_streambuf.c#char_traits.c~~@.bdtr.qv]
[extern @std@strstreambuf@.bdtr.qv]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@push_back.qc]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@.basn.qrx#basic_string.c#char_traits.c~#allocator.c~~]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@assign.qpxc]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@compare.xquiuipxcui]
[extern @ppDefine@Process.qr#basic_string.c#char_traits.c~#allocator.c~~4bool]
[extern @ppInclude@ParseName.qrx#basic_string.c#char_traits.c~#allocator.c~~r4bool]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@rfind.xqcui]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@erase.quiui]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bctr.qv]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.bdtr.qv]
[extern @.bdel.qpv]
[extern @std@#__vector_base_common.4bool?1?~@__throw_length_error.xqv]
[extern _fclose]
[extern @std@#basic_ios.c#char_traits.c~~@_.vt]
[extern @std@strstreambuf@.bctr.qi]
[extern @std@#basic_ostream.c#char_traits.c~~@sentry@.bctr.qr#basic_ostream.c#char_traits.c~~]
[extern @std@#basic_ostream.c#char_traits.c~~@sentry@.bdtr.qv]
[extern @std@ios_base@__set_badbit_and_consider_rethrow.qv]
[extern @_CatchCleanup.qpv]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__rep@.basn.qrx55@std@#basic_string.c#char_traits.c~#allocator.c~~@__rep]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@.bctr.qrx#basic_string.c#char_traits.c~#allocator.c~~uiuirx#allocator.c~]
[extern ___static_guard]
[extern _atexit]
[extern @std@__shared_weak_count@__release_weak.qv]
[extern _memcpy]
[extern @.bnew.qui]
[extern _ceilf]
[extern @_ThrowException.qpvpvipvpv]
[extern @std@exception@.bdtr.qv]
[extern @std@#basic_iostream.c#char_traits.c~~@_.vt]
[extern @std@#basic_string.c#char_traits.c~#allocator.c~~@__init.quic]
[extern @std@ios_base@getloc.xqv]
[extern @std@#ctype.c~@id]
[extern @std@locale@use_facet.xqr14@std@locale@id]
[extern @NumericToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~]
[extern @CharacterToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~]
[extern @StringToken@Start.qrx#basic_string.c#char_traits.c~#allocator.c~~]
[extern @std@logic_error@.bctr.qpxc]
[extern @std@length_error@.bdtr.qv]
[extern @std@__libcpp_refstring@.bdtr.qv]
[extern @std@logic_error@.bdtr.qv]
[extern @std@__next_prime.qui]
[extern ___builtin_clz]
[extern @std@#basic_istream.c#char_traits.c~~@_.vt]
[extern @std@ios_base@init.qpv]
[extern @std@#basic_ostream.c#char_traits.c~~@_.vt]
[extern _ispunct]
[extern @std@logic_error@.bctr.qrx16@std@logic_error]
[extern @std@to_string.quL]
[extern @std@__shared_count@.bdtr.qv]
[extern @std@__shared_weak_count@.bdtr.qv]
[extern @TokenizerSettings@instance]
[extern @UTF8@IsAlpha.qpxc]
[extern @UTF8@IsAlnum.qpxc]
[extern @FPF@SetZero.qi]
[extern @std@#basic_string.C#char_traits.C~#allocator.C~~@.bdtr.qv]
[extern @std@#basic_string.C#char_traits.C~#allocator.C~~@__rep@.bctr.qv]
[extern @std@#basic_string.C#char_traits.C~#allocator.C~~@__rep@.bdtr.qv]
[extern @UTF8@CharSpan.qpxc]
[extern _toupper]
[extern @std@bad_variant_access@what.xqv]
[extern @std@logic_error@what.xqv]
[extern @std@__shared_weak_count@__get_deleter.xqrx14@std@type_info]
[extern @NumericToken@GetInteger.xqv]
[extern @NumericToken@GetFloat.xqv]
[extern @NumericToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~]
[extern @CharacterToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~]
[extern @StringToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~]
[extern @ErrorToken@Parse.qr#basic_string.c#char_traits.c~#allocator.c~~]
[extern @__dls@__dls_NoNamedException]
[extern @std@#basic_string.C#char_traits.C~#allocator.C~~@__init.qpxCui]
[extern @std@#basic_string.C#char_traits.C~#allocator.C~~@.bctr.qrx#basic_string.C#char_traits.C~#allocator.C~~]
[extern @__GetTypeInfo.qpvpv]
[extern @std@type_info@.bequ.xqrx14@std@type_info]
[extern @__arrCall.qpvpvpvii]
[extern __ultof]
[extern __ftoi]
[extern ___cppexceptionhandle]
